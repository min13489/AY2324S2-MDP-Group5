
SC2079_MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f90  080118a8  080118a8  000218a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012838  08012838  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012838  08012838  00022838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012840  08012840  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012840  08012840  00022840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012844  08012844  00022844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012848  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00005318  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005500  20005500  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ce8b  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cf7  00000000  00000000  0004d0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab8  00000000  00000000  00050de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014f2  00000000  00000000  00052898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000057c1  00000000  00000000  00053d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ef8e  00000000  00000000  0005954b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e75af  00000000  00000000  000784d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000086bc  00000000  00000000  0015fa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  00168144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011890 	.word	0x08011890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011890 	.word	0x08011890

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f004 f984 	bl	8005294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f874 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 fc4a 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f94:	f000 fc12 	bl	80017bc <MX_DMA_Init>
  MX_TIM8_Init();
 8000f98:	f000 fb3c 	bl	8001614 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f9c:	f000 fa08 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fa5a 	bl	8001458 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f982 	bl	80012ac <MX_TIM1_Init>
  MX_TIM6_Init();
 8000fa8:	f000 fafe 	bl	80015a8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000fac:	f000 fbdc 	bl	8001768 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fb0:	f000 f920 	bl	80011f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fb4:	f000 f94c 	bl	8001250 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000fb8:	f000 faa2 	bl	8001500 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000fbc:	f000 f8ba 	bl	8001134 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000fc0:	f003 fc3a 	bl	8004838 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc4:	f00a f952 	bl	800b26c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <main+0xac>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <main+0xb0>)
 8000fce:	f00a f997 	bl	800b300 <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <main+0xb4>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <main+0xb8>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <main+0xbc>)
 8000fde:	f00a f98f 	bl	800b300 <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <main+0xc0>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder, NULL, &EncoderTask_attributes);
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <main+0xc4>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4817      	ldr	r0, [pc, #92]	; (800104c <main+0xc8>)
 8000fee:	f00a f987 	bl	800b300 <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a16      	ldr	r2, [pc, #88]	; (8001050 <main+0xcc>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(Gyro, NULL, &GyroTask_attributes);
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <main+0xd0>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <main+0xd4>)
 8000ffe:	f00a f97f 	bl	800b300 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <main+0xd8>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of Ultrasonic */
  UltrasonicHandle = osThreadNew(start_ultrasonic, NULL, &Ultrasonic_attributes);
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <main+0xdc>)
 800100a:	2100      	movs	r1, #0
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <main+0xe0>)
 800100e:	f00a f977 	bl	800b300 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <main+0xe4>)
 8001016:	6013      	str	r3, [r2, #0]

  /* creation of IR_Task */
  IR_TaskHandle = osThreadNew(ir_task, NULL, &IR_Task_attributes);
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <main+0xe8>)
 800101a:	2100      	movs	r1, #0
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <main+0xec>)
 800101e:	f00a f96f 	bl	800b300 <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <main+0xf0>)
 8001026:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001028:	f00a f944 	bl	800b2b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800102c:	e7fe      	b.n	800102c <main+0xa8>
 800102e:	bf00      	nop
 8001030:	08011938 	.word	0x08011938
 8001034:	08003259 	.word	0x08003259
 8001038:	200005bc 	.word	0x200005bc
 800103c:	0801195c 	.word	0x0801195c
 8001040:	08003269 	.word	0x08003269
 8001044:	200005c0 	.word	0x200005c0
 8001048:	08011980 	.word	0x08011980
 800104c:	08004119 	.word	0x08004119
 8001050:	200005c4 	.word	0x200005c4
 8001054:	080119a4 	.word	0x080119a4
 8001058:	08004261 	.word	0x08004261
 800105c:	200005c8 	.word	0x200005c8
 8001060:	080119c8 	.word	0x080119c8
 8001064:	08004439 	.word	0x08004439
 8001068:	200005cc 	.word	0x200005cc
 800106c:	080119ec 	.word	0x080119ec
 8001070:	08004471 	.word	0x08004471
 8001074:	200005d0 	.word	0x200005d0

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f00d fbcf 	bl	800e82a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <SystemClock_Config+0xb4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0xb4>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <SystemClock_Config+0xb4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <SystemClock_Config+0xb8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <SystemClock_Config+0xb8>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <SystemClock_Config+0xb8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 fef3 	bl	8007ed4 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010f4:	f003 f9f4 	bl	80044e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f007 f956 	bl	80083c4 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800111e:	f003 f9df 	bl	80044e0 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <MX_ADC1_Init+0xb8>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800115a:	2201      	movs	r2, #1
 800115c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001160:	2201      	movs	r2, #1
 8001162:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <MX_ADC1_Init+0xbc>)
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001180:	2202      	movs	r2, #2
 8001182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800118e:	2201      	movs	r2, #1
 8001190:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001194:	f004 f914 	bl	80053c0 <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800119e:	f003 f99f 	bl	80044e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011a2:	230b      	movs	r3, #11
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011b4:	f004 fa62 	bl	800567c <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011be:	f003 f98f 	bl	80044e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011c2:	230c      	movs	r3, #12
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011d0:	f004 fa54 	bl	800567c <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011da:	f003 f981 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000026c 	.word	0x2000026c
 80011ec:	40012000 	.word	0x40012000
 80011f0:	0f000001 	.word	0x0f000001

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x50>)
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x50>)
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_I2C1_Init+0x58>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_I2C1_Init+0x50>)
 8001212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C1_Init+0x50>)
 8001232:	f005 fb99 	bl	8006968 <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f003 f950 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000218 	.word	0x20000218
 8001248:	40005400 	.word	0x40005400
 800124c:	00061a80 	.word	0x00061a80

08001250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C2_Init+0x50>)
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_I2C2_Init+0x58>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_I2C2_Init+0x50>)
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_I2C2_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_I2C2_Init+0x50>)
 800128e:	f005 fb6b 	bl	8006968 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001298:	f003 f922 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000314 	.word	0x20000314
 80012a4:	40005800 	.word	0x40005800
 80012a8:	000186a0 	.word	0x000186a0

080012ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b092      	sub	sp, #72	; 0x48
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2220      	movs	r2, #32
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00d faa7 	bl	800e82a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <MX_TIM1_Init+0x100>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012e4:	22a0      	movs	r2, #160	; 0xa0
 80012e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <MX_TIM1_Init+0xfc>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001308:	4827      	ldr	r0, [pc, #156]	; (80013a8 <MX_TIM1_Init+0xfc>)
 800130a:	f007 fa8a 	bl	8008822 <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001314:	f003 f8e4 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001324:	4619      	mov	r1, r3
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xfc>)
 8001328:	f008 fe12 	bl	8009f50 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001332:	f003 f8d5 	bl	80044e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	220c      	movs	r2, #12
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_TIM1_Init+0xfc>)
 8001358:	f007 ffca 	bl	80092f0 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001362:	f003 f8bd 	bl	80044e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM1_Init+0xfc>)
 800138a:	f008 fe5d 	bl	800a048 <HAL_TIMEx_ConfigBreakDeadTime>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001394:	f003 f8a4 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM1_Init+0xfc>)
 800139a:	f003 fd9d 	bl	8004ed8 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3748      	adds	r7, #72	; 0x48
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200003c8 	.word	0x200003c8
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00d fa33 	bl	800e82a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001404:	230a      	movs	r3, #10
 8001406:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140c:	2301      	movs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001414:	230a      	movs	r3, #10
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM2_Init+0xa4>)
 8001420:	f007 fc8e 	bl	8008d40 <HAL_TIM_Encoder_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800142a:	f003 f859 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM2_Init+0xa4>)
 800143c:	f008 fd88 	bl	8009f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001446:	f003 f84b 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000410 	.word	0x20000410

08001458 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2224      	movs	r2, #36	; 0x24
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f00d f9df 	bl	800e82a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_TIM3_Init+0xa4>)
 8001478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_TIM3_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800149a:	2303      	movs	r3, #3
 800149c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014aa:	230a      	movs	r3, #10
 80014ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b2:	2301      	movs	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014ba:	230a      	movs	r3, #10
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_TIM3_Init+0xa0>)
 80014c6:	f007 fc3b 	bl	8008d40 <HAL_TIM_Encoder_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f003 f806 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_TIM3_Init+0xa0>)
 80014e2:	f008 fd35 	bl	8009f50 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014ec:	f002 fff8 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	; 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000458 	.word	0x20000458
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <MX_TIM4_Init+0xa0>)
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001520:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001524:	2247      	movs	r2, #71	; 0x47
 8001526:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_TIM4_Init+0xa0>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_TIM4_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001544:	f007 fa84 	bl	8008a50 <HAL_TIM_IC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800154e:	f002 ffc7 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001562:	f008 fcf5 	bl	8009f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800156c:	f002 ffb8 	bl	80044e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001588:	f007 fe16 	bl	80091b8 <HAL_TIM_IC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001592:	f002 ffa5 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200004a0 	.word	0x200004a0
 80015a4:	40000800 	.word	0x40000800

080015a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM6_Init+0x64>)
 80015b8:	4a15      	ldr	r2, [pc, #84]	; (8001610 <MX_TIM6_Init+0x68>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_TIM6_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_TIM6_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_TIM6_Init+0x64>)
 80015ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_TIM6_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM6_Init+0x64>)
 80015d8:	f007 f8d4 	bl	8008784 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015e2:	f002 ff7d 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM6_Init+0x64>)
 80015f4:	f008 fcac 	bl	8009f50 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015fe:	f002 ff6f 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200004e8 	.word	0x200004e8
 8001610:	40001000 	.word	0x40001000

08001614 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b096      	sub	sp, #88	; 0x58
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2220      	movs	r2, #32
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00d f8ec 	bl	800e82a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001654:	4a43      	ldr	r2, [pc, #268]	; (8001764 <MX_TIM8_Init+0x150>)
 8001656:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <MX_TIM8_Init+0x14c>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001664:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001666:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800166a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <MX_TIM8_Init+0x14c>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <MX_TIM8_Init+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800167e:	4838      	ldr	r0, [pc, #224]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001680:	f007 f880 	bl	8008784 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800168a:	f002 ff29 	bl	80044e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001694:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001698:	4619      	mov	r1, r3
 800169a:	4831      	ldr	r0, [pc, #196]	; (8001760 <MX_TIM8_Init+0x14c>)
 800169c:	f007 feea 	bl	8009474 <HAL_TIM_ConfigClockSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016a6:	f002 ff1b 	bl	80044e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016aa:	482d      	ldr	r0, [pc, #180]	; (8001760 <MX_TIM8_Init+0x14c>)
 80016ac:	f007 f8b9 	bl	8008822 <HAL_TIM_PWM_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016b6:	f002 ff13 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c6:	4619      	mov	r1, r3
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_TIM8_Init+0x14c>)
 80016ca:	f008 fc41 	bl	8009f50 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016d4:	f002 ff04 	bl	80044e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d8:	2360      	movs	r3, #96	; 0x60
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4818      	ldr	r0, [pc, #96]	; (8001760 <MX_TIM8_Init+0x14c>)
 80016fe:	f007 fdf7 	bl	80092f0 <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001708:	f002 feea 	bl	80044e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	2204      	movs	r2, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4812      	ldr	r0, [pc, #72]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001716:	f007 fdeb 	bl	80092f0 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001720:	f002 fede 	bl	80044e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001748:	f008 fc7e 	bl	800a048 <HAL_TIMEx_ConfigBreakDeadTime>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001752:	f002 fec5 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3758      	adds	r7, #88	; 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000530 	.word	0x20000530
 8001764:	40010400 	.word	0x40010400

08001768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART3_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 80017a0:	f008 fcb8 	bl	800a114 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f002 fe99 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000578 	.word	0x20000578
 80017b8:	40004800 	.word	0x40004800

080017bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_DMA_Init+0x68>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a16      	ldr	r2, [pc, #88]	; (8001824 <MX_DMA_Init+0x68>)
 80017cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_DMA_Init+0x68>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_DMA_Init+0x68>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <MX_DMA_Init+0x68>)
 80017e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MX_DMA_Init+0x68>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	200b      	movs	r0, #11
 8001800:	f004 fab7 	bl	8005d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001804:	200b      	movs	r0, #11
 8001806:	f004 fad0 	bl	8005daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2038      	movs	r0, #56	; 0x38
 8001810:	f004 faaf 	bl	8005d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001814:	2038      	movs	r0, #56	; 0x38
 8001816:	f004 fac8 	bl	8005daa <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <MX_GPIO_Init+0x184>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a59      	ldr	r2, [pc, #356]	; (80019ac <MX_GPIO_Init+0x184>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <MX_GPIO_Init+0x184>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b53      	ldr	r3, [pc, #332]	; (80019ac <MX_GPIO_Init+0x184>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a52      	ldr	r2, [pc, #328]	; (80019ac <MX_GPIO_Init+0x184>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <MX_GPIO_Init+0x184>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <MX_GPIO_Init+0x184>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <MX_GPIO_Init+0x184>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <MX_GPIO_Init+0x184>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b45      	ldr	r3, [pc, #276]	; (80019ac <MX_GPIO_Init+0x184>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a44      	ldr	r2, [pc, #272]	; (80019ac <MX_GPIO_Init+0x184>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b42      	ldr	r3, [pc, #264]	; (80019ac <MX_GPIO_Init+0x184>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <MX_GPIO_Init+0x184>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <MX_GPIO_Init+0x184>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <MX_GPIO_Init+0x184>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <MX_GPIO_Init+0x184>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <MX_GPIO_Init+0x184>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_GPIO_Init+0x184>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80018ec:	4830      	ldr	r0, [pc, #192]	; (80019b0 <MX_GPIO_Init+0x188>)
 80018ee:	f005 f821 	bl	8006934 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	213c      	movs	r1, #60	; 0x3c
 80018f6:	482f      	ldr	r0, [pc, #188]	; (80019b4 <MX_GPIO_Init+0x18c>)
 80018f8:	f005 f81c 	bl	8006934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001902:	482d      	ldr	r0, [pc, #180]	; (80019b8 <MX_GPIO_Init+0x190>)
 8001904:	f005 f816 	bl	8006934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TriggerB4_GPIO_Port, TriggerB4_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	482b      	ldr	r0, [pc, #172]	; (80019bc <MX_GPIO_Init+0x194>)
 800190e:	f005 f811 	bl	8006934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001912:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001916:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4821      	ldr	r0, [pc, #132]	; (80019b0 <MX_GPIO_Init+0x188>)
 800192c:	f004 fe66 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001930:	233c      	movs	r3, #60	; 0x3c
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2302      	movs	r3, #2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <MX_GPIO_Init+0x18c>)
 8001948:	f004 fe58 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_GPIO_Init+0x188>)
 8001964:	f004 fe4a 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8001968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_GPIO_Init+0x190>)
 8001982:	f004 fe3b 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TriggerB4_Pin */
  GPIO_InitStruct.Pin = TriggerB4_Pin;
 8001986:	2310      	movs	r3, #16
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TriggerB4_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_GPIO_Init+0x194>)
 800199e:	f004 fe2d 	bl	80065fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a2:	bf00      	nop
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40020400 	.word	0x40020400

080019c0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
// Ultrasonic Sensor
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	// Interrupt due to Timer TIM1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d177      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7f1b      	ldrb	r3, [r3, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d173      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80019d8:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11a      	bne.n	8001a16 <HAL_TIM_IC_CaptureCallback+0x56>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f007 fe0e 	bl	8009604 <HAL_TIM_ReadCapturedValue>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a3b      	ldr	r2, [pc, #236]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80019ec:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a1a      	ldr	r2, [r3, #32]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020a 	bic.w	r2, r2, #10
 8001a02:	621a      	str	r2, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0202 	orr.w	r2, r2, #2
 8001a12:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001a14:	e054      	b.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d150      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f007 fdef 	bl	8009604 <HAL_TIM_ReadCapturedValue>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a2a:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d907      	bls.n	8001a48 <HAL_TIM_IC_CaptureCallback+0x88>
				echo = IC_Val2-IC_Val1;
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00f      	b.n	8001a68 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d909      	bls.n	8001a68 <HAL_TIM_IC_CaptureCallback+0xa8>
				echo = (0xffff - IC_Val1) + IC_Val2;
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a62:	33ff      	adds	r3, #255	; 0xff
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a66:	6013      	str	r3, [r2, #0]
			Distance = echo/13.3;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd49 	bl	8000504 <__aeabi_ui2d>
 8001a72:	a315      	add	r3, pc, #84	; (adr r3, 8001ac8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fee8 	bl	800084c <__aeabi_ddiv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f890 	bl	8000ba8 <__aeabi_d2uiz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001a8c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020a 	bic.w	r2, r2, #10
 8001aa2:	621a      	str	r2, [r3, #32]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a12      	ldr	r2, [r2, #32]
 8001aae:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0202 	bic.w	r2, r2, #2
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	402a9999 	.word	0x402a9999
 8001ad0:	200004a0 	.word	0x200004a0
 8001ad4:	200005f4 	.word	0x200005f4
 8001ad8:	200005e8 	.word	0x200005e8
 8001adc:	200005ec 	.word	0x200005ec
 8001ae0:	200005f0 	.word	0x200005f0
 8001ae4:	200005f8 	.word	0x200005f8

08001ae8 <delay_us>:

void delay_us(uint16_t us)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <delay_us+0x30>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < us);
 8001afa:	bf00      	nop
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <delay_us+0x30>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3f9      	bcc.n	8001afc <delay_us+0x14>
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200004a0 	.word	0x200004a0

08001b1c <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HCSR04_Read+0x38>)
 8001b28:	f004 ff04 	bl	8006934 <HAL_GPIO_WritePin>
	delay_us(20);  // wait for 10 us
 8001b2c:	2014      	movs	r0, #20
 8001b2e:	f7ff ffdb 	bl	8001ae8 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b38:	4806      	ldr	r0, [pc, #24]	; (8001b54 <HCSR04_Read+0x38>)
 8001b3a:	f004 fefb 	bl	8006934 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HCSR04_Read+0x3c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <HCSR04_Read+0x3c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0202 	orr.w	r2, r2, #2
 8001b4c:	60da      	str	r2, [r3, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	200004a0 	.word	0x200004a0

08001b5c <HAL_UART_RxCpltCallback>:

// Callback Function where the interrupt will go to
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_UART_RxCpltCallback+0x74>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_UART_RxCpltCallback+0x6c>
		motionCommand = uartRxBuffer[0]; // Store the motion (forward/backward/stop; set rotation mode)
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_UART_RxCpltCallback+0x78>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_UART_RxCpltCallback+0x7c>)
 8001b74:	701a      	strb	r2, [r3, #0]
		dirCommand = uartRxBuffer[1]; // Store the direction (left/center/right)
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_UART_RxCpltCallback+0x78>)
 8001b78:	785a      	ldrb	r2, [r3, #1]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_UART_RxCpltCallback+0x80>)
 8001b7c:	701a      	strb	r2, [r3, #0]
		distCommand = ((int) (uartRxBuffer[2]) - 48) * 100
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_UART_RxCpltCallback+0x78>)
 8001b80:	789b      	ldrb	r3, [r3, #2]
				+ ((int) (uartRxBuffer[3]) - 48) * 10
 8001b82:	461a      	mov	r2, r3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	0091      	lsls	r1, r2, #2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_UART_RxCpltCallback+0x78>)
 8001b98:	78db      	ldrb	r3, [r3, #3]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	0089      	lsls	r1, r1, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2da      	uxtb	r2, r3
				+ ((int) (uartRxBuffer[4]) - 48);// Store the distance (cm) / angle (degree) (format: 000)
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_UART_RxCpltCallback+0x78>)
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3330      	adds	r3, #48	; 0x30
 8001bb2:	b2da      	uxtb	r2, r3
		distCommand = ((int) (uartRxBuffer[2]) - 48) * 100
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_UART_RxCpltCallback+0x84>)
 8001bb6:	701a      	strb	r2, [r3, #0]
		commandReceivedFlag = 1;           // Set the flag to indicate a new command has been received
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_UART_RxCpltCallback+0x88>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]

		// Re-enable UART receive interrupt for the next command
		HAL_UART_Receive_IT(&huart3, uartRxBuffer, 5);
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <HAL_UART_RxCpltCallback+0x78>)
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_RxCpltCallback+0x8c>)
 8001bc4:	f008 fb85 	bl	800a2d2 <HAL_UART_Receive_IT>
	}
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40004800 	.word	0x40004800
 8001bd4:	200005d4 	.word	0x200005d4
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	20000205 	.word	0x20000205
 8001be0:	20000206 	.word	0x20000206
 8001be4:	20000207 	.word	0x20000207
 8001be8:	20000578 	.word	0x20000578

08001bec <HAL_ADC_ConvHalfCpltCallback>:

// Callback function for IR sensors
// Called when half of the ADC conversion buffer has been filled during a regular conversion
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	ir_left = adcResult[0] + adcResult[2] + adcResult[4] + adcResult[6] + adcResult[8];
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001bfc:	889b      	ldrh	r3, [r3, #4]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c06:	891b      	ldrh	r3, [r3, #8]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c10:	899b      	ldrh	r3, [r3, #12]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c1a:	8a1b      	ldrh	r3, [r3, #16]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001c24:	801a      	strh	r2, [r3, #0]
	ir_right = adcResult[1] + adcResult[3] + adcResult[5] + adcResult[7] + adcResult[9];
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c28:	885b      	ldrh	r3, [r3, #2]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c2e:	88db      	ldrh	r3, [r3, #6]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c38:	895b      	ldrh	r3, [r3, #10]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c42:	89db      	ldrh	r3, [r3, #14]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001c4c:	8a5b      	ldrh	r3, [r3, #18]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8001c56:	801a      	strh	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	20000628 	.word	0x20000628
 8001c68:	20000650 	.word	0x20000650
 8001c6c:	20000652 	.word	0x20000652

08001c70 <HAL_ADC_ConvCpltCallback>:

// Triggered when the buffer is full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	ir_left = adcResult[10] + adcResult[12] + adcResult[14] + adcResult[16] + adcResult[18];
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c7a:	8a9b      	ldrh	r3, [r3, #20]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c80:	8b1b      	ldrh	r3, [r3, #24]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c8a:	8b9b      	ldrh	r3, [r3, #28]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c94:	8c1b      	ldrh	r3, [r3, #32]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ca8:	801a      	strh	r2, [r3, #0]
	ir_right = adcResult[11] + adcResult[13] + adcResult[15] + adcResult[17] + adcResult[19];
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001cac:	8adb      	ldrh	r3, [r3, #22]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001cb2:	8b5b      	ldrh	r3, [r3, #26]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001cbc:	8bdb      	ldrh	r3, [r3, #30]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001cc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_ADC_ConvCpltCallback+0x80>)
 8001cda:	801a      	strh	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000628 	.word	0x20000628
 8001cec:	20000650 	.word	0x20000650
 8001cf0:	20000652 	.word	0x20000652
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <ADC_To_Dist>:

uint16_t ADC_To_Dist(uint16_t raw)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
	float volt = raw * ADC_REF / ADC_STEPS;
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc0d 	bl	8000524 <__aeabi_i2d>
 8001d0a:	a320      	add	r3, pc, #128	; (adr r3, 8001d8c <ADC_To_Dist+0x94>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fc72 	bl	80005f8 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <ADC_To_Dist+0x90>)
 8001d22:	f7fe fd93 	bl	800084c <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff5b 	bl	8000be8 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	60fb      	str	r3, [r7, #12]
	return (uint16_t)(29.988 * pow(volt, -1.173));
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7fe fc06 	bl	8000548 <__aeabi_f2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001d78 <ADC_To_Dist+0x80>
 8001d44:	ec43 2b10 	vmov	d0, r2, r3
 8001d48:	f00e fe68 	bl	8010a1c <pow>
 8001d4c:	ec51 0b10 	vmov	r0, r1, d0
 8001d50:	a30b      	add	r3, pc, #44	; (adr r3, 8001d80 <ADC_To_Dist+0x88>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fc4f 	bl	80005f8 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe ff21 	bl	8000ba8 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29b      	uxth	r3, r3
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	f3af 8000 	nop.w
 8001d78:	a5e353f8 	.word	0xa5e353f8
 8001d7c:	bff2c49b 	.word	0xbff2c49b
 8001d80:	916872b0 	.word	0x916872b0
 8001d84:	403dfced 	.word	0x403dfced
 8001d88:	40b00000 	.word	0x40b00000
 8001d8c:	66666666 	.word	0x66666666
 8001d90:	400a6666 	.word	0x400a6666

08001d94 <IMU_Initialise>:

// Gyro
uint8_t * IMU_Initialise(IMU_Data *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart){
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b08d      	sub	sp, #52	; 0x34
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	char hex[2];
	uint8_t uartbuf[20] = "  IMU ID =    "; //buffer for data
 8001da0:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <IMU_Initialise+0x144>)
 8001da2:	f107 0418 	add.w	r4, r7, #24
 8001da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da8:	c407      	stmia	r4!, {r0, r1, r2}
 8001daa:	8023      	strh	r3, [r4, #0]
 8001dac:	3402      	adds	r4, #2
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	7023      	strb	r3, [r4, #0]
 8001db2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	711a      	strb	r2, [r3, #4]
	uint8_t regData;
	dev->i2cHandle = i2cHandle;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	601a      	str	r2, [r3, #0]
	dev->uart = uart;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8001dc8:	f107 0317 	add.w	r3, r7, #23
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2100      	movs	r1, #0
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f885 	bl	8001ee0 <IMU_ReadOneByte>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b40      	ldr	r3, [pc, #256]	; (8001edc <IMU_Initialise+0x148>)
 8001ddc:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_BANK_SEL, 0x00);
 8001dde:	2200      	movs	r2, #0
 8001de0:	217f      	movs	r1, #127	; 0x7f
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f89e 	bl	8001f24 <IMU_WriteOneByte>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <IMU_Initialise+0x148>)
 8001dee:	701a      	strb	r2, [r3, #0]
	// USER_CTRL REGISTER, set bit 5 to 1 to enable I2C module, data = 8'b0010 0000
	ret = IMU_WriteOneByte(dev, USER_CTRL, 0x20);
 8001df0:	2220      	movs	r2, #32
 8001df2:	2103      	movs	r1, #3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f895 	bl	8001f24 <IMU_WriteOneByte>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <IMU_Initialise+0x148>)
 8001e00:	701a      	strb	r2, [r3, #0]
	//Power Managment 1, bit 3 to disable temperature sensor, bit2-0: ClkSEL: auto select the best available clk source
	ret = IMU_WriteOneByte(dev, PWR_MGMT_1, 0x09);
 8001e02:	2209      	movs	r2, #9
 8001e04:	2106      	movs	r1, #6
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f88c 	bl	8001f24 <IMU_WriteOneByte>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <IMU_Initialise+0x148>)
 8001e12:	701a      	strb	r2, [r3, #0]
	//Power Managment 2, disable Accelorometer: bit5-3 set to 1, disable Gyroscope x and y: hence bit2-0: 110
	ret = IMU_WriteOneByte(dev, PWR_MGMT_2, 0x3E);
 8001e14:	223e      	movs	r2, #62	; 0x3e
 8001e16:	2107      	movs	r1, #7
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f883 	bl	8001f24 <IMU_WriteOneByte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <IMU_Initialise+0x148>)
 8001e24:	701a      	strb	r2, [r3, #0]
	//Low Power Configuration
	ret = IMU_WriteOneByte(dev, LP_CONFIG, 0x40);
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	2105      	movs	r1, #5
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f87a 	bl	8001f24 <IMU_WriteOneByte>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <IMU_Initialise+0x148>)
 8001e36:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, USER_CTRL, 0x00);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f871 	bl	8001f24 <IMU_WriteOneByte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <IMU_Initialise+0x148>)
 8001e48:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_BANK_SEL, 0x20);
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	217f      	movs	r1, #127	; 0x7f
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f868 	bl	8001f24 <IMU_WriteOneByte>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <IMU_Initialise+0x148>)
 8001e5a:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, GYRO_CONFIG_1, 0x39);
 8001e5c:	2239      	movs	r2, #57	; 0x39
 8001e5e:	2101      	movs	r1, #1
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f85f 	bl	8001f24 <IMU_WriteOneByte>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <IMU_Initialise+0x148>)
 8001e6c:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, GYRO_CONFIG_2, 0x00);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2102      	movs	r1, #2
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f856 	bl	8001f24 <IMU_WriteOneByte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <IMU_Initialise+0x148>)
 8001e7e:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, ACCEL_CONFIG, 0x39);
 8001e80:	2239      	movs	r2, #57	; 0x39
 8001e82:	2114      	movs	r1, #20
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f84d 	bl	8001f24 <IMU_WriteOneByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <IMU_Initialise+0x148>)
 8001e90:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, ACCEL_CONFIG_2, 0x00);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2115      	movs	r1, #21
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f844 	bl	8001f24 <IMU_WriteOneByte>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <IMU_Initialise+0x148>)
 8001ea2:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, GYRO_SMPLRT_DIV, 0x08);
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f83b 	bl	8001f24 <IMU_WriteOneByte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <IMU_Initialise+0x148>)
 8001eb4:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_BANK_SEL, 0x00); 	//go back to bank 0
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	217f      	movs	r1, #127	; 0x7f
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f832 	bl	8001f24 <IMU_WriteOneByte>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <IMU_Initialise+0x148>)
 8001ec6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f003 fa55 	bl	8005378 <HAL_Delay>
	return 0;
 8001ece:	2300      	movs	r3, #0

}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3734      	adds	r7, #52	; 0x34
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	08011900 	.word	0x08011900
 8001edc:	200005d9 	.word	0x200005d9

08001ee0 <IMU_ReadOneByte>:
HAL_StatusTypeDef IMU_ReadOneByte(IMU_Data *dev, uint8_t reg, uint8_t *data)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	2301      	movs	r3, #1
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	21d0      	movs	r1, #208	; 0xd0
 8001f08:	f004 ff6c 	bl	8006de4 <HAL_I2C_Mem_Read>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <IMU_ReadOneByte+0x40>)
 8001f12:	701a      	strb	r2, [r3, #0]
	return ret;
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <IMU_ReadOneByte+0x40>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200005d9 	.word	0x200005d9

08001f24 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(IMU_Data *dev, uint8_t reg, uint8_t data)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af04      	add	r7, sp, #16
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
 8001f30:	4613      	mov	r3, r2
 8001f32:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	2301      	movs	r3, #1
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	f107 030f 	add.w	r3, r7, #15
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2301      	movs	r3, #1
 8001f52:	21d0      	movs	r1, #208	; 0xd0
 8001f54:	f004 fe4c 	bl	8006bf0 <HAL_I2C_Mem_Write>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

    if (hi2c->Instance == I2C1) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d102      	bne.n	8001f7c <HAL_I2C_MemRxCpltCallback+0x18>
        // DMA transfer completed
    	dma_transfer_complete = 2;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	200005e0 	.word	0x200005e0

08001f90 <turnLeft>:

void turnLeft(float targetAngle, int dirBack){
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f9a:	6038      	str	r0, [r7, #0]
	yawAngle = 0.0;
 8001f9c:	4ba0      	ldr	r3, [pc, #640]	; (8002220 <turnLeft+0x290>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    htim1.Instance->CCR4 = 90;
 8001fa4:	4b9f      	ldr	r3, [pc, #636]	; (8002224 <turnLeft+0x294>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	225a      	movs	r2, #90	; 0x5a
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
	int left=0, right=0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
	  HAL_Delay(800); osDelay(800);
 8001fb4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fb8:	f003 f9de 	bl	8005378 <HAL_Delay>
 8001fbc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fc0:	f009 fa30 	bl	800b424 <osDelay>
  //forward
  if (dirBack==0){
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8148 	bne.w	800225c <turnLeft+0x2cc>
	  right=2800;left=300;
 8001fcc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001fd6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2108      	movs	r1, #8
 8001fdc:	4892      	ldr	r0, [pc, #584]	; (8002228 <turnLeft+0x298>)
 8001fde:	f004 fca9 	bl	8006934 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4890      	ldr	r0, [pc, #576]	; (8002228 <turnLeft+0x298>)
 8001fe8:	f004 fca4 	bl	8006934 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8001fec:	2200      	movs	r2, #0
 8001fee:	2110      	movs	r1, #16
 8001ff0:	488d      	ldr	r0, [pc, #564]	; (8002228 <turnLeft+0x298>)
 8001ff2:	f004 fc9f 	bl	8006934 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2120      	movs	r1, #32
 8001ffa:	488b      	ldr	r0, [pc, #556]	; (8002228 <turnLeft+0x298>)
 8001ffc:	f004 fc9a 	bl	8006934 <HAL_GPIO_WritePin>
	  while(1){
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8002000:	4b8a      	ldr	r3, [pc, #552]	; (800222c <turnLeft+0x29c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 8002008:	4b88      	ldr	r3, [pc, #544]	; (800222c <turnLeft+0x29c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8002010:	200a      	movs	r0, #10
 8002012:	f009 fa07 	bl	800b424 <osDelay>
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 25){
 8002016:	edd7 7a01 	vldr	s15, [r7, #4]
 800201a:	eef0 7ae7 	vabs.f32	s15, s15
 800201e:	ee17 0a90 	vmov	r0, s15
 8002022:	f7fe fa91 	bl	8000548 <__aeabi_f2d>
 8002026:	4604      	mov	r4, r0
 8002028:	460d      	mov	r5, r1
 800202a:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <turnLeft+0x290>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	eef0 7ae7 	vabs.f32	s15, s15
 8002034:	ee17 0a90 	vmov	r0, s15
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_f2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4620      	mov	r0, r4
 8002042:	4629      	mov	r1, r5
 8002044:	f7fe f920 	bl	8000288 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b76      	ldr	r3, [pc, #472]	; (8002230 <turnLeft+0x2a0>)
 8002056:	f7fe fd4b 	bl	8000af0 <__aeabi_dcmple>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <turnLeft+0xda>
  			  right=900;left=0;
 8002060:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  		  }
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 800206a:	edd7 7a01 	vldr	s15, [r7, #4]
 800206e:	eef0 7ae7 	vabs.f32	s15, s15
 8002072:	ee17 0a90 	vmov	r0, s15
 8002076:	f7fe fa67 	bl	8000548 <__aeabi_f2d>
 800207a:	4604      	mov	r4, r0
 800207c:	460d      	mov	r5, r1
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <turnLeft+0x290>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eef0 7ae7 	vabs.f32	s15, s15
 8002088:	ee17 0a90 	vmov	r0, s15
 800208c:	f7fe fa5c 	bl	8000548 <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f8f6 	bl	8000288 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b62      	ldr	r3, [pc, #392]	; (8002234 <turnLeft+0x2a4>)
 80020aa:	f7fe fd21 	bl	8000af0 <__aeabi_dcmple>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d100      	bne.n	80020b6 <turnLeft+0x126>
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 80020b4:	e7a4      	b.n	8002000 <turnLeft+0x70>
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 80020b6:	bf00      	nop
  	  }

	  //update xcm, ycm, headingint
	  //90 degs
	  if (targetAngle>=75 && targetAngle<=95){
 80020b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020bc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002238 <turnLeft+0x2a8>
 80020c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	db73      	blt.n	80021b2 <turnLeft+0x222>
 80020ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ce:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800223c <turnLeft+0x2ac>
 80020d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d86a      	bhi.n	80021b2 <turnLeft+0x222>
		  switch(headingint){
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <turnLeft+0x2b0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d036      	beq.n	8002152 <turnLeft+0x1c2>
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	dc4c      	bgt.n	8002182 <turnLeft+0x1f2>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <turnLeft+0x162>
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d018      	beq.n	8002122 <turnLeft+0x192>
 80020f0:	e047      	b.n	8002182 <turnLeft+0x1f2>
		  case 0:
			  xcm-=38.0; ycm+=22.0;
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <turnLeft+0x2b4>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002248 <turnLeft+0x2b8>
 80020fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <turnLeft+0x2b4>)
 8002102:	edc3 7a00 	vstr	s15, [r3]
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <turnLeft+0x2bc>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002114:	4b4d      	ldr	r3, [pc, #308]	; (800224c <turnLeft+0x2bc>)
 8002116:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 3;
 800211a:	4b49      	ldr	r3, [pc, #292]	; (8002240 <turnLeft+0x2b0>)
 800211c:	2203      	movs	r2, #3
 800211e:	601a      	str	r2, [r3, #0]
			  break;
 8002120:	e047      	b.n	80021b2 <turnLeft+0x222>
		  case 1:
			  xcm+=22.0; ycm+=38.0;
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <turnLeft+0x2b4>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800212c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002130:	4b44      	ldr	r3, [pc, #272]	; (8002244 <turnLeft+0x2b4>)
 8002132:	edc3 7a00 	vstr	s15, [r3]
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <turnLeft+0x2bc>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002248 <turnLeft+0x2b8>
 8002140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <turnLeft+0x2bc>)
 8002146:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 0;
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <turnLeft+0x2b0>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
			  break;
 8002150:	e02f      	b.n	80021b2 <turnLeft+0x222>
		  case 2:
			  xcm+=38.0; ycm-=22.0;
 8002152:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <turnLeft+0x2b4>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002248 <turnLeft+0x2b8>
 800215c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <turnLeft+0x2b4>)
 8002162:	edc3 7a00 	vstr	s15, [r3]
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <turnLeft+0x2bc>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002174:	4b35      	ldr	r3, [pc, #212]	; (800224c <turnLeft+0x2bc>)
 8002176:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 1;
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <turnLeft+0x2b0>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]
			  break;
 8002180:	e017      	b.n	80021b2 <turnLeft+0x222>
		  default:
			  xcm-=22.0; ycm-=38.0;
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <turnLeft+0x2b4>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800218c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002190:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <turnLeft+0x2b4>)
 8002192:	edc3 7a00 	vstr	s15, [r3]
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <turnLeft+0x2bc>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002248 <turnLeft+0x2b8>
 80021a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <turnLeft+0x2bc>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 2;
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <turnLeft+0x2b0>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
			  break;
 80021b0:	bf00      	nop
		  }
	  }
	  //60 degs
	  if (targetAngle>=45 && targetAngle<=52){
 80021b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002250 <turnLeft+0x2c0>
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	f2c0 80c4 	blt.w	800234e <turnLeft+0x3be>
 80021c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ca:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002254 <turnLeft+0x2c4>
 80021ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	f200 80ba 	bhi.w	800234e <turnLeft+0x3be>
		  ycm+=42; xcm-=0.3;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <turnLeft+0x2bc>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002258 <turnLeft+0x2c8>
 80021e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <turnLeft+0x2bc>)
 80021ea:	edc3 7a00 	vstr	s15, [r3]
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <turnLeft+0x2b4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9a8 	bl	8000548 <__aeabi_f2d>
 80021f8:	a307      	add	r3, pc, #28	; (adr r3, 8002218 <turnLeft+0x288>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f7fe f843 	bl	8000288 <__aeabi_dsub>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fced 	bl	8000be8 <__aeabi_d2f>
 800220e:	4603      	mov	r3, r0
 8002210:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <turnLeft+0x2b4>)
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e09b      	b.n	800234e <turnLeft+0x3be>
 8002216:	bf00      	nop
 8002218:	33333333 	.word	0x33333333
 800221c:	3fd33333 	.word	0x3fd33333
 8002220:	200005dc 	.word	0x200005dc
 8002224:	200003c8 	.word	0x200003c8
 8002228:	40020000 	.word	0x40020000
 800222c:	20000530 	.word	0x20000530
 8002230:	40390000 	.word	0x40390000
 8002234:	3ff00000 	.word	0x3ff00000
 8002238:	42960000 	.word	0x42960000
 800223c:	42be0000 	.word	0x42be0000
 8002240:	2000060c 	.word	0x2000060c
 8002244:	20000604 	.word	0x20000604
 8002248:	42180000 	.word	0x42180000
 800224c:	20000608 	.word	0x20000608
 8002250:	42340000 	.word	0x42340000
 8002254:	42500000 	.word	0x42500000
 8002258:	42280000 	.word	0x42280000
	  }

  }
  //backward
  else if (dirBack==1){
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d175      	bne.n	800234e <turnLeft+0x3be>
	  right=2600;left=300;
 8002262:	f640 2328 	movw	r3, #2600	; 0xa28
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800226c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 800226e:	2201      	movs	r2, #1
 8002270:	2108      	movs	r1, #8
 8002272:	483f      	ldr	r0, [pc, #252]	; (8002370 <turnLeft+0x3e0>)
 8002274:	f004 fb5e 	bl	8006934 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8002278:	2200      	movs	r2, #0
 800227a:	2104      	movs	r1, #4
 800227c:	483c      	ldr	r0, [pc, #240]	; (8002370 <turnLeft+0x3e0>)
 800227e:	f004 fb59 	bl	8006934 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 8002282:	2201      	movs	r2, #1
 8002284:	2110      	movs	r1, #16
 8002286:	483a      	ldr	r0, [pc, #232]	; (8002370 <turnLeft+0x3e0>)
 8002288:	f004 fb54 	bl	8006934 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 800228c:	2200      	movs	r2, #0
 800228e:	2120      	movs	r1, #32
 8002290:	4837      	ldr	r0, [pc, #220]	; (8002370 <turnLeft+0x3e0>)
 8002292:	f004 fb4f 	bl	8006934 <HAL_GPIO_WritePin>
	  while(1){
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <turnLeft+0x3e4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <turnLeft+0x3e4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 80022a6:	200a      	movs	r0, #10
 80022a8:	f009 f8bc 	bl	800b424 <osDelay>
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 25){
 80022ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b0:	eef0 7ae7 	vabs.f32	s15, s15
 80022b4:	ee17 0a90 	vmov	r0, s15
 80022b8:	f7fe f946 	bl	8000548 <__aeabi_f2d>
 80022bc:	4604      	mov	r4, r0
 80022be:	460d      	mov	r5, r1
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <turnLeft+0x3e8>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eef0 7ae7 	vabs.f32	s15, s15
 80022ca:	ee17 0a90 	vmov	r0, s15
 80022ce:	f7fe f93b 	bl	8000548 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fd ffd5 	bl	8000288 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <turnLeft+0x3ec>)
 80022ec:	f7fe fc00 	bl	8000af0 <__aeabi_dcmple>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <turnLeft+0x370>
  			  right=900;left=0;
 80022f6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  		  }
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 8002300:	edd7 7a01 	vldr	s15, [r7, #4]
 8002304:	eef0 7ae7 	vabs.f32	s15, s15
 8002308:	ee17 0a90 	vmov	r0, s15
 800230c:	f7fe f91c 	bl	8000548 <__aeabi_f2d>
 8002310:	4604      	mov	r4, r0
 8002312:	460d      	mov	r5, r1
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <turnLeft+0x3e8>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	eef0 7ae7 	vabs.f32	s15, s15
 800231e:	ee17 0a90 	vmov	r0, s15
 8002322:	f7fe f911 	bl	8000548 <__aeabi_f2d>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4620      	mov	r0, r4
 800232c:	4629      	mov	r1, r5
 800232e:	f7fd ffab 	bl	8000288 <__aeabi_dsub>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <turnLeft+0x3f0>)
 8002340:	f7fe fbd6 	bl	8000af0 <__aeabi_dcmple>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d100      	bne.n	800234c <turnLeft+0x3bc>
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 800234a:	e7a4      	b.n	8002296 <turnLeft+0x306>
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 800234c:	bf00      	nop
  	  }
  }
        htim1.Instance->CCR4 = 147;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <turnLeft+0x3f4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2293      	movs	r2, #147	; 0x93
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <turnLeft+0x3e4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <turnLeft+0x3e4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bdb0      	pop	{r4, r5, r7, pc}
 800236e:	bf00      	nop
 8002370:	40020000 	.word	0x40020000
 8002374:	20000530 	.word	0x20000530
 8002378:	200005dc 	.word	0x200005dc
 800237c:	40390000 	.word	0x40390000
 8002380:	3ff00000 	.word	0x3ff00000
 8002384:	200003c8 	.word	0x200003c8

08002388 <turnRight>:

void turnRight(float targetAngle, int dirBack){
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002392:	6038      	str	r0, [r7, #0]
	yawAngle = 0.0;
 8002394:	4ba0      	ldr	r3, [pc, #640]	; (8002618 <turnRight+0x290>)
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = 210;
 800239c:	4b9f      	ldr	r3, [pc, #636]	; (800261c <turnRight+0x294>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	22d2      	movs	r2, #210	; 0xd2
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
	int left=0, right=0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
	HAL_Delay(800); osDelay(800);
 80023ac:	f44f 7048 	mov.w	r0, #800	; 0x320
 80023b0:	f002 ffe2 	bl	8005378 <HAL_Delay>
 80023b4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80023b8:	f009 f834 	bl	800b424 <osDelay>
	//forward
	if (dirBack==0){
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 8144 	bne.w	800264c <turnRight+0x2c4>
		left=2800, right=300;
 80023c4:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023ce:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 80023d0:	2200      	movs	r2, #0
 80023d2:	2108      	movs	r1, #8
 80023d4:	4892      	ldr	r0, [pc, #584]	; (8002620 <turnRight+0x298>)
 80023d6:	f004 faad 	bl	8006934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 80023da:	2201      	movs	r2, #1
 80023dc:	2104      	movs	r1, #4
 80023de:	4890      	ldr	r0, [pc, #576]	; (8002620 <turnRight+0x298>)
 80023e0:	f004 faa8 	bl	8006934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 80023e4:	2200      	movs	r2, #0
 80023e6:	2110      	movs	r1, #16
 80023e8:	488d      	ldr	r0, [pc, #564]	; (8002620 <turnRight+0x298>)
 80023ea:	f004 faa3 	bl	8006934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 80023ee:	2201      	movs	r2, #1
 80023f0:	2120      	movs	r1, #32
 80023f2:	488b      	ldr	r0, [pc, #556]	; (8002620 <turnRight+0x298>)
 80023f4:	f004 fa9e 	bl	8006934 <HAL_GPIO_WritePin>
		while(1){
			  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 80023f8:	4b8a      	ldr	r3, [pc, #552]	; (8002624 <turnRight+0x29c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 8002400:	4b88      	ldr	r3, [pc, #544]	; (8002624 <turnRight+0x29c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
			  osDelay(10);
 8002408:	200a      	movs	r0, #10
 800240a:	f009 f80b 	bl	800b424 <osDelay>
			  if (fabs(targetAngle) - fabs(yawAngle) <= 25){
 800240e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002412:	eef0 7ae7 	vabs.f32	s15, s15
 8002416:	ee17 0a90 	vmov	r0, s15
 800241a:	f7fe f895 	bl	8000548 <__aeabi_f2d>
 800241e:	4604      	mov	r4, r0
 8002420:	460d      	mov	r5, r1
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <turnRight+0x290>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	eef0 7ae7 	vabs.f32	s15, s15
 800242c:	ee17 0a90 	vmov	r0, s15
 8002430:	f7fe f88a 	bl	8000548 <__aeabi_f2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fd ff24 	bl	8000288 <__aeabi_dsub>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b76      	ldr	r3, [pc, #472]	; (8002628 <turnRight+0x2a0>)
 800244e:	f7fe fb4f 	bl	8000af0 <__aeabi_dcmple>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <turnRight+0xda>
				  right=0;left=900;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002460:	60fb      	str	r3, [r7, #12]
		  }
		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 8002462:	edd7 7a01 	vldr	s15, [r7, #4]
 8002466:	eef0 7ae7 	vabs.f32	s15, s15
 800246a:	ee17 0a90 	vmov	r0, s15
 800246e:	f7fe f86b 	bl	8000548 <__aeabi_f2d>
 8002472:	4604      	mov	r4, r0
 8002474:	460d      	mov	r5, r1
 8002476:	4b68      	ldr	r3, [pc, #416]	; (8002618 <turnRight+0x290>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eef0 7ae7 	vabs.f32	s15, s15
 8002480:	ee17 0a90 	vmov	r0, s15
 8002484:	f7fe f860 	bl	8000548 <__aeabi_f2d>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd fefa 	bl	8000288 <__aeabi_dsub>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b62      	ldr	r3, [pc, #392]	; (800262c <turnRight+0x2a4>)
 80024a2:	f7fe fb25 	bl	8000af0 <__aeabi_dcmple>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d100      	bne.n	80024ae <turnRight+0x126>
			  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 80024ac:	e7a4      	b.n	80023f8 <turnRight+0x70>
		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 80024ae:	bf00      	nop
	}

	  //update xcm, ycm, headingint
	  //90 degs
	  if (targetAngle>=85 && targetAngle<=105){
 80024b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002630 <turnRight+0x2a8>
 80024b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	db73      	blt.n	80025aa <turnRight+0x222>
 80024c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c6:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002634 <turnRight+0x2ac>
 80024ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d2:	d86a      	bhi.n	80025aa <turnRight+0x222>
		  switch(headingint){
 80024d4:	4b58      	ldr	r3, [pc, #352]	; (8002638 <turnRight+0x2b0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d036      	beq.n	800254a <turnRight+0x1c2>
 80024dc:	2b02      	cmp	r3, #2
 80024de:	dc4c      	bgt.n	800257a <turnRight+0x1f2>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <turnRight+0x162>
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d018      	beq.n	800251a <turnRight+0x192>
 80024e8:	e047      	b.n	800257a <turnRight+0x1f2>
		  case 0:
			  xcm+=31.0; ycm+=16.0;
 80024ea:	4b54      	ldr	r3, [pc, #336]	; (800263c <turnRight+0x2b4>)
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80024f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <turnRight+0x2b4>)
 80024fa:	edc3 7a00 	vstr	s15, [r3]
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <turnRight+0x2b8>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <turnRight+0x2b8>)
 800250e:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 1;
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <turnRight+0x2b0>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
			  break;
 8002518:	e047      	b.n	80025aa <turnRight+0x222>
		  case 1:
			  xcm+=16.0; ycm-=31.0;
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <turnRight+0x2b4>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002528:	4b44      	ldr	r3, [pc, #272]	; (800263c <turnRight+0x2b4>)
 800252a:	edc3 7a00 	vstr	s15, [r3]
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <turnRight+0x2b8>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800253c:	4b40      	ldr	r3, [pc, #256]	; (8002640 <turnRight+0x2b8>)
 800253e:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 2;
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <turnRight+0x2b0>)
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
			  break;
 8002548:	e02f      	b.n	80025aa <turnRight+0x222>
		  case 2:
			  xcm-=31.0; ycm-=16.0;
 800254a:	4b3c      	ldr	r3, [pc, #240]	; (800263c <turnRight+0x2b4>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <turnRight+0x2b4>)
 800255a:	edc3 7a00 	vstr	s15, [r3]
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <turnRight+0x2b8>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <turnRight+0x2b8>)
 800256e:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 3;
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <turnRight+0x2b0>)
 8002574:	2203      	movs	r2, #3
 8002576:	601a      	str	r2, [r3, #0]
			  break;
 8002578:	e017      	b.n	80025aa <turnRight+0x222>
		  default:
			  xcm-=16.0; ycm+=31.0;
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <turnRight+0x2b4>)
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <turnRight+0x2b4>)
 800258a:	edc3 7a00 	vstr	s15, [r3]
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <turnRight+0x2b8>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <turnRight+0x2b8>)
 800259e:	edc3 7a00 	vstr	s15, [r3]
			  headingint = 0;
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <turnRight+0x2b0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
			  break;
 80025a8:	bf00      	nop
		  }
	  }
	  //60 degs
	  if (targetAngle>=52 && targetAngle<=59){
 80025aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ae:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002644 <turnRight+0x2bc>
 80025b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ba:	f2c0 80c0 	blt.w	800273e <turnRight+0x3b6>
 80025be:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002648 <turnRight+0x2c0>
 80025c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ce:	f200 80b6 	bhi.w	800273e <turnRight+0x3b6>
		  ycm+=39.4; xcm+=0.5;
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <turnRight+0x2b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	a30c      	add	r3, pc, #48	; (adr r3, 8002610 <turnRight+0x288>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f7fd fe53 	bl	800028c <__adddf3>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe fafb 	bl	8000be8 <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <turnRight+0x2b8>)
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <turnRight+0x2b4>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <turnRight+0x2b4>)
 8002608:	edc3 7a00 	vstr	s15, [r3]
 800260c:	e097      	b.n	800273e <turnRight+0x3b6>
 800260e:	bf00      	nop
 8002610:	33333333 	.word	0x33333333
 8002614:	4043b333 	.word	0x4043b333
 8002618:	200005dc 	.word	0x200005dc
 800261c:	200003c8 	.word	0x200003c8
 8002620:	40020000 	.word	0x40020000
 8002624:	20000530 	.word	0x20000530
 8002628:	40390000 	.word	0x40390000
 800262c:	3ff00000 	.word	0x3ff00000
 8002630:	42aa0000 	.word	0x42aa0000
 8002634:	42d20000 	.word	0x42d20000
 8002638:	2000060c 	.word	0x2000060c
 800263c:	20000604 	.word	0x20000604
 8002640:	20000608 	.word	0x20000608
 8002644:	42500000 	.word	0x42500000
 8002648:	426c0000 	.word	0x426c0000
	  }

    }
    //backward
    else if (dirBack==1){
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d175      	bne.n	800273e <turnRight+0x3b6>
    	left=2600, right=300;
 8002652:	f640 2328 	movw	r3, #2600	; 0xa28
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800265c:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 800265e:	2201      	movs	r2, #1
 8002660:	2108      	movs	r1, #8
 8002662:	483f      	ldr	r0, [pc, #252]	; (8002760 <turnRight+0x3d8>)
 8002664:	f004 f966 	bl	8006934 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8002668:	2200      	movs	r2, #0
 800266a:	2104      	movs	r1, #4
 800266c:	483c      	ldr	r0, [pc, #240]	; (8002760 <turnRight+0x3d8>)
 800266e:	f004 f961 	bl	8006934 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 8002672:	2201      	movs	r2, #1
 8002674:	2110      	movs	r1, #16
 8002676:	483a      	ldr	r0, [pc, #232]	; (8002760 <turnRight+0x3d8>)
 8002678:	f004 f95c 	bl	8006934 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 800267c:	2200      	movs	r2, #0
 800267e:	2120      	movs	r1, #32
 8002680:	4837      	ldr	r0, [pc, #220]	; (8002760 <turnRight+0x3d8>)
 8002682:	f004 f957 	bl	8006934 <HAL_GPIO_WritePin>
 	  while(1){
 	  	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <turnRight+0x3dc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
 	  	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <turnRight+0x3dc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
 		  osDelay(10);
 8002696:	200a      	movs	r0, #10
 8002698:	f008 fec4 	bl	800b424 <osDelay>
  		  if (fabs(targetAngle) - fabs(yawAngle) <= 25){
 800269c:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a0:	eef0 7ae7 	vabs.f32	s15, s15
 80026a4:	ee17 0a90 	vmov	r0, s15
 80026a8:	f7fd ff4e 	bl	8000548 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <turnRight+0x3e0>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	eef0 7ae7 	vabs.f32	s15, s15
 80026ba:	ee17 0a90 	vmov	r0, s15
 80026be:	f7fd ff43 	bl	8000548 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd fddd 	bl	8000288 <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <turnRight+0x3e4>)
 80026dc:	f7fe fa08 	bl	8000af0 <__aeabi_dcmple>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <turnRight+0x368>
  			  right=0;left=900;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	f44f 7361 	mov.w	r3, #900	; 0x384
 80026ee:	60fb      	str	r3, [r7, #12]
  		  }
 		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 80026f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026f4:	eef0 7ae7 	vabs.f32	s15, s15
 80026f8:	ee17 0a90 	vmov	r0, s15
 80026fc:	f7fd ff24 	bl	8000548 <__aeabi_f2d>
 8002700:	4604      	mov	r4, r0
 8002702:	460d      	mov	r5, r1
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <turnRight+0x3e0>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	eef0 7ae7 	vabs.f32	s15, s15
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd ff19 	bl	8000548 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4620      	mov	r0, r4
 800271c:	4629      	mov	r1, r5
 800271e:	f7fd fdb3 	bl	8000288 <__aeabi_dsub>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <turnRight+0x3e8>)
 8002730:	f7fe f9de 	bl	8000af0 <__aeabi_dcmple>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d100      	bne.n	800273c <turnRight+0x3b4>
 	  	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 800273a:	e7a4      	b.n	8002686 <turnRight+0x2fe>
 		  if (fabs(targetAngle) - fabs(yawAngle) <= 1)break;
 800273c:	bf00      	nop
 	  }
    }
	        htim1.Instance->CCR4 = 138;
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <turnRight+0x3ec>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	228a      	movs	r2, #138	; 0x8a
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <turnRight+0x3dc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
	        __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <turnRight+0x3dc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bdb0      	pop	{r4, r5, r7, pc}
 800275e:	bf00      	nop
 8002760:	40020000 	.word	0x40020000
 8002764:	20000530 	.word	0x20000530
 8002768:	200005dc 	.word	0x200005dc
 800276c:	40390000 	.word	0x40390000
 8002770:	3ff00000 	.word	0x3ff00000
 8002774:	200003c8 	.word	0x200003c8

08002778 <maintainStraightPath>:

void maintainStraightPath(int dista, int flag){
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b08c      	sub	sp, #48	; 0x30
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    // Initialize variables
	htim1.Instance->CCR4 = 141;
 8002782:	4b9d      	ldr	r3, [pc, #628]	; (80029f8 <maintainStraightPath+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	228d      	movs	r2, #141	; 0x8d
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    uint8_t uart_buf[20];
    float ratio = 0.1;
 800278a:	4b9c      	ldr	r3, [pc, #624]	; (80029fc <maintainStraightPath+0x284>)
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
	encoderL = 0; encoderR = 0;
 800278e:	4b9c      	ldr	r3, [pc, #624]	; (8002a00 <maintainStraightPath+0x288>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	4b9b      	ldr	r3, [pc, #620]	; (8002a04 <maintainStraightPath+0x28c>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    float setpoint = yawAngle;
 800279a:	4b9b      	ldr	r3, [pc, #620]	; (8002a08 <maintainStraightPath+0x290>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
	int totravel = dista/21.0*1550.0;
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fd febf 	bl	8000524 <__aeabi_i2d>
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <maintainStraightPath+0x294>)
 80027ac:	f7fe f84e 	bl	800084c <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	a383      	add	r3, pc, #524	; (adr r3, 80029c8 <maintainStraightPath+0x250>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff1b 	bl	80005f8 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe f9c5 	bl	8000b58 <__aeabi_d2iz>
 80027ce:	4603      	mov	r3, r0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24

	//special case for dista <= 10
	if (flag==0 && dista<=10 && motionCommand=='s'){
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d122      	bne.n	800281e <maintainStraightPath+0xa6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b0a      	cmp	r3, #10
 80027dc:	dc1f      	bgt.n	800281e <maintainStraightPath+0xa6>
 80027de:	4b8c      	ldr	r3, [pc, #560]	; (8002a10 <maintainStraightPath+0x298>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b73      	cmp	r3, #115	; 0x73
 80027e6:	d11a      	bne.n	800281e <maintainStraightPath+0xa6>
		while(1){
			pwmValL = 1340; pwmValR = 1275;
 80027e8:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <maintainStraightPath+0x29c>)
 80027ea:	f240 523c 	movw	r2, #1340	; 0x53c
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <maintainStraightPath+0x2a0>)
 80027f2:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80027f6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80027f8:	4b87      	ldr	r3, [pc, #540]	; (8002a18 <maintainStraightPath+0x2a0>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b87      	ldr	r3, [pc, #540]	; (8002a1c <maintainStraightPath+0x2a4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8002802:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <maintainStraightPath+0x29c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <maintainStraightPath+0x2a4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
			if (2*encoderR>totravel)break;
 800280c:	4b7d      	ldr	r3, [pc, #500]	; (8002a04 <maintainStraightPath+0x28c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	429a      	cmp	r2, r3
 8002816:	db00      	blt.n	800281a <maintainStraightPath+0xa2>
			pwmValL = 1340; pwmValR = 1275;
 8002818:	e7e6      	b.n	80027e8 <maintainStraightPath+0x70>
			if (2*encoderR>totravel)break;
 800281a:	bf00      	nop
	if (flag==0 && dista<=10 && motionCommand=='s'){
 800281c:	e2e1      	b.n	8002de2 <maintainStraightPath+0x66a>
		}
	}
	else if (flag==0 && dista<=10 && motionCommand=='w'){
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d122      	bne.n	800286a <maintainStraightPath+0xf2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b0a      	cmp	r3, #10
 8002828:	dc1f      	bgt.n	800286a <maintainStraightPath+0xf2>
 800282a:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <maintainStraightPath+0x298>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b77      	cmp	r3, #119	; 0x77
 8002832:	d11a      	bne.n	800286a <maintainStraightPath+0xf2>
		while(1){
			pwmValL = 1270; pwmValR = 1260;
 8002834:	4b77      	ldr	r3, [pc, #476]	; (8002a14 <maintainStraightPath+0x29c>)
 8002836:	f240 42f6 	movw	r2, #1270	; 0x4f6
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <maintainStraightPath+0x2a0>)
 800283e:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002842:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8002844:	4b74      	ldr	r3, [pc, #464]	; (8002a18 <maintainStraightPath+0x2a0>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <maintainStraightPath+0x2a4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 800284e:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <maintainStraightPath+0x29c>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <maintainStraightPath+0x2a4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
			if (2*encoderR>totravel)break;
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <maintainStraightPath+0x28c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	429a      	cmp	r2, r3
 8002862:	db00      	blt.n	8002866 <maintainStraightPath+0xee>
			pwmValL = 1270; pwmValR = 1260;
 8002864:	e7e6      	b.n	8002834 <maintainStraightPath+0xbc>
			if (2*encoderR>totravel)break;
 8002866:	bf00      	nop
	else if (flag==0 && dista<=10 && motionCommand=='w'){
 8002868:	e2bb      	b.n	8002de2 <maintainStraightPath+0x66a>
	}
	else{
		// Main loop to maintain straight path
	    while (1) { // Use an appropriate condition to break out of the loop when needed
	    	//self straightening
			float correction = adjustServoToCenter(yawAngle, setpoint);
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <maintainStraightPath+0x290>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8002874:	eeb0 0a67 	vmov.f32	s0, s15
 8002878:	f000 fcbe 	bl	80031f8 <adjustServoToCenter>
 800287c:	ed87 0a08 	vstr	s0, [r7, #32]
			htim1.Instance->CCR4 = (motionCommand=='w') ? 141+1.008*correction : 141-1.008*correction;
 8002880:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <maintainStraightPath+0x298>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b77      	cmp	r3, #119	; 0x77
 8002888:	d118      	bne.n	80028bc <maintainStraightPath+0x144>
 800288a:	6a38      	ldr	r0, [r7, #32]
 800288c:	f7fd fe5c 	bl	8000548 <__aeabi_f2d>
 8002890:	a34f      	add	r3, pc, #316	; (adr r3, 80029d0 <maintainStraightPath+0x258>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd feaf 	bl	80005f8 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	a34d      	add	r3, pc, #308	; (adr r3, 80029d8 <maintainStraightPath+0x260>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fcf0 	bl	800028c <__adddf3>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f978 	bl	8000ba8 <__aeabi_d2uiz>
 80028b8:	4603      	mov	r3, r0
 80028ba:	e015      	b.n	80028e8 <maintainStraightPath+0x170>
 80028bc:	6a38      	ldr	r0, [r7, #32]
 80028be:	f7fd fe43 	bl	8000548 <__aeabi_f2d>
 80028c2:	a343      	add	r3, pc, #268	; (adr r3, 80029d0 <maintainStraightPath+0x258>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fe96 	bl	80005f8 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	a141      	add	r1, pc, #260	; (adr r1, 80029d8 <maintainStraightPath+0x260>)
 80028d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028d6:	f7fd fcd7 	bl	8000288 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f961 	bl	8000ba8 <__aeabi_d2uiz>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a43      	ldr	r2, [pc, #268]	; (80029f8 <maintainStraightPath+0x280>)
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40

	    	//accel (nnnneeeeoooowwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww)
	    	if (flag==0 && (motionCommand=='w') && totravel - 2*encoderR > (int)((float)totravel*0.3)){
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d15e      	bne.n	80029b2 <maintainStraightPath+0x23a>
 80028f4:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <maintainStraightPath+0x298>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b77      	cmp	r3, #119	; 0x77
 80028fc:	d159      	bne.n	80029b2 <maintainStraightPath+0x23a>
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <maintainStraightPath+0x28c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	1ad4      	subs	r4, r2, r3
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002912:	ee17 0a90 	vmov	r0, s15
 8002916:	f7fd fe17 	bl	8000548 <__aeabi_f2d>
 800291a:	a331      	add	r3, pc, #196	; (adr r3, 80029e0 <maintainStraightPath+0x268>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fe6a 	bl	80005f8 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe f914 	bl	8000b58 <__aeabi_d2iz>
 8002930:	4603      	mov	r3, r0
 8002932:	429c      	cmp	r4, r3
 8002934:	dd3d      	ble.n	80029b2 <maintainStraightPath+0x23a>
	    		if (ratio<1.55)ratio+=0.0003;
 8002936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002938:	f7fd fe06 	bl	8000548 <__aeabi_f2d>
 800293c:	a32a      	add	r3, pc, #168	; (adr r3, 80029e8 <maintainStraightPath+0x270>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f7fe f8cb 	bl	8000adc <__aeabi_dcmplt>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <maintainStraightPath+0x1f4>
 800294c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800294e:	f7fd fdfb 	bl	8000548 <__aeabi_f2d>
 8002952:	a327      	add	r3, pc, #156	; (adr r3, 80029f0 <maintainStraightPath+0x278>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fc98 	bl	800028c <__adddf3>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f940 	bl	8000be8 <__aeabi_d2f>
 8002968:	4603      	mov	r3, r0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
	            // Apply PWM to both motors to start moving forward
	    		pwmValL = (int)((float)(RPM_LEFT+20)*ratio); pwmValR = (int)((float)(RPM_RIGHT+55)*ratio);
 800296c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002970:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002a20 <maintainStraightPath+0x2a8>
 8002974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800297c:	ee17 2a90 	vmov	r2, s15
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <maintainStraightPath+0x29c>)
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002988:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002a24 <maintainStraightPath+0x2ac>
 800298c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002994:	ee17 2a90 	vmov	r2, s15
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <maintainStraightPath+0x2a0>)
 800299a:	601a      	str	r2, [r3, #0]
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <maintainStraightPath+0x2a0>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <maintainStraightPath+0x2a4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <maintainStraightPath+0x29c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <maintainStraightPath+0x2a4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
 80029b0:	e0ac      	b.n	8002b0c <maintainStraightPath+0x394>
	    	}
	    	else if (flag==0 && motionCommand=='w'){
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 80a9 	bne.w	8002b0c <maintainStraightPath+0x394>
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <maintainStraightPath+0x298>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b77      	cmp	r3, #119	; 0x77
 80029c2:	f040 80a3 	bne.w	8002b0c <maintainStraightPath+0x394>
		    	while(2*encoderR<totravel-222){
 80029c6:	e099      	b.n	8002afc <maintainStraightPath+0x384>
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40983800 	.word	0x40983800
 80029d0:	9ba5e354 	.word	0x9ba5e354
 80029d4:	3ff020c4 	.word	0x3ff020c4
 80029d8:	00000000 	.word	0x00000000
 80029dc:	4061a000 	.word	0x4061a000
 80029e0:	33333333 	.word	0x33333333
 80029e4:	3fd33333 	.word	0x3fd33333
 80029e8:	cccccccd 	.word	0xcccccccd
 80029ec:	3ff8cccc 	.word	0x3ff8cccc
 80029f0:	30553261 	.word	0x30553261
 80029f4:	3f33a92a 	.word	0x3f33a92a
 80029f8:	200003c8 	.word	0x200003c8
 80029fc:	3dcccccd 	.word	0x3dcccccd
 8002a00:	200005fc 	.word	0x200005fc
 8002a04:	20000600 	.word	0x20000600
 8002a08:	200005dc 	.word	0x200005dc
 8002a0c:	40350000 	.word	0x40350000
 8002a10:	20000204 	.word	0x20000204
 8002a14:	20000610 	.word	0x20000610
 8002a18:	20000614 	.word	0x20000614
 8002a1c:	20000530 	.word	0x20000530
 8002a20:	455c0000 	.word	0x455c0000
 8002a24:	455e3000 	.word	0x455e3000
	            	ratio=0.8*(float)(totravel - 2*encoderR)/(float)totravel;
 8002a28:	4bb3      	ldr	r3, [pc, #716]	; (8002cf8 <maintainStraightPath+0x580>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3a:	ee17 0a90 	vmov	r0, s15
 8002a3e:	f7fd fd83 	bl	8000548 <__aeabi_f2d>
 8002a42:	a3a5      	add	r3, pc, #660	; (adr r3, 8002cd8 <maintainStraightPath+0x560>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fdd6 	bl	80005f8 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5e:	ee17 0a90 	vmov	r0, s15
 8002a62:	f7fd fd71 	bl	8000548 <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7fd feed 	bl	800084c <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7fe f8b5 	bl	8000be8 <__aeabi_d2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
	    			// Apply PWM to both motors to start moving forward
	            	pwmValL = (int)((float)(RPM_LEFT+20)*ratio+900.0); pwmValR = (int)((float)(RPM_RIGHT+55)*ratio+900.0);
 8002a82:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a86:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002cfc <maintainStraightPath+0x584>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	ee17 0a90 	vmov	r0, s15
 8002a92:	f7fd fd59 	bl	8000548 <__aeabi_f2d>
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	4b99      	ldr	r3, [pc, #612]	; (8002d00 <maintainStraightPath+0x588>)
 8002a9c:	f7fd fbf6 	bl	800028c <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe f856 	bl	8000b58 <__aeabi_d2iz>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4a95      	ldr	r2, [pc, #596]	; (8002d04 <maintainStraightPath+0x58c>)
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ab6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002d08 <maintainStraightPath+0x590>
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	ee17 0a90 	vmov	r0, s15
 8002ac2:	f7fd fd41 	bl	8000548 <__aeabi_f2d>
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <maintainStraightPath+0x588>)
 8002acc:	f7fd fbde 	bl	800028c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f83e 	bl	8000b58 <__aeabi_d2iz>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a8b      	ldr	r2, [pc, #556]	; (8002d0c <maintainStraightPath+0x594>)
 8002ae0:	6013      	str	r3, [r2, #0]
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8002ae2:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <maintainStraightPath+0x594>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <maintainStraightPath+0x598>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8002aec:	4b85      	ldr	r3, [pc, #532]	; (8002d04 <maintainStraightPath+0x58c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <maintainStraightPath+0x598>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
	    			osDelay(50);
 8002af6:	2032      	movs	r0, #50	; 0x32
 8002af8:	f008 fc94 	bl	800b424 <osDelay>
		    	while(2*encoderR<totravel-222){
 8002afc:	4b7e      	ldr	r3, [pc, #504]	; (8002cf8 <maintainStraightPath+0x580>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	005a      	lsls	r2, r3, #1
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	3bde      	subs	r3, #222	; 0xde
 8002b06:	429a      	cmp	r2, r3
 8002b08:	db8e      	blt.n	8002a28 <maintainStraightPath+0x2b0>
	    		}
	    		break;
 8002b0a:	e16a      	b.n	8002de2 <maintainStraightPath+0x66a>
	    	}

	    	if (flag==0 && (motionCommand=='s') && totravel - 2*encoderR > (int)((float)totravel*0.3)){
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d15e      	bne.n	8002bd0 <maintainStraightPath+0x458>
 8002b12:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <maintainStraightPath+0x59c>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b73      	cmp	r3, #115	; 0x73
 8002b1a:	d159      	bne.n	8002bd0 <maintainStraightPath+0x458>
 8002b1c:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <maintainStraightPath+0x580>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	1ad4      	subs	r4, r2, r3
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b30:	ee17 0a90 	vmov	r0, s15
 8002b34:	f7fd fd08 	bl	8000548 <__aeabi_f2d>
 8002b38:	a369      	add	r3, pc, #420	; (adr r3, 8002ce0 <maintainStraightPath+0x568>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fd5b 	bl	80005f8 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fe f805 	bl	8000b58 <__aeabi_d2iz>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	429c      	cmp	r4, r3
 8002b52:	dd3d      	ble.n	8002bd0 <maintainStraightPath+0x458>
	    		if (ratio<1.55)ratio+=0.0003;
 8002b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b56:	f7fd fcf7 	bl	8000548 <__aeabi_f2d>
 8002b5a:	a363      	add	r3, pc, #396	; (adr r3, 8002ce8 <maintainStraightPath+0x570>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd ffbc 	bl	8000adc <__aeabi_dcmplt>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00f      	beq.n	8002b8a <maintainStraightPath+0x412>
 8002b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b6c:	f7fd fcec 	bl	8000548 <__aeabi_f2d>
 8002b70:	a35f      	add	r3, pc, #380	; (adr r3, 8002cf0 <maintainStraightPath+0x578>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fb89 	bl	800028c <__adddf3>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fe f831 	bl	8000be8 <__aeabi_d2f>
 8002b86:	4603      	mov	r3, r0
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	            // Apply PWM to both motors to start moving forward
	    		pwmValL = (int)((float)(RPM_LEFT+20)*ratio); pwmValR = (int)((float)(RPM_RIGHT+50)*ratio);
 8002b8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b8e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002cfc <maintainStraightPath+0x584>
 8002b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9a:	ee17 2a90 	vmov	r2, s15
 8002b9e:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <maintainStraightPath+0x58c>)
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ba6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002d18 <maintainStraightPath+0x5a0>
 8002baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb2:	ee17 2a90 	vmov	r2, s15
 8002bb6:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <maintainStraightPath+0x594>)
 8002bb8:	601a      	str	r2, [r3, #0]
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <maintainStraightPath+0x594>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <maintainStraightPath+0x598>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <maintainStraightPath+0x58c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <maintainStraightPath+0x598>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bce:	e07a      	b.n	8002cc6 <maintainStraightPath+0x54e>
	    	}

	    	//stopping criteria for encoder
	    	else if (flag==0 && motionCommand=='s'){
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d177      	bne.n	8002cc6 <maintainStraightPath+0x54e>
 8002bd6:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <maintainStraightPath+0x59c>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b73      	cmp	r3, #115	; 0x73
 8002bde:	d172      	bne.n	8002cc6 <maintainStraightPath+0x54e>
	            while(2*encoderR<totravel-222){
 8002be0:	e069      	b.n	8002cb6 <maintainStraightPath+0x53e>
	            	ratio=0.8*(float)(totravel - 2*encoderR)/(float)totravel;
 8002be2:	4b45      	ldr	r3, [pc, #276]	; (8002cf8 <maintainStraightPath+0x580>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf4:	ee17 0a90 	vmov	r0, s15
 8002bf8:	f7fd fca6 	bl	8000548 <__aeabi_f2d>
 8002bfc:	a336      	add	r3, pc, #216	; (adr r3, 8002cd8 <maintainStraightPath+0x560>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f7fd fcf9 	bl	80005f8 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	461d      	mov	r5, r3
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c18:	ee17 0a90 	vmov	r0, s15
 8002c1c:	f7fd fc94 	bl	8000548 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fe10 	bl	800084c <__aeabi_ddiv>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ffd8 	bl	8000be8 <__aeabi_d2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	    			// Apply PWM to both motors to start moving forward
		    		pwmValL = (int)((float)(RPM_LEFT+20)*ratio+900.0); pwmValR = (int)((float)(RPM_RIGHT+50)*ratio+900.0);
 8002c3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c40:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002cfc <maintainStraightPath+0x584>
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	ee17 0a90 	vmov	r0, s15
 8002c4c:	f7fd fc7c 	bl	8000548 <__aeabi_f2d>
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <maintainStraightPath+0x588>)
 8002c56:	f7fd fb19 	bl	800028c <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ff79 	bl	8000b58 <__aeabi_d2iz>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <maintainStraightPath+0x58c>)
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c70:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002d18 <maintainStraightPath+0x5a0>
 8002c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c78:	ee17 0a90 	vmov	r0, s15
 8002c7c:	f7fd fc64 	bl	8000548 <__aeabi_f2d>
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <maintainStraightPath+0x588>)
 8002c86:	f7fd fb01 	bl	800028c <__adddf3>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd ff61 	bl	8000b58 <__aeabi_d2iz>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <maintainStraightPath+0x594>)
 8002c9a:	6013      	str	r3, [r2, #0]
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <maintainStraightPath+0x594>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <maintainStraightPath+0x598>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <maintainStraightPath+0x58c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <maintainStraightPath+0x598>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
	    			osDelay(50);
 8002cb0:	2032      	movs	r0, #50	; 0x32
 8002cb2:	f008 fbb7 	bl	800b424 <osDelay>
	            while(2*encoderR<totravel-222){
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <maintainStraightPath+0x580>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	005a      	lsls	r2, r3, #1
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3bde      	subs	r3, #222	; 0xde
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	db8e      	blt.n	8002be2 <maintainStraightPath+0x46a>
	    		}
	    		break;
 8002cc4:	e08d      	b.n	8002de2 <maintainStraightPath+0x66a>
	    	}


			//flag 1 for ultrasonic
		    //	Obstacle avoidance - Task 2 (ultrasonic)
	        if ((flag==1) && motionCommand=='w'){
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d141      	bne.n	8002d50 <maintainStraightPath+0x5d8>
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <maintainStraightPath+0x59c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b77      	cmp	r3, #119	; 0x77
 8002cd4:	d13c      	bne.n	8002d50 <maintainStraightPath+0x5d8>
	        	while (Distance > 15){
 8002cd6:	e02f      	b.n	8002d38 <maintainStraightPath+0x5c0>
 8002cd8:	9999999a 	.word	0x9999999a
 8002cdc:	3fe99999 	.word	0x3fe99999
 8002ce0:	33333333 	.word	0x33333333
 8002ce4:	3fd33333 	.word	0x3fd33333
 8002ce8:	cccccccd 	.word	0xcccccccd
 8002cec:	3ff8cccc 	.word	0x3ff8cccc
 8002cf0:	30553261 	.word	0x30553261
 8002cf4:	3f33a92a 	.word	0x3f33a92a
 8002cf8:	20000600 	.word	0x20000600
 8002cfc:	455c0000 	.word	0x455c0000
 8002d00:	408c2000 	.word	0x408c2000
 8002d04:	20000610 	.word	0x20000610
 8002d08:	455e3000 	.word	0x455e3000
 8002d0c:	20000614 	.word	0x20000614
 8002d10:	20000530 	.word	0x20000530
 8002d14:	20000204 	.word	0x20000204
 8002d18:	455de000 	.word	0x455de000
		        	if (Distance <= 25){
 8002d1c:	4bae      	ldr	r3, [pc, #696]	; (8002fd8 <maintainStraightPath+0x860>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b19      	cmp	r3, #25
 8002d22:	d809      	bhi.n	8002d38 <maintainStraightPath+0x5c0>
						__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 960); // Set PWM for motor 1 (adjust value as needed)
 8002d24:	4bad      	ldr	r3, [pc, #692]	; (8002fdc <maintainStraightPath+0x864>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 970); // Set PWM for motor 2 (adjust value as needed)
 8002d2e:	4bab      	ldr	r3, [pc, #684]	; (8002fdc <maintainStraightPath+0x864>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f240 32ca 	movw	r2, #970	; 0x3ca
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
	        	while (Distance > 15){
 8002d38:	4ba7      	ldr	r3, [pc, #668]	; (8002fd8 <maintainStraightPath+0x860>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d8ed      	bhi.n	8002d1c <maintainStraightPath+0x5a4>
		        	}
	        	}
	        	HAL_UART_Transmit(&huart3, "Bmp", 3, HAL_MAX_DELAY);
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	2203      	movs	r2, #3
 8002d46:	49a6      	ldr	r1, [pc, #664]	; (8002fe0 <maintainStraightPath+0x868>)
 8002d48:	48a6      	ldr	r0, [pc, #664]	; (8002fe4 <maintainStraightPath+0x86c>)
 8002d4a:	f007 fa30 	bl	800a1ae <HAL_UART_Transmit>
	        	break;
 8002d4e:	e048      	b.n	8002de2 <maintainStraightPath+0x66a>
	        }
	        else if ((flag==1) && motionCommand=='s'){
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d111      	bne.n	8002d7a <maintainStraightPath+0x602>
 8002d56:	4ba4      	ldr	r3, [pc, #656]	; (8002fe8 <maintainStraightPath+0x870>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b73      	cmp	r3, #115	; 0x73
 8002d5e:	d10c      	bne.n	8002d7a <maintainStraightPath+0x602>
	        	while (Distance < 25){}	// Before is 33
 8002d60:	bf00      	nop
 8002d62:	4b9d      	ldr	r3, [pc, #628]	; (8002fd8 <maintainStraightPath+0x860>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b18      	cmp	r3, #24
 8002d68:	d9fb      	bls.n	8002d62 <maintainStraightPath+0x5ea>
	        	HAL_UART_Transmit(&huart3, "Bmp", 3, HAL_MAX_DELAY);
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	2203      	movs	r2, #3
 8002d70:	499b      	ldr	r1, [pc, #620]	; (8002fe0 <maintainStraightPath+0x868>)
 8002d72:	489c      	ldr	r0, [pc, #624]	; (8002fe4 <maintainStraightPath+0x86c>)
 8002d74:	f007 fa1b 	bl	800a1ae <HAL_UART_Transmit>
	        	break;
 8002d78:	e033      	b.n	8002de2 <maintainStraightPath+0x66a>
	        }

	        //flag 2 for IR
	        else if ((flag==2) && motionCommand=='w' && ((ir_left < 9000)&&(ir_right < 9000))){
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d11a      	bne.n	8002db6 <maintainStraightPath+0x63e>
 8002d80:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <maintainStraightPath+0x870>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b77      	cmp	r3, #119	; 0x77
 8002d88:	d115      	bne.n	8002db6 <maintainStraightPath+0x63e>
 8002d8a:	4b98      	ldr	r3, [pc, #608]	; (8002fec <maintainStraightPath+0x874>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f242 3227 	movw	r2, #8999	; 0x2327
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d80e      	bhi.n	8002db6 <maintainStraightPath+0x63e>
 8002d98:	4b95      	ldr	r3, [pc, #596]	; (8002ff0 <maintainStraightPath+0x878>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	f242 3227 	movw	r2, #8999	; 0x2327
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d807      	bhi.n	8002db6 <maintainStraightPath+0x63e>
			HAL_UART_Transmit(&huart3, "Bmp", 3, HAL_MAX_DELAY);
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	2203      	movs	r2, #3
 8002dac:	498c      	ldr	r1, [pc, #560]	; (8002fe0 <maintainStraightPath+0x868>)
 8002dae:	488d      	ldr	r0, [pc, #564]	; (8002fe4 <maintainStraightPath+0x86c>)
 8002db0:	f007 f9fd 	bl	800a1ae <HAL_UART_Transmit>
			break;
 8002db4:	e015      	b.n	8002de2 <maintainStraightPath+0x66a>
	        }

	        //flag 3 for carpark
	        else if ((flag==3) && motionCommand=='w' && (Distance < 20)){
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	f47f ad56 	bne.w	800286a <maintainStraightPath+0xf2>
 8002dbe:	4b8a      	ldr	r3, [pc, #552]	; (8002fe8 <maintainStraightPath+0x870>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b77      	cmp	r3, #119	; 0x77
 8002dc6:	f47f ad50 	bne.w	800286a <maintainStraightPath+0xf2>
 8002dca:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <maintainStraightPath+0x860>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b13      	cmp	r3, #19
 8002dd0:	f63f ad4b 	bhi.w	800286a <maintainStraightPath+0xf2>
			HAL_UART_Transmit(&huart3, "Bmp", 3, HAL_MAX_DELAY);
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4981      	ldr	r1, [pc, #516]	; (8002fe0 <maintainStraightPath+0x868>)
 8002ddc:	4881      	ldr	r0, [pc, #516]	; (8002fe4 <maintainStraightPath+0x86c>)
 8002dde:	f007 f9e6 	bl	800a1ae <HAL_UART_Transmit>
			break;
	        }
	    }
	}
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8002de2:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <maintainStraightPath+0x864>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8002dea:	4b7c      	ldr	r3, [pc, #496]	; (8002fdc <maintainStraightPath+0x864>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR4 = 141;
 8002df2:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <maintainStraightPath+0x87c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	228d      	movs	r2, #141	; 0x8d
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200); osDelay(200);
 8002dfa:	20c8      	movs	r0, #200	; 0xc8
 8002dfc:	f002 fabc 	bl	8005378 <HAL_Delay>
 8002e00:	20c8      	movs	r0, #200	; 0xc8
 8002e02:	f008 fb0f 	bl	800b424 <osDelay>

	    //update xcm and ycm
    switch(headingint){
 8002e06:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <maintainStraightPath+0x880>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	f000 80fe 	beq.w	800300c <maintainStraightPath+0x894>
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f300 816b 	bgt.w	80030ec <maintainStraightPath+0x974>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <maintainStraightPath+0x6a8>
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d06b      	beq.n	8002ef6 <maintainStraightPath+0x77e>
 8002e1e:	e165      	b.n	80030ec <maintainStraightPath+0x974>
    case 0:
    	//forwards
    	if (motionCommand=='w') ycm += (float)(2*encoderR)/1550.0*21.0;
 8002e20:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <maintainStraightPath+0x870>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b77      	cmp	r3, #119	; 0x77
 8002e28:	d12f      	bne.n	8002e8a <maintainStraightPath+0x712>
 8002e2a:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <maintainStraightPath+0x884>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb8a 	bl	8000548 <__aeabi_f2d>
 8002e34:	4604      	mov	r4, r0
 8002e36:	460d      	mov	r5, r1
 8002e38:	4b71      	ldr	r3, [pc, #452]	; (8003000 <maintainStraightPath+0x888>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e46:	ee17 0a90 	vmov	r0, s15
 8002e4a:	f7fd fb7d 	bl	8000548 <__aeabi_f2d>
 8002e4e:	a360      	add	r3, pc, #384	; (adr r3, 8002fd0 <maintainStraightPath+0x858>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fcfa 	bl	800084c <__aeabi_ddiv>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b67      	ldr	r3, [pc, #412]	; (8003004 <maintainStraightPath+0x88c>)
 8002e66:	f7fd fbc7 	bl	80005f8 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd fa0b 	bl	800028c <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd feb3 	bl	8000be8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <maintainStraightPath+0x884>)
 8002e86:	6013      	str	r3, [r2, #0]
    	else if (motionCommand=='s') ycm -= (float)(2*encoderR)/1550.0*21.0;
    	break;
 8002e88:	e19a      	b.n	80031c0 <maintainStraightPath+0xa48>
    	else if (motionCommand=='s') ycm -= (float)(2*encoderR)/1550.0*21.0;
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <maintainStraightPath+0x870>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b73      	cmp	r3, #115	; 0x73
 8002e92:	f040 8195 	bne.w	80031c0 <maintainStraightPath+0xa48>
 8002e96:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <maintainStraightPath+0x884>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb54 	bl	8000548 <__aeabi_f2d>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	4b56      	ldr	r3, [pc, #344]	; (8003000 <maintainStraightPath+0x888>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb2:	ee17 0a90 	vmov	r0, s15
 8002eb6:	f7fd fb47 	bl	8000548 <__aeabi_f2d>
 8002eba:	a345      	add	r3, pc, #276	; (adr r3, 8002fd0 <maintainStraightPath+0x858>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd fcc4 	bl	800084c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <maintainStraightPath+0x88c>)
 8002ed2:	f7fd fb91 	bl	80005f8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f9d3 	bl	8000288 <__aeabi_dsub>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe7d 	bl	8000be8 <__aeabi_d2f>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <maintainStraightPath+0x884>)
 8002ef2:	6013      	str	r3, [r2, #0]
    	break;
 8002ef4:	e164      	b.n	80031c0 <maintainStraightPath+0xa48>
    case 1:
    	//right
    	if (motionCommand=='w') xcm += (float)(2*encoderR)/1550.0*21.0;
 8002ef6:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <maintainStraightPath+0x870>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b77      	cmp	r3, #119	; 0x77
 8002efe:	d12f      	bne.n	8002f60 <maintainStraightPath+0x7e8>
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <maintainStraightPath+0x890>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fb1f 	bl	8000548 <__aeabi_f2d>
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	460d      	mov	r5, r1
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <maintainStraightPath+0x888>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	ee17 0a90 	vmov	r0, s15
 8002f20:	f7fd fb12 	bl	8000548 <__aeabi_f2d>
 8002f24:	a32a      	add	r3, pc, #168	; (adr r3, 8002fd0 <maintainStraightPath+0x858>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f7fd fc8f 	bl	800084c <__aeabi_ddiv>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <maintainStraightPath+0x88c>)
 8002f3c:	f7fd fb5c 	bl	80005f8 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f9a0 	bl	800028c <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7fd fe48 	bl	8000be8 <__aeabi_d2f>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <maintainStraightPath+0x890>)
 8002f5c:	6013      	str	r3, [r2, #0]
    	else if (motionCommand=='s') xcm -= (float)(2*encoderR)/1550.0*21.0;
    	break;
 8002f5e:	e131      	b.n	80031c4 <maintainStraightPath+0xa4c>
    	else if (motionCommand=='s') xcm -= (float)(2*encoderR)/1550.0*21.0;
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <maintainStraightPath+0x870>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b73      	cmp	r3, #115	; 0x73
 8002f68:	f040 812c 	bne.w	80031c4 <maintainStraightPath+0xa4c>
 8002f6c:	4b26      	ldr	r3, [pc, #152]	; (8003008 <maintainStraightPath+0x890>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fae9 	bl	8000548 <__aeabi_f2d>
 8002f76:	4604      	mov	r4, r0
 8002f78:	460d      	mov	r5, r1
 8002f7a:	4b21      	ldr	r3, [pc, #132]	; (8003000 <maintainStraightPath+0x888>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f88:	ee17 0a90 	vmov	r0, s15
 8002f8c:	f7fd fadc 	bl	8000548 <__aeabi_f2d>
 8002f90:	a30f      	add	r3, pc, #60	; (adr r3, 8002fd0 <maintainStraightPath+0x858>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fc59 	bl	800084c <__aeabi_ddiv>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <maintainStraightPath+0x88c>)
 8002fa8:	f7fd fb26 	bl	80005f8 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	f7fd f968 	bl	8000288 <__aeabi_dsub>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f7fd fe12 	bl	8000be8 <__aeabi_d2f>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <maintainStraightPath+0x890>)
 8002fc8:	6013      	str	r3, [r2, #0]
    	break;
 8002fca:	e0fb      	b.n	80031c4 <maintainStraightPath+0xa4c>
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	40983800 	.word	0x40983800
 8002fd8:	200005f8 	.word	0x200005f8
 8002fdc:	20000530 	.word	0x20000530
 8002fe0:	08011914 	.word	0x08011914
 8002fe4:	20000578 	.word	0x20000578
 8002fe8:	20000204 	.word	0x20000204
 8002fec:	20000650 	.word	0x20000650
 8002ff0:	20000652 	.word	0x20000652
 8002ff4:	200003c8 	.word	0x200003c8
 8002ff8:	2000060c 	.word	0x2000060c
 8002ffc:	20000608 	.word	0x20000608
 8003000:	20000600 	.word	0x20000600
 8003004:	40350000 	.word	0x40350000
 8003008:	20000604 	.word	0x20000604
    case 2:
    	//backwards
    	if (motionCommand=='w' || motionCommand=='A') ycm -= (float)(2*encoderR)/1550.0*21.0;
 800300c:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <maintainStraightPath+0xa68>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b77      	cmp	r3, #119	; 0x77
 8003014:	d004      	beq.n	8003020 <maintainStraightPath+0x8a8>
 8003016:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <maintainStraightPath+0xa68>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b41      	cmp	r3, #65	; 0x41
 800301e:	d12f      	bne.n	8003080 <maintainStraightPath+0x908>
 8003020:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <maintainStraightPath+0xa6c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fa8f 	bl	8000548 <__aeabi_f2d>
 800302a:	4604      	mov	r4, r0
 800302c:	460d      	mov	r5, r1
 800302e:	4b6e      	ldr	r3, [pc, #440]	; (80031e8 <maintainStraightPath+0xa70>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303c:	ee17 0a90 	vmov	r0, s15
 8003040:	f7fd fa82 	bl	8000548 <__aeabi_f2d>
 8003044:	a364      	add	r3, pc, #400	; (adr r3, 80031d8 <maintainStraightPath+0xa60>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd fbff 	bl	800084c <__aeabi_ddiv>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	4b64      	ldr	r3, [pc, #400]	; (80031ec <maintainStraightPath+0xa74>)
 800305c:	f7fd facc 	bl	80005f8 <__aeabi_dmul>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f7fd f90e 	bl	8000288 <__aeabi_dsub>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f7fd fdb8 	bl	8000be8 <__aeabi_d2f>
 8003078:	4603      	mov	r3, r0
 800307a:	4a5a      	ldr	r2, [pc, #360]	; (80031e4 <maintainStraightPath+0xa6c>)
 800307c:	6013      	str	r3, [r2, #0]
    	else if (motionCommand=='s') ycm += (float)(2*encoderR)/1550.0*21.0;
    	break;
 800307e:	e0a3      	b.n	80031c8 <maintainStraightPath+0xa50>
    	else if (motionCommand=='s') ycm += (float)(2*encoderR)/1550.0*21.0;
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <maintainStraightPath+0xa68>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b73      	cmp	r3, #115	; 0x73
 8003088:	f040 809e 	bne.w	80031c8 <maintainStraightPath+0xa50>
 800308c:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <maintainStraightPath+0xa6c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fa59 	bl	8000548 <__aeabi_f2d>
 8003096:	4604      	mov	r4, r0
 8003098:	460d      	mov	r5, r1
 800309a:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <maintainStraightPath+0xa70>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a8:	ee17 0a90 	vmov	r0, s15
 80030ac:	f7fd fa4c 	bl	8000548 <__aeabi_f2d>
 80030b0:	a349      	add	r3, pc, #292	; (adr r3, 80031d8 <maintainStraightPath+0xa60>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd fbc9 	bl	800084c <__aeabi_ddiv>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	4b49      	ldr	r3, [pc, #292]	; (80031ec <maintainStraightPath+0xa74>)
 80030c8:	f7fd fa96 	bl	80005f8 <__aeabi_dmul>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4620      	mov	r0, r4
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7fd f8da 	bl	800028c <__adddf3>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd82 	bl	8000be8 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <maintainStraightPath+0xa6c>)
 80030e8:	6013      	str	r3, [r2, #0]
    	break;
 80030ea:	e06d      	b.n	80031c8 <maintainStraightPath+0xa50>
    default:
    	//left
    	if (motionCommand=='w') xcm -= (float)(2*encoderR)/1550.0*21.0;
 80030ec:	4b3c      	ldr	r3, [pc, #240]	; (80031e0 <maintainStraightPath+0xa68>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b77      	cmp	r3, #119	; 0x77
 80030f4:	d12f      	bne.n	8003156 <maintainStraightPath+0x9de>
 80030f6:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <maintainStraightPath+0xa78>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fa24 	bl	8000548 <__aeabi_f2d>
 8003100:	4604      	mov	r4, r0
 8003102:	460d      	mov	r5, r1
 8003104:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <maintainStraightPath+0xa70>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003112:	ee17 0a90 	vmov	r0, s15
 8003116:	f7fd fa17 	bl	8000548 <__aeabi_f2d>
 800311a:	a32f      	add	r3, pc, #188	; (adr r3, 80031d8 <maintainStraightPath+0xa60>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f7fd fb94 	bl	800084c <__aeabi_ddiv>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <maintainStraightPath+0xa74>)
 8003132:	f7fd fa61 	bl	80005f8 <__aeabi_dmul>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4620      	mov	r0, r4
 800313c:	4629      	mov	r1, r5
 800313e:	f7fd f8a3 	bl	8000288 <__aeabi_dsub>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f7fd fd4d 	bl	8000be8 <__aeabi_d2f>
 800314e:	4603      	mov	r3, r0
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <maintainStraightPath+0xa78>)
 8003152:	6013      	str	r3, [r2, #0]
    	else if (motionCommand=='s') xcm += (float)(2*encoderR)/1550.0*21.0;
    	break;
 8003154:	e03a      	b.n	80031cc <maintainStraightPath+0xa54>
    	else if (motionCommand=='s') xcm += (float)(2*encoderR)/1550.0*21.0;
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <maintainStraightPath+0xa68>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b73      	cmp	r3, #115	; 0x73
 800315e:	d135      	bne.n	80031cc <maintainStraightPath+0xa54>
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <maintainStraightPath+0xa78>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9ef 	bl	8000548 <__aeabi_f2d>
 800316a:	4604      	mov	r4, r0
 800316c:	460d      	mov	r5, r1
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <maintainStraightPath+0xa70>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317c:	ee17 0a90 	vmov	r0, s15
 8003180:	f7fd f9e2 	bl	8000548 <__aeabi_f2d>
 8003184:	a314      	add	r3, pc, #80	; (adr r3, 80031d8 <maintainStraightPath+0xa60>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fb5f 	bl	800084c <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <maintainStraightPath+0xa74>)
 800319c:	f7fd fa2c 	bl	80005f8 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4620      	mov	r0, r4
 80031a6:	4629      	mov	r1, r5
 80031a8:	f7fd f870 	bl	800028c <__adddf3>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	f7fd fd18 	bl	8000be8 <__aeabi_d2f>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <maintainStraightPath+0xa78>)
 80031bc:	6013      	str	r3, [r2, #0]
    	break;
 80031be:	e005      	b.n	80031cc <maintainStraightPath+0xa54>
    	break;
 80031c0:	bf00      	nop
 80031c2:	e004      	b.n	80031ce <maintainStraightPath+0xa56>
    	break;
 80031c4:	bf00      	nop
 80031c6:	e002      	b.n	80031ce <maintainStraightPath+0xa56>
    	break;
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <maintainStraightPath+0xa56>
    	break;
 80031cc:	bf00      	nop
    }

    return;
 80031ce:	bf00      	nop
}
 80031d0:	3730      	adds	r7, #48	; 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdb0      	pop	{r4, r5, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40983800 	.word	0x40983800
 80031e0:	20000204 	.word	0x20000204
 80031e4:	20000608 	.word	0x20000608
 80031e8:	20000600 	.word	0x20000600
 80031ec:	40350000 	.word	0x40350000
 80031f0:	20000604 	.word	0x20000604
 80031f4:	00000000 	.word	0x00000000

080031f8 <adjustServoToCenter>:

float adjustServoToCenter(float currentAngle, float targetAngle) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003202:	edc7 0a00 	vstr	s1, [r7]
    float error = currentAngle - targetAngle; // Calculate error
 8003206:	ed97 7a01 	vldr	s14, [r7, #4]
 800320a:	edd7 7a00 	vldr	s15, [r7]
 800320e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003212:	edc7 7a03 	vstr	s15, [r7, #12]
    if (fabs(error)<0.1){
 8003216:	edd7 7a03 	vldr	s15, [r7, #12]
 800321a:	eef0 7ae7 	vabs.f32	s15, s15
 800321e:	ee17 0a90 	vmov	r0, s15
 8003222:	f7fd f991 	bl	8000548 <__aeabi_f2d>
 8003226:	a30a      	add	r3, pc, #40	; (adr r3, 8003250 <adjustServoToCenter+0x58>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fd fc56 	bl	8000adc <__aeabi_dcmplt>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <adjustServoToCenter+0x44>
    	error=0;
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
    }

	return error;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	ee07 3a90 	vmov	s15, r3
}
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	f3af 8000 	nop.w
 8003250:	9999999a 	.word	0x9999999a
 8003254:	3fb99999 	.word	0x3fb99999

08003258 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003260:	2001      	movs	r0, #1
 8003262:	f008 f8df 	bl	800b424 <osDelay>
 8003266:	e7fb      	b.n	8003260 <StartDefaultTask+0x8>

08003268 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // servo motor
 8003270:	210c      	movs	r1, #12
 8003272:	4899      	ldr	r0, [pc, #612]	; (80034d8 <motor+0x270>)
 8003274:	f005 fb24 	bl	80088c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // start up motor 1
 8003278:	2100      	movs	r1, #0
 800327a:	4898      	ldr	r0, [pc, #608]	; (80034dc <motor+0x274>)
 800327c:	f005 fb20 	bl	80088c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // start up motor 2
 8003280:	2104      	movs	r1, #4
 8003282:	4896      	ldr	r0, [pc, #600]	; (80034dc <motor+0x274>)
 8003284:	f005 fb1c 	bl	80088c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = 141;
 8003288:	4b93      	ldr	r3, [pc, #588]	; (80034d8 <motor+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	228d      	movs	r2, #141	; 0x8d
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

	int initialPwmValue = 500;  // Example initial PWM value, adjust as needed
 8003290:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003294:	623b      	str	r3, [r7, #32]
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, 5);
 8003296:	2205      	movs	r2, #5
 8003298:	4991      	ldr	r1, [pc, #580]	; (80034e0 <motor+0x278>)
 800329a:	4892      	ldr	r0, [pc, #584]	; (80034e4 <motor+0x27c>)
 800329c:	f007 f819 	bl	800a2d2 <HAL_UART_Receive_IT>
	 // Set initial PWM value for a smooth start
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, initialPwmValue);  // Apply to Motor 1
 80032a0:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <motor+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, initialPwmValue);  // Apply to Motor 2
 80032a8:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <motor+0x274>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t *status = IMU_Initialise(&imu,&hi2c1,&huart3);
 80032b0:	4a8c      	ldr	r2, [pc, #560]	; (80034e4 <motor+0x27c>)
 80032b2:	498d      	ldr	r1, [pc, #564]	; (80034e8 <motor+0x280>)
 80032b4:	488d      	ldr	r0, [pc, #564]	; (80034ec <motor+0x284>)
 80032b6:	f7fe fd6d 	bl	8001d94 <IMU_Initialise>
 80032ba:	61f8      	str	r0, [r7, #28]
	uint8_t uartbuf [20];

	int initialCount = encoderL + encoderR;
 80032bc:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <motor+0x288>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <motor+0x28c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24

	//  /* Infinite loop */
	 for (;;) {
				  if (commandReceivedFlag) {
 80032c8:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <motor+0x290>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 870a 	beq.w	80040e8 <motor+0xe80>
					  encoderL = 0;
 80032d4:	4b86      	ldr	r3, [pc, #536]	; (80034f0 <motor+0x288>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
					  encoderR = 0;
 80032da:	4b86      	ldr	r3, [pc, #536]	; (80034f4 <motor+0x28c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
					commandReceivedFlag = 0; // Clear the flag
 80032e0:	4b85      	ldr	r3, [pc, #532]	; (80034f8 <motor+0x290>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
		            switch (motionCommand) {
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <motor+0x294>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b41      	cmp	r3, #65	; 0x41
 80032ee:	f000 82ab 	beq.w	8003848 <motor+0x5e0>
 80032f2:	2b41      	cmp	r3, #65	; 0x41
 80032f4:	f2c0 86e8 	blt.w	80040c8 <motor+0xe60>
 80032f8:	2b77      	cmp	r3, #119	; 0x77
 80032fa:	f300 86e5 	bgt.w	80040c8 <motor+0xe60>
 80032fe:	2b62      	cmp	r3, #98	; 0x62
 8003300:	f2c0 86e2 	blt.w	80040c8 <motor+0xe60>
 8003304:	3b62      	subs	r3, #98	; 0x62
 8003306:	2b15      	cmp	r3, #21
 8003308:	f200 86de 	bhi.w	80040c8 <motor+0xe60>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <motor+0xac>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	0800377b 	.word	0x0800377b
 8003318:	080040c9 	.word	0x080040c9
 800331c:	080040c9 	.word	0x080040c9
 8003320:	080040c9 	.word	0x080040c9
 8003324:	080036df 	.word	0x080036df
 8003328:	080040c9 	.word	0x080040c9
 800332c:	080040c9 	.word	0x080040c9
 8003330:	080040c9 	.word	0x080040c9
 8003334:	080040c9 	.word	0x080040c9
 8003338:	080040c9 	.word	0x080040c9
 800333c:	080040c9 	.word	0x080040c9
 8003340:	080040c9 	.word	0x080040c9
 8003344:	080040c9 	.word	0x080040c9
 8003348:	080040c9 	.word	0x080040c9
 800334c:	080040c9 	.word	0x080040c9
 8003350:	080040c9 	.word	0x080040c9
 8003354:	080040c9 	.word	0x080040c9
 8003358:	0800336d 	.word	0x0800336d
 800335c:	080036a1 	.word	0x080036a1
 8003360:	080040c9 	.word	0x080040c9
 8003364:	080040c9 	.word	0x080040c9
 8003368:	0800351d 	.word	0x0800351d
		            	case 's':
		                	// check dirCommand
		                	htim1.Instance->CCR4 = 141; // Center
 800336c:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <motor+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	228d      	movs	r2, #141	; 0x8d
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
		                	osDelay(500);
 8003374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003378:	f008 f854 	bl	800b424 <osDelay>

		            		// Set motor direction to backward
							// Setting GPIO Pins
		            		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 800337c:	2201      	movs	r2, #1
 800337e:	2108      	movs	r1, #8
 8003380:	485f      	ldr	r0, [pc, #380]	; (8003500 <motor+0x298>)
 8003382:	f003 fad7 	bl	8006934 <HAL_GPIO_WritePin>
		            		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	485d      	ldr	r0, [pc, #372]	; (8003500 <motor+0x298>)
 800338c:	f003 fad2 	bl	8006934 <HAL_GPIO_WritePin>
		            		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 8003390:	2201      	movs	r2, #1
 8003392:	2110      	movs	r1, #16
 8003394:	485a      	ldr	r0, [pc, #360]	; (8003500 <motor+0x298>)
 8003396:	f003 facd 	bl	8006934 <HAL_GPIO_WritePin>
		            		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 800339a:	2200      	movs	r2, #0
 800339c:	2120      	movs	r1, #32
 800339e:	4858      	ldr	r0, [pc, #352]	; (8003500 <motor+0x298>)
 80033a0:	f003 fac8 	bl	8006934 <HAL_GPIO_WritePin>

		            		// Apply PWM to both motors to start moving backward
		            		if (dirCommand=='x'){
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <motor+0x29c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b78      	cmp	r3, #120	; 0x78
 80033ac:	d119      	bne.n	80033e2 <motor+0x17a>
		            			pwmValL = (RPM_LEFT+315)*0.1; pwmValR = (RPM_RIGHT+35)*0.1;
 80033ae:	4b56      	ldr	r3, [pc, #344]	; (8003508 <motor+0x2a0>)
 80033b0:	f240 127d 	movw	r2, #381	; 0x17d
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	4b55      	ldr	r3, [pc, #340]	; (800350c <motor+0x2a4>)
 80033b8:	f240 1261 	movw	r2, #353	; 0x161
 80033bc:	601a      	str	r2, [r3, #0]
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <motor+0x2a4>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b46      	ldr	r3, [pc, #280]	; (80034dc <motor+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	635a      	str	r2, [r3, #52]	; 0x34
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80033c8:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <motor+0x2a0>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b43      	ldr	r3, [pc, #268]	; (80034dc <motor+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
		            			maintainStraightPath(distCommand,0);
 80033d2:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <motor+0x2a8>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff f9cc 	bl	8002778 <maintainStraightPath>
 80033e0:	e05f      	b.n	80034a2 <motor+0x23a>
							}
		            		//lets set the ultrasonic to stop at >33cm away from the obstacle
							else if (dirCommand=='z' && Distance<25){
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <motor+0x29c>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b7a      	cmp	r3, #122	; 0x7a
 80033ea:	d11d      	bne.n	8003428 <motor+0x1c0>
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <motor+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b18      	cmp	r3, #24
 80033f2:	d819      	bhi.n	8003428 <motor+0x1c0>
								pwmValL = 2000; pwmValR = 2024;
 80033f4:	4b44      	ldr	r3, [pc, #272]	; (8003508 <motor+0x2a0>)
 80033f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	4b43      	ldr	r3, [pc, #268]	; (800350c <motor+0x2a4>)
 80033fe:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8003402:	601a      	str	r2, [r3, #0]
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003404:	4b41      	ldr	r3, [pc, #260]	; (800350c <motor+0x2a4>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <motor+0x274>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	635a      	str	r2, [r3, #52]	; 0x34
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <motor+0x2a0>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b32      	ldr	r3, [pc, #200]	; (80034dc <motor+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(distCommand,1);
 8003418:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <motor+0x2a8>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff f9a9 	bl	8002778 <maintainStraightPath>
 8003426:	e03c      	b.n	80034a2 <motor+0x23a>
							}
							else if (dirCommand=='i'){
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <motor+0x29c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b69      	cmp	r3, #105	; 0x69
 8003430:	d119      	bne.n	8003466 <motor+0x1fe>
		            			pwmValL = RPM_LEFT+140; pwmValR = RPM_RIGHT-109;
 8003432:	4b35      	ldr	r3, [pc, #212]	; (8003508 <motor+0x2a0>)
 8003434:	f640 6238 	movw	r2, #3640	; 0xe38
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <motor+0x2a4>)
 800343c:	f640 523f 	movw	r2, #3391	; 0xd3f
 8003440:	601a      	str	r2, [r3, #0]
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003442:	4b32      	ldr	r3, [pc, #200]	; (800350c <motor+0x2a4>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b25      	ldr	r3, [pc, #148]	; (80034dc <motor+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	635a      	str	r2, [r3, #52]	; 0x34
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <motor+0x2a0>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <motor+0x274>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(distCommand,2);
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <motor+0x2a8>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f98a 	bl	8002778 <maintainStraightPath>
 8003464:	e01d      	b.n	80034a2 <motor+0x23a>
							}
							else if (dirCommand=='e'){
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <motor+0x29c>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b65      	cmp	r3, #101	; 0x65
 800346e:	d118      	bne.n	80034a2 <motor+0x23a>
		            			pwmValL = RPM_LEFT+140; pwmValR = RPM_RIGHT-109;
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <motor+0x2a0>)
 8003472:	f640 6238 	movw	r2, #3640	; 0xe38
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <motor+0x2a4>)
 800347a:	f640 523f 	movw	r2, #3391	; 0xd3f
 800347e:	601a      	str	r2, [r3, #0]
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <motor+0x2a4>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <motor+0x274>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	635a      	str	r2, [r3, #52]	; 0x34
			            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 800348a:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <motor+0x2a0>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <motor+0x274>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(distCommand,3);
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <motor+0x2a8>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2103      	movs	r1, #3
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f96b 	bl	8002778 <maintainStraightPath>
							}

		                	// Motor Stop
		                	// Apply PWM to both motors to stop moving
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <motor+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <motor+0x274>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
	            			pwmValL = 0; pwmValR = 0;
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <motor+0x2a0>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <motor+0x2a4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
							 HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	2203      	movs	r2, #3
 80034c4:	4914      	ldr	r1, [pc, #80]	; (8003518 <motor+0x2b0>)
 80034c6:	4807      	ldr	r0, [pc, #28]	; (80034e4 <motor+0x27c>)
 80034c8:	f006 fe71 	bl	800a1ae <HAL_UART_Transmit>
							 HAL_Delay(100);
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	f001 ff53 	bl	8005378 <HAL_Delay>
							break;
 80034d2:	f000 be09 	b.w	80040e8 <motor+0xe80>
 80034d6:	bf00      	nop
 80034d8:	200003c8 	.word	0x200003c8
 80034dc:	20000530 	.word	0x20000530
 80034e0:	200005d4 	.word	0x200005d4
 80034e4:	20000578 	.word	0x20000578
 80034e8:	20000218 	.word	0x20000218
 80034ec:	20000208 	.word	0x20000208
 80034f0:	200005fc 	.word	0x200005fc
 80034f4:	20000600 	.word	0x20000600
 80034f8:	20000207 	.word	0x20000207
 80034fc:	20000204 	.word	0x20000204
 8003500:	40020000 	.word	0x40020000
 8003504:	20000205 	.word	0x20000205
 8003508:	20000610 	.word	0x20000610
 800350c:	20000614 	.word	0x20000614
 8003510:	20000206 	.word	0x20000206
 8003514:	200005f8 	.word	0x200005f8
 8003518:	08011918 	.word	0x08011918
		                case 'w':
		                	// check dirCommand
		                	htim1.Instance->CCR4 = 141; // Center
 800351c:	4ba5      	ldr	r3, [pc, #660]	; (80037b4 <motor+0x54c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	228d      	movs	r2, #141	; 0x8d
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
		                	osDelay(500);
 8003524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003528:	f007 ff7c 	bl	800b424 <osDelay>

		                	// Set motor direction to forward
							// Setting GPIO Pins
		                    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 800352c:	2200      	movs	r2, #0
 800352e:	2108      	movs	r1, #8
 8003530:	48a1      	ldr	r0, [pc, #644]	; (80037b8 <motor+0x550>)
 8003532:	f003 f9ff 	bl	8006934 <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8003536:	2201      	movs	r2, #1
 8003538:	2104      	movs	r1, #4
 800353a:	489f      	ldr	r0, [pc, #636]	; (80037b8 <motor+0x550>)
 800353c:	f003 f9fa 	bl	8006934 <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8003540:	2200      	movs	r2, #0
 8003542:	2110      	movs	r1, #16
 8003544:	489c      	ldr	r0, [pc, #624]	; (80037b8 <motor+0x550>)
 8003546:	f003 f9f5 	bl	8006934 <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 800354a:	2201      	movs	r2, #1
 800354c:	2120      	movs	r1, #32
 800354e:	489a      	ldr	r0, [pc, #616]	; (80037b8 <motor+0x550>)
 8003550:	f003 f9f0 	bl	8006934 <HAL_GPIO_WritePin>

		                    // Apply PWM to both motors to start moving forward
		            		if (dirCommand=='x'){
 8003554:	4b99      	ldr	r3, [pc, #612]	; (80037bc <motor+0x554>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b78      	cmp	r3, #120	; 0x78
 800355c:	d119      	bne.n	8003592 <motor+0x32a>
		            			pwmValL = (RPM_LEFT+25)*0.1; pwmValR = (RPM_RIGHT+70)*0.1;
 800355e:	4b98      	ldr	r3, [pc, #608]	; (80037c0 <motor+0x558>)
 8003560:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	4b97      	ldr	r3, [pc, #604]	; (80037c4 <motor+0x55c>)
 8003568:	f240 1265 	movw	r2, #357	; 0x165
 800356c:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 800356e:	4b95      	ldr	r3, [pc, #596]	; (80037c4 <motor+0x55c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b95      	ldr	r3, [pc, #596]	; (80037c8 <motor+0x560>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003578:	4b91      	ldr	r3, [pc, #580]	; (80037c0 <motor+0x558>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b92      	ldr	r3, [pc, #584]	; (80037c8 <motor+0x560>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
		            			maintainStraightPath(distCommand,0);
 8003582:	4b92      	ldr	r3, [pc, #584]	; (80037cc <motor+0x564>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f8f4 	bl	8002778 <maintainStraightPath>
 8003590:	e06c      	b.n	800366c <motor+0x404>
							}
		            		//lets set the ultrasonic to stop at <15cm away from the obstacle
							else if (dirCommand=='z' && Distance>15){
 8003592:	4b8a      	ldr	r3, [pc, #552]	; (80037bc <motor+0x554>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b7a      	cmp	r3, #122	; 0x7a
 800359a:	d12a      	bne.n	80035f2 <motor+0x38a>
 800359c:	4b8c      	ldr	r3, [pc, #560]	; (80037d0 <motor+0x568>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d926      	bls.n	80035f2 <motor+0x38a>
		            			if (Distance>25){pwmValL = RPM_LEFT+30; pwmValR = RPM_RIGHT+50;}
 80035a4:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <motor+0x568>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b19      	cmp	r3, #25
 80035aa:	d908      	bls.n	80035be <motor+0x356>
 80035ac:	4b84      	ldr	r3, [pc, #528]	; (80037c0 <motor+0x558>)
 80035ae:	f640 52ca 	movw	r2, #3530	; 0xdca
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	4b83      	ldr	r3, [pc, #524]	; (80037c4 <motor+0x55c>)
 80035b6:	f640 52de 	movw	r2, #3550	; 0xdde
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e007      	b.n	80035ce <motor+0x366>
		            			else {pwmValL = 970; pwmValR = 960;}
 80035be:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <motor+0x558>)
 80035c0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <motor+0x55c>)
 80035c8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80035cc:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80035ce:	4b7d      	ldr	r3, [pc, #500]	; (80037c4 <motor+0x55c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b7d      	ldr	r3, [pc, #500]	; (80037c8 <motor+0x560>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80035d8:	4b79      	ldr	r3, [pc, #484]	; (80037c0 <motor+0x558>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b7a      	ldr	r3, [pc, #488]	; (80037c8 <motor+0x560>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(distCommand,1);
 80035e2:	4b7a      	ldr	r3, [pc, #488]	; (80037cc <motor+0x564>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f8c4 	bl	8002778 <maintainStraightPath>
 80035f0:	e03c      	b.n	800366c <motor+0x404>
							}
							else if (dirCommand=='i'){
 80035f2:	4b72      	ldr	r3, [pc, #456]	; (80037bc <motor+0x554>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b69      	cmp	r3, #105	; 0x69
 80035fa:	d119      	bne.n	8003630 <motor+0x3c8>
		            			pwmValL = RPM_LEFT+30-2000; pwmValR = RPM_RIGHT+50-2000;
 80035fc:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <motor+0x558>)
 80035fe:	f240 52fa 	movw	r2, #1530	; 0x5fa
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4b6f      	ldr	r3, [pc, #444]	; (80037c4 <motor+0x55c>)
 8003606:	f240 620e 	movw	r2, #1550	; 0x60e
 800360a:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 800360c:	4b6d      	ldr	r3, [pc, #436]	; (80037c4 <motor+0x55c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <motor+0x560>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <motor+0x558>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b6b      	ldr	r3, [pc, #428]	; (80037c8 <motor+0x560>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(distCommand,2);
 8003620:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <motor+0x564>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff f8a5 	bl	8002778 <maintainStraightPath>
 800362e:	e01d      	b.n	800366c <motor+0x404>
							}
							else if (dirCommand=='e'){
 8003630:	4b62      	ldr	r3, [pc, #392]	; (80037bc <motor+0x554>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b65      	cmp	r3, #101	; 0x65
 8003638:	d118      	bne.n	800366c <motor+0x404>
		            			pwmValL = RPM_LEFT+30; pwmValR = RPM_RIGHT+50;
 800363a:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <motor+0x558>)
 800363c:	f640 52ca 	movw	r2, #3530	; 0xdca
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <motor+0x55c>)
 8003644:	f640 52de 	movw	r2, #3550	; 0xdde
 8003648:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 800364a:	4b5e      	ldr	r3, [pc, #376]	; (80037c4 <motor+0x55c>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b5e      	ldr	r3, [pc, #376]	; (80037c8 <motor+0x560>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003654:	4b5a      	ldr	r3, [pc, #360]	; (80037c0 <motor+0x558>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <motor+0x560>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(distCommand,3);
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <motor+0x564>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2103      	movs	r1, #3
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f886 	bl	8002778 <maintainStraightPath>
							}
		                	// Motor Stop
		                	// Apply PWM to both motors to stop moving
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 800366c:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <motor+0x560>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003674:	4b54      	ldr	r3, [pc, #336]	; (80037c8 <motor+0x560>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
	            			pwmValL = 0; pwmValR = 0;
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <motor+0x558>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <motor+0x55c>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
		                    HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	2203      	movs	r2, #3
 800368e:	4951      	ldr	r1, [pc, #324]	; (80037d4 <motor+0x56c>)
 8003690:	4851      	ldr	r0, [pc, #324]	; (80037d8 <motor+0x570>)
 8003692:	f006 fd8c 	bl	800a1ae <HAL_UART_Transmit>
		                    HAL_Delay(100);
 8003696:	2064      	movs	r0, #100	; 0x64
 8003698:	f001 fe6e 	bl	8005378 <HAL_Delay>
		                    break;
 800369c:	f000 bd24 	b.w	80040e8 <motor+0xe80>

		                case 't':
		                	htim1.Instance->CCR4 = 141;
 80036a0:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <motor+0x54c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	228d      	movs	r2, #141	; 0x8d
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
		                	osDelay(500);
 80036a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036ac:	f007 feba 	bl	800b424 <osDelay>
		                	if (dirCommand=='a'){
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <motor+0x554>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b61      	cmp	r3, #97	; 0x61
 80036b8:	d105      	bne.n	80036c6 <motor+0x45e>
		                		htim1.Instance->CCR4 = 90;
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <motor+0x54c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	225a      	movs	r2, #90	; 0x5a
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
		                	}
		                	else if (dirCommand=='d'){
		                		htim1.Instance->CCR4 = 210;
		                	}
		                	break;
 80036c2:	f000 bd10 	b.w	80040e6 <motor+0xe7e>
		                	else if (dirCommand=='d'){
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <motor+0x554>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b64      	cmp	r3, #100	; 0x64
 80036ce:	f040 850a 	bne.w	80040e6 <motor+0xe7e>
		                		htim1.Instance->CCR4 = 210;
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <motor+0x54c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	22d2      	movs	r2, #210	; 0xd2
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
		                	break;
 80036da:	f000 bd04 	b.w	80040e6 <motor+0xe7e>


		                case 'f': // forward angle rotation
		                	// check left/right
		                	if (dirCommand=='a'){
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <motor+0x554>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b61      	cmp	r3, #97	; 0x61
 80036e6:	d116      	bne.n	8003716 <motor+0x4ae>
		                		turnLeft((float)distCommand,0);
 80036e8:	4b38      	ldr	r3, [pc, #224]	; (80037cc <motor+0x564>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	2000      	movs	r0, #0
 80036f8:	eeb0 0a67 	vmov.f32	s0, s15
 80036fc:	f7fe fc48 	bl	8001f90 <turnLeft>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	2203      	movs	r2, #3
 8003706:	4933      	ldr	r1, [pc, #204]	; (80037d4 <motor+0x56c>)
 8003708:	4833      	ldr	r0, [pc, #204]	; (80037d8 <motor+0x570>)
 800370a:	f006 fd50 	bl	800a1ae <HAL_UART_Transmit>
		                		HAL_Delay(100);
 800370e:	2064      	movs	r0, #100	; 0x64
 8003710:	f001 fe32 	bl	8005378 <HAL_Delay>
 8003714:	e024      	b.n	8003760 <motor+0x4f8>
		                	}
		                	else if (dirCommand=='d'){
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <motor+0x554>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b64      	cmp	r3, #100	; 0x64
 800371e:	d11f      	bne.n	8003760 <motor+0x4f8>
		                		turnRight((float)distCommand,0);
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <motor+0x564>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	2000      	movs	r0, #0
 8003730:	eeb0 0a67 	vmov.f32	s0, s15
 8003734:	f7fe fe28 	bl	8002388 <turnRight>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	2203      	movs	r2, #3
 800373e:	4925      	ldr	r1, [pc, #148]	; (80037d4 <motor+0x56c>)
 8003740:	4825      	ldr	r0, [pc, #148]	; (80037d8 <motor+0x570>)
 8003742:	f006 fd34 	bl	800a1ae <HAL_UART_Transmit>
		                		HAL_Delay(100);
 8003746:	2064      	movs	r0, #100	; 0x64
 8003748:	f001 fe16 	bl	8005378 <HAL_Delay>
		                	}
	                		//stop moving
	                		while(initialCount!=encoderL+encoderR){
 800374c:	e008      	b.n	8003760 <motor+0x4f8>
	                			initialCount=encoderL+encoderR;
 800374e:	4b23      	ldr	r3, [pc, #140]	; (80037dc <motor+0x574>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <motor+0x578>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4413      	add	r3, r2
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
	                			osDelay(10);
 800375a:	200a      	movs	r0, #10
 800375c:	f007 fe62 	bl	800b424 <osDelay>
	                		while(initialCount!=encoderL+encoderR){
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <motor+0x574>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <motor+0x578>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4413      	add	r3, r2
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	429a      	cmp	r2, r3
 800376e:	d1ee      	bne.n	800374e <motor+0x4e6>
	                		}
	                		osDelay(200);
 8003770:	20c8      	movs	r0, #200	; 0xc8
 8003772:	f007 fe57 	bl	800b424 <osDelay>
							break;
 8003776:	f000 bcb7 	b.w	80040e8 <motor+0xe80>

		                case 'b': // backward angle rotation
		                	// check left/right
		                	if (dirCommand=='a'){
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <motor+0x554>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b61      	cmp	r3, #97	; 0x61
 8003782:	d12f      	bne.n	80037e4 <motor+0x57c>
		                		turnLeft((float)distCommand,1);
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <motor+0x564>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	2001      	movs	r0, #1
 8003794:	eeb0 0a67 	vmov.f32	s0, s15
 8003798:	f7fe fbfa 	bl	8001f90 <turnLeft>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	2203      	movs	r2, #3
 80037a2:	490c      	ldr	r1, [pc, #48]	; (80037d4 <motor+0x56c>)
 80037a4:	480c      	ldr	r0, [pc, #48]	; (80037d8 <motor+0x570>)
 80037a6:	f006 fd02 	bl	800a1ae <HAL_UART_Transmit>
		                		HAL_Delay(100);
 80037aa:	2064      	movs	r0, #100	; 0x64
 80037ac:	f001 fde4 	bl	8005378 <HAL_Delay>
 80037b0:	e03d      	b.n	800382e <motor+0x5c6>
 80037b2:	bf00      	nop
 80037b4:	200003c8 	.word	0x200003c8
 80037b8:	40020000 	.word	0x40020000
 80037bc:	20000205 	.word	0x20000205
 80037c0:	20000610 	.word	0x20000610
 80037c4:	20000614 	.word	0x20000614
 80037c8:	20000530 	.word	0x20000530
 80037cc:	20000206 	.word	0x20000206
 80037d0:	200005f8 	.word	0x200005f8
 80037d4:	08011918 	.word	0x08011918
 80037d8:	20000578 	.word	0x20000578
 80037dc:	200005fc 	.word	0x200005fc
 80037e0:	20000600 	.word	0x20000600
		                	}
		                	else if (dirCommand=='d'){
 80037e4:	4b97      	ldr	r3, [pc, #604]	; (8003a44 <motor+0x7dc>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d11f      	bne.n	800382e <motor+0x5c6>
		                		turnRight((float)distCommand,1);
 80037ee:	4b96      	ldr	r3, [pc, #600]	; (8003a48 <motor+0x7e0>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fc:	2001      	movs	r0, #1
 80037fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003802:	f7fe fdc1 	bl	8002388 <turnRight>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	2203      	movs	r2, #3
 800380c:	498f      	ldr	r1, [pc, #572]	; (8003a4c <motor+0x7e4>)
 800380e:	4890      	ldr	r0, [pc, #576]	; (8003a50 <motor+0x7e8>)
 8003810:	f006 fccd 	bl	800a1ae <HAL_UART_Transmit>
		                		HAL_Delay(100);
 8003814:	2064      	movs	r0, #100	; 0x64
 8003816:	f001 fdaf 	bl	8005378 <HAL_Delay>
		                	}
	                		//stop moving
	                		while(initialCount!=encoderL+encoderR){
 800381a:	e008      	b.n	800382e <motor+0x5c6>
	                			initialCount=encoderL+encoderR;
 800381c:	4b8d      	ldr	r3, [pc, #564]	; (8003a54 <motor+0x7ec>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b8d      	ldr	r3, [pc, #564]	; (8003a58 <motor+0x7f0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4413      	add	r3, r2
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
	                			osDelay(10);
 8003828:	200a      	movs	r0, #10
 800382a:	f007 fdfb 	bl	800b424 <osDelay>
	                		while(initialCount!=encoderL+encoderR){
 800382e:	4b89      	ldr	r3, [pc, #548]	; (8003a54 <motor+0x7ec>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <motor+0x7f0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4413      	add	r3, r2
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	429a      	cmp	r2, r3
 800383c:	d1ee      	bne.n	800381c <motor+0x5b4>
	                		}
	                		osDelay(200);
 800383e:	20c8      	movs	r0, #200	; 0xc8
 8003840:	f007 fdf0 	bl	800b424 <osDelay>
							break;
 8003844:	f000 bc50 	b.w	80040e8 <motor+0xe80>

		                case 'A': // SEND IT
		                	if (xcm>0.0){
 8003848:	4b84      	ldr	r3, [pc, #528]	; (8003a5c <motor+0x7f4>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	f340 8200 	ble.w	8003c5a <motor+0x9f2>
		                		//robot needs to go forward, turn right, go forward, turn left
		                		//1. go forward by (ycm-54+25)cm
			                	htim1.Instance->CCR4 = 141; // Center
 800385a:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <motor+0x7f8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	228d      	movs	r2, #141	; 0x8d
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
			                	osDelay(500);
 8003862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003866:	f007 fddd 	bl	800b424 <osDelay>
			                	motionCommand='w';
 800386a:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <motor+0x7fc>)
 800386c:	2277      	movs	r2, #119	; 0x77
 800386e:	701a      	strb	r2, [r3, #0]
			                    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8003870:	2200      	movs	r2, #0
 8003872:	2108      	movs	r1, #8
 8003874:	487c      	ldr	r0, [pc, #496]	; (8003a68 <motor+0x800>)
 8003876:	f003 f85d 	bl	8006934 <HAL_GPIO_WritePin>
			                    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 800387a:	2201      	movs	r2, #1
 800387c:	2104      	movs	r1, #4
 800387e:	487a      	ldr	r0, [pc, #488]	; (8003a68 <motor+0x800>)
 8003880:	f003 f858 	bl	8006934 <HAL_GPIO_WritePin>
			                    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8003884:	2200      	movs	r2, #0
 8003886:	2110      	movs	r1, #16
 8003888:	4877      	ldr	r0, [pc, #476]	; (8003a68 <motor+0x800>)
 800388a:	f003 f853 	bl	8006934 <HAL_GPIO_WritePin>
			                    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 800388e:	2201      	movs	r2, #1
 8003890:	2120      	movs	r1, #32
 8003892:	4875      	ldr	r0, [pc, #468]	; (8003a68 <motor+0x800>)
 8003894:	f003 f84e 	bl	8006934 <HAL_GPIO_WritePin>
		            			pwmValL = (RPM_LEFT+25)*0.1; pwmValR = (RPM_RIGHT+70)*0.1;
 8003898:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <motor+0x804>)
 800389a:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	4b73      	ldr	r3, [pc, #460]	; (8003a70 <motor+0x808>)
 80038a2:	f240 1265 	movw	r2, #357	; 0x165
 80038a6:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80038a8:	4b71      	ldr	r3, [pc, #452]	; (8003a70 <motor+0x808>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b71      	ldr	r3, [pc, #452]	; (8003a74 <motor+0x80c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80038b2:	4b6e      	ldr	r3, [pc, #440]	; (8003a6c <motor+0x804>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <motor+0x80c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
		            			if(ycm-54+25>0)maintainStraightPath(ycm-54+25,0);
 80038bc:	4b6e      	ldr	r3, [pc, #440]	; (8003a78 <motor+0x810>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003a7c <motor+0x814>
 80038c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038ca:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80038ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	dd11      	ble.n	8003900 <motor+0x698>
 80038dc:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <motor+0x810>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003a7c <motor+0x814>
 80038e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038ea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80038ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f6:	2100      	movs	r1, #0
 80038f8:	ee17 0a90 	vmov	r0, s15
 80038fc:	f7fe ff3c 	bl	8002778 <maintainStraightPath>
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003900:	4b5c      	ldr	r3, [pc, #368]	; (8003a74 <motor+0x80c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <motor+0x80c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
		            			pwmValL = 0; pwmValR = 0;
 8003910:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <motor+0x804>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4b56      	ldr	r3, [pc, #344]	; (8003a70 <motor+0x808>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
		                		//stop moving
		                		while(initialCount!=encoderL+encoderR){
 800391c:	e008      	b.n	8003930 <motor+0x6c8>
		                			initialCount=encoderL+encoderR;
 800391e:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <motor+0x7ec>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <motor+0x7f0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 800392a:	200a      	movs	r0, #10
 800392c:	f007 fd7a 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003930:	4b48      	ldr	r3, [pc, #288]	; (8003a54 <motor+0x7ec>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <motor+0x7f0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4413      	add	r3, r2
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	429a      	cmp	r2, r3
 800393e:	d1ee      	bne.n	800391e <motor+0x6b6>
		                		}
		                		//2. FD090
		                		turnRight((float)100,0);
 8003940:	2000      	movs	r0, #0
 8003942:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8003a80 <motor+0x818>
 8003946:	f7fe fd1f 	bl	8002388 <turnRight>
			                	osDelay(500);
 800394a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800394e:	f007 fd69 	bl	800b424 <osDelay>
		                		//stop moving
		                		while(initialCount!=encoderL+encoderR){
 8003952:	e008      	b.n	8003966 <motor+0x6fe>
		                			initialCount=encoderL+encoderR;
 8003954:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <motor+0x7ec>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <motor+0x7f0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4413      	add	r3, r2
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 8003960:	200a      	movs	r0, #10
 8003962:	f007 fd5f 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <motor+0x7ec>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <motor+0x7f0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4413      	add	r3, r2
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	429a      	cmp	r2, r3
 8003974:	d1ee      	bne.n	8003954 <motor+0x6ec>
		                		}
		                		//3. move in x dir by (xcm-43)cm (if -ve, move backwards)
		                		if (xcm-43>0){
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <motor+0x7f4>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003a84 <motor+0x81c>
 8003980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398c:	dd7c      	ble.n	8003a88 <motor+0x820>
		                			htim1.Instance->CCR4 = 141; // Center
 800398e:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <motor+0x7f8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	228d      	movs	r2, #141	; 0x8d
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
									osDelay(500);
 8003996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800399a:	f007 fd43 	bl	800b424 <osDelay>
									motionCommand='w';
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <motor+0x7fc>)
 80039a0:	2277      	movs	r2, #119	; 0x77
 80039a2:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 80039a4:	2200      	movs	r2, #0
 80039a6:	2108      	movs	r1, #8
 80039a8:	482f      	ldr	r0, [pc, #188]	; (8003a68 <motor+0x800>)
 80039aa:	f002 ffc3 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 80039ae:	2201      	movs	r2, #1
 80039b0:	2104      	movs	r1, #4
 80039b2:	482d      	ldr	r0, [pc, #180]	; (8003a68 <motor+0x800>)
 80039b4:	f002 ffbe 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 80039b8:	2200      	movs	r2, #0
 80039ba:	2110      	movs	r1, #16
 80039bc:	482a      	ldr	r0, [pc, #168]	; (8003a68 <motor+0x800>)
 80039be:	f002 ffb9 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 80039c2:	2201      	movs	r2, #1
 80039c4:	2120      	movs	r1, #32
 80039c6:	4828      	ldr	r0, [pc, #160]	; (8003a68 <motor+0x800>)
 80039c8:	f002 ffb4 	bl	8006934 <HAL_GPIO_WritePin>
									pwmValL = (RPM_LEFT+25)*0.1; pwmValR = (RPM_RIGHT+70)*0.1;
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <motor+0x804>)
 80039ce:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <motor+0x808>)
 80039d6:	f240 1265 	movw	r2, #357	; 0x165
 80039da:	601a      	str	r2, [r3, #0]
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <motor+0x808>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <motor+0x80c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <motor+0x804>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <motor+0x80c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
									if(xcm-43>0)maintainStraightPath(xcm-43,0);
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <motor+0x7f4>)
 80039f2:	edd3 7a00 	vldr	s15, [r3]
 80039f6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003a84 <motor+0x81c>
 80039fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	dd0d      	ble.n	8003a24 <motor+0x7bc>
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <motor+0x7f4>)
 8003a0a:	edd3 7a00 	vldr	s15, [r3]
 8003a0e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003a84 <motor+0x81c>
 8003a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	ee17 0a90 	vmov	r0, s15
 8003a20:	f7fe feaa 	bl	8002778 <maintainStraightPath>
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <motor+0x80c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <motor+0x80c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
									pwmValL = 0; pwmValR = 0;
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <motor+0x804>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <motor+0x808>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e085      	b.n	8003b4e <motor+0x8e6>
 8003a42:	bf00      	nop
 8003a44:	20000205 	.word	0x20000205
 8003a48:	20000206 	.word	0x20000206
 8003a4c:	08011918 	.word	0x08011918
 8003a50:	20000578 	.word	0x20000578
 8003a54:	200005fc 	.word	0x200005fc
 8003a58:	20000600 	.word	0x20000600
 8003a5c:	20000604 	.word	0x20000604
 8003a60:	200003c8 	.word	0x200003c8
 8003a64:	20000204 	.word	0x20000204
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	20000610 	.word	0x20000610
 8003a70:	20000614 	.word	0x20000614
 8003a74:	20000530 	.word	0x20000530
 8003a78:	20000608 	.word	0x20000608
 8003a7c:	42580000 	.word	0x42580000
 8003a80:	42c80000 	.word	0x42c80000
 8003a84:	422c0000 	.word	0x422c0000
		                		}
		                		else{
		                			htim1.Instance->CCR4 = 141; // Center
 8003a88:	4ba1      	ldr	r3, [pc, #644]	; (8003d10 <motor+0xaa8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	228d      	movs	r2, #141	; 0x8d
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
									osDelay(500);
 8003a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a94:	f007 fcc6 	bl	800b424 <osDelay>
									motionCommand='s';
 8003a98:	4b9e      	ldr	r3, [pc, #632]	; (8003d14 <motor+0xaac>)
 8003a9a:	2273      	movs	r2, #115	; 0x73
 8003a9c:	701a      	strb	r2, [r3, #0]
				            		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	2108      	movs	r1, #8
 8003aa2:	489d      	ldr	r0, [pc, #628]	; (8003d18 <motor+0xab0>)
 8003aa4:	f002 ff46 	bl	8006934 <HAL_GPIO_WritePin>
				            		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2104      	movs	r1, #4
 8003aac:	489a      	ldr	r0, [pc, #616]	; (8003d18 <motor+0xab0>)
 8003aae:	f002 ff41 	bl	8006934 <HAL_GPIO_WritePin>
				            		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2110      	movs	r1, #16
 8003ab6:	4898      	ldr	r0, [pc, #608]	; (8003d18 <motor+0xab0>)
 8003ab8:	f002 ff3c 	bl	8006934 <HAL_GPIO_WritePin>
				            		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 8003abc:	2200      	movs	r2, #0
 8003abe:	2120      	movs	r1, #32
 8003ac0:	4895      	ldr	r0, [pc, #596]	; (8003d18 <motor+0xab0>)
 8003ac2:	f002 ff37 	bl	8006934 <HAL_GPIO_WritePin>
			            			pwmValL = (RPM_LEFT+315)*0.1; pwmValR = (RPM_RIGHT+35)*0.1;
 8003ac6:	4b95      	ldr	r3, [pc, #596]	; (8003d1c <motor+0xab4>)
 8003ac8:	f240 127d 	movw	r2, #381	; 0x17d
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	4b94      	ldr	r3, [pc, #592]	; (8003d20 <motor+0xab8>)
 8003ad0:	f240 1261 	movw	r2, #353	; 0x161
 8003ad4:	601a      	str	r2, [r3, #0]
				            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003ad6:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <motor+0xab8>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b92      	ldr	r3, [pc, #584]	; (8003d24 <motor+0xabc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34
				            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003ae0:	4b8e      	ldr	r3, [pc, #568]	; (8003d1c <motor+0xab4>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <motor+0xabc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
			            			if(43-xcm>0)maintainStraightPath(43-xcm,0);
 8003aea:	4b8f      	ldr	r3, [pc, #572]	; (8003d28 <motor+0xac0>)
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003d2c <motor+0xac4>
 8003af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd0d      	ble.n	8003b1e <motor+0x8b6>
 8003b02:	4b89      	ldr	r3, [pc, #548]	; (8003d28 <motor+0xac0>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003d2c <motor+0xac4>
 8003b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b14:	2100      	movs	r1, #0
 8003b16:	ee17 0a90 	vmov	r0, s15
 8003b1a:	f7fe fe2d 	bl	8002778 <maintainStraightPath>
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003b1e:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <motor+0xabc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <motor+0xabc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
									pwmValL = 0; pwmValR = 0;
 8003b2e:	4b7b      	ldr	r3, [pc, #492]	; (8003d1c <motor+0xab4>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	4b7a      	ldr	r3, [pc, #488]	; (8003d20 <motor+0xab8>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
		                		}
		                		//stop moving
		                		while(initialCount!=encoderL+encoderR){
 8003b3a:	e008      	b.n	8003b4e <motor+0x8e6>
		                			initialCount=encoderL+encoderR;
 8003b3c:	4b7c      	ldr	r3, [pc, #496]	; (8003d30 <motor+0xac8>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <motor+0xacc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 8003b48:	200a      	movs	r0, #10
 8003b4a:	f007 fc6b 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003b4e:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <motor+0xac8>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <motor+0xacc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d1ee      	bne.n	8003b3c <motor+0x8d4>
		                		}
		                		//4. FA090
		                		turnLeft((float)87,0);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003d38 <motor+0xad0>
 8003b64:	f7fe fa14 	bl	8001f90 <turnLeft>
			                	osDelay(500);
 8003b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b6c:	f007 fc5a 	bl	800b424 <osDelay>
		                		//stop moving
		                		while(initialCount!=encoderL+encoderR){
 8003b70:	e008      	b.n	8003b84 <motor+0x91c>
		                			initialCount=encoderL+encoderR;
 8003b72:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <motor+0xac8>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b6f      	ldr	r3, [pc, #444]	; (8003d34 <motor+0xacc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 8003b7e:	200a      	movs	r0, #10
 8003b80:	f007 fc50 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <motor+0xac8>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <motor+0xacc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1ee      	bne.n	8003b72 <motor+0x90a>
		                		}
		                		//5. WZ
		                		htim1.Instance->CCR4 = 141; // Center
 8003b94:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <motor+0xaa8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	228d      	movs	r2, #141	; 0x8d
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
								osDelay(500);
 8003b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ba0:	f007 fc40 	bl	800b424 <osDelay>
								motionCommand='w';
 8003ba4:	4b5b      	ldr	r3, [pc, #364]	; (8003d14 <motor+0xaac>)
 8003ba6:	2277      	movs	r2, #119	; 0x77
 8003ba8:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8003baa:	2200      	movs	r2, #0
 8003bac:	2108      	movs	r1, #8
 8003bae:	485a      	ldr	r0, [pc, #360]	; (8003d18 <motor+0xab0>)
 8003bb0:	f002 fec0 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	2104      	movs	r1, #4
 8003bb8:	4857      	ldr	r0, [pc, #348]	; (8003d18 <motor+0xab0>)
 8003bba:	f002 febb 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	4855      	ldr	r0, [pc, #340]	; (8003d18 <motor+0xab0>)
 8003bc4:	f002 feb6 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2120      	movs	r1, #32
 8003bcc:	4852      	ldr	r0, [pc, #328]	; (8003d18 <motor+0xab0>)
 8003bce:	f002 feb1 	bl	8006934 <HAL_GPIO_WritePin>
		            			if (Distance>25){pwmValL = RPM_LEFT+30; pwmValR = RPM_RIGHT+50;}
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <motor+0xad4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b19      	cmp	r3, #25
 8003bd8:	d908      	bls.n	8003bec <motor+0x984>
 8003bda:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <motor+0xab4>)
 8003bdc:	f640 52ca 	movw	r2, #3530	; 0xdca
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <motor+0xab8>)
 8003be4:	f640 52de 	movw	r2, #3550	; 0xdde
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e007      	b.n	8003bfc <motor+0x994>
		            			else {pwmValL = 970; pwmValR = 960;}
 8003bec:	4b4b      	ldr	r3, [pc, #300]	; (8003d1c <motor+0xab4>)
 8003bee:	f240 32ca 	movw	r2, #970	; 0x3ca
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <motor+0xab8>)
 8003bf6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8003bfa:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003bfc:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <motor+0xab8>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <motor+0xabc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003c06:	4b45      	ldr	r3, [pc, #276]	; (8003d1c <motor+0xab4>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <motor+0xabc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(50,1);
 8003c10:	2101      	movs	r1, #1
 8003c12:	2032      	movs	r0, #50	; 0x32
 8003c14:	f7fe fdb0 	bl	8002778 <maintainStraightPath>
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <motor+0xabc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003c20:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <motor+0xabc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
								pwmValL = 0; pwmValR = 0;
 8003c28:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <motor+0xab4>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <motor+0xab8>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
								//stop moving
								while(initialCount!=encoderL+encoderR){
 8003c34:	e008      	b.n	8003c48 <motor+0x9e0>
									initialCount=encoderL+encoderR;
 8003c36:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <motor+0xac8>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <motor+0xacc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
									osDelay(10);
 8003c42:	200a      	movs	r0, #10
 8003c44:	f007 fbee 	bl	800b424 <osDelay>
								while(initialCount!=encoderL+encoderR){
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <motor+0xac8>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <motor+0xacc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1ee      	bne.n	8003c36 <motor+0x9ce>
								while(initialCount!=encoderL+encoderR){
									initialCount=encoderL+encoderR;
									osDelay(10);
								}
		                	}
							break;
 8003c58:	e246      	b.n	80040e8 <motor+0xe80>
		                		htim1.Instance->CCR4 = 141; // Center
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <motor+0xaa8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	228d      	movs	r2, #141	; 0x8d
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
								osDelay(500);
 8003c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c66:	f007 fbdd 	bl	800b424 <osDelay>
								motionCommand='w';
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <motor+0xaac>)
 8003c6c:	2277      	movs	r2, #119	; 0x77
 8003c6e:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8003c70:	2200      	movs	r2, #0
 8003c72:	2108      	movs	r1, #8
 8003c74:	4828      	ldr	r0, [pc, #160]	; (8003d18 <motor+0xab0>)
 8003c76:	f002 fe5d 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	4826      	ldr	r0, [pc, #152]	; (8003d18 <motor+0xab0>)
 8003c80:	f002 fe58 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8003c84:	2200      	movs	r2, #0
 8003c86:	2110      	movs	r1, #16
 8003c88:	4823      	ldr	r0, [pc, #140]	; (8003d18 <motor+0xab0>)
 8003c8a:	f002 fe53 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2120      	movs	r1, #32
 8003c92:	4821      	ldr	r0, [pc, #132]	; (8003d18 <motor+0xab0>)
 8003c94:	f002 fe4e 	bl	8006934 <HAL_GPIO_WritePin>
								pwmValL = (RPM_LEFT+25)*0.1; pwmValR = (RPM_RIGHT+70)*0.1;
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <motor+0xab4>)
 8003c9a:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <motor+0xab8>)
 8003ca2:	f240 1265 	movw	r2, #357	; 0x165
 8003ca6:	601a      	str	r2, [r3, #0]
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <motor+0xab8>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <motor+0xabc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <motor+0xab4>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <motor+0xabc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
								if (ycm-53>0)maintainStraightPath(ycm-53,0);
 8003cbc:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <motor+0xad8>)
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003d44 <motor+0xadc>
 8003cc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	dd0d      	ble.n	8003cf0 <motor+0xa88>
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <motor+0xad8>)
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003d44 <motor+0xadc>
 8003cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	ee17 0a90 	vmov	r0, s15
 8003cec:	f7fe fd44 	bl	8002778 <maintainStraightPath>
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <motor+0xabc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <motor+0xabc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
								pwmValL = 0; pwmValR = 0;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <motor+0xab4>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <motor+0xab8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
								while(initialCount!=encoderL+encoderR){
 8003d0c:	e025      	b.n	8003d5a <motor+0xaf2>
 8003d0e:	bf00      	nop
 8003d10:	200003c8 	.word	0x200003c8
 8003d14:	20000204 	.word	0x20000204
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	20000610 	.word	0x20000610
 8003d20:	20000614 	.word	0x20000614
 8003d24:	20000530 	.word	0x20000530
 8003d28:	20000604 	.word	0x20000604
 8003d2c:	422c0000 	.word	0x422c0000
 8003d30:	200005fc 	.word	0x200005fc
 8003d34:	20000600 	.word	0x20000600
 8003d38:	42ae0000 	.word	0x42ae0000
 8003d3c:	200005f8 	.word	0x200005f8
 8003d40:	20000608 	.word	0x20000608
 8003d44:	42540000 	.word	0x42540000
									initialCount=encoderL+encoderR;
 8003d48:	4b99      	ldr	r3, [pc, #612]	; (8003fb0 <motor+0xd48>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b99      	ldr	r3, [pc, #612]	; (8003fb4 <motor+0xd4c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
									osDelay(10);
 8003d54:	200a      	movs	r0, #10
 8003d56:	f007 fb65 	bl	800b424 <osDelay>
								while(initialCount!=encoderL+encoderR){
 8003d5a:	4b95      	ldr	r3, [pc, #596]	; (8003fb0 <motor+0xd48>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b95      	ldr	r3, [pc, #596]	; (8003fb4 <motor+0xd4c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d1ee      	bne.n	8003d48 <motor+0xae0>
		                		turnLeft((float)87,0);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003fb8 <motor+0xd50>
 8003d70:	f7fe f90e 	bl	8001f90 <turnLeft>
			                	osDelay(500);
 8003d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d78:	f007 fb54 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003d7c:	e008      	b.n	8003d90 <motor+0xb28>
		                			initialCount=encoderL+encoderR;
 8003d7e:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <motor+0xd48>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8c      	ldr	r3, [pc, #560]	; (8003fb4 <motor+0xd4c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 8003d8a:	200a      	movs	r0, #10
 8003d8c:	f007 fb4a 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003d90:	4b87      	ldr	r3, [pc, #540]	; (8003fb0 <motor+0xd48>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b87      	ldr	r3, [pc, #540]	; (8003fb4 <motor+0xd4c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1ee      	bne.n	8003d7e <motor+0xb16>
								if (abs(38+xcm)-16>0){
 8003da0:	4b86      	ldr	r3, [pc, #536]	; (8003fbc <motor+0xd54>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003fc0 <motor+0xd58>
 8003daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dae:	ee17 0a90 	vmov	r0, s15
 8003db2:	f7fc fbc9 	bl	8000548 <__aeabi_f2d>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	ec43 2b10 	vmov	d0, r2, r3
 8003dbe:	f009 ffa5 	bl	800dd0c <abs>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	dd6a      	ble.n	8003e9e <motor+0xc36>
									htim1.Instance->CCR4 = 141; // Center
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <motor+0xd5c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	228d      	movs	r2, #141	; 0x8d
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
									osDelay(500);
 8003dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dd4:	f007 fb26 	bl	800b424 <osDelay>
									motionCommand='w';
 8003dd8:	4b7b      	ldr	r3, [pc, #492]	; (8003fc8 <motor+0xd60>)
 8003dda:	2277      	movs	r2, #119	; 0x77
 8003ddc:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8003dde:	2200      	movs	r2, #0
 8003de0:	2108      	movs	r1, #8
 8003de2:	487a      	ldr	r0, [pc, #488]	; (8003fcc <motor+0xd64>)
 8003de4:	f002 fda6 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8003de8:	2201      	movs	r2, #1
 8003dea:	2104      	movs	r1, #4
 8003dec:	4877      	ldr	r0, [pc, #476]	; (8003fcc <motor+0xd64>)
 8003dee:	f002 fda1 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8003df2:	2200      	movs	r2, #0
 8003df4:	2110      	movs	r1, #16
 8003df6:	4875      	ldr	r0, [pc, #468]	; (8003fcc <motor+0xd64>)
 8003df8:	f002 fd9c 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	2120      	movs	r1, #32
 8003e00:	4872      	ldr	r0, [pc, #456]	; (8003fcc <motor+0xd64>)
 8003e02:	f002 fd97 	bl	8006934 <HAL_GPIO_WritePin>
									pwmValL = (RPM_LEFT+25)*0.1; pwmValR = (RPM_RIGHT+70)*0.1;
 8003e06:	4b72      	ldr	r3, [pc, #456]	; (8003fd0 <motor+0xd68>)
 8003e08:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	4b71      	ldr	r3, [pc, #452]	; (8003fd4 <motor+0xd6c>)
 8003e10:	f240 1265 	movw	r2, #357	; 0x165
 8003e14:	601a      	str	r2, [r3, #0]
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003e16:	4b6f      	ldr	r3, [pc, #444]	; (8003fd4 <motor+0xd6c>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <motor+0xd70>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <motor+0xd68>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <motor+0xd70>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
									if(abs(38+xcm)-16>0)maintainStraightPath(abs(38+xcm)-16,0);
 8003e2a:	4b64      	ldr	r3, [pc, #400]	; (8003fbc <motor+0xd54>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003fc0 <motor+0xd58>
 8003e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e38:	ee17 0a90 	vmov	r0, s15
 8003e3c:	f7fc fb84 	bl	8000548 <__aeabi_f2d>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	ec43 2b10 	vmov	d0, r2, r3
 8003e48:	f009 ff60 	bl	800dd0c <abs>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	dd16      	ble.n	8003e80 <motor+0xc18>
 8003e52:	4b5a      	ldr	r3, [pc, #360]	; (8003fbc <motor+0xd54>)
 8003e54:	edd3 7a00 	vldr	s15, [r3]
 8003e58:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003fc0 <motor+0xd58>
 8003e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e60:	ee17 0a90 	vmov	r0, s15
 8003e64:	f7fc fb70 	bl	8000548 <__aeabi_f2d>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	ec43 2b10 	vmov	d0, r2, r3
 8003e70:	f009 ff4c 	bl	800dd0c <abs>
 8003e74:	4603      	mov	r3, r0
 8003e76:	3b10      	subs	r3, #16
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc7c 	bl	8002778 <maintainStraightPath>
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003e80:	4b55      	ldr	r3, [pc, #340]	; (8003fd8 <motor+0xd70>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <motor+0xd70>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
									pwmValL = 0; pwmValR = 0;
 8003e90:	4b4f      	ldr	r3, [pc, #316]	; (8003fd0 <motor+0xd68>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <motor+0xd6c>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e076      	b.n	8003f8c <motor+0xd24>
									htim1.Instance->CCR4 = 141; // Center
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <motor+0xd5c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	228d      	movs	r2, #141	; 0x8d
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
									osDelay(500);
 8003ea6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eaa:	f007 fabb 	bl	800b424 <osDelay>
									motionCommand='s';
 8003eae:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <motor+0xd60>)
 8003eb0:	2273      	movs	r2, #115	; 0x73
 8003eb2:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2108      	movs	r1, #8
 8003eb8:	4844      	ldr	r0, [pc, #272]	; (8003fcc <motor+0xd64>)
 8003eba:	f002 fd3b 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	4842      	ldr	r0, [pc, #264]	; (8003fcc <motor+0xd64>)
 8003ec4:	f002 fd36 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 8003ec8:	2201      	movs	r2, #1
 8003eca:	2110      	movs	r1, #16
 8003ecc:	483f      	ldr	r0, [pc, #252]	; (8003fcc <motor+0xd64>)
 8003ece:	f002 fd31 	bl	8006934 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	483d      	ldr	r0, [pc, #244]	; (8003fcc <motor+0xd64>)
 8003ed8:	f002 fd2c 	bl	8006934 <HAL_GPIO_WritePin>
									pwmValL = (RPM_LEFT+315)*0.1; pwmValR = (RPM_RIGHT+35)*0.1;
 8003edc:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <motor+0xd68>)
 8003ede:	f240 127d 	movw	r2, #381	; 0x17d
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <motor+0xd6c>)
 8003ee6:	f240 1261 	movw	r2, #353	; 0x161
 8003eea:	601a      	str	r2, [r3, #0]
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <motor+0xd6c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <motor+0xd70>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <motor+0xd68>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <motor+0xd70>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
									if(16-abs(38+xcm)>0)maintainStraightPath(16-abs(38+xcm),0);
 8003f00:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <motor+0xd54>)
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003fc0 <motor+0xd58>
 8003f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f0e:	ee17 0a90 	vmov	r0, s15
 8003f12:	f7fc fb19 	bl	8000548 <__aeabi_f2d>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	ec43 2b10 	vmov	d0, r2, r3
 8003f1e:	f009 fef5 	bl	800dd0c <abs>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f1c3 0310 	rsb	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	dd17      	ble.n	8003f5c <motor+0xcf4>
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <motor+0xd54>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003fc0 <motor+0xd58>
 8003f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f3a:	ee17 0a90 	vmov	r0, s15
 8003f3e:	f7fc fb03 	bl	8000548 <__aeabi_f2d>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	ec43 2b10 	vmov	d0, r2, r3
 8003f4a:	f009 fedf 	bl	800dd0c <abs>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f1c3 0310 	rsb	r3, r3, #16
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fc0e 	bl	8002778 <maintainStraightPath>
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <motor+0xd70>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2200      	movs	r2, #0
 8003f62:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <motor+0xd70>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
									pwmValL = 0; pwmValR = 0;
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <motor+0xd68>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <motor+0xd6c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
		                		while(initialCount!=encoderL+encoderR){
 8003f78:	e008      	b.n	8003f8c <motor+0xd24>
		                			initialCount=encoderL+encoderR;
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <motor+0xd48>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <motor+0xd4c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4413      	add	r3, r2
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 8003f86:	200a      	movs	r0, #10
 8003f88:	f007 fa4c 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <motor+0xd48>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <motor+0xd4c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4413      	add	r3, r2
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1ee      	bne.n	8003f7a <motor+0xd12>
		                		turnRight((float)100,0);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003fdc <motor+0xd74>
 8003fa2:	f7fe f9f1 	bl	8002388 <turnRight>
			                	osDelay(500);
 8003fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003faa:	f007 fa3b 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003fae:	e020      	b.n	8003ff2 <motor+0xd8a>
 8003fb0:	200005fc 	.word	0x200005fc
 8003fb4:	20000600 	.word	0x20000600
 8003fb8:	42ae0000 	.word	0x42ae0000
 8003fbc:	20000604 	.word	0x20000604
 8003fc0:	42180000 	.word	0x42180000
 8003fc4:	200003c8 	.word	0x200003c8
 8003fc8:	20000204 	.word	0x20000204
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	20000610 	.word	0x20000610
 8003fd4:	20000614 	.word	0x20000614
 8003fd8:	20000530 	.word	0x20000530
 8003fdc:	42c80000 	.word	0x42c80000
		                			initialCount=encoderL+encoderR;
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <motor+0xe8c>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <motor+0xe90>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
		                			osDelay(10);
 8003fec:	200a      	movs	r0, #10
 8003fee:	f007 fa19 	bl	800b424 <osDelay>
		                		while(initialCount!=encoderL+encoderR){
 8003ff2:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <motor+0xe8c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <motor+0xe90>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d1ee      	bne.n	8003fe0 <motor+0xd78>
		                		htim1.Instance->CCR4 = 141; // Center
 8004002:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <motor+0xe94>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	228d      	movs	r2, #141	; 0x8d
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
								osDelay(500);
 800400a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800400e:	f007 fa09 	bl	800b424 <osDelay>
								motionCommand='w';
 8004012:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <motor+0xe98>)
 8004014:	2277      	movs	r2, #119	; 0x77
 8004016:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8004018:	2200      	movs	r2, #0
 800401a:	2108      	movs	r1, #8
 800401c:	4839      	ldr	r0, [pc, #228]	; (8004104 <motor+0xe9c>)
 800401e:	f002 fc89 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8004022:	2201      	movs	r2, #1
 8004024:	2104      	movs	r1, #4
 8004026:	4837      	ldr	r0, [pc, #220]	; (8004104 <motor+0xe9c>)
 8004028:	f002 fc84 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 800402c:	2200      	movs	r2, #0
 800402e:	2110      	movs	r1, #16
 8004030:	4834      	ldr	r0, [pc, #208]	; (8004104 <motor+0xe9c>)
 8004032:	f002 fc7f 	bl	8006934 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8004036:	2201      	movs	r2, #1
 8004038:	2120      	movs	r1, #32
 800403a:	4832      	ldr	r0, [pc, #200]	; (8004104 <motor+0xe9c>)
 800403c:	f002 fc7a 	bl	8006934 <HAL_GPIO_WritePin>
		            			if (Distance>25){pwmValL = RPM_LEFT+30; pwmValR = RPM_RIGHT+50;}
 8004040:	4b31      	ldr	r3, [pc, #196]	; (8004108 <motor+0xea0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b19      	cmp	r3, #25
 8004046:	d908      	bls.n	800405a <motor+0xdf2>
 8004048:	4b30      	ldr	r3, [pc, #192]	; (800410c <motor+0xea4>)
 800404a:	f640 52ca 	movw	r2, #3530	; 0xdca
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <motor+0xea8>)
 8004052:	f640 52de 	movw	r2, #3550	; 0xdde
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e007      	b.n	800406a <motor+0xe02>
		            			else {pwmValL = 970; pwmValR = 960;}
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <motor+0xea4>)
 800405c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <motor+0xea8>)
 8004064:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8004068:	601a      	str	r2, [r3, #0]
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 800406a:	4b29      	ldr	r3, [pc, #164]	; (8004110 <motor+0xea8>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b29      	ldr	r3, [pc, #164]	; (8004114 <motor+0xeac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	635a      	str	r2, [r3, #52]	; 0x34
			                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <motor+0xea4>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <motor+0xeac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
								maintainStraightPath(50,1);
 800407e:	2101      	movs	r1, #1
 8004080:	2032      	movs	r0, #50	; 0x32
 8004082:	f7fe fb79 	bl	8002778 <maintainStraightPath>
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <motor+0xeac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2200      	movs	r2, #0
 800408c:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 800408e:	4b21      	ldr	r3, [pc, #132]	; (8004114 <motor+0xeac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
								pwmValL = 0; pwmValR = 0;
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <motor+0xea4>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <motor+0xea8>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
								while(initialCount!=encoderL+encoderR){
 80040a2:	e008      	b.n	80040b6 <motor+0xe4e>
									initialCount=encoderL+encoderR;
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <motor+0xe8c>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <motor+0xe90>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
									osDelay(10);
 80040b0:	200a      	movs	r0, #10
 80040b2:	f007 f9b7 	bl	800b424 <osDelay>
								while(initialCount!=encoderL+encoderR){
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <motor+0xe8c>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <motor+0xe90>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d1ee      	bne.n	80040a4 <motor+0xe3c>
							break;
 80040c6:	e00f      	b.n	80040e8 <motor+0xe80>

		                default:
		                	// Motor Stop
		                	// Apply PWM to both motors to stop moving
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <motor+0xeac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <motor+0xeac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
	            			pwmValL = 0; pwmValR = 0;
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <motor+0xea4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <motor+0xea8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
		                    break;
 80040e4:	e000      	b.n	80040e8 <motor+0xe80>
		                	break;
 80040e6:	bf00      	nop

		        }
		    }
				  osDelay(500);
 80040e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040ec:	f007 f99a 	bl	800b424 <osDelay>
				  if (commandReceivedFlag) {
 80040f0:	f7ff b8ea 	b.w	80032c8 <motor+0x60>
 80040f4:	200005fc 	.word	0x200005fc
 80040f8:	20000600 	.word	0x20000600
 80040fc:	200003c8 	.word	0x200003c8
 8004100:	20000204 	.word	0x20000204
 8004104:	40020000 	.word	0x40020000
 8004108:	200005f8 	.word	0x200005f8
 800410c:	20000610 	.word	0x20000610
 8004110:	20000614 	.word	0x20000614
 8004114:	20000530 	.word	0x20000530

08004118 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Start encoder for Motor 1
 8004120:	213c      	movs	r1, #60	; 0x3c
 8004122:	484a      	ldr	r0, [pc, #296]	; (800424c <encoder+0x134>)
 8004124:	f004 feb2 	bl	8008e8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start encoder for Motor 2
 8004128:	213c      	movs	r1, #60	; 0x3c
 800412a:	4849      	ldr	r0, [pc, #292]	; (8004250 <encoder+0x138>)
 800412c:	f004 feae 	bl	8008e8c <HAL_TIM_Encoder_Start>

    int cnt_motor1=0,cnt_motor2=0;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
    float temp1=0.0,temp2=0.0;
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]

    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter for Motor 1
 8004144:	4b41      	ldr	r3, [pc, #260]	; (800424c <encoder+0x134>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 0); // Reset counter for Motor 2
 800414c:	4b40      	ldr	r3, [pc, #256]	; (8004250 <encoder+0x138>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2200      	movs	r2, #0
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
    uint32_t tick = HAL_GetTick();
 8004154:	f001 f904 	bl	8005360 <HAL_GetTick>
 8004158:	61b8      	str	r0, [r7, #24]

    /* Infinite loop */
    for (;;)
    {
        if (HAL_GetTick() - tick > 10L) // Update every 10 milliseconds
 800415a:	f001 f901 	bl	8005360 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b0a      	cmp	r3, #10
 8004166:	d9f8      	bls.n	800415a <encoder+0x42>
        {
            //motor 1 (R)
        	cnt_motor1 = __HAL_TIM_GET_COUNTER(&htim2);
 8004168:	4b38      	ldr	r3, [pc, #224]	; (800424c <encoder+0x134>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	617b      	str	r3, [r7, #20]
        	__HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter for Motor 1
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <encoder+0x134>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2200      	movs	r2, #0
 8004176:	625a      	str	r2, [r3, #36]	; 0x24
            if (cnt_motor1>32000){
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800417e:	dd18      	ble.n	80041b2 <encoder+0x9a>
            	//backwards (overflow)
            	temp1 = 0.5*(float)(65536 - cnt_motor1);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800418e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004196:	edc7 7a03 	vstr	s15, [r7, #12]
            	encoderR += (int)temp1;
 800419a:	edd7 7a03 	vldr	s15, [r7, #12]
 800419e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041a2:	ee17 2a90 	vmov	r2, s15
 80041a6:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <encoder+0x13c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	4a29      	ldr	r2, [pc, #164]	; (8004254 <encoder+0x13c>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	e015      	b.n	80041de <encoder+0xc6>
            }
            else{
            	//forwards
            	temp1 = 0.5*(float)cnt_motor1;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c4:	edc7 7a03 	vstr	s15, [r7, #12]
            	encoderR += (int)temp1;
 80041c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d0:	ee17 2a90 	vmov	r2, s15
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <encoder+0x13c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4413      	add	r3, r2
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <encoder+0x13c>)
 80041dc:	6013      	str	r3, [r2, #0]
            }

            //motor 2 (L)
        	cnt_motor2 = __HAL_TIM_GET_COUNTER(&htim3);
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <encoder+0x138>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	613b      	str	r3, [r7, #16]
        	__HAL_TIM_SET_COUNTER(&htim3, 0); // Reset counter for Motor 2
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <encoder+0x138>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
            if (cnt_motor2>32000){
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80041f4:	dd14      	ble.n	8004220 <encoder+0x108>
            	//backwards (overflow)
            	temp2 = (float)(65536 - cnt_motor2);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004204:	edc7 7a07 	vstr	s15, [r7, #28]
            	encoderL += (int)temp2;
 8004208:	edd7 7a07 	vldr	s15, [r7, #28]
 800420c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004210:	ee17 2a90 	vmov	r2, s15
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <encoder+0x140>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4413      	add	r3, r2
 800421a:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <encoder+0x140>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e010      	b.n	8004242 <encoder+0x12a>
            }
            else{
            	//forwards
            	temp2 += (float)cnt_motor2;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800422a:	ed97 7a07 	vldr	s14, [r7, #28]
 800422e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
            	encoderL += cnt_motor2;
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <encoder+0x140>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	4a06      	ldr	r2, [pc, #24]	; (8004258 <encoder+0x140>)
 8004240:	6013      	str	r3, [r2, #0]
            }

            tick = HAL_GetTick();
 8004242:	f001 f88d 	bl	8005360 <HAL_GetTick>
 8004246:	61b8      	str	r0, [r7, #24]
        if (HAL_GetTick() - tick > 10L) // Update every 10 milliseconds
 8004248:	e787      	b.n	800415a <encoder+0x42>
 800424a:	bf00      	nop
 800424c:	20000410 	.word	0x20000410
 8004250:	20000458 	.word	0x20000458
 8004254:	20000600 	.word	0x20000600
 8004258:	200005fc 	.word	0x200005fc
 800425c:	00000000 	.word	0x00000000

08004260 <Gyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Gyro */
void Gyro(void *argument)
{
 8004260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004264:	ed2d 8b02 	vpush	{d8}
 8004268:	b08a      	sub	sp, #40	; 0x28
 800426a:	af02      	add	r7, sp, #8
 800426c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Gyro */
	  uint8_t uart_buf[20];
	  prev_time_elapsed = HAL_GetTick();
 800426e:	f001 f877 	bl	8005360 <HAL_GetTick>
 8004272:	4603      	mov	r3, r0
 8004274:	4a64      	ldr	r2, [pc, #400]	; (8004408 <Gyro+0x1a8>)
 8004276:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
    	  if(dma_transfer_complete==0){
 8004278:	4b64      	ldr	r3, [pc, #400]	; (800440c <Gyro+0x1ac>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d115      	bne.n	80042ae <Gyro+0x4e>
              ret = HAL_I2C_Mem_Read_DMA(imu.i2cHandle, IMU_ADDR,GYRO_ZOUT_H,I2C_MEMADD_SIZE_8BIT,rawData,2);
 8004282:	4b63      	ldr	r3, [pc, #396]	; (8004410 <Gyro+0x1b0>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	2302      	movs	r3, #2
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	4b62      	ldr	r3, [pc, #392]	; (8004414 <Gyro+0x1b4>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2301      	movs	r3, #1
 8004290:	2237      	movs	r2, #55	; 0x37
 8004292:	21d0      	movs	r1, #208	; 0xd0
 8004294:	f002 ffcc 	bl	8007230 <HAL_I2C_Mem_Read_DMA>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	4b5e      	ldr	r3, [pc, #376]	; (8004418 <Gyro+0x1b8>)
 800429e:	701a      	strb	r2, [r3, #0]
              if(ret == HAL_OK)
 80042a0:	4b5d      	ldr	r3, [pc, #372]	; (8004418 <Gyro+0x1b8>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <Gyro+0x4e>
              dma_transfer_complete = 2;
 80042a8:	4b58      	ldr	r3, [pc, #352]	; (800440c <Gyro+0x1ac>)
 80042aa:	2202      	movs	r2, #2
 80042ac:	701a      	strb	r2, [r3, #0]
            }
          if (dma_transfer_complete == 2) {
 80042ae:	4b57      	ldr	r3, [pc, #348]	; (800440c <Gyro+0x1ac>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d1df      	bne.n	8004278 <Gyro+0x18>
    			time_elapsed = HAL_GetTick();
 80042b8:	f001 f852 	bl	8005360 <HAL_GetTick>
 80042bc:	4603      	mov	r3, r0
 80042be:	4a57      	ldr	r2, [pc, #348]	; (800441c <Gyro+0x1bc>)
 80042c0:	6013      	str	r3, [r2, #0]
    			time_difference = time_elapsed - prev_time_elapsed; // Calculate time difference between readings
 80042c2:	4b56      	ldr	r3, [pc, #344]	; (800441c <Gyro+0x1bc>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b50      	ldr	r3, [pc, #320]	; (8004408 <Gyro+0x1a8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	4a54      	ldr	r2, [pc, #336]	; (8004420 <Gyro+0x1c0>)
 80042ce:	6013      	str	r3, [r2, #0]
    			Data = (int16_t)(rawData[0] << 8 | rawData[1]); // Combine high and low bytes
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <Gyro+0x1b4>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	4b4e      	ldr	r3, [pc, #312]	; (8004414 <Gyro+0x1b4>)
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	b21b      	sxth	r3, r3
 80042de:	4313      	orrs	r3, r2
 80042e0:	b21a      	sxth	r2, r3
 80042e2:	4b50      	ldr	r3, [pc, #320]	; (8004424 <Gyro+0x1c4>)
 80042e4:	801a      	strh	r2, [r3, #0]
    			// Calculate new yaw angle based on gyro data
    			yawAngle += (float)((time_difference * (Data - 240.0) / 131.0)) / 1000.0;
 80042e6:	4b50      	ldr	r3, [pc, #320]	; (8004428 <Gyro+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc f92c 	bl	8000548 <__aeabi_f2d>
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <Gyro+0x1c0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc f903 	bl	8000504 <__aeabi_ui2d>
 80042fe:	4680      	mov	r8, r0
 8004300:	4689      	mov	r9, r1
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <Gyro+0x1c4>)
 8004304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc f90b 	bl	8000524 <__aeabi_i2d>
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	4b46      	ldr	r3, [pc, #280]	; (800442c <Gyro+0x1cc>)
 8004314:	f7fb ffb8 	bl	8000288 <__aeabi_dsub>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4640      	mov	r0, r8
 800431e:	4649      	mov	r1, r9
 8004320:	f7fc f96a 	bl	80005f8 <__aeabi_dmul>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	a332      	add	r3, pc, #200	; (adr r3, 80043f8 <Gyro+0x198>)
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f7fc fa8b 	bl	800084c <__aeabi_ddiv>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	f7fc fc53 	bl	8000be8 <__aeabi_d2f>
 8004342:	4603      	mov	r3, r0
 8004344:	4618      	mov	r0, r3
 8004346:	f7fc f8ff 	bl	8000548 <__aeabi_f2d>
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <Gyro+0x1d0>)
 8004350:	f7fc fa7c 	bl	800084c <__aeabi_ddiv>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4620      	mov	r0, r4
 800435a:	4629      	mov	r1, r5
 800435c:	f7fb ff96 	bl	800028c <__adddf3>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f7fc fc3e 	bl	8000be8 <__aeabi_d2f>
 800436c:	4603      	mov	r3, r0
 800436e:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <Gyro+0x1c8>)
 8004370:	6013      	str	r3, [r2, #0]
    			// Offsetting the drift (derived empirically)
    			yawAngle -= (float)(time_difference*0.055/1000.0);
 8004372:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <Gyro+0x1c8>)
 8004374:	ed93 8a00 	vldr	s16, [r3]
 8004378:	4b29      	ldr	r3, [pc, #164]	; (8004420 <Gyro+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc f8c1 	bl	8000504 <__aeabi_ui2d>
 8004382:	a31f      	add	r3, pc, #124	; (adr r3, 8004400 <Gyro+0x1a0>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fc f936 	bl	80005f8 <__aeabi_dmul>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <Gyro+0x1d0>)
 800439a:	f7fc fa57 	bl	800084c <__aeabi_ddiv>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7fc fc1f 	bl	8000be8 <__aeabi_d2f>
 80043aa:	ee07 0a90 	vmov	s15, r0
 80043ae:	ee78 7a67 	vsub.f32	s15, s16, s15
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <Gyro+0x1c8>)
 80043b4:	edc3 7a00 	vstr	s15, [r3]
				dma_transfer_complete = 0;
 80043b8:	4b14      	ldr	r3, [pc, #80]	; (800440c <Gyro+0x1ac>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
				prev_time_elapsed = time_elapsed;
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <Gyro+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a11      	ldr	r2, [pc, #68]	; (8004408 <Gyro+0x1a8>)
 80043c4:	6013      	str	r3, [r2, #0]
				sprintf(uart_buf, "%f", yawAngle);
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <Gyro+0x1c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f8bc 	bl	8000548 <__aeabi_f2d>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	f107 000c 	add.w	r0, r7, #12
 80043d8:	4916      	ldr	r1, [pc, #88]	; (8004434 <Gyro+0x1d4>)
 80043da:	f00a f9c3 	bl	800e764 <siprintf>
				OLED_ShowString(20,30,uart_buf);
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	461a      	mov	r2, r3
 80043e4:	211e      	movs	r1, #30
 80043e6:	2014      	movs	r0, #20
 80043e8:	f000 f9f4 	bl	80047d4 <OLED_ShowString>
				OLED_Refresh_Gram();
 80043ec:	f000 f87e 	bl	80044ec <OLED_Refresh_Gram>
    	  if(dma_transfer_complete==0){
 80043f0:	e742      	b.n	8004278 <Gyro+0x18>
 80043f2:	bf00      	nop
 80043f4:	f3af 8000 	nop.w
 80043f8:	00000000 	.word	0x00000000
 80043fc:	40606000 	.word	0x40606000
 8004400:	c28f5c29 	.word	0xc28f5c29
 8004404:	3fac28f5 	.word	0x3fac28f5
 8004408:	2000061c 	.word	0x2000061c
 800440c:	200005e0 	.word	0x200005e0
 8004410:	20000208 	.word	0x20000208
 8004414:	200005e4 	.word	0x200005e4
 8004418:	200005d9 	.word	0x200005d9
 800441c:	20000618 	.word	0x20000618
 8004420:	20000620 	.word	0x20000620
 8004424:	20000624 	.word	0x20000624
 8004428:	200005dc 	.word	0x200005dc
 800442c:	406e0000 	.word	0x406e0000
 8004430:	408f4000 	.word	0x408f4000
 8004434:	0801191c 	.word	0x0801191c

08004438 <start_ultrasonic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_ultrasonic */
void start_ultrasonic(void *argument)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_ultrasonic */
	// Start timer for capturing the echo pulses
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8004440:	2100      	movs	r1, #0
 8004442:	4809      	ldr	r0, [pc, #36]	; (8004468 <start_ultrasonic+0x30>)
 8004444:	f004 fb54 	bl	8008af0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);	// Set to low just in case
 8004448:	2200      	movs	r2, #0
 800444a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800444e:	4807      	ldr	r0, [pc, #28]	; (800446c <start_ultrasonic+0x34>)
 8004450:	f002 fa70 	bl	8006934 <HAL_GPIO_WritePin>
	HCSR04_Read();
 8004454:	f7fd fb62 	bl	8001b1c <HCSR04_Read>
	HAL_Delay(50);
 8004458:	2032      	movs	r0, #50	; 0x32
 800445a:	f000 ff8d 	bl	8005378 <HAL_Delay>

	osDelay(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f006 ffe0 	bl	800b424 <osDelay>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);	// Set to low just in case
 8004464:	e7f0      	b.n	8004448 <start_ultrasonic+0x10>
 8004466:	bf00      	nop
 8004468:	200004a0 	.word	0x200004a0
 800446c:	40020c00 	.word	0x40020c00

08004470 <ir_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ir_task */
void ir_task(void *argument)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ir_task */
  /* Infinite loop */
  for(;;)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResult, adcCount);
 8004478:	2314      	movs	r3, #20
 800447a:	461a      	mov	r2, r3
 800447c:	4912      	ldr	r1, [pc, #72]	; (80044c8 <ir_task+0x58>)
 800447e:	4813      	ldr	r0, [pc, #76]	; (80044cc <ir_task+0x5c>)
 8004480:	f000 ffe2 	bl	8005448 <HAL_ADC_Start_DMA>
    ir_dist[0] = ADC_To_Dist((uint16_t)(ir_right / 5));
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <ir_task+0x60>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <ir_task+0x64>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	b29b      	uxth	r3, r3
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd fc2f 	bl	8001cf8 <ADC_To_Dist>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <ir_task+0x68>)
 80044a0:	601a      	str	r2, [r3, #0]
    ir_dist[1] = ADC_To_Dist((uint16_t)(ir_left / 5));
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <ir_task+0x6c>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <ir_task+0x64>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fc20 	bl	8001cf8 <ADC_To_Dist>
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <ir_task+0x68>)
 80044be:	605a      	str	r2, [r3, #4]
	osDelay(100);
 80044c0:	2064      	movs	r0, #100	; 0x64
 80044c2:	f006 ffaf 	bl	800b424 <osDelay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResult, adcCount);
 80044c6:	e7d7      	b.n	8004478 <ir_task+0x8>
 80044c8:	20000628 	.word	0x20000628
 80044cc:	2000026c 	.word	0x2000026c
 80044d0:	20000652 	.word	0x20000652
 80044d4:	cccccccd 	.word	0xcccccccd
 80044d8:	20000654 	.word	0x20000654
 80044dc:	20000650 	.word	0x20000650

080044e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044e4:	b672      	cpsid	i
}
 80044e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044e8:	e7fe      	b.n	80044e8 <Error_Handler+0x8>
	...

080044ec <OLED_Refresh_Gram>:
#include "oledfont.h"


uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80044f2:	2300      	movs	r3, #0
 80044f4:	71fb      	strb	r3, [r7, #7]
 80044f6:	e026      	b.n	8004546 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	3b50      	subs	r3, #80	; 0x50
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f82b 	bl	800455c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8004506:	2100      	movs	r1, #0
 8004508:	2000      	movs	r0, #0
 800450a:	f000 f827 	bl	800455c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800450e:	2100      	movs	r1, #0
 8004510:	2010      	movs	r0, #16
 8004512:	f000 f823 	bl	800455c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8004516:	2300      	movs	r3, #0
 8004518:	71bb      	strb	r3, [r7, #6]
 800451a:	e00d      	b.n	8004538 <OLED_Refresh_Gram+0x4c>
 800451c:	79ba      	ldrb	r2, [r7, #6]
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	490d      	ldr	r1, [pc, #52]	; (8004558 <OLED_Refresh_Gram+0x6c>)
 8004522:	00d2      	lsls	r2, r2, #3
 8004524:	440a      	add	r2, r1
 8004526:	4413      	add	r3, r2
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f815 	bl	800455c <OLED_WR_Byte>
 8004532:	79bb      	ldrb	r3, [r7, #6]
 8004534:	3301      	adds	r3, #1
 8004536:	71bb      	strb	r3, [r7, #6]
 8004538:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	daed      	bge.n	800451c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	3301      	adds	r3, #1
 8004544:	71fb      	strb	r3, [r7, #7]
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	2b07      	cmp	r3, #7
 800454a:	d9d5      	bls.n	80044f8 <OLED_Refresh_Gram+0xc>
	}   
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	2000065c 	.word	0x2000065c

0800455c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	460a      	mov	r2, r1
 8004566:	71fb      	strb	r3, [r7, #7]
 8004568:	4613      	mov	r3, r2
 800456a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800456c:	79bb      	ldrb	r3, [r7, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8004572:	2201      	movs	r2, #1
 8004574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004578:	481c      	ldr	r0, [pc, #112]	; (80045ec <OLED_WR_Byte+0x90>)
 800457a:	f002 f9db 	bl	8006934 <HAL_GPIO_WritePin>
 800457e:	e005      	b.n	800458c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004586:	4819      	ldr	r0, [pc, #100]	; (80045ec <OLED_WR_Byte+0x90>)
 8004588:	f002 f9d4 	bl	8006934 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e01e      	b.n	80045d0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8004592:	2200      	movs	r2, #0
 8004594:	2120      	movs	r1, #32
 8004596:	4815      	ldr	r0, [pc, #84]	; (80045ec <OLED_WR_Byte+0x90>)
 8004598:	f002 f9cc 	bl	8006934 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	da05      	bge.n	80045b0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80045a4:	2201      	movs	r2, #1
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	4810      	ldr	r0, [pc, #64]	; (80045ec <OLED_WR_Byte+0x90>)
 80045aa:	f002 f9c3 	bl	8006934 <HAL_GPIO_WritePin>
 80045ae:	e004      	b.n	80045ba <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80045b0:	2200      	movs	r2, #0
 80045b2:	2140      	movs	r1, #64	; 0x40
 80045b4:	480d      	ldr	r0, [pc, #52]	; (80045ec <OLED_WR_Byte+0x90>)
 80045b6:	f002 f9bd 	bl	8006934 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80045ba:	2201      	movs	r2, #1
 80045bc:	2120      	movs	r1, #32
 80045be:	480b      	ldr	r0, [pc, #44]	; (80045ec <OLED_WR_Byte+0x90>)
 80045c0:	f002 f9b8 	bl	8006934 <HAL_GPIO_WritePin>
		dat<<=1;   
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	3301      	adds	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b07      	cmp	r3, #7
 80045d4:	d9dd      	bls.n	8004592 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80045d6:	2201      	movs	r2, #1
 80045d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045dc:	4803      	ldr	r0, [pc, #12]	; (80045ec <OLED_WR_Byte+0x90>)
 80045de:	f002 f9a9 	bl	8006934 <HAL_GPIO_WritePin>
} 
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000

080045f0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80045f6:	2300      	movs	r3, #0
 80045f8:	71fb      	strb	r3, [r7, #7]
 80045fa:	e014      	b.n	8004626 <OLED_Clear+0x36>
 80045fc:	2300      	movs	r3, #0
 80045fe:	71bb      	strb	r3, [r7, #6]
 8004600:	e00a      	b.n	8004618 <OLED_Clear+0x28>
 8004602:	79ba      	ldrb	r2, [r7, #6]
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	490c      	ldr	r1, [pc, #48]	; (8004638 <OLED_Clear+0x48>)
 8004608:	00d2      	lsls	r2, r2, #3
 800460a:	440a      	add	r2, r1
 800460c:	4413      	add	r3, r2
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	3301      	adds	r3, #1
 8004616:	71bb      	strb	r3, [r7, #6]
 8004618:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	daf0      	bge.n	8004602 <OLED_Clear+0x12>
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	3301      	adds	r3, #1
 8004624:	71fb      	strb	r3, [r7, #7]
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	2b07      	cmp	r3, #7
 800462a:	d9e7      	bls.n	80045fc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800462c:	f7ff ff5e 	bl	80044ec <OLED_Refresh_Gram>
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2000065c 	.word	0x2000065c

0800463c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
 8004646:	460b      	mov	r3, r1
 8004648:	71bb      	strb	r3, [r7, #6]
 800464a:	4613      	mov	r3, r2
 800464c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	2b00      	cmp	r3, #0
 8004658:	db41      	blt.n	80046de <OLED_DrawPoint+0xa2>
 800465a:	79bb      	ldrb	r3, [r7, #6]
 800465c:	2b3f      	cmp	r3, #63	; 0x3f
 800465e:	d83e      	bhi.n	80046de <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8004660:	79bb      	ldrb	r3, [r7, #6]
 8004662:	08db      	lsrs	r3, r3, #3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f1c3 0307 	rsb	r3, r3, #7
 800466a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800466c:	79bb      	ldrb	r3, [r7, #6]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8004674:	7b7b      	ldrb	r3, [r7, #13]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2201      	movs	r2, #1
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8004682:	797b      	ldrb	r3, [r7, #5]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d012      	beq.n	80046ae <OLED_DrawPoint+0x72>
 8004688:	79fa      	ldrb	r2, [r7, #7]
 800468a:	7bbb      	ldrb	r3, [r7, #14]
 800468c:	4917      	ldr	r1, [pc, #92]	; (80046ec <OLED_DrawPoint+0xb0>)
 800468e:	00d2      	lsls	r2, r2, #3
 8004690:	440a      	add	r2, r1
 8004692:	4413      	add	r3, r2
 8004694:	7818      	ldrb	r0, [r3, #0]
 8004696:	79fa      	ldrb	r2, [r7, #7]
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	7bf9      	ldrb	r1, [r7, #15]
 800469c:	4301      	orrs	r1, r0
 800469e:	b2c8      	uxtb	r0, r1
 80046a0:	4912      	ldr	r1, [pc, #72]	; (80046ec <OLED_DrawPoint+0xb0>)
 80046a2:	00d2      	lsls	r2, r2, #3
 80046a4:	440a      	add	r2, r1
 80046a6:	4413      	add	r3, r2
 80046a8:	4602      	mov	r2, r0
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e018      	b.n	80046e0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80046ae:	79fa      	ldrb	r2, [r7, #7]
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	490e      	ldr	r1, [pc, #56]	; (80046ec <OLED_DrawPoint+0xb0>)
 80046b4:	00d2      	lsls	r2, r2, #3
 80046b6:	440a      	add	r2, r1
 80046b8:	4413      	add	r3, r2
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b25a      	sxtb	r2, r3
 80046be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	b25b      	sxtb	r3, r3
 80046c6:	4013      	ands	r3, r2
 80046c8:	b259      	sxtb	r1, r3
 80046ca:	79fa      	ldrb	r2, [r7, #7]
 80046cc:	7bbb      	ldrb	r3, [r7, #14]
 80046ce:	b2c8      	uxtb	r0, r1
 80046d0:	4906      	ldr	r1, [pc, #24]	; (80046ec <OLED_DrawPoint+0xb0>)
 80046d2:	00d2      	lsls	r2, r2, #3
 80046d4:	440a      	add	r2, r1
 80046d6:	4413      	add	r3, r2
 80046d8:	4602      	mov	r2, r0
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e000      	b.n	80046e0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80046de:	bf00      	nop
}
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	2000065c 	.word	0x2000065c

080046f0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4604      	mov	r4, r0
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	71fb      	strb	r3, [r7, #7]
 8004702:	4603      	mov	r3, r0
 8004704:	71bb      	strb	r3, [r7, #6]
 8004706:	460b      	mov	r3, r1
 8004708:	717b      	strb	r3, [r7, #5]
 800470a:	4613      	mov	r3, r2
 800470c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800470e:	79bb      	ldrb	r3, [r7, #6]
 8004710:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8004712:	797b      	ldrb	r3, [r7, #5]
 8004714:	3b20      	subs	r3, #32
 8004716:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004718:	2300      	movs	r3, #0
 800471a:	73bb      	strb	r3, [r7, #14]
 800471c:	e04d      	b.n	80047ba <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800471e:	793b      	ldrb	r3, [r7, #4]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d10b      	bne.n	800473c <OLED_ShowChar+0x4c>
 8004724:	797a      	ldrb	r2, [r7, #5]
 8004726:	7bb9      	ldrb	r1, [r7, #14]
 8004728:	4828      	ldr	r0, [pc, #160]	; (80047cc <OLED_ShowChar+0xdc>)
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4403      	add	r3, r0
 8004734:	440b      	add	r3, r1
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	e007      	b.n	800474c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800473c:	797a      	ldrb	r2, [r7, #5]
 800473e:	7bbb      	ldrb	r3, [r7, #14]
 8004740:	4923      	ldr	r1, [pc, #140]	; (80047d0 <OLED_ShowChar+0xe0>)
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	440a      	add	r2, r1
 8004746:	4413      	add	r3, r2
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800474c:	2300      	movs	r3, #0
 800474e:	737b      	strb	r3, [r7, #13]
 8004750:	e02d      	b.n	80047ae <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8004752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da07      	bge.n	800476a <OLED_ShowChar+0x7a>
 800475a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800475e:	79b9      	ldrb	r1, [r7, #6]
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff6a 	bl	800463c <OLED_DrawPoint>
 8004768:	e00c      	b.n	8004784 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800476a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79b9      	ldrb	r1, [r7, #6]
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff5c 	bl	800463c <OLED_DrawPoint>
			temp<<=1;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
			y++;
 800478a:	79bb      	ldrb	r3, [r7, #6]
 800478c:	3301      	adds	r3, #1
 800478e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8004790:	79ba      	ldrb	r2, [r7, #6]
 8004792:	7b3b      	ldrb	r3, [r7, #12]
 8004794:	1ad2      	subs	r2, r2, r3
 8004796:	793b      	ldrb	r3, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d105      	bne.n	80047a8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800479c:	7b3b      	ldrb	r3, [r7, #12]
 800479e:	71bb      	strb	r3, [r7, #6]
				x++;
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	3301      	adds	r3, #1
 80047a4:	71fb      	strb	r3, [r7, #7]
				break;
 80047a6:	e005      	b.n	80047b4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80047a8:	7b7b      	ldrb	r3, [r7, #13]
 80047aa:	3301      	adds	r3, #1
 80047ac:	737b      	strb	r3, [r7, #13]
 80047ae:	7b7b      	ldrb	r3, [r7, #13]
 80047b0:	2b07      	cmp	r3, #7
 80047b2:	d9ce      	bls.n	8004752 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80047b4:	7bbb      	ldrb	r3, [r7, #14]
 80047b6:	3301      	adds	r3, #1
 80047b8:	73bb      	strb	r3, [r7, #14]
 80047ba:	7bba      	ldrb	r2, [r7, #14]
 80047bc:	793b      	ldrb	r3, [r7, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d3ad      	bcc.n	800471e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	08011a10 	.word	0x08011a10
 80047d0:	08011e84 	.word	0x08011e84

080047d4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af02      	add	r7, sp, #8
 80047da:	4603      	mov	r3, r0
 80047dc:	603a      	str	r2, [r7, #0]
 80047de:	71fb      	strb	r3, [r7, #7]
 80047e0:	460b      	mov	r3, r1
 80047e2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80047e4:	e01f      	b.n	8004826 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2b7a      	cmp	r3, #122	; 0x7a
 80047ea:	d904      	bls.n	80047f6 <OLED_ShowString+0x22>
 80047ec:	2300      	movs	r3, #0
 80047ee:	71fb      	strb	r3, [r7, #7]
 80047f0:	79bb      	ldrb	r3, [r7, #6]
 80047f2:	3310      	adds	r3, #16
 80047f4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80047f6:	79bb      	ldrb	r3, [r7, #6]
 80047f8:	2b3a      	cmp	r3, #58	; 0x3a
 80047fa:	d905      	bls.n	8004808 <OLED_ShowString+0x34>
 80047fc:	2300      	movs	r3, #0
 80047fe:	71fb      	strb	r3, [r7, #7]
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	71bb      	strb	r3, [r7, #6]
 8004804:	f7ff fef4 	bl	80045f0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	79b9      	ldrb	r1, [r7, #6]
 800480e:	79f8      	ldrb	r0, [r7, #7]
 8004810:	2301      	movs	r3, #1
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	230c      	movs	r3, #12
 8004816:	f7ff ff6b 	bl	80046f0 <OLED_ShowChar>
        x+=8;
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	3308      	adds	r3, #8
 800481e:	71fb      	strb	r3, [r7, #7]
        p++;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	3301      	adds	r3, #1
 8004824:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1db      	bne.n	80047e6 <OLED_ShowString+0x12>
    }  
}	 
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <OLED_Init>:

void OLED_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800483c:	f003 fb22 	bl	8007e84 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8004840:	4b41      	ldr	r3, [pc, #260]	; (8004948 <OLED_Init+0x110>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <OLED_Init+0x110>)
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <OLED_Init+0x110>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a3d      	ldr	r2, [pc, #244]	; (8004948 <OLED_Init+0x110>)
 8004852:	f023 0304 	bic.w	r3, r3, #4
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8004858:	f003 fb28 	bl	8007eac <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	483a      	ldr	r0, [pc, #232]	; (800494c <OLED_Init+0x114>)
 8004862:	f002 f867 	bl	8006934 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004866:	2064      	movs	r0, #100	; 0x64
 8004868:	f000 fd86 	bl	8005378 <HAL_Delay>
	OLED_RST_Set();
 800486c:	2201      	movs	r2, #1
 800486e:	2180      	movs	r1, #128	; 0x80
 8004870:	4836      	ldr	r0, [pc, #216]	; (800494c <OLED_Init+0x114>)
 8004872:	f002 f85f 	bl	8006934 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8004876:	2100      	movs	r1, #0
 8004878:	20ae      	movs	r0, #174	; 0xae
 800487a:	f7ff fe6f 	bl	800455c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800487e:	2100      	movs	r1, #0
 8004880:	20d5      	movs	r0, #213	; 0xd5
 8004882:	f7ff fe6b 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8004886:	2100      	movs	r1, #0
 8004888:	2050      	movs	r0, #80	; 0x50
 800488a:	f7ff fe67 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800488e:	2100      	movs	r1, #0
 8004890:	20a8      	movs	r0, #168	; 0xa8
 8004892:	f7ff fe63 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8004896:	2100      	movs	r1, #0
 8004898:	203f      	movs	r0, #63	; 0x3f
 800489a:	f7ff fe5f 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800489e:	2100      	movs	r1, #0
 80048a0:	20d3      	movs	r0, #211	; 0xd3
 80048a2:	f7ff fe5b 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80048a6:	2100      	movs	r1, #0
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7ff fe57 	bl	800455c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80048ae:	2100      	movs	r1, #0
 80048b0:	2040      	movs	r0, #64	; 0x40
 80048b2:	f7ff fe53 	bl	800455c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80048b6:	2100      	movs	r1, #0
 80048b8:	208d      	movs	r0, #141	; 0x8d
 80048ba:	f7ff fe4f 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80048be:	2100      	movs	r1, #0
 80048c0:	2014      	movs	r0, #20
 80048c2:	f7ff fe4b 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80048c6:	2100      	movs	r1, #0
 80048c8:	2020      	movs	r0, #32
 80048ca:	f7ff fe47 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80048ce:	2100      	movs	r1, #0
 80048d0:	2002      	movs	r0, #2
 80048d2:	f7ff fe43 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80048d6:	2100      	movs	r1, #0
 80048d8:	20a1      	movs	r0, #161	; 0xa1
 80048da:	f7ff fe3f 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80048de:	2100      	movs	r1, #0
 80048e0:	20c0      	movs	r0, #192	; 0xc0
 80048e2:	f7ff fe3b 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80048e6:	2100      	movs	r1, #0
 80048e8:	20da      	movs	r0, #218	; 0xda
 80048ea:	f7ff fe37 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80048ee:	2100      	movs	r1, #0
 80048f0:	2012      	movs	r0, #18
 80048f2:	f7ff fe33 	bl	800455c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80048f6:	2100      	movs	r1, #0
 80048f8:	2081      	movs	r0, #129	; 0x81
 80048fa:	f7ff fe2f 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80048fe:	2100      	movs	r1, #0
 8004900:	20ef      	movs	r0, #239	; 0xef
 8004902:	f7ff fe2b 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8004906:	2100      	movs	r1, #0
 8004908:	20d9      	movs	r0, #217	; 0xd9
 800490a:	f7ff fe27 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800490e:	2100      	movs	r1, #0
 8004910:	20f1      	movs	r0, #241	; 0xf1
 8004912:	f7ff fe23 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8004916:	2100      	movs	r1, #0
 8004918:	20db      	movs	r0, #219	; 0xdb
 800491a:	f7ff fe1f 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800491e:	2100      	movs	r1, #0
 8004920:	2030      	movs	r0, #48	; 0x30
 8004922:	f7ff fe1b 	bl	800455c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8004926:	2100      	movs	r1, #0
 8004928:	20a4      	movs	r0, #164	; 0xa4
 800492a:	f7ff fe17 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800492e:	2100      	movs	r1, #0
 8004930:	20a6      	movs	r0, #166	; 0xa6
 8004932:	f7ff fe13 	bl	800455c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8004936:	2100      	movs	r1, #0
 8004938:	20af      	movs	r0, #175	; 0xaf
 800493a:	f7ff fe0f 	bl	800455c <OLED_WR_Byte>
	OLED_Clear(); 
 800493e:	f7ff fe57 	bl	80045f0 <OLED_Clear>
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <HAL_MspInit+0x64>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <HAL_MspInit+0x64>)
 8004960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004964:	6453      	str	r3, [r2, #68]	; 0x44
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_MspInit+0x64>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <HAL_MspInit+0x64>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <HAL_MspInit+0x64>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6413      	str	r3, [r2, #64]	; 0x40
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <HAL_MspInit+0x64>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	210f      	movs	r1, #15
 8004992:	f06f 0001 	mvn.w	r0, #1
 8004996:	f001 f9ec 	bl	8005d72 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	2105      	movs	r1, #5
 800499e:	2005      	movs	r0, #5
 80049a0:	f001 f9e7 	bl	8005d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80049a4:	2005      	movs	r0, #5
 80049a6:	f001 fa00 	bl	8005daa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2e      	ldr	r2, [pc, #184]	; (8004a90 <HAL_ADC_MspInit+0xd8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d156      	bne.n	8004a88 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_ADC_MspInit+0xdc>)
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <HAL_ADC_MspInit+0xdc>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_ADC_MspInit+0xdc>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <HAL_ADC_MspInit+0xdc>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	4a25      	ldr	r2, [pc, #148]	; (8004a94 <HAL_ADC_MspInit+0xdc>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	6313      	str	r3, [r2, #48]	; 0x30
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_ADC_MspInit+0xdc>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004a12:	2306      	movs	r3, #6
 8004a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a16:	2303      	movs	r3, #3
 8004a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4619      	mov	r1, r3
 8004a24:	481c      	ldr	r0, [pc, #112]	; (8004a98 <HAL_ADC_MspInit+0xe0>)
 8004a26:	f001 fde9 	bl	80065fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <HAL_ADC_MspInit+0xe8>)
 8004a2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a3c:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004a60:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a6c:	480b      	ldr	r0, [pc, #44]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a6e:	f001 f9b7 	bl	8005de0 <HAL_DMA_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8004a78:	f7ff fd32 	bl	80044e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
 8004a82:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <HAL_ADC_MspInit+0xe4>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a88:	bf00      	nop
 8004a8a:	3728      	adds	r7, #40	; 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40012000 	.word	0x40012000
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40020800 	.word	0x40020800
 8004a9c:	200002b4 	.word	0x200002b4
 8004aa0:	40026410 	.word	0x40026410

08004aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aac:	f107 031c 	add.w	r3, r7, #28
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_I2C_MspInit+0x148>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d15b      	bne.n	8004b7e <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a48      	ldr	r2, [pc, #288]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae8:	2312      	movs	r3, #18
 8004aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aec:	2301      	movs	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af0:	2303      	movs	r3, #3
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004af4:	2304      	movs	r3, #4
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af8:	f107 031c 	add.w	r3, r7, #28
 8004afc:	4619      	mov	r1, r3
 8004afe:	483d      	ldr	r0, [pc, #244]	; (8004bf4 <HAL_I2C_MspInit+0x150>)
 8004b00:	f001 fd7c 	bl	80065fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b12:	6413      	str	r3, [r2, #64]	; 0x40
 8004b14:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004b20:	4b35      	ldr	r3, [pc, #212]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b22:	4a36      	ldr	r2, [pc, #216]	; (8004bfc <HAL_I2C_MspInit+0x158>)
 8004b24:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004b26:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b2c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b2e:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b34:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b5a:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004b60:	4825      	ldr	r0, [pc, #148]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b62:	f001 f93d 	bl	8005de0 <HAL_DMA_Init>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004b6c:	f7ff fcb8 	bl	80044e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
 8004b76:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <HAL_I2C_MspInit+0x154>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b7c:	e031      	b.n	8004be2 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_I2C_MspInit+0x15c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d12c      	bne.n	8004be2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004b92:	f043 0302 	orr.w	r3, r3, #2
 8004b96:	6313      	str	r3, [r2, #48]	; 0x30
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ba4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004baa:	2312      	movs	r3, #18
 8004bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bb6:	2304      	movs	r3, #4
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bba:	f107 031c 	add.w	r3, r7, #28
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	480c      	ldr	r0, [pc, #48]	; (8004bf4 <HAL_I2C_MspInit+0x150>)
 8004bc2:	f001 fd1b 	bl	80065fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004bd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_I2C_MspInit+0x14c>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	3730      	adds	r7, #48	; 0x30
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40005400 	.word	0x40005400
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40020400 	.word	0x40020400
 8004bf8:	20000368 	.word	0x20000368
 8004bfc:	40026010 	.word	0x40026010
 8004c00:	40005800 	.word	0x40005800

08004c04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <HAL_TIM_PWM_MspInit+0x3c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10d      	bne.n	8004c32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_TIM_PWM_MspInit+0x40>)
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_TIM_PWM_MspInit+0x40>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6453      	str	r3, [r2, #68]	; 0x44
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <HAL_TIM_PWM_MspInit+0x40>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40023800 	.word	0x40023800

08004c48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	f107 031c 	add.w	r3, r7, #28
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d14b      	bne.n	8004d02 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a3e      	ldr	r2, [pc, #248]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7a:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a37      	ldr	r2, [pc, #220]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a30      	ldr	r2, [pc, #192]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	f107 031c 	add.w	r3, r7, #28
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4825      	ldr	r0, [pc, #148]	; (8004d70 <HAL_TIM_Encoder_MspInit+0x128>)
 8004cdc:	f001 fc8e 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	2300      	movs	r3, #0
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf4:	f107 031c 	add.w	r3, r7, #28
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	481e      	ldr	r0, [pc, #120]	; (8004d74 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004cfc:	f001 fc7e 	bl	80065fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004d00:	e030      	b.n	8004d64 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x130>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d12b      	bne.n	8004d64 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6313      	str	r3, [r2, #48]	; 0x30
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d44:	23c0      	movs	r3, #192	; 0xc0
 8004d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d54:	2302      	movs	r3, #2
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d58:	f107 031c 	add.w	r3, r7, #28
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4804      	ldr	r0, [pc, #16]	; (8004d70 <HAL_TIM_Encoder_MspInit+0x128>)
 8004d60:	f001 fc4c 	bl	80065fc <HAL_GPIO_Init>
}
 8004d64:	bf00      	nop
 8004d66:	3730      	adds	r7, #48	; 0x30
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40020000 	.word	0x40020000
 8004d74:	40020400 	.word	0x40020400
 8004d78:	40000400 	.word	0x40000400

08004d7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <HAL_TIM_IC_MspInit+0x94>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d134      	bne.n	8004e08 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <HAL_TIM_IC_MspInit+0x98>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a1b      	ldr	r2, [pc, #108]	; (8004e14 <HAL_TIM_IC_MspInit+0x98>)
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <HAL_TIM_IC_MspInit+0x98>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <HAL_TIM_IC_MspInit+0x98>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <HAL_TIM_IC_MspInit+0x98>)
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_TIM_IC_MspInit+0x98>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = EchoD12_Pin;
 8004dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de4:	2300      	movs	r3, #0
 8004de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004de8:	2302      	movs	r3, #2
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EchoD12_GPIO_Port, &GPIO_InitStruct);
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	4619      	mov	r1, r3
 8004df2:	4809      	ldr	r0, [pc, #36]	; (8004e18 <HAL_TIM_IC_MspInit+0x9c>)
 8004df4:	f001 fc02 	bl	80065fc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2105      	movs	r1, #5
 8004dfc:	201e      	movs	r0, #30
 8004dfe:	f000 ffb8 	bl	8005d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e02:	201e      	movs	r0, #30
 8004e04:	f000 ffd1 	bl	8005daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004e08:	bf00      	nop
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40020c00 	.word	0x40020c00

08004e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM6)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <HAL_TIM_Base_MspInit+0xac>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10e      	bne.n	8004e5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e48:	f043 0310 	orr.w	r3, r3, #16
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004e5a:	e030      	b.n	8004ebe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_TIM_Base_MspInit+0xb4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d12b      	bne.n	8004ebe <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	6453      	str	r3, [r2, #68]	; 0x44
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e8c:	f043 0304 	orr.w	r3, r3, #4
 8004e90:	6313      	str	r3, [r2, #48]	; 0x30
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <HAL_TIM_Base_MspInit+0xb0>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004e9e:	23c0      	movs	r3, #192	; 0xc0
 8004ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4806      	ldr	r0, [pc, #24]	; (8004ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8004eba:	f001 fb9f 	bl	80065fc <HAL_GPIO_Init>
}
 8004ebe:	bf00      	nop
 8004ec0:	3728      	adds	r7, #40	; 0x28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40001000 	.word	0x40001000
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40020800 	.word	0x40020800

08004ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee0:	f107 030c 	add.w	r3, r7, #12
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <HAL_TIM_MspPostInit+0x68>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d11e      	bne.n	8004f38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_TIM_MspPostInit+0x6c>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <HAL_TIM_MspPostInit+0x6c>)
 8004f04:	f043 0310 	orr.w	r3, r3, #16
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_TIM_MspPostInit+0x6c>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f2c:	f107 030c 	add.w	r3, r7, #12
 8004f30:	4619      	mov	r1, r3
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <HAL_TIM_MspPostInit+0x70>)
 8004f34:	f001 fb62 	bl	80065fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004f38:	bf00      	nop
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40021000 	.word	0x40021000

08004f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_UART_MspInit+0x94>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d134      	bne.n	8004fd8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <HAL_UART_MspInit+0x98>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a1b      	ldr	r2, [pc, #108]	; (8004fe4 <HAL_UART_MspInit+0x98>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7e:	4b19      	ldr	r3, [pc, #100]	; (8004fe4 <HAL_UART_MspInit+0x98>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_UART_MspInit+0x98>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <HAL_UART_MspInit+0x98>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_UART_MspInit+0x98>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004fa6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fac:	2302      	movs	r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4809      	ldr	r0, [pc, #36]	; (8004fe8 <HAL_UART_MspInit+0x9c>)
 8004fc4:	f001 fb1a 	bl	80065fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2105      	movs	r1, #5
 8004fcc:	2027      	movs	r0, #39	; 0x27
 8004fce:	f000 fed0 	bl	8005d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004fd2:	2027      	movs	r0, #39	; 0x27
 8004fd4:	f000 fee9 	bl	8005daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004fd8:	bf00      	nop
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40004800 	.word	0x40004800
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40020800 	.word	0x40020800

08004fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ff0:	e7fe      	b.n	8004ff0 <NMI_Handler+0x4>

08004ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ff6:	e7fe      	b.n	8004ff6 <HardFault_Handler+0x4>

08004ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ffc:	e7fe      	b.n	8004ffc <MemManage_Handler+0x4>

08004ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005002:	e7fe      	b.n	8005002 <BusFault_Handler+0x4>

08005004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005008:	e7fe      	b.n	8005008 <UsageFault_Handler+0x4>

0800500a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800501c:	f000 f98c 	bl	8005338 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005020:	f007 fe0e 	bl	800cc40 <xTaskGetSchedulerState>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800502a:	f008 fbf5 	bl	800d818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}

08005032 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005044:	4802      	ldr	r0, [pc, #8]	; (8005050 <DMA1_Stream0_IRQHandler+0x10>)
 8005046:	f001 f863 	bl	8006110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000368 	.word	0x20000368

08005054 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005058:	4802      	ldr	r0, [pc, #8]	; (8005064 <TIM4_IRQHandler+0x10>)
 800505a:	f003 ffa5 	bl	8008fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200004a0 	.word	0x200004a0

08005068 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800506c:	4802      	ldr	r0, [pc, #8]	; (8005078 <USART3_IRQHandler+0x10>)
 800506e:	f005 f961 	bl	800a334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000578 	.word	0x20000578

0800507c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005080:	4802      	ldr	r0, [pc, #8]	; (800508c <DMA2_Stream0_IRQHandler+0x10>)
 8005082:	f001 f845 	bl	8006110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	200002b4 	.word	0x200002b4

08005090 <_getpid>:
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
 8005094:	2301      	movs	r3, #1
 8005096:	4618      	mov	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <_kill>:
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	f009 fc11 	bl	800e8d0 <__errno>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2216      	movs	r2, #22
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_exit>:
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	f04f 31ff 	mov.w	r1, #4294967295
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffe7 	bl	80050a0 <_kill>
 80050d2:	e7fe      	b.n	80050d2 <_exit+0x12>

080050d4 <_read>:
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e00a      	b.n	80050fc <_read+0x28>
 80050e6:	f3af 8000 	nop.w
 80050ea:	4601      	mov	r1, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	60ba      	str	r2, [r7, #8]
 80050f2:	b2ca      	uxtb	r2, r1
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	dbf0      	blt.n	80050e6 <_read+0x12>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_write>:
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e009      	b.n	8005134 <_write+0x26>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	60ba      	str	r2, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f3af 8000 	nop.w
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	dbf1      	blt.n	8005120 <_write+0x12>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_close>:
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	f04f 33ff 	mov.w	r3, #4294967295
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <_fstat>:
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	2300      	movs	r3, #0
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <_isatty>:
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	2301      	movs	r3, #1
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_lseek>:
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	2300      	movs	r3, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <_sbrk>:
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <_sbrk+0x5c>)
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <_sbrk+0x60>)
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <_sbrk+0x64>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <_sbrk+0x22>
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <_sbrk+0x64>)
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <_sbrk+0x68>)
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <_sbrk+0x64>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4413      	add	r3, r2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d207      	bcs.n	80051f0 <_sbrk+0x40>
 80051e0:	f009 fb76 	bl	800e8d0 <__errno>
 80051e4:	4603      	mov	r3, r0
 80051e6:	220c      	movs	r2, #12
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295
 80051ee:	e009      	b.n	8005204 <_sbrk+0x54>
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <_sbrk+0x64>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	4b07      	ldr	r3, [pc, #28]	; (8005214 <_sbrk+0x64>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	4a05      	ldr	r2, [pc, #20]	; (8005214 <_sbrk+0x64>)
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20020000 	.word	0x20020000
 8005210:	00000400 	.word	0x00000400
 8005214:	20000a5c 	.word	0x20000a5c
 8005218:	20005500 	.word	0x20005500

0800521c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <SystemInit+0x20>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	4a05      	ldr	r2, [pc, #20]	; (800523c <SystemInit+0x20>)
 8005228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800522c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <Reset_Handler>:
 8005240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005278 <LoopFillZerobss+0x12>
 8005244:	480d      	ldr	r0, [pc, #52]	; (800527c <LoopFillZerobss+0x16>)
 8005246:	490e      	ldr	r1, [pc, #56]	; (8005280 <LoopFillZerobss+0x1a>)
 8005248:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <LoopFillZerobss+0x1e>)
 800524a:	2300      	movs	r3, #0
 800524c:	e002      	b.n	8005254 <LoopCopyDataInit>

0800524e <CopyDataInit>:
 800524e:	58d4      	ldr	r4, [r2, r3]
 8005250:	50c4      	str	r4, [r0, r3]
 8005252:	3304      	adds	r3, #4

08005254 <LoopCopyDataInit>:
 8005254:	18c4      	adds	r4, r0, r3
 8005256:	428c      	cmp	r4, r1
 8005258:	d3f9      	bcc.n	800524e <CopyDataInit>
 800525a:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <LoopFillZerobss+0x22>)
 800525c:	4c0b      	ldr	r4, [pc, #44]	; (800528c <LoopFillZerobss+0x26>)
 800525e:	2300      	movs	r3, #0
 8005260:	e001      	b.n	8005266 <LoopFillZerobss>

08005262 <FillZerobss>:
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	3204      	adds	r2, #4

08005266 <LoopFillZerobss>:
 8005266:	42a2      	cmp	r2, r4
 8005268:	d3fb      	bcc.n	8005262 <FillZerobss>
 800526a:	f7ff ffd7 	bl	800521c <SystemInit>
 800526e:	f009 fb35 	bl	800e8dc <__libc_init_array>
 8005272:	f7fb fe87 	bl	8000f84 <main>
 8005276:	4770      	bx	lr
 8005278:	20020000 	.word	0x20020000
 800527c:	20000000 	.word	0x20000000
 8005280:	200001e8 	.word	0x200001e8
 8005284:	08012848 	.word	0x08012848
 8005288:	200001e8 	.word	0x200001e8
 800528c:	20005500 	.word	0x20005500

08005290 <ADC_IRQHandler>:
 8005290:	e7fe      	b.n	8005290 <ADC_IRQHandler>
	...

08005294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <HAL_Init+0x40>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <HAL_Init+0x40>)
 800529e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_Init+0x40>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <HAL_Init+0x40>)
 80052aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_Init+0x40>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <HAL_Init+0x40>)
 80052b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052bc:	2003      	movs	r0, #3
 80052be:	f000 fd4d 	bl	8005d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052c2:	200f      	movs	r0, #15
 80052c4:	f000 f808 	bl	80052d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052c8:	f7ff fb42 	bl	8004950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023c00 	.word	0x40023c00

080052d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_InitTick+0x54>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_InitTick+0x58>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	4619      	mov	r1, r3
 80052ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fd65 	bl	8005dc6 <HAL_SYSTICK_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e00e      	b.n	8005324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b0f      	cmp	r3, #15
 800530a:	d80a      	bhi.n	8005322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800530c:	2200      	movs	r2, #0
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	f000 fd2d 	bl	8005d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005318:	4a06      	ldr	r2, [pc, #24]	; (8005334 <HAL_InitTick+0x5c>)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e000      	b.n	8005324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000000 	.word	0x20000000
 8005330:	20000008 	.word	0x20000008
 8005334:	20000004 	.word	0x20000004

08005338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_IncTick+0x20>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_IncTick+0x24>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4413      	add	r3, r2
 8005348:	4a04      	ldr	r2, [pc, #16]	; (800535c <HAL_IncTick+0x24>)
 800534a:	6013      	str	r3, [r2, #0]
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000008 	.word	0x20000008
 800535c:	20000a60 	.word	0x20000a60

08005360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return uwTick;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_GetTick+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000a60 	.word	0x20000a60

08005378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005380:	f7ff ffee 	bl	8005360 <HAL_GetTick>
 8005384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d005      	beq.n	800539e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_Delay+0x44>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800539e:	bf00      	nop
 80053a0:	f7ff ffde 	bl	8005360 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d8f7      	bhi.n	80053a0 <HAL_Delay+0x28>
  {
  }
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000008 	.word	0x20000008

080053c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e033      	b.n	800543e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff faea 	bl	80049b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d118      	bne.n	8005430 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005406:	f023 0302 	bic.w	r3, r3, #2
 800540a:	f043 0202 	orr.w	r2, r3, #2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa54 	bl	80058c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	f043 0201 	orr.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
 800542e:	e001      	b.n	8005434 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_ADC_Start_DMA+0x1e>
 8005462:	2302      	movs	r3, #2
 8005464:	e0e9      	b.n	800563a <HAL_ADC_Start_DMA+0x1f2>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d018      	beq.n	80054ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800548c:	4b6d      	ldr	r3, [pc, #436]	; (8005644 <HAL_ADC_Start_DMA+0x1fc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6d      	ldr	r2, [pc, #436]	; (8005648 <HAL_ADC_Start_DMA+0x200>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0c9a      	lsrs	r2, r3, #18
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80054a0:	e002      	b.n	80054a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f9      	bne.n	80054a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054bc:	d107      	bne.n	80054ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	f040 80a1 	bne.w	8005620 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551c:	d106      	bne.n	800552c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f023 0206 	bic.w	r2, r3, #6
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	645a      	str	r2, [r3, #68]	; 0x44
 800552a:	e002      	b.n	8005532 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800553a:	4b44      	ldr	r3, [pc, #272]	; (800564c <HAL_ADC_Start_DMA+0x204>)
 800553c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	4a43      	ldr	r2, [pc, #268]	; (8005650 <HAL_ADC_Start_DMA+0x208>)
 8005544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	4a42      	ldr	r2, [pc, #264]	; (8005654 <HAL_ADC_Start_DMA+0x20c>)
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	4a41      	ldr	r2, [pc, #260]	; (8005658 <HAL_ADC_Start_DMA+0x210>)
 8005554:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800555e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800556e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	334c      	adds	r3, #76	; 0x4c
 800558a:	4619      	mov	r1, r3
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f000 fcd4 	bl	8005f3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2b00      	cmp	r3, #0
 800559e:	d12a      	bne.n	80055f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2d      	ldr	r2, [pc, #180]	; (800565c <HAL_ADC_Start_DMA+0x214>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d015      	beq.n	80055d6 <HAL_ADC_Start_DMA+0x18e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <HAL_ADC_Start_DMA+0x218>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d105      	bne.n	80055c0 <HAL_ADC_Start_DMA+0x178>
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_ADC_Start_DMA+0x204>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a27      	ldr	r2, [pc, #156]	; (8005664 <HAL_ADC_Start_DMA+0x21c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d136      	bne.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_ADC_Start_DMA+0x204>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d130      	bne.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d129      	bne.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	e020      	b.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a18      	ldr	r2, [pc, #96]	; (800565c <HAL_ADC_Start_DMA+0x214>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d11b      	bne.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d114      	bne.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	e00b      	b.n	8005638 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f043 0210 	orr.w	r2, r3, #16
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f043 0201 	orr.w	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000000 	.word	0x20000000
 8005648:	431bde83 	.word	0x431bde83
 800564c:	40012300 	.word	0x40012300
 8005650:	08005ab9 	.word	0x08005ab9
 8005654:	08005b73 	.word	0x08005b73
 8005658:	08005b8f 	.word	0x08005b8f
 800565c:	40012000 	.word	0x40012000
 8005660:	40012100 	.word	0x40012100
 8005664:	40012200 	.word	0x40012200

08005668 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x1c>
 8005694:	2302      	movs	r3, #2
 8005696:	e105      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x228>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	d925      	bls.n	80056f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68d9      	ldr	r1, [r3, #12]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	3b1e      	subs	r3, #30
 80056be:	2207      	movs	r2, #7
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43da      	mvns	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	400a      	ands	r2, r1
 80056cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68d9      	ldr	r1, [r3, #12]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4618      	mov	r0, r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4403      	add	r3, r0
 80056e6:	3b1e      	subs	r3, #30
 80056e8:	409a      	lsls	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	e022      	b.n	800573a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6919      	ldr	r1, [r3, #16]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	2207      	movs	r2, #7
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	400a      	ands	r2, r1
 8005716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6919      	ldr	r1, [r3, #16]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	4618      	mov	r0, r3
 800572a:	4603      	mov	r3, r0
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4403      	add	r3, r0
 8005730:	409a      	lsls	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d824      	bhi.n	800578c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	3b05      	subs	r3, #5
 8005754:	221f      	movs	r2, #31
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	400a      	ands	r2, r1
 8005762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	4618      	mov	r0, r3
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	3b05      	subs	r3, #5
 800577e:	fa00 f203 	lsl.w	r2, r0, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	635a      	str	r2, [r3, #52]	; 0x34
 800578a:	e04c      	b.n	8005826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d824      	bhi.n	80057de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	3b23      	subs	r3, #35	; 0x23
 80057a6:	221f      	movs	r2, #31
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	43da      	mvns	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	400a      	ands	r2, r1
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4618      	mov	r0, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	3b23      	subs	r3, #35	; 0x23
 80057d0:	fa00 f203 	lsl.w	r2, r0, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
 80057dc:	e023      	b.n	8005826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	3b41      	subs	r3, #65	; 0x41
 80057f0:	221f      	movs	r2, #31
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	400a      	ands	r2, r1
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	4618      	mov	r0, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	3b41      	subs	r3, #65	; 0x41
 800581a:	fa00 f203 	lsl.w	r2, r0, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005826:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <HAL_ADC_ConfigChannel+0x234>)
 8005828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <HAL_ADC_ConfigChannel+0x238>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d109      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x1cc>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b12      	cmp	r3, #18
 800583a:	d105      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_ADC_ConfigChannel+0x238>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d123      	bne.n	800589a <HAL_ADC_ConfigChannel+0x21e>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b10      	cmp	r3, #16
 8005858:	d003      	beq.n	8005862 <HAL_ADC_ConfigChannel+0x1e6>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b11      	cmp	r3, #17
 8005860:	d11b      	bne.n	800589a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b10      	cmp	r3, #16
 8005874:	d111      	bne.n	800589a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_ADC_ConfigChannel+0x23c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <HAL_ADC_ConfigChannel+0x240>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	0c9a      	lsrs	r2, r3, #18
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800588c:	e002      	b.n	8005894 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3b01      	subs	r3, #1
 8005892:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f9      	bne.n	800588e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40012300 	.word	0x40012300
 80058b4:	40012000 	.word	0x40012000
 80058b8:	20000000 	.word	0x20000000
 80058bc:	431bde83 	.word	0x431bde83

080058c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058c8:	4b79      	ldr	r3, [pc, #484]	; (8005ab0 <ADC_Init+0x1f0>)
 80058ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6859      	ldr	r1, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6899      	ldr	r1, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	4a58      	ldr	r2, [pc, #352]	; (8005ab4 <ADC_Init+0x1f4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6899      	ldr	r1, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6899      	ldr	r1, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	e00f      	b.n	80059be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0202 	bic.w	r2, r2, #2
 80059cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6899      	ldr	r1, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7e1b      	ldrb	r3, [r3, #24]
 80059d8:	005a      	lsls	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	3b01      	subs	r3, #1
 8005a18:	035a      	lsls	r2, r3, #13
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	e007      	b.n	8005a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	051a      	lsls	r2, r3, #20
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6899      	ldr	r1, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a76:	025a      	lsls	r2, r3, #9
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	029a      	lsls	r2, r3, #10
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40012300 	.word	0x40012300
 8005ab4:	0f000001 	.word	0x0f000001

08005ab8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d13c      	bne.n	8005b4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d12b      	bne.n	8005b44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d127      	bne.n	8005b44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d119      	bne.n	8005b44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0220 	bic.w	r2, r2, #32
 8005b1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7fc f893 	bl	8001c70 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b4a:	e00e      	b.n	8005b6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fd85 	bl	8005668 <HAL_ADC_ErrorCallback>
}
 8005b5e:	e004      	b.n	8005b6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7fc f833 	bl	8001bec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2240      	movs	r2, #64	; 0x40
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fd5a 	bl	8005668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <__NVIC_SetPriorityGrouping+0x44>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bee:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <__NVIC_SetPriorityGrouping+0x44>)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	60d3      	str	r3, [r2, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	e000ed00 	.word	0xe000ed00

08005c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <__NVIC_GetPriorityGrouping+0x18>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	f003 0307 	and.w	r3, r3, #7
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	e000ed00 	.word	0xe000ed00

08005c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	db0b      	blt.n	8005c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	f003 021f 	and.w	r2, r3, #31
 8005c38:	4907      	ldr	r1, [pc, #28]	; (8005c58 <__NVIC_EnableIRQ+0x38>)
 8005c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2001      	movs	r0, #1
 8005c42:	fa00 f202 	lsl.w	r2, r0, r2
 8005c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e100 	.word	0xe000e100

08005c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	6039      	str	r1, [r7, #0]
 8005c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	db0a      	blt.n	8005c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	490c      	ldr	r1, [pc, #48]	; (8005ca8 <__NVIC_SetPriority+0x4c>)
 8005c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7a:	0112      	lsls	r2, r2, #4
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	440b      	add	r3, r1
 8005c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c84:	e00a      	b.n	8005c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	4908      	ldr	r1, [pc, #32]	; (8005cac <__NVIC_SetPriority+0x50>)
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	3b04      	subs	r3, #4
 8005c94:	0112      	lsls	r2, r2, #4
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	440b      	add	r3, r1
 8005c9a:	761a      	strb	r2, [r3, #24]
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	e000e100 	.word	0xe000e100
 8005cac:	e000ed00 	.word	0xe000ed00

08005cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b089      	sub	sp, #36	; 0x24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f1c3 0307 	rsb	r3, r3, #7
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	bf28      	it	cs
 8005cce:	2304      	movcs	r3, #4
 8005cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	2b06      	cmp	r3, #6
 8005cd8:	d902      	bls.n	8005ce0 <NVIC_EncodePriority+0x30>
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3b03      	subs	r3, #3
 8005cde:	e000      	b.n	8005ce2 <NVIC_EncodePriority+0x32>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43da      	mvns	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	43d9      	mvns	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d08:	4313      	orrs	r3, r2
         );
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3724      	adds	r7, #36	; 0x24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d28:	d301      	bcc.n	8005d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e00f      	b.n	8005d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d2e:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <SysTick_Config+0x40>)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d36:	210f      	movs	r1, #15
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	f7ff ff8e 	bl	8005c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <SysTick_Config+0x40>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d46:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <SysTick_Config+0x40>)
 8005d48:	2207      	movs	r2, #7
 8005d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	e000e010 	.word	0xe000e010

08005d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff ff29 	bl	8005bbc <__NVIC_SetPriorityGrouping>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	4603      	mov	r3, r0
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d84:	f7ff ff3e 	bl	8005c04 <__NVIC_GetPriorityGrouping>
 8005d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	6978      	ldr	r0, [r7, #20]
 8005d90:	f7ff ff8e 	bl	8005cb0 <NVIC_EncodePriority>
 8005d94:	4602      	mov	r2, r0
 8005d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff ff5d 	bl	8005c5c <__NVIC_SetPriority>
}
 8005da2:	bf00      	nop
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	4603      	mov	r3, r0
 8005db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff31 	bl	8005c20 <__NVIC_EnableIRQ>
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ffa2 	bl	8005d18 <SysTick_Config>
 8005dd4:	4603      	mov	r3, r0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005dec:	f7ff fab8 	bl	8005360 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e099      	b.n	8005f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e1c:	e00f      	b.n	8005e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e1e:	f7ff fa9f 	bl	8005360 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b05      	cmp	r3, #5
 8005e2a:	d908      	bls.n	8005e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2203      	movs	r2, #3
 8005e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e078      	b.n	8005f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e8      	bne.n	8005e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <HAL_DMA_Init+0x158>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d107      	bne.n	8005ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d117      	bne.n	8005f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00e      	beq.n	8005f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb0d 	bl	8006504 <DMA_CheckFifoParam>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2240      	movs	r2, #64	; 0x40
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005efe:	2301      	movs	r3, #1
 8005f00:	e016      	b.n	8005f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fac4 	bl	8006498 <DMA_CalcBaseAndBitshift>
 8005f10:	4603      	mov	r3, r0
 8005f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	223f      	movs	r2, #63	; 0x3f
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	f010803f 	.word	0xf010803f

08005f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_DMA_Start_IT+0x26>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e040      	b.n	8005fe4 <HAL_DMA_Start_IT+0xa8>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d12f      	bne.n	8005fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 fa56 	bl	800643c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	223f      	movs	r2, #63	; 0x3f
 8005f96:	409a      	lsls	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0216 	orr.w	r2, r2, #22
 8005faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0208 	orr.w	r2, r2, #8
 8005fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e005      	b.n	8005fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ffa:	f7ff f9b1 	bl	8005360 <HAL_GetTick>
 8005ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d008      	beq.n	800601e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e052      	b.n	80060c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0216 	bic.w	r2, r2, #22
 800602c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800603c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_DMA_Abort+0x62>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0208 	bic.w	r2, r2, #8
 800605c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800606e:	e013      	b.n	8006098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006070:	f7ff f976 	bl	8005360 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b05      	cmp	r3, #5
 800607c:	d90c      	bls.n	8006098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e015      	b.n	80060c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e4      	bne.n	8006070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060aa:	223f      	movs	r2, #63	; 0x3f
 80060ac:	409a      	lsls	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d004      	beq.n	80060ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2280      	movs	r2, #128	; 0x80
 80060e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e00c      	b.n	8006104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2205      	movs	r2, #5
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800611c:	4b8e      	ldr	r3, [pc, #568]	; (8006358 <HAL_DMA_IRQHandler+0x248>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a8e      	ldr	r2, [pc, #568]	; (800635c <HAL_DMA_IRQHandler+0x24c>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	0a9b      	lsrs	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613a:	2208      	movs	r2, #8
 800613c:	409a      	lsls	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01a      	beq.n	800617c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0204 	bic.w	r2, r2, #4
 8006162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	2208      	movs	r2, #8
 800616a:	409a      	lsls	r2, r3
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f043 0201 	orr.w	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	2201      	movs	r2, #1
 8006182:	409a      	lsls	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d012      	beq.n	80061b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619e:	2201      	movs	r2, #1
 80061a0:	409a      	lsls	r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f043 0202 	orr.w	r2, r3, #2
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b6:	2204      	movs	r2, #4
 80061b8:	409a      	lsls	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4013      	ands	r3, r2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d012      	beq.n	80061e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d4:	2204      	movs	r2, #4
 80061d6:	409a      	lsls	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	f043 0204 	orr.w	r2, r3, #4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	2210      	movs	r2, #16
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d043      	beq.n	8006280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d03c      	beq.n	8006280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620a:	2210      	movs	r2, #16
 800620c:	409a      	lsls	r2, r3
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d018      	beq.n	8006252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d024      	beq.n	8006280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
 800623e:	e01f      	b.n	8006280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01b      	beq.n	8006280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	e016      	b.n	8006280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d107      	bne.n	8006270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0208 	bic.w	r2, r2, #8
 800626e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006284:	2220      	movs	r2, #32
 8006286:	409a      	lsls	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 808f 	beq.w	80063b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8087 	beq.w	80063b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a6:	2220      	movs	r2, #32
 80062a8:	409a      	lsls	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d136      	bne.n	8006328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0216 	bic.w	r2, r2, #22
 80062c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <HAL_DMA_IRQHandler+0x1da>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0208 	bic.w	r2, r2, #8
 80062f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	223f      	movs	r2, #63	; 0x3f
 8006300:	409a      	lsls	r2, r3
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631a:	2b00      	cmp	r3, #0
 800631c:	d07e      	beq.n	800641c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
        }
        return;
 8006326:	e079      	b.n	800641c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10d      	bne.n	8006360 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	2b00      	cmp	r3, #0
 800634a:	d031      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
 8006354:	e02c      	b.n	80063b0 <HAL_DMA_IRQHandler+0x2a0>
 8006356:	bf00      	nop
 8006358:	20000000 	.word	0x20000000
 800635c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d023      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
 8006370:	e01e      	b.n	80063b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0210 	bic.w	r2, r2, #16
 800638e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d032      	beq.n	800641e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d022      	beq.n	800640a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2205      	movs	r2, #5
 80063c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0201 	bic.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	3301      	adds	r3, #1
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d307      	bcc.n	80063f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f2      	bne.n	80063dc <HAL_DMA_IRQHandler+0x2cc>
 80063f6:	e000      	b.n	80063fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80063f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
 800641a:	e000      	b.n	800641e <HAL_DMA_IRQHandler+0x30e>
        return;
 800641c:	bf00      	nop
    }
  }
}
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006458:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d108      	bne.n	800647c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800647a:	e007      	b.n	800648c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]
}
 800648c:	bf00      	nop
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	3b10      	subs	r3, #16
 80064a8:	4a14      	ldr	r2, [pc, #80]	; (80064fc <DMA_CalcBaseAndBitshift+0x64>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80064b2:	4a13      	ldr	r2, [pc, #76]	; (8006500 <DMA_CalcBaseAndBitshift+0x68>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d909      	bls.n	80064da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	659a      	str	r2, [r3, #88]	; 0x58
 80064d8:	e007      	b.n	80064ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	aaaaaaab 	.word	0xaaaaaaab
 8006500:	0801248c 	.word	0x0801248c

08006504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11f      	bne.n	800655e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d856      	bhi.n	80065d2 <DMA_CheckFifoParam+0xce>
 8006524:	a201      	add	r2, pc, #4	; (adr r2, 800652c <DMA_CheckFifoParam+0x28>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	0800653d 	.word	0x0800653d
 8006530:	0800654f 	.word	0x0800654f
 8006534:	0800653d 	.word	0x0800653d
 8006538:	080065d3 	.word	0x080065d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d046      	beq.n	80065d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800654c:	e043      	b.n	80065d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006556:	d140      	bne.n	80065da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800655c:	e03d      	b.n	80065da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006566:	d121      	bne.n	80065ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d837      	bhi.n	80065de <DMA_CheckFifoParam+0xda>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <DMA_CheckFifoParam+0x70>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006585 	.word	0x08006585
 8006578:	0800658b 	.word	0x0800658b
 800657c:	08006585 	.word	0x08006585
 8006580:	0800659d 	.word	0x0800659d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
      break;
 8006588:	e030      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d025      	beq.n	80065e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800659a:	e022      	b.n	80065e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065a4:	d11f      	bne.n	80065e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80065aa:	e01c      	b.n	80065e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d903      	bls.n	80065ba <DMA_CheckFifoParam+0xb6>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d003      	beq.n	80065c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80065b8:	e018      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
      break;
 80065be:	e015      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
      break;
 80065d0:	e00b      	b.n	80065ea <DMA_CheckFifoParam+0xe6>
      break;
 80065d2:	bf00      	nop
 80065d4:	e00a      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      break;
 80065d6:	bf00      	nop
 80065d8:	e008      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      break;
 80065da:	bf00      	nop
 80065dc:	e006      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      break;
 80065de:	bf00      	nop
 80065e0:	e004      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      break;
 80065e2:	bf00      	nop
 80065e4:	e002      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      break;   
 80065e6:	bf00      	nop
 80065e8:	e000      	b.n	80065ec <DMA_CheckFifoParam+0xe8>
      break;
 80065ea:	bf00      	nop
    }
  } 
  
  return status; 
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop

080065fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	; 0x24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	e16b      	b.n	80068f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006618:	2201      	movs	r2, #1
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4013      	ands	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	429a      	cmp	r2, r3
 8006632:	f040 815a 	bne.w	80068ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d005      	beq.n	800664e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800664a:	2b02      	cmp	r3, #2
 800664c:	d130      	bne.n	80066b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	2203      	movs	r2, #3
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	43db      	mvns	r3, r3
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4013      	ands	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4313      	orrs	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006684:	2201      	movs	r2, #1
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	f003 0201 	and.w	r2, r3, #1
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d017      	beq.n	80066ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	2203      	movs	r2, #3
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d123      	bne.n	8006740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	08da      	lsrs	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3208      	adds	r2, #8
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	220f      	movs	r2, #15
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	08da      	lsrs	r2, r3, #3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3208      	adds	r2, #8
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	2203      	movs	r2, #3
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0203 	and.w	r2, r3, #3
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4313      	orrs	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80b4 	beq.w	80068ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	4b60      	ldr	r3, [pc, #384]	; (8006908 <HAL_GPIO_Init+0x30c>)
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	4a5f      	ldr	r2, [pc, #380]	; (8006908 <HAL_GPIO_Init+0x30c>)
 800678c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006790:	6453      	str	r3, [r2, #68]	; 0x44
 8006792:	4b5d      	ldr	r3, [pc, #372]	; (8006908 <HAL_GPIO_Init+0x30c>)
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800679e:	4a5b      	ldr	r2, [pc, #364]	; (800690c <HAL_GPIO_Init+0x310>)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	3302      	adds	r3, #2
 80067a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	220f      	movs	r2, #15
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4013      	ands	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a52      	ldr	r2, [pc, #328]	; (8006910 <HAL_GPIO_Init+0x314>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d02b      	beq.n	8006822 <HAL_GPIO_Init+0x226>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a51      	ldr	r2, [pc, #324]	; (8006914 <HAL_GPIO_Init+0x318>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d025      	beq.n	800681e <HAL_GPIO_Init+0x222>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a50      	ldr	r2, [pc, #320]	; (8006918 <HAL_GPIO_Init+0x31c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01f      	beq.n	800681a <HAL_GPIO_Init+0x21e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a4f      	ldr	r2, [pc, #316]	; (800691c <HAL_GPIO_Init+0x320>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d019      	beq.n	8006816 <HAL_GPIO_Init+0x21a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a4e      	ldr	r2, [pc, #312]	; (8006920 <HAL_GPIO_Init+0x324>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <HAL_GPIO_Init+0x216>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a4d      	ldr	r2, [pc, #308]	; (8006924 <HAL_GPIO_Init+0x328>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00d      	beq.n	800680e <HAL_GPIO_Init+0x212>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a4c      	ldr	r2, [pc, #304]	; (8006928 <HAL_GPIO_Init+0x32c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d007      	beq.n	800680a <HAL_GPIO_Init+0x20e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a4b      	ldr	r2, [pc, #300]	; (800692c <HAL_GPIO_Init+0x330>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_GPIO_Init+0x20a>
 8006802:	2307      	movs	r3, #7
 8006804:	e00e      	b.n	8006824 <HAL_GPIO_Init+0x228>
 8006806:	2308      	movs	r3, #8
 8006808:	e00c      	b.n	8006824 <HAL_GPIO_Init+0x228>
 800680a:	2306      	movs	r3, #6
 800680c:	e00a      	b.n	8006824 <HAL_GPIO_Init+0x228>
 800680e:	2305      	movs	r3, #5
 8006810:	e008      	b.n	8006824 <HAL_GPIO_Init+0x228>
 8006812:	2304      	movs	r3, #4
 8006814:	e006      	b.n	8006824 <HAL_GPIO_Init+0x228>
 8006816:	2303      	movs	r3, #3
 8006818:	e004      	b.n	8006824 <HAL_GPIO_Init+0x228>
 800681a:	2302      	movs	r3, #2
 800681c:	e002      	b.n	8006824 <HAL_GPIO_Init+0x228>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <HAL_GPIO_Init+0x228>
 8006822:	2300      	movs	r3, #0
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	f002 0203 	and.w	r2, r2, #3
 800682a:	0092      	lsls	r2, r2, #2
 800682c:	4093      	lsls	r3, r2
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	4313      	orrs	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006834:	4935      	ldr	r1, [pc, #212]	; (800690c <HAL_GPIO_Init+0x310>)
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	089b      	lsrs	r3, r3, #2
 800683a:	3302      	adds	r3, #2
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006842:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <HAL_GPIO_Init+0x334>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	43db      	mvns	r3, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4013      	ands	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006866:	4a32      	ldr	r2, [pc, #200]	; (8006930 <HAL_GPIO_Init+0x334>)
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800686c:	4b30      	ldr	r3, [pc, #192]	; (8006930 <HAL_GPIO_Init+0x334>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	43db      	mvns	r3, r3
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	4013      	ands	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006890:	4a27      	ldr	r2, [pc, #156]	; (8006930 <HAL_GPIO_Init+0x334>)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006896:	4b26      	ldr	r3, [pc, #152]	; (8006930 <HAL_GPIO_Init+0x334>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	43db      	mvns	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4013      	ands	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068ba:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <HAL_GPIO_Init+0x334>)
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068c0:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <HAL_GPIO_Init+0x334>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	43db      	mvns	r3, r3
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	4013      	ands	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068e4:	4a12      	ldr	r2, [pc, #72]	; (8006930 <HAL_GPIO_Init+0x334>)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	3301      	adds	r3, #1
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	f67f ae90 	bls.w	8006618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800
 800690c:	40013800 	.word	0x40013800
 8006910:	40020000 	.word	0x40020000
 8006914:	40020400 	.word	0x40020400
 8006918:	40020800 	.word	0x40020800
 800691c:	40020c00 	.word	0x40020c00
 8006920:	40021000 	.word	0x40021000
 8006924:	40021400 	.word	0x40021400
 8006928:	40021800 	.word	0x40021800
 800692c:	40021c00 	.word	0x40021c00
 8006930:	40013c00 	.word	0x40013c00

08006934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
 8006940:	4613      	mov	r3, r2
 8006942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006944:	787b      	ldrb	r3, [r7, #1]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006950:	e003      	b.n	800695a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006952:	887b      	ldrh	r3, [r7, #2]
 8006954:	041a      	lsls	r2, r3, #16
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	619a      	str	r2, [r3, #24]
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e12b      	b.n	8006bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe f888 	bl	8004aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2224      	movs	r2, #36	; 0x24
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069cc:	f001 feb2 	bl	8008734 <HAL_RCC_GetPCLK1Freq>
 80069d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4a81      	ldr	r2, [pc, #516]	; (8006bdc <HAL_I2C_Init+0x274>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d807      	bhi.n	80069ec <HAL_I2C_Init+0x84>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a80      	ldr	r2, [pc, #512]	; (8006be0 <HAL_I2C_Init+0x278>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bf94      	ite	ls
 80069e4:	2301      	movls	r3, #1
 80069e6:	2300      	movhi	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	e006      	b.n	80069fa <HAL_I2C_Init+0x92>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a7d      	ldr	r2, [pc, #500]	; (8006be4 <HAL_I2C_Init+0x27c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bf94      	ite	ls
 80069f4:	2301      	movls	r3, #1
 80069f6:	2300      	movhi	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e0e7      	b.n	8006bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a78      	ldr	r2, [pc, #480]	; (8006be8 <HAL_I2C_Init+0x280>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	0c9b      	lsrs	r3, r3, #18
 8006a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4a6a      	ldr	r2, [pc, #424]	; (8006bdc <HAL_I2C_Init+0x274>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d802      	bhi.n	8006a3c <HAL_I2C_Init+0xd4>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	e009      	b.n	8006a50 <HAL_I2C_Init+0xe8>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	4a69      	ldr	r2, [pc, #420]	; (8006bec <HAL_I2C_Init+0x284>)
 8006a48:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4c:	099b      	lsrs	r3, r3, #6
 8006a4e:	3301      	adds	r3, #1
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	495c      	ldr	r1, [pc, #368]	; (8006bdc <HAL_I2C_Init+0x274>)
 8006a6c:	428b      	cmp	r3, r1
 8006a6e:	d819      	bhi.n	8006aa4 <HAL_I2C_Init+0x13c>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1e59      	subs	r1, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a7e:	1c59      	adds	r1, r3, #1
 8006a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a84:	400b      	ands	r3, r1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_I2C_Init+0x138>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1e59      	subs	r1, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a9e:	e051      	b.n	8006b44 <HAL_I2C_Init+0x1dc>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	e04f      	b.n	8006b44 <HAL_I2C_Init+0x1dc>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d111      	bne.n	8006ad0 <HAL_I2C_Init+0x168>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1e58      	subs	r0, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	440b      	add	r3, r1
 8006aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8006abe:	3301      	adds	r3, #1
 8006ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	e012      	b.n	8006af6 <HAL_I2C_Init+0x18e>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	1e58      	subs	r0, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	0099      	lsls	r1, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bf0c      	ite	eq
 8006af0:	2301      	moveq	r3, #1
 8006af2:	2300      	movne	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_I2C_Init+0x196>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e022      	b.n	8006b44 <HAL_I2C_Init+0x1dc>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10e      	bne.n	8006b24 <HAL_I2C_Init+0x1bc>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1e58      	subs	r0, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	440b      	add	r3, r1
 8006b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b18:	3301      	adds	r3, #1
 8006b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	e00f      	b.n	8006b44 <HAL_I2C_Init+0x1dc>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1e58      	subs	r0, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6859      	ldr	r1, [r3, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	0099      	lsls	r1, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	6809      	ldr	r1, [r1, #0]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69da      	ldr	r2, [r3, #28]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6911      	ldr	r1, [r2, #16]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68d2      	ldr	r2, [r2, #12]
 8006b7e:	4311      	orrs	r1, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695a      	ldr	r2, [r3, #20]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	000186a0 	.word	0x000186a0
 8006be0:	001e847f 	.word	0x001e847f
 8006be4:	003d08ff 	.word	0x003d08ff
 8006be8:	431bde83 	.word	0x431bde83
 8006bec:	10624dd3 	.word	0x10624dd3

08006bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	817b      	strh	r3, [r7, #10]
 8006c02:	460b      	mov	r3, r1
 8006c04:	813b      	strh	r3, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c0a:	f7fe fba9 	bl	8005360 <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	f040 80d9 	bne.w	8006dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	2319      	movs	r3, #25
 8006c24:	2201      	movs	r2, #1
 8006c26:	496d      	ldr	r1, [pc, #436]	; (8006ddc <HAL_I2C_Mem_Write+0x1ec>)
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 ff4d 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
 8006c36:	e0cc      	b.n	8006dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_I2C_Mem_Write+0x56>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e0c5      	b.n	8006dd2 <HAL_I2C_Mem_Write+0x1e2>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d007      	beq.n	8006c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2221      	movs	r2, #33	; 0x21
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4a4d      	ldr	r2, [pc, #308]	; (8006de0 <HAL_I2C_Mem_Write+0x1f0>)
 8006cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cae:	88f8      	ldrh	r0, [r7, #6]
 8006cb0:	893a      	ldrh	r2, [r7, #8]
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fc72 	bl	80075a8 <I2C_RequestMemoryWrite>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d052      	beq.n	8006d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e081      	b.n	8006dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 ffce 	bl	8007c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d107      	bne.n	8006cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e06b      	b.n	8006dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d11b      	bne.n	8006d70 <HAL_I2C_Mem_Write+0x180>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1aa      	bne.n	8006cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 ffba 	bl	8007cf6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00d      	beq.n	8006da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d107      	bne.n	8006da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e016      	b.n	8006dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e000      	b.n	8006dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006dd0:	2302      	movs	r3, #2
  }
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	00100002 	.word	0x00100002
 8006de0:	ffff0000 	.word	0xffff0000

08006de4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	4608      	mov	r0, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	817b      	strh	r3, [r7, #10]
 8006df6:	460b      	mov	r3, r1
 8006df8:	813b      	strh	r3, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dfe:	f7fe faaf 	bl	8005360 <HAL_GetTick>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	f040 8208 	bne.w	8007222 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	2319      	movs	r3, #25
 8006e18:	2201      	movs	r2, #1
 8006e1a:	497b      	ldr	r1, [pc, #492]	; (8007008 <HAL_I2C_Mem_Read+0x224>)
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fe53 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e1fb      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_I2C_Mem_Read+0x56>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e1f4      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d007      	beq.n	8006e60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2222      	movs	r2, #34	; 0x22
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2240      	movs	r2, #64	; 0x40
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a5b      	ldr	r2, [pc, #364]	; (800700c <HAL_I2C_Mem_Read+0x228>)
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ea2:	88f8      	ldrh	r0, [r7, #6]
 8006ea4:	893a      	ldrh	r2, [r7, #8]
 8006ea6:	8979      	ldrh	r1, [r7, #10]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fc0e 	bl	80076d4 <I2C_RequestMemoryRead>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e1b0      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d113      	bne.n	8006ef2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	623b      	str	r3, [r7, #32]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	623b      	str	r3, [r7, #32]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	623b      	str	r3, [r7, #32]
 8006ede:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e184      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d11b      	bne.n	8006f32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e164      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d11b      	bne.n	8006f72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	e144      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f88:	e138      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	f200 80f1 	bhi.w	8007176 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d123      	bne.n	8006fe4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fee9 	bl	8007d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e139      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fe2:	e10b      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d14e      	bne.n	800708a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4906      	ldr	r1, [pc, #24]	; (8007010 <HAL_I2C_Mem_Read+0x22c>)
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fd66 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e10e      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
 8007006:	bf00      	nop
 8007008:	00100002 	.word	0x00100002
 800700c:	ffff0000 	.word	0xffff0000
 8007010:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691a      	ldr	r2, [r3, #16]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007088:	e0b8      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	2200      	movs	r2, #0
 8007092:	4966      	ldr	r1, [pc, #408]	; (800722c <HAL_I2C_Mem_Read+0x448>)
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fd17 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0bf      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	2200      	movs	r2, #0
 80070ee:	494f      	ldr	r1, [pc, #316]	; (800722c <HAL_I2C_Mem_Read+0x448>)
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fce9 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e091      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007174:	e042      	b.n	80071fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fdfc 	bl	8007d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e04c      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d118      	bne.n	80071fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	f47f aec2 	bne.w	8006f8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e000      	b.n	8007224 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007222:	2302      	movs	r3, #2
  }
}
 8007224:	4618      	mov	r0, r3
 8007226:	3728      	adds	r7, #40	; 0x28
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	00010004 	.word	0x00010004

08007230 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08c      	sub	sp, #48	; 0x30
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	4603      	mov	r3, r0
 8007240:	817b      	strh	r3, [r7, #10]
 8007242:	460b      	mov	r3, r1
 8007244:	813b      	strh	r3, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800724a:	f7fe f889 	bl	8005360 <HAL_GetTick>
 800724e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b20      	cmp	r3, #32
 800725e:	f040 8176 	bne.w	800754e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007262:	4b95      	ldr	r3, [pc, #596]	; (80074b8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	08db      	lsrs	r3, r3, #3
 8007268:	4a94      	ldr	r2, [pc, #592]	; (80074bc <HAL_I2C_Mem_Read_DMA+0x28c>)
 800726a:	fba2 2303 	umull	r2, r3, r2, r3
 800726e:	0a1a      	lsrs	r2, r3, #8
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009a      	lsls	r2, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3b01      	subs	r3, #1
 8007280:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d116      	bne.n	80072b6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	f043 0220 	orr.w	r2, r3, #32
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e14c      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d0db      	beq.n	800727c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e13e      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d007      	beq.n	80072f8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2222      	movs	r2, #34	; 0x22
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2240      	movs	r2, #64	; 0x40
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4a62      	ldr	r2, [pc, #392]	; (80074c0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8007338:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800733a:	897a      	ldrh	r2, [r7, #10]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007340:	893a      	ldrh	r2, [r7, #8]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007346:	88fa      	ldrh	r2, [r7, #6]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80cc 	beq.w	80074f4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d02d      	beq.n	80073c0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	4a56      	ldr	r2, [pc, #344]	; (80074c4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800736a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	4a55      	ldr	r2, [pc, #340]	; (80074c8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8007372:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	2200      	movs	r2, #0
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	2200      	movs	r2, #0
 8007382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	2200      	movs	r2, #0
 800738a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	2200      	movs	r2, #0
 8007392:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3310      	adds	r3, #16
 800739e:	4619      	mov	r1, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	461a      	mov	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073aa:	f7fe fdc7 	bl	8005f3c <HAL_DMA_Start_IT>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80073b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 8087 	bne.w	80074cc <HAL_I2C_Mem_Read_DMA+0x29c>
 80073be:	e013      	b.n	80073e8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0b3      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80073e8:	88f8      	ldrh	r0, [r7, #6]
 80073ea:	893a      	ldrh	r2, [r7, #8]
 80073ec:	8979      	ldrh	r1, [r7, #10]
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	2323      	movs	r3, #35	; 0x23
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4603      	mov	r3, r0
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f96b 	bl	80076d4 <I2C_RequestMemoryRead>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d023      	beq.n	800744c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fe5f 	bl	80060cc <HAL_DMA_Abort_IT>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	2200      	movs	r2, #0
 800741a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800742a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e081      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007450:	2b01      	cmp	r3, #1
 8007452:	d108      	bne.n	8007466 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e007      	b.n	8007476 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007474:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b2:	605a      	str	r2, [r3, #4]
 80074b4:	e049      	b.n	800754a <HAL_I2C_Mem_Read_DMA+0x31a>
 80074b6:	bf00      	nop
 80074b8:	20000000 	.word	0x20000000
 80074bc:	14f8b589 	.word	0x14f8b589
 80074c0:	ffff0000 	.word	0xffff0000
 80074c4:	080078a5 	.word	0x080078a5
 80074c8:	08007a4f 	.word	0x08007a4f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	f043 0210 	orr.w	r2, r3, #16
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e02d      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80074f4:	88f8      	ldrh	r0, [r7, #6]
 80074f6:	893a      	ldrh	r2, [r7, #8]
 80074f8:	8979      	ldrh	r1, [r7, #10]
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	2323      	movs	r3, #35	; 0x23
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	4603      	mov	r3, r0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f8e5 	bl	80076d4 <I2C_RequestMemoryRead>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e01d      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007538:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	e000      	b.n	8007550 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800754e:	2302      	movs	r3, #2
  }
}
 8007550:	4618      	mov	r0, r3
 8007552:	3728      	adds	r7, #40	; 0x28
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	817b      	strh	r3, [r7, #10]
 80075ba:	460b      	mov	r3, r1
 80075bc:	813b      	strh	r3, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2200      	movs	r2, #0
 80075da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fa72 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00d      	beq.n	8007606 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f8:	d103      	bne.n	8007602 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e05f      	b.n	80076c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007606:	897b      	ldrh	r3, [r7, #10]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007614:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	6a3a      	ldr	r2, [r7, #32]
 800761a:	492d      	ldr	r1, [pc, #180]	; (80076d0 <I2C_RequestMemoryWrite+0x128>)
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 faaa 	bl	8007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e04c      	b.n	80076c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007644:	6a39      	ldr	r1, [r7, #32]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fb14 	bl	8007c74 <I2C_WaitOnTXEFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b04      	cmp	r3, #4
 8007658:	d107      	bne.n	800766a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007668:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e02b      	b.n	80076c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d105      	bne.n	8007680 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007674:	893b      	ldrh	r3, [r7, #8]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	611a      	str	r2, [r3, #16]
 800767e:	e021      	b.n	80076c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007680:	893b      	ldrh	r3, [r7, #8]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	b2da      	uxtb	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800768e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007690:	6a39      	ldr	r1, [r7, #32]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 faee 	bl	8007c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d107      	bne.n	80076b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e005      	b.n	80076c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	00010002 	.word	0x00010002

080076d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	461a      	mov	r2, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	817b      	strh	r3, [r7, #10]
 80076e6:	460b      	mov	r3, r1
 80076e8:	813b      	strh	r3, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800770c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	2200      	movs	r2, #0
 8007716:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f9d4 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00d      	beq.n	8007742 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007734:	d103      	bne.n	800773e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e0aa      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007742:	897b      	ldrh	r3, [r7, #10]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	461a      	mov	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007750:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	6a3a      	ldr	r2, [r7, #32]
 8007756:	4952      	ldr	r1, [pc, #328]	; (80078a0 <I2C_RequestMemoryRead+0x1cc>)
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fa0c 	bl	8007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e097      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	6a39      	ldr	r1, [r7, #32]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fa76 	bl	8007c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00d      	beq.n	80077aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	2b04      	cmp	r3, #4
 8007794:	d107      	bne.n	80077a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e076      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d105      	bne.n	80077bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077b0:	893b      	ldrh	r3, [r7, #8]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	611a      	str	r2, [r3, #16]
 80077ba:	e021      	b.n	8007800 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077bc:	893b      	ldrh	r3, [r7, #8]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077cc:	6a39      	ldr	r1, [r7, #32]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fa50 	bl	8007c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00d      	beq.n	80077f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d107      	bne.n	80077f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e050      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077f6:	893b      	ldrh	r3, [r7, #8]
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	6a39      	ldr	r1, [r7, #32]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa35 	bl	8007c74 <I2C_WaitOnTXEFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	2b04      	cmp	r3, #4
 8007816:	d107      	bne.n	8007828 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007826:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e035      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	2200      	movs	r2, #0
 8007844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f93d 	bl	8007ac8 <I2C_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00d      	beq.n	8007870 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007862:	d103      	bne.n	800786c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e013      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007870:	897b      	ldrh	r3, [r7, #10]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	6a3a      	ldr	r2, [r7, #32]
 8007884:	4906      	ldr	r1, [pc, #24]	; (80078a0 <I2C_RequestMemoryRead+0x1cc>)
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 f975 	bl	8007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	00010002 	.word	0x00010002

080078a4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078c0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80078d6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e4:	2200      	movs	r2, #0
 80078e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	2200      	movs	r2, #0
 80078f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80078f8:	7cfb      	ldrb	r3, [r7, #19]
 80078fa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80078fe:	2b21      	cmp	r3, #33	; 0x21
 8007900:	d007      	beq.n	8007912 <I2C_DMAXferCplt+0x6e>
 8007902:	7cfb      	ldrb	r3, [r7, #19]
 8007904:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8007908:	2b22      	cmp	r3, #34	; 0x22
 800790a:	d131      	bne.n	8007970 <I2C_DMAXferCplt+0xcc>
 800790c:	7cbb      	ldrb	r3, [r7, #18]
 800790e:	2b20      	cmp	r3, #32
 8007910:	d12e      	bne.n	8007970 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007920:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2200      	movs	r2, #0
 8007926:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007928:	7cfb      	ldrb	r3, [r7, #19]
 800792a:	2b29      	cmp	r3, #41	; 0x29
 800792c:	d10a      	bne.n	8007944 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2228      	movs	r2, #40	; 0x28
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800793c:	6978      	ldr	r0, [r7, #20]
 800793e:	f7ff fe15 	bl	800756c <HAL_I2C_SlaveTxCpltCallback>
 8007942:	e00c      	b.n	800795e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007944:	7cfb      	ldrb	r3, [r7, #19]
 8007946:	2b2a      	cmp	r3, #42	; 0x2a
 8007948:	d109      	bne.n	800795e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2222      	movs	r2, #34	; 0x22
 800794e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2228      	movs	r2, #40	; 0x28
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	f7ff fe11 	bl	8007580 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800796c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800796e:	e06a      	b.n	8007a46 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d064      	beq.n	8007a46 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b01      	cmp	r3, #1
 8007984:	d107      	bne.n	8007996 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007994:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80079a4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079ac:	d009      	beq.n	80079c2 <I2C_DMAXferCplt+0x11e>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d006      	beq.n	80079c2 <I2C_DMAXferCplt+0x11e>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079ba:	d002      	beq.n	80079c2 <I2C_DMAXferCplt+0x11e>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d107      	bne.n	80079d2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079e0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079f0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2200      	movs	r2, #0
 80079f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007a00:	6978      	ldr	r0, [r7, #20]
 8007a02:	f7ff fdc7 	bl	8007594 <HAL_I2C_ErrorCallback>
}
 8007a06:	e01e      	b.n	8007a46 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b40      	cmp	r3, #64	; 0x40
 8007a1a:	d10a      	bne.n	8007a32 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f7fa fa9a 	bl	8001f64 <HAL_I2C_MemRxCpltCallback>
}
 8007a30:	e009      	b.n	8007a46 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2212      	movs	r2, #18
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a40:	6978      	ldr	r0, [r7, #20]
 8007a42:	f7ff fd89 	bl	8007558 <HAL_I2C_MasterRxCpltCallback>
}
 8007a46:	bf00      	nop
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a68:	2200      	movs	r2, #0
 8007a6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	2200      	movs	r2, #0
 8007a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fe fcd1 	bl	8006424 <HAL_DMA_GetError>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d01b      	beq.n	8007ac0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a96:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f043 0210 	orr.w	r2, r3, #16
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff fd6a 	bl	8007594 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ad8:	e025      	b.n	8007b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d021      	beq.n	8007b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae2:	f7fd fc3d 	bl	8005360 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d302      	bcc.n	8007af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d116      	bne.n	8007b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	f043 0220 	orr.w	r2, r3, #32
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e023      	b.n	8007b6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	0c1b      	lsrs	r3, r3, #16
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10d      	bne.n	8007b4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	43da      	mvns	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	e00c      	b.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	43da      	mvns	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4013      	ands	r3, r2
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2301      	moveq	r3, #1
 8007b60:	2300      	movne	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d0b6      	beq.n	8007ada <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b84:	e051      	b.n	8007c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b94:	d123      	bne.n	8007bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f043 0204 	orr.w	r2, r3, #4
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e046      	b.n	8007c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d021      	beq.n	8007c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be6:	f7fd fbbb 	bl	8005360 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d302      	bcc.n	8007bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d116      	bne.n	8007c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f043 0220 	orr.w	r2, r3, #32
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e020      	b.n	8007c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d10c      	bne.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	43da      	mvns	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bf14      	ite	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	e00b      	b.n	8007c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	43da      	mvns	r2, r3
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d18d      	bne.n	8007b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c80:	e02d      	b.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f8ce 	bl	8007e24 <I2C_IsAcknowledgeFailed>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e02d      	b.n	8007cee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c98:	d021      	beq.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c9a:	f7fd fb61 	bl	8005360 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d302      	bcc.n	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d116      	bne.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e007      	b.n	8007cee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce8:	2b80      	cmp	r3, #128	; 0x80
 8007cea:	d1ca      	bne.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d02:	e02d      	b.n	8007d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f88d 	bl	8007e24 <I2C_IsAcknowledgeFailed>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e02d      	b.n	8007d70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d021      	beq.n	8007d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1c:	f7fd fb20 	bl	8005360 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d302      	bcc.n	8007d32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d116      	bne.n	8007d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e007      	b.n	8007d70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d1ca      	bne.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d84:	e042      	b.n	8007e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d119      	bne.n	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0210 	mvn.w	r2, #16
 8007d9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e029      	b.n	8007e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc8:	f7fd faca 	bl	8005360 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d302      	bcc.n	8007dde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d116      	bne.n	8007e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e007      	b.n	8007e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d1b5      	bne.n	8007d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e3a:	d11b      	bne.n	8007e74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	f043 0204 	orr.w	r2, r3, #4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007e8a:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007e96:	687b      	ldr	r3, [r7, #4]
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	420e0020 	.word	0x420e0020
 8007ea8:	40007000 	.word	0x40007000

08007eac <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <HAL_PWR_DisableBkUpAccess+0x20>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <HAL_PWR_DisableBkUpAccess+0x24>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007ebe:	687b      	ldr	r3, [r7, #4]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	420e0020 	.word	0x420e0020
 8007ed0:	40007000 	.word	0x40007000

08007ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e267      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d075      	beq.n	8007fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ef2:	4b88      	ldr	r3, [pc, #544]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 030c 	and.w	r3, r3, #12
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d00c      	beq.n	8007f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007efe:	4b85      	ldr	r3, [pc, #532]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d112      	bne.n	8007f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f0a:	4b82      	ldr	r3, [pc, #520]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f16:	d10b      	bne.n	8007f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f18:	4b7e      	ldr	r3, [pc, #504]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d05b      	beq.n	8007fdc <HAL_RCC_OscConfig+0x108>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d157      	bne.n	8007fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e242      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d106      	bne.n	8007f48 <HAL_RCC_OscConfig+0x74>
 8007f3a:	4b76      	ldr	r3, [pc, #472]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a75      	ldr	r2, [pc, #468]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e01d      	b.n	8007f84 <HAL_RCC_OscConfig+0xb0>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f50:	d10c      	bne.n	8007f6c <HAL_RCC_OscConfig+0x98>
 8007f52:	4b70      	ldr	r3, [pc, #448]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a6f      	ldr	r2, [pc, #444]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	4b6d      	ldr	r3, [pc, #436]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a6c      	ldr	r2, [pc, #432]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e00b      	b.n	8007f84 <HAL_RCC_OscConfig+0xb0>
 8007f6c:	4b69      	ldr	r3, [pc, #420]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a68      	ldr	r2, [pc, #416]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	4b66      	ldr	r3, [pc, #408]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a65      	ldr	r2, [pc, #404]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d013      	beq.n	8007fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f8c:	f7fd f9e8 	bl	8005360 <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f94:	f7fd f9e4 	bl	8005360 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b64      	cmp	r3, #100	; 0x64
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e207      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa6:	4b5b      	ldr	r3, [pc, #364]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0f0      	beq.n	8007f94 <HAL_RCC_OscConfig+0xc0>
 8007fb2:	e014      	b.n	8007fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb4:	f7fd f9d4 	bl	8005360 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fbc:	f7fd f9d0 	bl	8005360 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b64      	cmp	r3, #100	; 0x64
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e1f3      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fce:	4b51      	ldr	r3, [pc, #324]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1f0      	bne.n	8007fbc <HAL_RCC_OscConfig+0xe8>
 8007fda:	e000      	b.n	8007fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d063      	beq.n	80080b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fea:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 030c 	and.w	r3, r3, #12
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ff6:	4b47      	ldr	r3, [pc, #284]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d11c      	bne.n	800803c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008002:	4b44      	ldr	r3, [pc, #272]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d116      	bne.n	800803c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800800e:	4b41      	ldr	r3, [pc, #260]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_RCC_OscConfig+0x152>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d001      	beq.n	8008026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e1c7      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008026:	4b3b      	ldr	r3, [pc, #236]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4937      	ldr	r1, [pc, #220]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008036:	4313      	orrs	r3, r2
 8008038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800803a:	e03a      	b.n	80080b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d020      	beq.n	8008086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008044:	4b34      	ldr	r3, [pc, #208]	; (8008118 <HAL_RCC_OscConfig+0x244>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804a:	f7fd f989 	bl	8005360 <HAL_GetTick>
 800804e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008052:	f7fd f985 	bl	8005360 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e1a8      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008064:	4b2b      	ldr	r3, [pc, #172]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4925      	ldr	r1, [pc, #148]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 8008080:	4313      	orrs	r3, r2
 8008082:	600b      	str	r3, [r1, #0]
 8008084:	e015      	b.n	80080b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008086:	4b24      	ldr	r3, [pc, #144]	; (8008118 <HAL_RCC_OscConfig+0x244>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7fd f968 	bl	8005360 <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008094:	f7fd f964 	bl	8005360 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e187      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080a6:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f0      	bne.n	8008094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d036      	beq.n	800812c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c6:	4b15      	ldr	r3, [pc, #84]	; (800811c <HAL_RCC_OscConfig+0x248>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080cc:	f7fd f948 	bl	8005360 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080d4:	f7fd f944 	bl	8005360 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e167      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <HAL_RCC_OscConfig+0x240>)
 80080e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <HAL_RCC_OscConfig+0x200>
 80080f2:	e01b      	b.n	800812c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <HAL_RCC_OscConfig+0x248>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080fa:	f7fd f931 	bl	8005360 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008100:	e00e      	b.n	8008120 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008102:	f7fd f92d 	bl	8005360 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d907      	bls.n	8008120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e150      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
 8008114:	40023800 	.word	0x40023800
 8008118:	42470000 	.word	0x42470000
 800811c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008120:	4b88      	ldr	r3, [pc, #544]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1ea      	bne.n	8008102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8097 	beq.w	8008268 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800813e:	4b81      	ldr	r3, [pc, #516]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800814a:	2300      	movs	r3, #0
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	4b7d      	ldr	r3, [pc, #500]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	4a7c      	ldr	r2, [pc, #496]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	6413      	str	r3, [r2, #64]	; 0x40
 800815a:	4b7a      	ldr	r3, [pc, #488]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008162:	60bb      	str	r3, [r7, #8]
 8008164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008166:	2301      	movs	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816a:	4b77      	ldr	r3, [pc, #476]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d118      	bne.n	80081a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008176:	4b74      	ldr	r3, [pc, #464]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a73      	ldr	r2, [pc, #460]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 800817c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008182:	f7fd f8ed 	bl	8005360 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800818a:	f7fd f8e9 	bl	8005360 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e10c      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800819c:	4b6a      	ldr	r3, [pc, #424]	; (8008348 <HAL_RCC_OscConfig+0x474>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d106      	bne.n	80081be <HAL_RCC_OscConfig+0x2ea>
 80081b0:	4b64      	ldr	r3, [pc, #400]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	4a63      	ldr	r2, [pc, #396]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	6713      	str	r3, [r2, #112]	; 0x70
 80081bc:	e01c      	b.n	80081f8 <HAL_RCC_OscConfig+0x324>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d10c      	bne.n	80081e0 <HAL_RCC_OscConfig+0x30c>
 80081c6:	4b5f      	ldr	r3, [pc, #380]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	4a5e      	ldr	r2, [pc, #376]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081cc:	f043 0304 	orr.w	r3, r3, #4
 80081d0:	6713      	str	r3, [r2, #112]	; 0x70
 80081d2:	4b5c      	ldr	r3, [pc, #368]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	4a5b      	ldr	r2, [pc, #364]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	6713      	str	r3, [r2, #112]	; 0x70
 80081de:	e00b      	b.n	80081f8 <HAL_RCC_OscConfig+0x324>
 80081e0:	4b58      	ldr	r3, [pc, #352]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e4:	4a57      	ldr	r2, [pc, #348]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	6713      	str	r3, [r2, #112]	; 0x70
 80081ec:	4b55      	ldr	r3, [pc, #340]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f0:	4a54      	ldr	r2, [pc, #336]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80081f2:	f023 0304 	bic.w	r3, r3, #4
 80081f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d015      	beq.n	800822c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008200:	f7fd f8ae 	bl	8005360 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008206:	e00a      	b.n	800821e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008208:	f7fd f8aa 	bl	8005360 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	f241 3288 	movw	r2, #5000	; 0x1388
 8008216:	4293      	cmp	r3, r2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e0cb      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800821e:	4b49      	ldr	r3, [pc, #292]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0ee      	beq.n	8008208 <HAL_RCC_OscConfig+0x334>
 800822a:	e014      	b.n	8008256 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800822c:	f7fd f898 	bl	8005360 <HAL_GetTick>
 8008230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008232:	e00a      	b.n	800824a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008234:	f7fd f894 	bl	8005360 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e0b5      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800824a:	4b3e      	ldr	r3, [pc, #248]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ee      	bne.n	8008234 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d105      	bne.n	8008268 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800825c:	4b39      	ldr	r3, [pc, #228]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	4a38      	ldr	r2, [pc, #224]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 80a1 	beq.w	80083b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008272:	4b34      	ldr	r3, [pc, #208]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 030c 	and.w	r3, r3, #12
 800827a:	2b08      	cmp	r3, #8
 800827c:	d05c      	beq.n	8008338 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d141      	bne.n	800830a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008286:	4b31      	ldr	r3, [pc, #196]	; (800834c <HAL_RCC_OscConfig+0x478>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800828c:	f7fd f868 	bl	8005360 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008294:	f7fd f864 	bl	8005360 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e087      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a6:	4b27      	ldr	r3, [pc, #156]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f0      	bne.n	8008294 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	019b      	lsls	r3, r3, #6
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	085b      	lsrs	r3, r3, #1
 80082ca:	3b01      	subs	r3, #1
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	061b      	lsls	r3, r3, #24
 80082d6:	491b      	ldr	r1, [pc, #108]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082dc:	4b1b      	ldr	r3, [pc, #108]	; (800834c <HAL_RCC_OscConfig+0x478>)
 80082de:	2201      	movs	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e2:	f7fd f83d 	bl	8005360 <HAL_GetTick>
 80082e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ea:	f7fd f839 	bl	8005360 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e05c      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082fc:	4b11      	ldr	r3, [pc, #68]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0f0      	beq.n	80082ea <HAL_RCC_OscConfig+0x416>
 8008308:	e054      	b.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800830a:	4b10      	ldr	r3, [pc, #64]	; (800834c <HAL_RCC_OscConfig+0x478>)
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008310:	f7fd f826 	bl	8005360 <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008318:	f7fd f822 	bl	8005360 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e045      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832a:	4b06      	ldr	r3, [pc, #24]	; (8008344 <HAL_RCC_OscConfig+0x470>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f0      	bne.n	8008318 <HAL_RCC_OscConfig+0x444>
 8008336:	e03d      	b.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d107      	bne.n	8008350 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e038      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
 8008344:	40023800 	.word	0x40023800
 8008348:	40007000 	.word	0x40007000
 800834c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008350:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <HAL_RCC_OscConfig+0x4ec>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d028      	beq.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008368:	429a      	cmp	r2, r3
 800836a:	d121      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008376:	429a      	cmp	r2, r3
 8008378:	d11a      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008380:	4013      	ands	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008388:	4293      	cmp	r3, r2
 800838a:	d111      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	3b01      	subs	r3, #1
 800839a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800839c:	429a      	cmp	r2, r3
 800839e:	d107      	bne.n	80083b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d001      	beq.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	40023800 	.word	0x40023800

080083c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e0cc      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083d8:	4b68      	ldr	r3, [pc, #416]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d90c      	bls.n	8008400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e6:	4b65      	ldr	r3, [pc, #404]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ee:	4b63      	ldr	r3, [pc, #396]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d001      	beq.n	8008400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0b8      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d020      	beq.n	800844e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008418:	4b59      	ldr	r3, [pc, #356]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	4a58      	ldr	r2, [pc, #352]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800841e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008430:	4b53      	ldr	r3, [pc, #332]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4a52      	ldr	r2, [pc, #328]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800843a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800843c:	4b50      	ldr	r3, [pc, #320]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	494d      	ldr	r1, [pc, #308]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	4313      	orrs	r3, r2
 800844c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d044      	beq.n	80084e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d107      	bne.n	8008472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008462:	4b47      	ldr	r3, [pc, #284]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d119      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e07f      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d003      	beq.n	8008482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800847e:	2b03      	cmp	r3, #3
 8008480:	d107      	bne.n	8008492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008482:	4b3f      	ldr	r3, [pc, #252]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e06f      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008492:	4b3b      	ldr	r3, [pc, #236]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e067      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084a2:	4b37      	ldr	r3, [pc, #220]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f023 0203 	bic.w	r2, r3, #3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	4934      	ldr	r1, [pc, #208]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084b4:	f7fc ff54 	bl	8005360 <HAL_GetTick>
 80084b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ba:	e00a      	b.n	80084d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084bc:	f7fc ff50 	bl	8005360 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e04f      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d2:	4b2b      	ldr	r3, [pc, #172]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 020c 	and.w	r2, r3, #12
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d1eb      	bne.n	80084bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084e4:	4b25      	ldr	r3, [pc, #148]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d20c      	bcs.n	800850c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084fa:	4b20      	ldr	r3, [pc, #128]	; (800857c <HAL_RCC_ClockConfig+0x1b8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d001      	beq.n	800850c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e032      	b.n	8008572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008518:	4b19      	ldr	r3, [pc, #100]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4916      	ldr	r1, [pc, #88]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008526:	4313      	orrs	r3, r2
 8008528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	490e      	ldr	r1, [pc, #56]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	4313      	orrs	r3, r2
 8008548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800854a:	f000 f821 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 800854e:	4602      	mov	r2, r0
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	091b      	lsrs	r3, r3, #4
 8008556:	f003 030f 	and.w	r3, r3, #15
 800855a:	490a      	ldr	r1, [pc, #40]	; (8008584 <HAL_RCC_ClockConfig+0x1c0>)
 800855c:	5ccb      	ldrb	r3, [r1, r3]
 800855e:	fa22 f303 	lsr.w	r3, r2, r3
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <HAL_RCC_ClockConfig+0x1c4>)
 8008564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <HAL_RCC_ClockConfig+0x1c8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fc feb4 	bl	80052d8 <HAL_InitTick>

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40023c00 	.word	0x40023c00
 8008580:	40023800 	.word	0x40023800
 8008584:	08012474 	.word	0x08012474
 8008588:	20000000 	.word	0x20000000
 800858c:	20000004 	.word	0x20000004

08008590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008594:	b090      	sub	sp, #64	; 0x40
 8008596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a0:	2300      	movs	r3, #0
 80085a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085a8:	4b59      	ldr	r3, [pc, #356]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 030c 	and.w	r3, r3, #12
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d00d      	beq.n	80085d0 <HAL_RCC_GetSysClockFreq+0x40>
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	f200 80a1 	bhi.w	80086fc <HAL_RCC_GetSysClockFreq+0x16c>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <HAL_RCC_GetSysClockFreq+0x34>
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d003      	beq.n	80085ca <HAL_RCC_GetSysClockFreq+0x3a>
 80085c2:	e09b      	b.n	80086fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085c4:	4b53      	ldr	r3, [pc, #332]	; (8008714 <HAL_RCC_GetSysClockFreq+0x184>)
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80085c8:	e09b      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085ca:	4b53      	ldr	r3, [pc, #332]	; (8008718 <HAL_RCC_GetSysClockFreq+0x188>)
 80085cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085ce:	e098      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085d0:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085da:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d028      	beq.n	8008638 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e6:	4b4a      	ldr	r3, [pc, #296]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	099b      	lsrs	r3, r3, #6
 80085ec:	2200      	movs	r2, #0
 80085ee:	623b      	str	r3, [r7, #32]
 80085f0:	627a      	str	r2, [r7, #36]	; 0x24
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80085f8:	2100      	movs	r1, #0
 80085fa:	4b47      	ldr	r3, [pc, #284]	; (8008718 <HAL_RCC_GetSysClockFreq+0x188>)
 80085fc:	fb03 f201 	mul.w	r2, r3, r1
 8008600:	2300      	movs	r3, #0
 8008602:	fb00 f303 	mul.w	r3, r0, r3
 8008606:	4413      	add	r3, r2
 8008608:	4a43      	ldr	r2, [pc, #268]	; (8008718 <HAL_RCC_GetSysClockFreq+0x188>)
 800860a:	fba0 1202 	umull	r1, r2, r0, r2
 800860e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008610:	460a      	mov	r2, r1
 8008612:	62ba      	str	r2, [r7, #40]	; 0x28
 8008614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008616:	4413      	add	r3, r2
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861c:	2200      	movs	r2, #0
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	61fa      	str	r2, [r7, #28]
 8008622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008626:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800862a:	f7f8 fb2d 	bl	8000c88 <__aeabi_uldivmod>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4613      	mov	r3, r2
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008636:	e053      	b.n	80086e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008638:	4b35      	ldr	r3, [pc, #212]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	099b      	lsrs	r3, r3, #6
 800863e:	2200      	movs	r2, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	617a      	str	r2, [r7, #20]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800864a:	f04f 0b00 	mov.w	fp, #0
 800864e:	4652      	mov	r2, sl
 8008650:	465b      	mov	r3, fp
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f04f 0100 	mov.w	r1, #0
 800865a:	0159      	lsls	r1, r3, #5
 800865c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008660:	0150      	lsls	r0, r2, #5
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	ebb2 080a 	subs.w	r8, r2, sl
 800866a:	eb63 090b 	sbc.w	r9, r3, fp
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800867a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800867e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008682:	ebb2 0408 	subs.w	r4, r2, r8
 8008686:	eb63 0509 	sbc.w	r5, r3, r9
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	00eb      	lsls	r3, r5, #3
 8008694:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008698:	00e2      	lsls	r2, r4, #3
 800869a:	4614      	mov	r4, r2
 800869c:	461d      	mov	r5, r3
 800869e:	eb14 030a 	adds.w	r3, r4, sl
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	eb45 030b 	adc.w	r3, r5, fp
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086b6:	4629      	mov	r1, r5
 80086b8:	028b      	lsls	r3, r1, #10
 80086ba:	4621      	mov	r1, r4
 80086bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086c0:	4621      	mov	r1, r4
 80086c2:	028a      	lsls	r2, r1, #10
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ca:	2200      	movs	r2, #0
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	60fa      	str	r2, [r7, #12]
 80086d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086d4:	f7f8 fad8 	bl	8000c88 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4613      	mov	r3, r2
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <HAL_RCC_GetSysClockFreq+0x180>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	3301      	adds	r3, #1
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80086f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086fa:	e002      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <HAL_RCC_GetSysClockFreq+0x184>)
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008704:	4618      	mov	r0, r3
 8008706:	3740      	adds	r7, #64	; 0x40
 8008708:	46bd      	mov	sp, r7
 800870a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870e:	bf00      	nop
 8008710:	40023800 	.word	0x40023800
 8008714:	00f42400 	.word	0x00f42400
 8008718:	017d7840 	.word	0x017d7840

0800871c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <HAL_RCC_GetHCLKFreq+0x14>)
 8008722:	681b      	ldr	r3, [r3, #0]
}
 8008724:	4618      	mov	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000000 	.word	0x20000000

08008734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008738:	f7ff fff0 	bl	800871c <HAL_RCC_GetHCLKFreq>
 800873c:	4602      	mov	r2, r0
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	0a9b      	lsrs	r3, r3, #10
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	4903      	ldr	r1, [pc, #12]	; (8008758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800874a:	5ccb      	ldrb	r3, [r1, r3]
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40023800 	.word	0x40023800
 8008758:	08012484 	.word	0x08012484

0800875c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008760:	f7ff ffdc 	bl	800871c <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	0b5b      	lsrs	r3, r3, #13
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4903      	ldr	r1, [pc, #12]	; (8008780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	08012484 	.word	0x08012484

08008784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e041      	b.n	800881a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fc fb36 	bl	8004e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f000 ff8a 	bl	80096dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e041      	b.n	80088b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7fc f9db 	bl	8004c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3304      	adds	r3, #4
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f000 ff3b 	bl	80096dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d109      	bne.n	80088e4 <HAL_TIM_PWM_Start+0x24>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	bf14      	ite	ne
 80088dc:	2301      	movne	r3, #1
 80088de:	2300      	moveq	r3, #0
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	e022      	b.n	800892a <HAL_TIM_PWM_Start+0x6a>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d109      	bne.n	80088fe <HAL_TIM_PWM_Start+0x3e>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	bf14      	ite	ne
 80088f6:	2301      	movne	r3, #1
 80088f8:	2300      	moveq	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	e015      	b.n	800892a <HAL_TIM_PWM_Start+0x6a>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b08      	cmp	r3, #8
 8008902:	d109      	bne.n	8008918 <HAL_TIM_PWM_Start+0x58>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	bf14      	ite	ne
 8008910:	2301      	movne	r3, #1
 8008912:	2300      	moveq	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	e008      	b.n	800892a <HAL_TIM_PWM_Start+0x6a>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b01      	cmp	r3, #1
 8008922:	bf14      	ite	ne
 8008924:	2301      	movne	r3, #1
 8008926:	2300      	moveq	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e07c      	b.n	8008a2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <HAL_TIM_PWM_Start+0x82>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008940:	e013      	b.n	800896a <HAL_TIM_PWM_Start+0xaa>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b04      	cmp	r3, #4
 8008946:	d104      	bne.n	8008952 <HAL_TIM_PWM_Start+0x92>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008950:	e00b      	b.n	800896a <HAL_TIM_PWM_Start+0xaa>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b08      	cmp	r3, #8
 8008956:	d104      	bne.n	8008962 <HAL_TIM_PWM_Start+0xa2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008960:	e003      	b.n	800896a <HAL_TIM_PWM_Start+0xaa>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2201      	movs	r2, #1
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f001 fac6 	bl	8009f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2d      	ldr	r2, [pc, #180]	; (8008a34 <HAL_TIM_PWM_Start+0x174>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <HAL_TIM_PWM_Start+0xcc>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2c      	ldr	r2, [pc, #176]	; (8008a38 <HAL_TIM_PWM_Start+0x178>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d101      	bne.n	8008990 <HAL_TIM_PWM_Start+0xd0>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <HAL_TIM_PWM_Start+0xd2>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a22      	ldr	r2, [pc, #136]	; (8008a34 <HAL_TIM_PWM_Start+0x174>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d022      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b8:	d01d      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1f      	ldr	r2, [pc, #124]	; (8008a3c <HAL_TIM_PWM_Start+0x17c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d018      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a1d      	ldr	r2, [pc, #116]	; (8008a40 <HAL_TIM_PWM_Start+0x180>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d013      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1c      	ldr	r2, [pc, #112]	; (8008a44 <HAL_TIM_PWM_Start+0x184>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00e      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a16      	ldr	r2, [pc, #88]	; (8008a38 <HAL_TIM_PWM_Start+0x178>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d009      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <HAL_TIM_PWM_Start+0x188>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d004      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x136>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a16      	ldr	r2, [pc, #88]	; (8008a4c <HAL_TIM_PWM_Start+0x18c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d111      	bne.n	8008a1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b06      	cmp	r3, #6
 8008a06:	d010      	beq.n	8008a2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a18:	e007      	b.n	8008a2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f042 0201 	orr.w	r2, r2, #1
 8008a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40010400 	.word	0x40010400
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40000c00 	.word	0x40000c00
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	40001800 	.word	0x40001800

08008a50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e041      	b.n	8008ae6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fc f980 	bl	8004d7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f000 fe24 	bl	80096dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <HAL_TIM_IC_Start_IT+0x1e>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	e013      	b.n	8008b36 <HAL_TIM_IC_Start_IT+0x46>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d104      	bne.n	8008b1e <HAL_TIM_IC_Start_IT+0x2e>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	e00b      	b.n	8008b36 <HAL_TIM_IC_Start_IT+0x46>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d104      	bne.n	8008b2e <HAL_TIM_IC_Start_IT+0x3e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	e003      	b.n	8008b36 <HAL_TIM_IC_Start_IT+0x46>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d104      	bne.n	8008b48 <HAL_TIM_IC_Start_IT+0x58>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	e013      	b.n	8008b70 <HAL_TIM_IC_Start_IT+0x80>
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d104      	bne.n	8008b58 <HAL_TIM_IC_Start_IT+0x68>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	e00b      	b.n	8008b70 <HAL_TIM_IC_Start_IT+0x80>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d104      	bne.n	8008b68 <HAL_TIM_IC_Start_IT+0x78>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e003      	b.n	8008b70 <HAL_TIM_IC_Start_IT+0x80>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d102      	bne.n	8008b7e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b78:	7b7b      	ldrb	r3, [r7, #13]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d001      	beq.n	8008b82 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e0cc      	b.n	8008d1c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <HAL_TIM_IC_Start_IT+0xa2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b90:	e013      	b.n	8008bba <HAL_TIM_IC_Start_IT+0xca>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d104      	bne.n	8008ba2 <HAL_TIM_IC_Start_IT+0xb2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ba0:	e00b      	b.n	8008bba <HAL_TIM_IC_Start_IT+0xca>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d104      	bne.n	8008bb2 <HAL_TIM_IC_Start_IT+0xc2>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bb0:	e003      	b.n	8008bba <HAL_TIM_IC_Start_IT+0xca>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <HAL_TIM_IC_Start_IT+0xda>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bc8:	e013      	b.n	8008bf2 <HAL_TIM_IC_Start_IT+0x102>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d104      	bne.n	8008bda <HAL_TIM_IC_Start_IT+0xea>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bd8:	e00b      	b.n	8008bf2 <HAL_TIM_IC_Start_IT+0x102>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_IC_Start_IT+0xfa>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008be8:	e003      	b.n	8008bf2 <HAL_TIM_IC_Start_IT+0x102>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b0c      	cmp	r3, #12
 8008bf6:	d841      	bhi.n	8008c7c <HAL_TIM_IC_Start_IT+0x18c>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_TIM_IC_Start_IT+0x110>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c35 	.word	0x08008c35
 8008c04:	08008c7d 	.word	0x08008c7d
 8008c08:	08008c7d 	.word	0x08008c7d
 8008c0c:	08008c7d 	.word	0x08008c7d
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008c7d 	.word	0x08008c7d
 8008c1c:	08008c7d 	.word	0x08008c7d
 8008c20:	08008c59 	.word	0x08008c59
 8008c24:	08008c7d 	.word	0x08008c7d
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008c7d 	.word	0x08008c7d
 8008c30:	08008c6b 	.word	0x08008c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0202 	orr.w	r2, r2, #2
 8008c42:	60da      	str	r2, [r3, #12]
      break;
 8008c44:	e01d      	b.n	8008c82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0204 	orr.w	r2, r2, #4
 8008c54:	60da      	str	r2, [r3, #12]
      break;
 8008c56:	e014      	b.n	8008c82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0208 	orr.w	r2, r2, #8
 8008c66:	60da      	str	r2, [r3, #12]
      break;
 8008c68:	e00b      	b.n	8008c82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0210 	orr.w	r2, r2, #16
 8008c78:	60da      	str	r2, [r3, #12]
      break;
 8008c7a:	e002      	b.n	8008c82 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d148      	bne.n	8008d1a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 f937 	bl	8009f04 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a22      	ldr	r2, [pc, #136]	; (8008d24 <HAL_TIM_IC_Start_IT+0x234>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d022      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca8:	d01d      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <HAL_TIM_IC_Start_IT+0x238>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d018      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <HAL_TIM_IC_Start_IT+0x23c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d013      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1b      	ldr	r2, [pc, #108]	; (8008d30 <HAL_TIM_IC_Start_IT+0x240>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00e      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a19      	ldr	r2, [pc, #100]	; (8008d34 <HAL_TIM_IC_Start_IT+0x244>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d009      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a18      	ldr	r2, [pc, #96]	; (8008d38 <HAL_TIM_IC_Start_IT+0x248>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d004      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a16      	ldr	r2, [pc, #88]	; (8008d3c <HAL_TIM_IC_Start_IT+0x24c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d111      	bne.n	8008d0a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b06      	cmp	r3, #6
 8008cf6:	d010      	beq.n	8008d1a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0201 	orr.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d08:	e007      	b.n	8008d1a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f042 0201 	orr.w	r2, r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40010000 	.word	0x40010000
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40010400 	.word	0x40010400
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40001800 	.word	0x40001800

08008d40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e097      	b.n	8008e84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fb ff6d 	bl	8004c48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d84:	f023 0307 	bic.w	r3, r3, #7
 8008d88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f000 fca1 	bl	80096dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008de0:	f023 030c 	bic.w	r3, r3, #12
 8008de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	011a      	lsls	r2, r3, #4
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	031b      	lsls	r3, r3, #12
 8008e10:	4313      	orrs	r3, r2
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008e1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	4313      	orrs	r3, r2
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ea4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008eb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d110      	bne.n	8008ede <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d102      	bne.n	8008ec8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ec2:	7b7b      	ldrb	r3, [r7, #13]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d001      	beq.n	8008ecc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e069      	b.n	8008fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008edc:	e031      	b.n	8008f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d110      	bne.n	8008f06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d102      	bne.n	8008ef0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eea:	7b3b      	ldrb	r3, [r7, #12]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d001      	beq.n	8008ef4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e055      	b.n	8008fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f04:	e01d      	b.n	8008f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d108      	bne.n	8008f1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d105      	bne.n	8008f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f12:	7b7b      	ldrb	r3, [r7, #13]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d102      	bne.n	8008f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f18:	7b3b      	ldrb	r3, [r7, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d001      	beq.n	8008f22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e03e      	b.n	8008fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_TIM_Encoder_Start+0xc4>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d008      	beq.n	8008f60 <HAL_TIM_Encoder_Start+0xd4>
 8008f4e:	e00f      	b.n	8008f70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2201      	movs	r2, #1
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 ffd3 	bl	8009f04 <TIM_CCxChannelCmd>
      break;
 8008f5e:	e016      	b.n	8008f8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2201      	movs	r2, #1
 8008f66:	2104      	movs	r1, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 ffcb 	bl	8009f04 <TIM_CCxChannelCmd>
      break;
 8008f6e:	e00e      	b.n	8008f8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2201      	movs	r2, #1
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 ffc3 	bl	8009f04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2201      	movs	r2, #1
 8008f84:	2104      	movs	r1, #4
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 ffbc 	bl	8009f04 <TIM_CCxChannelCmd>
      break;
 8008f8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f042 0201 	orr.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d122      	bne.n	8009004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d11b      	bne.n	8009004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f06f 0202 	mvn.w	r2, #2
 8008fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7f8 fce8 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 8008ff0:	e005      	b.n	8008ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fb54 	bl	80096a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fb5b 	bl	80096b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0304 	and.w	r3, r3, #4
 800900e:	2b04      	cmp	r3, #4
 8009010:	d122      	bne.n	8009058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b04      	cmp	r3, #4
 800901e:	d11b      	bne.n	8009058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0204 	mvn.w	r2, #4
 8009028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2202      	movs	r2, #2
 800902e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7f8 fcbe 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 8009044:	e005      	b.n	8009052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fb2a 	bl	80096a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fb31 	bl	80096b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0308 	and.w	r3, r3, #8
 8009062:	2b08      	cmp	r3, #8
 8009064:	d122      	bne.n	80090ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b08      	cmp	r3, #8
 8009072:	d11b      	bne.n	80090ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0208 	mvn.w	r2, #8
 800907c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2204      	movs	r2, #4
 8009082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7f8 fc94 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 8009098:	e005      	b.n	80090a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fb00 	bl	80096a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fb07 	bl	80096b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0310 	and.w	r3, r3, #16
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	d122      	bne.n	8009100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	d11b      	bne.n	8009100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0210 	mvn.w	r2, #16
 80090d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2208      	movs	r2, #8
 80090d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f8 fc6a 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fad6 	bl	80096a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fadd 	bl	80096b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b01      	cmp	r3, #1
 800910c:	d10e      	bne.n	800912c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d107      	bne.n	800912c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0201 	mvn.w	r2, #1
 8009124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fab0 	bl	800968c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009136:	2b80      	cmp	r3, #128	; 0x80
 8009138:	d10e      	bne.n	8009158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009144:	2b80      	cmp	r3, #128	; 0x80
 8009146:	d107      	bne.n	8009158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 ffd4 	bl	800a100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d10e      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009170:	2b40      	cmp	r3, #64	; 0x40
 8009172:	d107      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 faa2 	bl	80096c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b20      	cmp	r3, #32
 8009190:	d10e      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b20      	cmp	r3, #32
 800919e:	d107      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0220 	mvn.w	r2, #32
 80091a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 ff9e 	bl	800a0ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e088      	b.n	80092e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6819      	ldr	r1, [r3, #0]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f000 fcc2 	bl	8009b7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 020c 	bic.w	r2, r2, #12
 8009206:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6999      	ldr	r1, [r3, #24]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	619a      	str	r2, [r3, #24]
 800921a:	e060      	b.n	80092de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b04      	cmp	r3, #4
 8009220:	d11c      	bne.n	800925c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6819      	ldr	r1, [r3, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f000 fd46 	bl	8009cc2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009244:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6999      	ldr	r1, [r3, #24]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	021a      	lsls	r2, r3, #8
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	619a      	str	r2, [r3, #24]
 800925a:	e040      	b.n	80092de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b08      	cmp	r3, #8
 8009260:	d11b      	bne.n	800929a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6819      	ldr	r1, [r3, #0]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f000 fd93 	bl	8009d9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 020c 	bic.w	r2, r2, #12
 8009284:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69d9      	ldr	r1, [r3, #28]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	61da      	str	r2, [r3, #28]
 8009298:	e021      	b.n	80092de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d11c      	bne.n	80092da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6819      	ldr	r1, [r3, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f000 fdb0 	bl	8009e14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	69da      	ldr	r2, [r3, #28]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80092c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69d9      	ldr	r1, [r3, #28]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	021a      	lsls	r2, r3, #8
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	61da      	str	r2, [r3, #28]
 80092d8:	e001      	b.n	80092de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800930a:	2302      	movs	r3, #2
 800930c:	e0ae      	b.n	800946c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b0c      	cmp	r3, #12
 800931a:	f200 809f 	bhi.w	800945c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800931e:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	08009359 	.word	0x08009359
 8009328:	0800945d 	.word	0x0800945d
 800932c:	0800945d 	.word	0x0800945d
 8009330:	0800945d 	.word	0x0800945d
 8009334:	08009399 	.word	0x08009399
 8009338:	0800945d 	.word	0x0800945d
 800933c:	0800945d 	.word	0x0800945d
 8009340:	0800945d 	.word	0x0800945d
 8009344:	080093db 	.word	0x080093db
 8009348:	0800945d 	.word	0x0800945d
 800934c:	0800945d 	.word	0x0800945d
 8009350:	0800945d 	.word	0x0800945d
 8009354:	0800941b 	.word	0x0800941b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fa5c 	bl	800981c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0208 	orr.w	r2, r2, #8
 8009372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0204 	bic.w	r2, r2, #4
 8009382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6999      	ldr	r1, [r3, #24]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	619a      	str	r2, [r3, #24]
      break;
 8009396:	e064      	b.n	8009462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 faac 	bl	80098fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6999      	ldr	r1, [r3, #24]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	021a      	lsls	r2, r3, #8
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	619a      	str	r2, [r3, #24]
      break;
 80093d8:	e043      	b.n	8009462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fb01 	bl	80099e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f042 0208 	orr.w	r2, r2, #8
 80093f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69da      	ldr	r2, [r3, #28]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0204 	bic.w	r2, r2, #4
 8009404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69d9      	ldr	r1, [r3, #28]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	691a      	ldr	r2, [r3, #16]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	61da      	str	r2, [r3, #28]
      break;
 8009418:	e023      	b.n	8009462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fb55 	bl	8009ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69da      	ldr	r2, [r3, #28]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69d9      	ldr	r1, [r3, #28]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	021a      	lsls	r2, r3, #8
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	61da      	str	r2, [r3, #28]
      break;
 800945a:	e002      	b.n	8009462 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	75fb      	strb	r3, [r7, #23]
      break;
 8009460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_TIM_ConfigClockSource+0x1c>
 800948c:	2302      	movs	r3, #2
 800948e:	e0b4      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x186>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c8:	d03e      	beq.n	8009548 <HAL_TIM_ConfigClockSource+0xd4>
 80094ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ce:	f200 8087 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d6:	f000 8086 	beq.w	80095e6 <HAL_TIM_ConfigClockSource+0x172>
 80094da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094de:	d87f      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 80094e0:	2b70      	cmp	r3, #112	; 0x70
 80094e2:	d01a      	beq.n	800951a <HAL_TIM_ConfigClockSource+0xa6>
 80094e4:	2b70      	cmp	r3, #112	; 0x70
 80094e6:	d87b      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 80094e8:	2b60      	cmp	r3, #96	; 0x60
 80094ea:	d050      	beq.n	800958e <HAL_TIM_ConfigClockSource+0x11a>
 80094ec:	2b60      	cmp	r3, #96	; 0x60
 80094ee:	d877      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 80094f0:	2b50      	cmp	r3, #80	; 0x50
 80094f2:	d03c      	beq.n	800956e <HAL_TIM_ConfigClockSource+0xfa>
 80094f4:	2b50      	cmp	r3, #80	; 0x50
 80094f6:	d873      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 80094f8:	2b40      	cmp	r3, #64	; 0x40
 80094fa:	d058      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x13a>
 80094fc:	2b40      	cmp	r3, #64	; 0x40
 80094fe:	d86f      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009500:	2b30      	cmp	r3, #48	; 0x30
 8009502:	d064      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x15a>
 8009504:	2b30      	cmp	r3, #48	; 0x30
 8009506:	d86b      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009508:	2b20      	cmp	r3, #32
 800950a:	d060      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x15a>
 800950c:	2b20      	cmp	r3, #32
 800950e:	d867      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009510:	2b00      	cmp	r3, #0
 8009512:	d05c      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x15a>
 8009514:	2b10      	cmp	r3, #16
 8009516:	d05a      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x15a>
 8009518:	e062      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	6899      	ldr	r1, [r3, #8]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f000 fccb 	bl	8009ec4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800953c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	609a      	str	r2, [r3, #8]
      break;
 8009546:	e04f      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6899      	ldr	r1, [r3, #8]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f000 fcb4 	bl	8009ec4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689a      	ldr	r2, [r3, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800956a:	609a      	str	r2, [r3, #8]
      break;
 800956c:	e03c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	6859      	ldr	r1, [r3, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	461a      	mov	r2, r3
 800957c:	f000 fb72 	bl	8009c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2150      	movs	r1, #80	; 0x50
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fc81 	bl	8009e8e <TIM_ITRx_SetConfig>
      break;
 800958c:	e02c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	6859      	ldr	r1, [r3, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	461a      	mov	r2, r3
 800959c:	f000 fbce 	bl	8009d3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2160      	movs	r1, #96	; 0x60
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fc71 	bl	8009e8e <TIM_ITRx_SetConfig>
      break;
 80095ac:	e01c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6859      	ldr	r1, [r3, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f000 fb52 	bl	8009c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2140      	movs	r1, #64	; 0x40
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fc61 	bl	8009e8e <TIM_ITRx_SetConfig>
      break;
 80095cc:	e00c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f000 fc58 	bl	8009e8e <TIM_ITRx_SetConfig>
      break;
 80095de:	e003      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]
      break;
 80095e4:	e000      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80095e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b0c      	cmp	r3, #12
 8009616:	d831      	bhi.n	800967c <HAL_TIM_ReadCapturedValue+0x78>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <HAL_TIM_ReadCapturedValue+0x1c>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009655 	.word	0x08009655
 8009624:	0800967d 	.word	0x0800967d
 8009628:	0800967d 	.word	0x0800967d
 800962c:	0800967d 	.word	0x0800967d
 8009630:	0800965f 	.word	0x0800965f
 8009634:	0800967d 	.word	0x0800967d
 8009638:	0800967d 	.word	0x0800967d
 800963c:	0800967d 	.word	0x0800967d
 8009640:	08009669 	.word	0x08009669
 8009644:	0800967d 	.word	0x0800967d
 8009648:	0800967d 	.word	0x0800967d
 800964c:	0800967d 	.word	0x0800967d
 8009650:	08009673 	.word	0x08009673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965a:	60fb      	str	r3, [r7, #12]

      break;
 800965c:	e00f      	b.n	800967e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	60fb      	str	r3, [r7, #12]

      break;
 8009666:	e00a      	b.n	800967e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	60fb      	str	r3, [r7, #12]

      break;
 8009670:	e005      	b.n	800967e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009678:	60fb      	str	r3, [r7, #12]

      break;
 800967a:	e000      	b.n	800967e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800967c:	bf00      	nop
  }

  return tmpreg;
 800967e:	68fb      	ldr	r3, [r7, #12]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a40      	ldr	r2, [pc, #256]	; (80097f0 <TIM_Base_SetConfig+0x114>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d013      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d00f      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a3d      	ldr	r2, [pc, #244]	; (80097f4 <TIM_Base_SetConfig+0x118>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00b      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a3c      	ldr	r2, [pc, #240]	; (80097f8 <TIM_Base_SetConfig+0x11c>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d007      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a3b      	ldr	r2, [pc, #236]	; (80097fc <TIM_Base_SetConfig+0x120>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d003      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a3a      	ldr	r2, [pc, #232]	; (8009800 <TIM_Base_SetConfig+0x124>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d108      	bne.n	800972e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a2f      	ldr	r2, [pc, #188]	; (80097f0 <TIM_Base_SetConfig+0x114>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d02b      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973c:	d027      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a2c      	ldr	r2, [pc, #176]	; (80097f4 <TIM_Base_SetConfig+0x118>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d023      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a2b      	ldr	r2, [pc, #172]	; (80097f8 <TIM_Base_SetConfig+0x11c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01f      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a2a      	ldr	r2, [pc, #168]	; (80097fc <TIM_Base_SetConfig+0x120>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d01b      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a29      	ldr	r2, [pc, #164]	; (8009800 <TIM_Base_SetConfig+0x124>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d017      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a28      	ldr	r2, [pc, #160]	; (8009804 <TIM_Base_SetConfig+0x128>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d013      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a27      	ldr	r2, [pc, #156]	; (8009808 <TIM_Base_SetConfig+0x12c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a26      	ldr	r2, [pc, #152]	; (800980c <TIM_Base_SetConfig+0x130>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a25      	ldr	r2, [pc, #148]	; (8009810 <TIM_Base_SetConfig+0x134>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a24      	ldr	r2, [pc, #144]	; (8009814 <TIM_Base_SetConfig+0x138>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_Base_SetConfig+0xb2>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a23      	ldr	r2, [pc, #140]	; (8009818 <TIM_Base_SetConfig+0x13c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d108      	bne.n	80097a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a0a      	ldr	r2, [pc, #40]	; (80097f0 <TIM_Base_SetConfig+0x114>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d003      	beq.n	80097d4 <TIM_Base_SetConfig+0xf8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a0c      	ldr	r2, [pc, #48]	; (8009800 <TIM_Base_SetConfig+0x124>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d103      	bne.n	80097dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	615a      	str	r2, [r3, #20]
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40010000 	.word	0x40010000
 80097f4:	40000400 	.word	0x40000400
 80097f8:	40000800 	.word	0x40000800
 80097fc:	40000c00 	.word	0x40000c00
 8009800:	40010400 	.word	0x40010400
 8009804:	40014000 	.word	0x40014000
 8009808:	40014400 	.word	0x40014400
 800980c:	40014800 	.word	0x40014800
 8009810:	40001800 	.word	0x40001800
 8009814:	40001c00 	.word	0x40001c00
 8009818:	40002000 	.word	0x40002000

0800981c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	f023 0201 	bic.w	r2, r3, #1
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f023 0302 	bic.w	r3, r3, #2
 8009864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a20      	ldr	r2, [pc, #128]	; (80098f4 <TIM_OC1_SetConfig+0xd8>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d003      	beq.n	8009880 <TIM_OC1_SetConfig+0x64>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a1f      	ldr	r2, [pc, #124]	; (80098f8 <TIM_OC1_SetConfig+0xdc>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10c      	bne.n	800989a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0308 	bic.w	r3, r3, #8
 8009886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 0304 	bic.w	r3, r3, #4
 8009898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a15      	ldr	r2, [pc, #84]	; (80098f4 <TIM_OC1_SetConfig+0xd8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d003      	beq.n	80098aa <TIM_OC1_SetConfig+0x8e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a14      	ldr	r2, [pc, #80]	; (80098f8 <TIM_OC1_SetConfig+0xdc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d111      	bne.n	80098ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	621a      	str	r2, [r3, #32]
}
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	40010000 	.word	0x40010000
 80098f8:	40010400 	.word	0x40010400

080098fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	f023 0210 	bic.w	r2, r3, #16
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800992a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f023 0320 	bic.w	r3, r3, #32
 8009946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4313      	orrs	r3, r2
 8009952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a22      	ldr	r2, [pc, #136]	; (80099e0 <TIM_OC2_SetConfig+0xe4>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d003      	beq.n	8009964 <TIM_OC2_SetConfig+0x68>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a21      	ldr	r2, [pc, #132]	; (80099e4 <TIM_OC2_SetConfig+0xe8>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d10d      	bne.n	8009980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800996a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800997e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a17      	ldr	r2, [pc, #92]	; (80099e0 <TIM_OC2_SetConfig+0xe4>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d003      	beq.n	8009990 <TIM_OC2_SetConfig+0x94>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a16      	ldr	r2, [pc, #88]	; (80099e4 <TIM_OC2_SetConfig+0xe8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d113      	bne.n	80099b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800999e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	621a      	str	r2, [r3, #32]
}
 80099d2:	bf00      	nop
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	40010000 	.word	0x40010000
 80099e4:	40010400 	.word	0x40010400

080099e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0303 	bic.w	r3, r3, #3
 8009a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a21      	ldr	r2, [pc, #132]	; (8009ac8 <TIM_OC3_SetConfig+0xe0>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d003      	beq.n	8009a4e <TIM_OC3_SetConfig+0x66>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a20      	ldr	r2, [pc, #128]	; (8009acc <TIM_OC3_SetConfig+0xe4>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d10d      	bne.n	8009a6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a16      	ldr	r2, [pc, #88]	; (8009ac8 <TIM_OC3_SetConfig+0xe0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d003      	beq.n	8009a7a <TIM_OC3_SetConfig+0x92>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a15      	ldr	r2, [pc, #84]	; (8009acc <TIM_OC3_SetConfig+0xe4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d113      	bne.n	8009aa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	621a      	str	r2, [r3, #32]
}
 8009abc:	bf00      	nop
 8009abe:	371c      	adds	r7, #28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40010400 	.word	0x40010400

08009ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	031b      	lsls	r3, r3, #12
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a12      	ldr	r2, [pc, #72]	; (8009b74 <TIM_OC4_SetConfig+0xa4>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <TIM_OC4_SetConfig+0x68>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a11      	ldr	r2, [pc, #68]	; (8009b78 <TIM_OC4_SetConfig+0xa8>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d109      	bne.n	8009b4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	019b      	lsls	r3, r3, #6
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	621a      	str	r2, [r3, #32]
}
 8009b66:	bf00      	nop
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40010000 	.word	0x40010000
 8009b78:	40010400 	.word	0x40010400

08009b7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	f023 0201 	bic.w	r2, r3, #1
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4a28      	ldr	r2, [pc, #160]	; (8009c48 <TIM_TI1_SetConfig+0xcc>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01b      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb0:	d017      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4a25      	ldr	r2, [pc, #148]	; (8009c4c <TIM_TI1_SetConfig+0xd0>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d013      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4a24      	ldr	r2, [pc, #144]	; (8009c50 <TIM_TI1_SetConfig+0xd4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00f      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4a23      	ldr	r2, [pc, #140]	; (8009c54 <TIM_TI1_SetConfig+0xd8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00b      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <TIM_TI1_SetConfig+0xdc>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d007      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4a21      	ldr	r2, [pc, #132]	; (8009c5c <TIM_TI1_SetConfig+0xe0>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d003      	beq.n	8009be2 <TIM_TI1_SetConfig+0x66>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a20      	ldr	r2, [pc, #128]	; (8009c60 <TIM_TI1_SetConfig+0xe4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d101      	bne.n	8009be6 <TIM_TI1_SetConfig+0x6a>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e000      	b.n	8009be8 <TIM_TI1_SetConfig+0x6c>
 8009be6:	2300      	movs	r3, #0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d008      	beq.n	8009bfe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f023 0303 	bic.w	r3, r3, #3
 8009bf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	e003      	b.n	8009c06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f043 0301 	orr.w	r3, r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	011b      	lsls	r3, r3, #4
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f023 030a 	bic.w	r3, r3, #10
 8009c20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f003 030a 	and.w	r3, r3, #10
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	621a      	str	r2, [r3, #32]
}
 8009c3a:	bf00      	nop
 8009c3c:	371c      	adds	r7, #28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	40010000 	.word	0x40010000
 8009c4c:	40000400 	.word	0x40000400
 8009c50:	40000800 	.word	0x40000800
 8009c54:	40000c00 	.word	0x40000c00
 8009c58:	40010400 	.word	0x40010400
 8009c5c:	40014000 	.word	0x40014000
 8009c60:	40001800 	.word	0x40001800

08009c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	f023 0201 	bic.w	r2, r3, #1
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f023 030a 	bic.w	r3, r3, #10
 8009ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	621a      	str	r2, [r3, #32]
}
 8009cb6:	bf00      	nop
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b087      	sub	sp, #28
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	f023 0210 	bic.w	r2, r3, #16
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	031b      	lsls	r3, r3, #12
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	011b      	lsls	r3, r3, #4
 8009d1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	621a      	str	r2, [r3, #32]
}
 8009d30:	bf00      	nop
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	f023 0210 	bic.w	r2, r3, #16
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	031b      	lsls	r3, r3, #12
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	621a      	str	r2, [r3, #32]
}
 8009d90:	bf00      	nop
 8009d92:	371c      	adds	r7, #28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009dec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	621a      	str	r2, [r3, #32]
}
 8009e08:	bf00      	nop
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	021b      	lsls	r3, r3, #8
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	031b      	lsls	r3, r3, #12
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009e66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	031b      	lsls	r3, r3, #12
 8009e6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	621a      	str	r2, [r3, #32]
}
 8009e82:	bf00      	nop
 8009e84:	371c      	adds	r7, #28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	f043 0307 	orr.w	r3, r3, #7
 8009eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	609a      	str	r2, [r3, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	021a      	lsls	r2, r3, #8
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	609a      	str	r2, [r3, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	371c      	adds	r7, #28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f003 031f 	and.w	r3, r3, #31
 8009f16:	2201      	movs	r2, #1
 8009f18:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1a      	ldr	r2, [r3, #32]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	43db      	mvns	r3, r3
 8009f26:	401a      	ands	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6a1a      	ldr	r2, [r3, #32]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	621a      	str	r2, [r3, #32]
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
	...

08009f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d101      	bne.n	8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e05a      	b.n	800a01e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a21      	ldr	r2, [pc, #132]	; (800a02c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d022      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb4:	d01d      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a1d      	ldr	r2, [pc, #116]	; (800a030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d018      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a1b      	ldr	r2, [pc, #108]	; (800a034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d013      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a1a      	ldr	r2, [pc, #104]	; (800a038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d00e      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a18      	ldr	r2, [pc, #96]	; (800a03c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d009      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a17      	ldr	r2, [pc, #92]	; (800a040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d004      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a15      	ldr	r2, [pc, #84]	; (800a044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d10c      	bne.n	800a00c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	4313      	orrs	r3, r2
 800a002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	40010000 	.word	0x40010000
 800a030:	40000400 	.word	0x40000400
 800a034:	40000800 	.word	0x40000800
 800a038:	40000c00 	.word	0x40000c00
 800a03c:	40010400 	.word	0x40010400
 800a040:	40014000 	.word	0x40014000
 800a044:	40001800 	.word	0x40001800

0800a048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d101      	bne.n	800a064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a060:	2302      	movs	r3, #2
 800a062:	e03d      	b.n	800a0e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	4313      	orrs	r3, r2
 800a094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e03f      	b.n	800a1a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fa ff06 	bl	8004f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2224      	movs	r2, #36	; 0x24
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fddf 	bl	800ad1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a16c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	695a      	ldr	r2, [r3, #20]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a17c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a18c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b08a      	sub	sp, #40	; 0x28
 800a1b2:	af02      	add	r7, sp, #8
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	603b      	str	r3, [r7, #0]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d17c      	bne.n	800a2c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <HAL_UART_Transmit+0x2c>
 800a1d4:	88fb      	ldrh	r3, [r7, #6]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e075      	b.n	800a2ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d101      	bne.n	800a1ec <HAL_UART_Transmit+0x3e>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e06e      	b.n	800a2ca <HAL_UART_Transmit+0x11c>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2221      	movs	r2, #33	; 0x21
 800a1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a202:	f7fb f8ad 	bl	8005360 <HAL_GetTick>
 800a206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	88fa      	ldrh	r2, [r7, #6]
 800a20c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	88fa      	ldrh	r2, [r7, #6]
 800a212:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21c:	d108      	bne.n	800a230 <HAL_UART_Transmit+0x82>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d104      	bne.n	800a230 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	61bb      	str	r3, [r7, #24]
 800a22e:	e003      	b.n	800a238 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a240:	e02a      	b.n	800a298 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2200      	movs	r2, #0
 800a24a:	2180      	movs	r1, #128	; 0x80
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 fb1f 	bl	800a890 <UART_WaitOnFlagUntilTimeout>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e036      	b.n	800a2ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10b      	bne.n	800a27a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a270:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	3302      	adds	r3, #2
 800a276:	61bb      	str	r3, [r7, #24]
 800a278:	e007      	b.n	800a28a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	781a      	ldrb	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	3301      	adds	r3, #1
 800a288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a28e:	b29b      	uxth	r3, r3
 800a290:	3b01      	subs	r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1cf      	bne.n	800a242 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2140      	movs	r1, #64	; 0x40
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 faef 	bl	800a890 <UART_WaitOnFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e006      	b.n	800a2ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e000      	b.n	800a2ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a2c8:	2302      	movs	r3, #2
  }
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3720      	adds	r7, #32
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	60f8      	str	r0, [r7, #12]
 800a2da:	60b9      	str	r1, [r7, #8]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d11d      	bne.n	800a328 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <HAL_UART_Receive_IT+0x26>
 800a2f2:	88fb      	ldrh	r3, [r7, #6]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e016      	b.n	800a32a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <HAL_UART_Receive_IT+0x38>
 800a306:	2302      	movs	r3, #2
 800a308:	e00f      	b.n	800a32a <HAL_UART_Receive_IT+0x58>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	461a      	mov	r2, r3
 800a31c:	68b9      	ldr	r1, [r7, #8]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fb24 	bl	800a96c <UART_Start_Receive_IT>
 800a324:	4603      	mov	r3, r0
 800a326:	e000      	b.n	800a32a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a328:	2302      	movs	r3, #2
  }
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b0ba      	sub	sp, #232	; 0xe8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a360:	2300      	movs	r3, #0
 800a362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10f      	bne.n	800a39a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <HAL_UART_IRQHandler+0x66>
 800a386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fc07 	bl	800aba6 <UART_Receive_IT>
      return;
 800a398:	e256      	b.n	800a848 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a39a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80de 	beq.w	800a560 <HAL_UART_IRQHandler+0x22c>
 800a3a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d106      	bne.n	800a3be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80d1 	beq.w	800a560 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00b      	beq.n	800a3e2 <HAL_UART_IRQHandler+0xae>
 800a3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	f043 0201 	orr.w	r2, r3, #1
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e6:	f003 0304 	and.w	r3, r3, #4
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <HAL_UART_IRQHandler+0xd2>
 800a3ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d005      	beq.n	800a406 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f043 0202 	orr.w	r2, r3, #2
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00b      	beq.n	800a42a <HAL_UART_IRQHandler+0xf6>
 800a412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d005      	beq.n	800a42a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a422:	f043 0204 	orr.w	r2, r3, #4
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d011      	beq.n	800a45a <HAL_UART_IRQHandler+0x126>
 800a436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a43a:	f003 0320 	and.w	r3, r3, #32
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d105      	bne.n	800a44e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	f043 0208 	orr.w	r2, r3, #8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 81ed 	beq.w	800a83e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d008      	beq.n	800a482 <HAL_UART_IRQHandler+0x14e>
 800a470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a474:	f003 0320 	and.w	r3, r3, #32
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fb92 	bl	800aba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b40      	cmp	r3, #64	; 0x40
 800a48e:	bf0c      	ite	eq
 800a490:	2301      	moveq	r3, #1
 800a492:	2300      	movne	r3, #0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d103      	bne.n	800a4ae <HAL_UART_IRQHandler+0x17a>
 800a4a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d04f      	beq.n	800a54e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa9a 	bl	800a9e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4be:	2b40      	cmp	r3, #64	; 0x40
 800a4c0:	d141      	bne.n	800a546 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3314      	adds	r3, #20
 800a4c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a4d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3314      	adds	r3, #20
 800a4ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a4ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a4f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a4fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1d9      	bne.n	800a4c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	2b00      	cmp	r3, #0
 800a514:	d013      	beq.n	800a53e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	4a7d      	ldr	r2, [pc, #500]	; (800a710 <HAL_UART_IRQHandler+0x3dc>)
 800a51c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	4618      	mov	r0, r3
 800a524:	f7fb fdd2 	bl	80060cc <HAL_DMA_Abort_IT>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d016      	beq.n	800a55c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a538:	4610      	mov	r0, r2
 800a53a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a53c:	e00e      	b.n	800a55c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f990 	bl	800a864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a544:	e00a      	b.n	800a55c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f98c 	bl	800a864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a54c:	e006      	b.n	800a55c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f988 	bl	800a864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a55a:	e170      	b.n	800a83e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a55c:	bf00      	nop
    return;
 800a55e:	e16e      	b.n	800a83e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a564:	2b01      	cmp	r3, #1
 800a566:	f040 814a 	bne.w	800a7fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a56e:	f003 0310 	and.w	r3, r3, #16
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 8143 	beq.w	800a7fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a57c:	f003 0310 	and.w	r3, r3, #16
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 813c 	beq.w	800a7fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60bb      	str	r3, [r7, #8]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	60bb      	str	r3, [r7, #8]
 800a59a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b40      	cmp	r3, #64	; 0x40
 800a5a8:	f040 80b4 	bne.w	800a714 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a5b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 8140 	beq.w	800a842 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	f080 8139 	bcs.w	800a842 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e2:	f000 8088 	beq.w	800a6f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a5fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	330c      	adds	r3, #12
 800a60e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a61e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1d9      	bne.n	800a5e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3314      	adds	r3, #20
 800a638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a644:	f023 0301 	bic.w	r3, r3, #1
 800a648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3314      	adds	r3, #20
 800a652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a656:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a65a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a65e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e1      	bne.n	800a632 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3314      	adds	r3, #20
 800a674:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a67e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3314      	adds	r3, #20
 800a68e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a692:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a694:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a6a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e3      	bne.n	800a66e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	330c      	adds	r3, #12
 800a6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6be:	e853 3f00 	ldrex	r3, [r3]
 800a6c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c6:	f023 0310 	bic.w	r3, r3, #16
 800a6ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	330c      	adds	r3, #12
 800a6d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a6d8:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6e0:	e841 2300 	strex	r3, r2, [r1]
 800a6e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1e3      	bne.n	800a6b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fb fc7b 	bl	8005fec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	b29b      	uxth	r3, r3
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f8b6 	bl	800a878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a70c:	e099      	b.n	800a842 <HAL_UART_IRQHandler+0x50e>
 800a70e:	bf00      	nop
 800a710:	0800aaaf 	.word	0x0800aaaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a728:	b29b      	uxth	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 808b 	beq.w	800a846 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8086 	beq.w	800a846 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	330c      	adds	r3, #12
 800a740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	330c      	adds	r3, #12
 800a75a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a75e:	647a      	str	r2, [r7, #68]	; 0x44
 800a760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e3      	bne.n	800a73a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3314      	adds	r3, #20
 800a778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	623b      	str	r3, [r7, #32]
   return(result);
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	f023 0301 	bic.w	r3, r3, #1
 800a788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3314      	adds	r3, #20
 800a792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a796:	633a      	str	r2, [r7, #48]	; 0x30
 800a798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a79e:	e841 2300 	strex	r3, r2, [r1]
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e3      	bne.n	800a772 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0310 	bic.w	r3, r3, #16
 800a7ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	330c      	adds	r3, #12
 800a7d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a7dc:	61fa      	str	r2, [r7, #28]
 800a7de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	69b9      	ldr	r1, [r7, #24]
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	e841 2300 	strex	r3, r2, [r1]
 800a7e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e3      	bne.n	800a7b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f83e 	bl	800a878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a7fc:	e023      	b.n	800a846 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a806:	2b00      	cmp	r3, #0
 800a808:	d009      	beq.n	800a81e <HAL_UART_IRQHandler+0x4ea>
 800a80a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f95d 	bl	800aad6 <UART_Transmit_IT>
    return;
 800a81c:	e014      	b.n	800a848 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00e      	beq.n	800a848 <HAL_UART_IRQHandler+0x514>
 800a82a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d008      	beq.n	800a848 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f99d 	bl	800ab76 <UART_EndTransmit_IT>
    return;
 800a83c:	e004      	b.n	800a848 <HAL_UART_IRQHandler+0x514>
    return;
 800a83e:	bf00      	nop
 800a840:	e002      	b.n	800a848 <HAL_UART_IRQHandler+0x514>
      return;
 800a842:	bf00      	nop
 800a844:	e000      	b.n	800a848 <HAL_UART_IRQHandler+0x514>
      return;
 800a846:	bf00      	nop
  }
}
 800a848:	37e8      	adds	r7, #232	; 0xe8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop

0800a850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b090      	sub	sp, #64	; 0x40
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4613      	mov	r3, r2
 800a89e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8a0:	e050      	b.n	800a944 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d04c      	beq.n	800a944 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8b0:	f7fa fd56 	bl	8005360 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d241      	bcs.n	800a944 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	330c      	adds	r3, #12
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	e853 3f00 	ldrex	r3, [r3]
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8e0:	637a      	str	r2, [r7, #52]	; 0x34
 800a8e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e5      	bne.n	800a8c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3314      	adds	r3, #20
 800a8fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	613b      	str	r3, [r7, #16]
   return(result);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f023 0301 	bic.w	r3, r3, #1
 800a90a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3314      	adds	r3, #20
 800a912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a914:	623a      	str	r2, [r7, #32]
 800a916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	69f9      	ldr	r1, [r7, #28]
 800a91a:	6a3a      	ldr	r2, [r7, #32]
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	61bb      	str	r3, [r7, #24]
   return(result);
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e5      	bne.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2220      	movs	r2, #32
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e00f      	b.n	800a964 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	4013      	ands	r3, r2
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	429a      	cmp	r2, r3
 800a952:	bf0c      	ite	eq
 800a954:	2301      	moveq	r3, #1
 800a956:	2300      	movne	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d09f      	beq.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3740      	adds	r7, #64	; 0x40
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	88fa      	ldrh	r2, [r7, #6]
 800a984:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	88fa      	ldrh	r2, [r7, #6]
 800a98a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2222      	movs	r2, #34	; 0x22
 800a996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68da      	ldr	r2, [r3, #12]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	695a      	ldr	r2, [r3, #20]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f042 0201 	orr.w	r2, r2, #1
 800a9c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f042 0220 	orr.w	r2, r2, #32
 800a9d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b095      	sub	sp, #84	; 0x54
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	330c      	adds	r3, #12
 800a9f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	330c      	adds	r3, #12
 800aa0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa10:	643a      	str	r2, [r7, #64]	; 0x40
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e5      	bne.n	800a9f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3314      	adds	r3, #20
 800aa2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	f023 0301 	bic.w	r3, r3, #1
 800aa3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3314      	adds	r3, #20
 800aa42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e5      	bne.n	800aa24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d119      	bne.n	800aa94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	e853 3f00 	ldrex	r3, [r3]
 800aa6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f023 0310 	bic.w	r3, r3, #16
 800aa76:	647b      	str	r3, [r7, #68]	; 0x44
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	330c      	adds	r3, #12
 800aa7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa80:	61ba      	str	r2, [r7, #24]
 800aa82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6979      	ldr	r1, [r7, #20]
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e5      	bne.n	800aa60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aaa2:	bf00      	nop
 800aaa4:	3754      	adds	r7, #84	; 0x54
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fecb 	bl	800a864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b21      	cmp	r3, #33	; 0x21
 800aae8:	d13e      	bne.n	800ab68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf2:	d114      	bne.n	800ab1e <UART_Transmit_IT+0x48>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d110      	bne.n	800ab1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	1c9a      	adds	r2, r3, #2
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	621a      	str	r2, [r3, #32]
 800ab1c:	e008      	b.n	800ab30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	1c59      	adds	r1, r3, #1
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6211      	str	r1, [r2, #32]
 800ab28:	781a      	ldrb	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	3b01      	subs	r3, #1
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10f      	bne.n	800ab64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68da      	ldr	r2, [r3, #12]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	e000      	b.n	800ab6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab68:	2302      	movs	r3, #2
  }
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b082      	sub	sp, #8
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff fe5a 	bl	800a850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b08c      	sub	sp, #48	; 0x30
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b22      	cmp	r3, #34	; 0x22
 800abb8:	f040 80ab 	bne.w	800ad12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc4:	d117      	bne.n	800abf6 <UART_Receive_IT+0x50>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d113      	bne.n	800abf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	1c9a      	adds	r2, r3, #2
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	629a      	str	r2, [r3, #40]	; 0x28
 800abf4:	e026      	b.n	800ac44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac08:	d007      	beq.n	800ac1a <UART_Receive_IT+0x74>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <UART_Receive_IT+0x82>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e008      	b.n	800ac3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	4619      	mov	r1, r3
 800ac52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d15a      	bne.n	800ad0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0220 	bic.w	r2, r2, #32
 800ac66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68da      	ldr	r2, [r3, #12]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695a      	ldr	r2, [r3, #20]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0201 	bic.w	r2, r2, #1
 800ac86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d135      	bne.n	800ad04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	330c      	adds	r3, #12
 800aca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	e853 3f00 	ldrex	r3, [r3]
 800acac:	613b      	str	r3, [r7, #16]
   return(result);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f023 0310 	bic.w	r3, r3, #16
 800acb4:	627b      	str	r3, [r7, #36]	; 0x24
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	330c      	adds	r3, #12
 800acbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acbe:	623a      	str	r2, [r7, #32]
 800acc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc2:	69f9      	ldr	r1, [r7, #28]
 800acc4:	6a3a      	ldr	r2, [r7, #32]
 800acc6:	e841 2300 	strex	r3, r2, [r1]
 800acca:	61bb      	str	r3, [r7, #24]
   return(result);
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e5      	bne.n	800ac9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0310 	and.w	r3, r3, #16
 800acdc:	2b10      	cmp	r3, #16
 800acde:	d10a      	bne.n	800acf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff fdbb 	bl	800a878 <HAL_UARTEx_RxEventCallback>
 800ad02:	e002      	b.n	800ad0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7f6 ff29 	bl	8001b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e002      	b.n	800ad14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e000      	b.n	800ad14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ad12:	2302      	movs	r3, #2
  }
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3730      	adds	r7, #48	; 0x30
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad20:	b0c0      	sub	sp, #256	; 0x100
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad38:	68d9      	ldr	r1, [r3, #12]
 800ad3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	ea40 0301 	orr.w	r3, r0, r1
 800ad44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	431a      	orrs	r2, r3
 800ad54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad74:	f021 010c 	bic.w	r1, r1, #12
 800ad78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad82:	430b      	orrs	r3, r1
 800ad84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad96:	6999      	ldr	r1, [r3, #24]
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	ea40 0301 	orr.w	r3, r0, r1
 800ada2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ada4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	4b8f      	ldr	r3, [pc, #572]	; (800afe8 <UART_SetConfig+0x2cc>)
 800adac:	429a      	cmp	r2, r3
 800adae:	d005      	beq.n	800adbc <UART_SetConfig+0xa0>
 800adb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b8d      	ldr	r3, [pc, #564]	; (800afec <UART_SetConfig+0x2d0>)
 800adb8:	429a      	cmp	r2, r3
 800adba:	d104      	bne.n	800adc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800adbc:	f7fd fcce 	bl	800875c <HAL_RCC_GetPCLK2Freq>
 800adc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800adc4:	e003      	b.n	800adce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800adc6:	f7fd fcb5 	bl	8008734 <HAL_RCC_GetPCLK1Freq>
 800adca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add2:	69db      	ldr	r3, [r3, #28]
 800add4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800add8:	f040 810c 	bne.w	800aff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800addc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ade6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800adea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800adee:	4622      	mov	r2, r4
 800adf0:	462b      	mov	r3, r5
 800adf2:	1891      	adds	r1, r2, r2
 800adf4:	65b9      	str	r1, [r7, #88]	; 0x58
 800adf6:	415b      	adcs	r3, r3
 800adf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800adfe:	4621      	mov	r1, r4
 800ae00:	eb12 0801 	adds.w	r8, r2, r1
 800ae04:	4629      	mov	r1, r5
 800ae06:	eb43 0901 	adc.w	r9, r3, r1
 800ae0a:	f04f 0200 	mov.w	r2, #0
 800ae0e:	f04f 0300 	mov.w	r3, #0
 800ae12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae1e:	4690      	mov	r8, r2
 800ae20:	4699      	mov	r9, r3
 800ae22:	4623      	mov	r3, r4
 800ae24:	eb18 0303 	adds.w	r3, r8, r3
 800ae28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	eb49 0303 	adc.w	r3, r9, r3
 800ae32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	18db      	adds	r3, r3, r3
 800ae4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae50:	4613      	mov	r3, r2
 800ae52:	eb42 0303 	adc.w	r3, r2, r3
 800ae56:	657b      	str	r3, [r7, #84]	; 0x54
 800ae58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ae5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae60:	f7f5 ff12 	bl	8000c88 <__aeabi_uldivmod>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4b61      	ldr	r3, [pc, #388]	; (800aff0 <UART_SetConfig+0x2d4>)
 800ae6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ae6e:	095b      	lsrs	r3, r3, #5
 800ae70:	011c      	lsls	r4, r3, #4
 800ae72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ae80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ae84:	4642      	mov	r2, r8
 800ae86:	464b      	mov	r3, r9
 800ae88:	1891      	adds	r1, r2, r2
 800ae8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ae8c:	415b      	adcs	r3, r3
 800ae8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ae94:	4641      	mov	r1, r8
 800ae96:	eb12 0a01 	adds.w	sl, r2, r1
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	eb43 0b01 	adc.w	fp, r3, r1
 800aea0:	f04f 0200 	mov.w	r2, #0
 800aea4:	f04f 0300 	mov.w	r3, #0
 800aea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aeac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aeb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aeb4:	4692      	mov	sl, r2
 800aeb6:	469b      	mov	fp, r3
 800aeb8:	4643      	mov	r3, r8
 800aeba:	eb1a 0303 	adds.w	r3, sl, r3
 800aebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aec2:	464b      	mov	r3, r9
 800aec4:	eb4b 0303 	adc.w	r3, fp, r3
 800aec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aed8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aedc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aee0:	460b      	mov	r3, r1
 800aee2:	18db      	adds	r3, r3, r3
 800aee4:	643b      	str	r3, [r7, #64]	; 0x40
 800aee6:	4613      	mov	r3, r2
 800aee8:	eb42 0303 	adc.w	r3, r2, r3
 800aeec:	647b      	str	r3, [r7, #68]	; 0x44
 800aeee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aef6:	f7f5 fec7 	bl	8000c88 <__aeabi_uldivmod>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	4b3b      	ldr	r3, [pc, #236]	; (800aff0 <UART_SetConfig+0x2d4>)
 800af02:	fba3 2301 	umull	r2, r3, r3, r1
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	2264      	movs	r2, #100	; 0x64
 800af0a:	fb02 f303 	mul.w	r3, r2, r3
 800af0e:	1acb      	subs	r3, r1, r3
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800af16:	4b36      	ldr	r3, [pc, #216]	; (800aff0 <UART_SetConfig+0x2d4>)
 800af18:	fba3 2302 	umull	r2, r3, r3, r2
 800af1c:	095b      	lsrs	r3, r3, #5
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af24:	441c      	add	r4, r3
 800af26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	1891      	adds	r1, r2, r2
 800af3e:	63b9      	str	r1, [r7, #56]	; 0x38
 800af40:	415b      	adcs	r3, r3
 800af42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af48:	4641      	mov	r1, r8
 800af4a:	1851      	adds	r1, r2, r1
 800af4c:	6339      	str	r1, [r7, #48]	; 0x30
 800af4e:	4649      	mov	r1, r9
 800af50:	414b      	adcs	r3, r1
 800af52:	637b      	str	r3, [r7, #52]	; 0x34
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	f04f 0300 	mov.w	r3, #0
 800af5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800af60:	4659      	mov	r1, fp
 800af62:	00cb      	lsls	r3, r1, #3
 800af64:	4651      	mov	r1, sl
 800af66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af6a:	4651      	mov	r1, sl
 800af6c:	00ca      	lsls	r2, r1, #3
 800af6e:	4610      	mov	r0, r2
 800af70:	4619      	mov	r1, r3
 800af72:	4603      	mov	r3, r0
 800af74:	4642      	mov	r2, r8
 800af76:	189b      	adds	r3, r3, r2
 800af78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af7c:	464b      	mov	r3, r9
 800af7e:	460a      	mov	r2, r1
 800af80:	eb42 0303 	adc.w	r3, r2, r3
 800af84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800af98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af9c:	460b      	mov	r3, r1
 800af9e:	18db      	adds	r3, r3, r3
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
 800afa2:	4613      	mov	r3, r2
 800afa4:	eb42 0303 	adc.w	r3, r2, r3
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800afae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800afb2:	f7f5 fe69 	bl	8000c88 <__aeabi_uldivmod>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <UART_SetConfig+0x2d4>)
 800afbc:	fba3 1302 	umull	r1, r3, r3, r2
 800afc0:	095b      	lsrs	r3, r3, #5
 800afc2:	2164      	movs	r1, #100	; 0x64
 800afc4:	fb01 f303 	mul.w	r3, r1, r3
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	00db      	lsls	r3, r3, #3
 800afcc:	3332      	adds	r3, #50	; 0x32
 800afce:	4a08      	ldr	r2, [pc, #32]	; (800aff0 <UART_SetConfig+0x2d4>)
 800afd0:	fba2 2303 	umull	r2, r3, r2, r3
 800afd4:	095b      	lsrs	r3, r3, #5
 800afd6:	f003 0207 	and.w	r2, r3, #7
 800afda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4422      	add	r2, r4
 800afe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800afe4:	e106      	b.n	800b1f4 <UART_SetConfig+0x4d8>
 800afe6:	bf00      	nop
 800afe8:	40011000 	.word	0x40011000
 800afec:	40011400 	.word	0x40011400
 800aff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aff8:	2200      	movs	r2, #0
 800affa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800affe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b006:	4642      	mov	r2, r8
 800b008:	464b      	mov	r3, r9
 800b00a:	1891      	adds	r1, r2, r2
 800b00c:	6239      	str	r1, [r7, #32]
 800b00e:	415b      	adcs	r3, r3
 800b010:	627b      	str	r3, [r7, #36]	; 0x24
 800b012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b016:	4641      	mov	r1, r8
 800b018:	1854      	adds	r4, r2, r1
 800b01a:	4649      	mov	r1, r9
 800b01c:	eb43 0501 	adc.w	r5, r3, r1
 800b020:	f04f 0200 	mov.w	r2, #0
 800b024:	f04f 0300 	mov.w	r3, #0
 800b028:	00eb      	lsls	r3, r5, #3
 800b02a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b02e:	00e2      	lsls	r2, r4, #3
 800b030:	4614      	mov	r4, r2
 800b032:	461d      	mov	r5, r3
 800b034:	4643      	mov	r3, r8
 800b036:	18e3      	adds	r3, r4, r3
 800b038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b03c:	464b      	mov	r3, r9
 800b03e:	eb45 0303 	adc.w	r3, r5, r3
 800b042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b056:	f04f 0200 	mov.w	r2, #0
 800b05a:	f04f 0300 	mov.w	r3, #0
 800b05e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b062:	4629      	mov	r1, r5
 800b064:	008b      	lsls	r3, r1, #2
 800b066:	4621      	mov	r1, r4
 800b068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b06c:	4621      	mov	r1, r4
 800b06e:	008a      	lsls	r2, r1, #2
 800b070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b074:	f7f5 fe08 	bl	8000c88 <__aeabi_uldivmod>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4b60      	ldr	r3, [pc, #384]	; (800b200 <UART_SetConfig+0x4e4>)
 800b07e:	fba3 2302 	umull	r2, r3, r3, r2
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	011c      	lsls	r4, r3, #4
 800b086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b098:	4642      	mov	r2, r8
 800b09a:	464b      	mov	r3, r9
 800b09c:	1891      	adds	r1, r2, r2
 800b09e:	61b9      	str	r1, [r7, #24]
 800b0a0:	415b      	adcs	r3, r3
 800b0a2:	61fb      	str	r3, [r7, #28]
 800b0a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	1851      	adds	r1, r2, r1
 800b0ac:	6139      	str	r1, [r7, #16]
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	414b      	adcs	r3, r1
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	f04f 0300 	mov.w	r3, #0
 800b0bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b0c0:	4659      	mov	r1, fp
 800b0c2:	00cb      	lsls	r3, r1, #3
 800b0c4:	4651      	mov	r1, sl
 800b0c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0ca:	4651      	mov	r1, sl
 800b0cc:	00ca      	lsls	r2, r1, #3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	189b      	adds	r3, r3, r2
 800b0d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0dc:	464b      	mov	r3, r9
 800b0de:	460a      	mov	r2, r1
 800b0e0:	eb42 0303 	adc.w	r3, r2, r3
 800b0e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b0f4:	f04f 0200 	mov.w	r2, #0
 800b0f8:	f04f 0300 	mov.w	r3, #0
 800b0fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b100:	4649      	mov	r1, r9
 800b102:	008b      	lsls	r3, r1, #2
 800b104:	4641      	mov	r1, r8
 800b106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b10a:	4641      	mov	r1, r8
 800b10c:	008a      	lsls	r2, r1, #2
 800b10e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b112:	f7f5 fdb9 	bl	8000c88 <__aeabi_uldivmod>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4611      	mov	r1, r2
 800b11c:	4b38      	ldr	r3, [pc, #224]	; (800b200 <UART_SetConfig+0x4e4>)
 800b11e:	fba3 2301 	umull	r2, r3, r3, r1
 800b122:	095b      	lsrs	r3, r3, #5
 800b124:	2264      	movs	r2, #100	; 0x64
 800b126:	fb02 f303 	mul.w	r3, r2, r3
 800b12a:	1acb      	subs	r3, r1, r3
 800b12c:	011b      	lsls	r3, r3, #4
 800b12e:	3332      	adds	r3, #50	; 0x32
 800b130:	4a33      	ldr	r2, [pc, #204]	; (800b200 <UART_SetConfig+0x4e4>)
 800b132:	fba2 2303 	umull	r2, r3, r2, r3
 800b136:	095b      	lsrs	r3, r3, #5
 800b138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b13c:	441c      	add	r4, r3
 800b13e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b142:	2200      	movs	r2, #0
 800b144:	673b      	str	r3, [r7, #112]	; 0x70
 800b146:	677a      	str	r2, [r7, #116]	; 0x74
 800b148:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b14c:	4642      	mov	r2, r8
 800b14e:	464b      	mov	r3, r9
 800b150:	1891      	adds	r1, r2, r2
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	415b      	adcs	r3, r3
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b15c:	4641      	mov	r1, r8
 800b15e:	1851      	adds	r1, r2, r1
 800b160:	6039      	str	r1, [r7, #0]
 800b162:	4649      	mov	r1, r9
 800b164:	414b      	adcs	r3, r1
 800b166:	607b      	str	r3, [r7, #4]
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b174:	4659      	mov	r1, fp
 800b176:	00cb      	lsls	r3, r1, #3
 800b178:	4651      	mov	r1, sl
 800b17a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b17e:	4651      	mov	r1, sl
 800b180:	00ca      	lsls	r2, r1, #3
 800b182:	4610      	mov	r0, r2
 800b184:	4619      	mov	r1, r3
 800b186:	4603      	mov	r3, r0
 800b188:	4642      	mov	r2, r8
 800b18a:	189b      	adds	r3, r3, r2
 800b18c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b18e:	464b      	mov	r3, r9
 800b190:	460a      	mov	r2, r1
 800b192:	eb42 0303 	adc.w	r3, r2, r3
 800b196:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b1a2:	667a      	str	r2, [r7, #100]	; 0x64
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	008b      	lsls	r3, r1, #2
 800b1b4:	4641      	mov	r1, r8
 800b1b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	008a      	lsls	r2, r1, #2
 800b1be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b1c2:	f7f5 fd61 	bl	8000c88 <__aeabi_uldivmod>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	; (800b200 <UART_SetConfig+0x4e4>)
 800b1cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d0:	095b      	lsrs	r3, r3, #5
 800b1d2:	2164      	movs	r1, #100	; 0x64
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	3332      	adds	r3, #50	; 0x32
 800b1de:	4a08      	ldr	r2, [pc, #32]	; (800b200 <UART_SetConfig+0x4e4>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	095b      	lsrs	r3, r3, #5
 800b1e6:	f003 020f 	and.w	r2, r3, #15
 800b1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4422      	add	r2, r4
 800b1f2:	609a      	str	r2, [r3, #8]
}
 800b1f4:	bf00      	nop
 800b1f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b200:	51eb851f 	.word	0x51eb851f

0800b204 <__NVIC_SetPriority>:
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	6039      	str	r1, [r7, #0]
 800b20e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b214:	2b00      	cmp	r3, #0
 800b216:	db0a      	blt.n	800b22e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	490c      	ldr	r1, [pc, #48]	; (800b250 <__NVIC_SetPriority+0x4c>)
 800b21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b222:	0112      	lsls	r2, r2, #4
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	440b      	add	r3, r1
 800b228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b22c:	e00a      	b.n	800b244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4908      	ldr	r1, [pc, #32]	; (800b254 <__NVIC_SetPriority+0x50>)
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	3b04      	subs	r3, #4
 800b23c:	0112      	lsls	r2, r2, #4
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	440b      	add	r3, r1
 800b242:	761a      	strb	r2, [r3, #24]
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	e000e100 	.word	0xe000e100
 800b254:	e000ed00 	.word	0xe000ed00

0800b258 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b258:	b580      	push	{r7, lr}
 800b25a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b25c:	2100      	movs	r1, #0
 800b25e:	f06f 0004 	mvn.w	r0, #4
 800b262:	f7ff ffcf 	bl	800b204 <__NVIC_SetPriority>
#endif
}
 800b266:	bf00      	nop
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b272:	f3ef 8305 	mrs	r3, IPSR
 800b276:	603b      	str	r3, [r7, #0]
  return(result);
 800b278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b27e:	f06f 0305 	mvn.w	r3, #5
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	e00c      	b.n	800b2a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b286:	4b0a      	ldr	r3, [pc, #40]	; (800b2b0 <osKernelInitialize+0x44>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d105      	bne.n	800b29a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b28e:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <osKernelInitialize+0x44>)
 800b290:	2201      	movs	r2, #1
 800b292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b294:	2300      	movs	r3, #0
 800b296:	607b      	str	r3, [r7, #4]
 800b298:	e002      	b.n	800b2a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b29a:	f04f 33ff 	mov.w	r3, #4294967295
 800b29e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2a0:	687b      	ldr	r3, [r7, #4]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20000a64 	.word	0x20000a64

0800b2b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2ba:	f3ef 8305 	mrs	r3, IPSR
 800b2be:	603b      	str	r3, [r7, #0]
  return(result);
 800b2c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800b2c6:	f06f 0305 	mvn.w	r3, #5
 800b2ca:	607b      	str	r3, [r7, #4]
 800b2cc:	e010      	b.n	800b2f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <osKernelStart+0x48>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d109      	bne.n	800b2ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b2d6:	f7ff ffbf 	bl	800b258 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b2da:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <osKernelStart+0x48>)
 800b2dc:	2202      	movs	r2, #2
 800b2de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b2e0:	f001 f866 	bl	800c3b0 <vTaskStartScheduler>
      stat = osOK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	e002      	b.n	800b2f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2f0:	687b      	ldr	r3, [r7, #4]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000a64 	.word	0x20000a64

0800b300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	; 0x38
 800b304:	af04      	add	r7, sp, #16
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b310:	f3ef 8305 	mrs	r3, IPSR
 800b314:	617b      	str	r3, [r7, #20]
  return(result);
 800b316:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d17e      	bne.n	800b41a <osThreadNew+0x11a>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d07b      	beq.n	800b41a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b322:	2380      	movs	r3, #128	; 0x80
 800b324:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b326:	2318      	movs	r3, #24
 800b328:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295
 800b332:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d045      	beq.n	800b3c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <osThreadNew+0x48>
        name = attr->name;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d008      	beq.n	800b36e <osThreadNew+0x6e>
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	2b38      	cmp	r3, #56	; 0x38
 800b360:	d805      	bhi.n	800b36e <osThreadNew+0x6e>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <osThreadNew+0x72>
        return (NULL);
 800b36e:	2300      	movs	r3, #0
 800b370:	e054      	b.n	800b41c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	089b      	lsrs	r3, r3, #2
 800b380:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00e      	beq.n	800b3a8 <osThreadNew+0xa8>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	2b5b      	cmp	r3, #91	; 0x5b
 800b390:	d90a      	bls.n	800b3a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b396:	2b00      	cmp	r3, #0
 800b398:	d006      	beq.n	800b3a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <osThreadNew+0xa8>
        mem = 1;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	61bb      	str	r3, [r7, #24]
 800b3a6:	e010      	b.n	800b3ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10c      	bne.n	800b3ca <osThreadNew+0xca>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d108      	bne.n	800b3ca <osThreadNew+0xca>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d104      	bne.n	800b3ca <osThreadNew+0xca>
          mem = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	61bb      	str	r3, [r7, #24]
 800b3c4:	e001      	b.n	800b3ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d110      	bne.n	800b3f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b3d8:	9202      	str	r2, [sp, #8]
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6a3a      	ldr	r2, [r7, #32]
 800b3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f000 fe0c 	bl	800c004 <xTaskCreateStatic>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	613b      	str	r3, [r7, #16]
 800b3f0:	e013      	b.n	800b41a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d110      	bne.n	800b41a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	f107 0310 	add.w	r3, r7, #16
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f000 fe57 	bl	800c0be <xTaskCreate>
 800b410:	4603      	mov	r3, r0
 800b412:	2b01      	cmp	r3, #1
 800b414:	d001      	beq.n	800b41a <osThreadNew+0x11a>
            hTask = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b41a:	693b      	ldr	r3, [r7, #16]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3728      	adds	r7, #40	; 0x28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b42c:	f3ef 8305 	mrs	r3, IPSR
 800b430:	60bb      	str	r3, [r7, #8]
  return(result);
 800b432:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <osDelay+0x1c>
    stat = osErrorISR;
 800b438:	f06f 0305 	mvn.w	r3, #5
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	e007      	b.n	800b450 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b440:	2300      	movs	r3, #0
 800b442:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 ff7c 	bl	800c348 <vTaskDelay>
    }
  }

  return (stat);
 800b450:	68fb      	ldr	r3, [r7, #12]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4a07      	ldr	r2, [pc, #28]	; (800b488 <vApplicationGetIdleTaskMemory+0x2c>)
 800b46c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	4a06      	ldr	r2, [pc, #24]	; (800b48c <vApplicationGetIdleTaskMemory+0x30>)
 800b472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2280      	movs	r2, #128	; 0x80
 800b478:	601a      	str	r2, [r3, #0]
}
 800b47a:	bf00      	nop
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000a68 	.word	0x20000a68
 800b48c:	20000ac4 	.word	0x20000ac4

0800b490 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4a07      	ldr	r2, [pc, #28]	; (800b4bc <vApplicationGetTimerTaskMemory+0x2c>)
 800b4a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	4a06      	ldr	r2, [pc, #24]	; (800b4c0 <vApplicationGetTimerTaskMemory+0x30>)
 800b4a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ae:	601a      	str	r2, [r3, #0]
}
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20000cc4 	.word	0x20000cc4
 800b4c0:	20000d20 	.word	0x20000d20

0800b4c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f103 0208 	add.w	r2, r3, #8
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f103 0208 	add.w	r2, r3, #8
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f103 0208 	add.w	r2, r3, #8
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	689a      	ldr	r2, [r3, #8]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	1c5a      	adds	r2, r3, #1
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	601a      	str	r2, [r3, #0]
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b566:	b480      	push	{r7}
 800b568:	b085      	sub	sp, #20
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57c:	d103      	bne.n	800b586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	e00c      	b.n	800b5a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3308      	adds	r3, #8
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	e002      	b.n	800b594 <vListInsert+0x2e>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d2f6      	bcs.n	800b58e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	601a      	str	r2, [r3, #0]
}
 800b5cc:	bf00      	nop
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6892      	ldr	r2, [r2, #8]
 800b5ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	6852      	ldr	r2, [r2, #4]
 800b5f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d103      	bne.n	800b60c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	1e5a      	subs	r2, r3, #1
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10a      	bne.n	800b656 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b656:	f002 f84d 	bl	800d6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b662:	68f9      	ldr	r1, [r7, #12]
 800b664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b666:	fb01 f303 	mul.w	r3, r1, r3
 800b66a:	441a      	add	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b686:	3b01      	subs	r3, #1
 800b688:	68f9      	ldr	r1, [r7, #12]
 800b68a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b68c:	fb01 f303 	mul.w	r3, r1, r3
 800b690:	441a      	add	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	22ff      	movs	r2, #255	; 0xff
 800b69a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	22ff      	movs	r2, #255	; 0xff
 800b6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d114      	bne.n	800b6d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d01a      	beq.n	800b6ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3310      	adds	r3, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f903 	bl	800c8c4 <xTaskRemoveFromEventList>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d012      	beq.n	800b6ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	; (800b6f8 <xQueueGenericReset+0xcc>)
 800b6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	e009      	b.n	800b6ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3310      	adds	r3, #16
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff fef2 	bl	800b4c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	3324      	adds	r3, #36	; 0x24
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff feed 	bl	800b4c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6ea:	f002 f833 	bl	800d754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6ee:	2301      	movs	r3, #1
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08e      	sub	sp, #56	; 0x38
 800b700:	af02      	add	r7, sp, #8
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10a      	bne.n	800b726 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <xQueueGenericCreateStatic+0x52>
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <xQueueGenericCreateStatic+0x56>
 800b74e:	2301      	movs	r3, #1
 800b750:	e000      	b.n	800b754 <xQueueGenericCreateStatic+0x58>
 800b752:	2300      	movs	r3, #0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	623b      	str	r3, [r7, #32]
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d102      	bne.n	800b77a <xQueueGenericCreateStatic+0x7e>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <xQueueGenericCreateStatic+0x82>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e000      	b.n	800b780 <xQueueGenericCreateStatic+0x84>
 800b77e:	2300      	movs	r3, #0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10a      	bne.n	800b79a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	61fb      	str	r3, [r7, #28]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b79a:	2350      	movs	r3, #80	; 0x50
 800b79c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b50      	cmp	r3, #80	; 0x50
 800b7a2:	d00a      	beq.n	800b7ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	61bb      	str	r3, [r7, #24]
}
 800b7b6:	bf00      	nop
 800b7b8:	e7fe      	b.n	800b7b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b7ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00d      	beq.n	800b7e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f805 	bl	800b7ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3730      	adds	r7, #48	; 0x30
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	69ba      	ldr	r2, [r7, #24]
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	e002      	b.n	800b80e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b81a:	2101      	movs	r1, #1
 800b81c:	69b8      	ldr	r0, [r7, #24]
 800b81e:	f7ff ff05 	bl	800b62c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	78fa      	ldrb	r2, [r7, #3]
 800b826:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b82a:	bf00      	nop
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
	...

0800b834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b08e      	sub	sp, #56	; 0x38
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b842:	2300      	movs	r3, #0
 800b844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <xQueueGenericSend+0x32>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d103      	bne.n	800b874 <xQueueGenericSend+0x40>
 800b86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <xQueueGenericSend+0x44>
 800b874:	2301      	movs	r3, #1
 800b876:	e000      	b.n	800b87a <xQueueGenericSend+0x46>
 800b878:	2300      	movs	r3, #0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <xQueueGenericSend+0x60>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d103      	bne.n	800b8a2 <xQueueGenericSend+0x6e>
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d101      	bne.n	800b8a6 <xQueueGenericSend+0x72>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e000      	b.n	800b8a8 <xQueueGenericSend+0x74>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	623b      	str	r3, [r7, #32]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8c2:	f001 f9bd 	bl	800cc40 <xTaskGetSchedulerState>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <xQueueGenericSend+0x9e>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <xQueueGenericSend+0xa2>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e000      	b.n	800b8d8 <xQueueGenericSend+0xa4>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	61fb      	str	r3, [r7, #28]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8f2:	f001 feff 	bl	800d6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d302      	bcc.n	800b908 <xQueueGenericSend+0xd4>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d129      	bne.n	800b95c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b90e:	f000 fa0b 	bl	800bd28 <prvCopyDataToQueue>
 800b912:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d010      	beq.n	800b93e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	3324      	adds	r3, #36	; 0x24
 800b920:	4618      	mov	r0, r3
 800b922:	f000 ffcf 	bl	800c8c4 <xTaskRemoveFromEventList>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d013      	beq.n	800b954 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b92c:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <xQueueGenericSend+0x1f8>)
 800b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	e00a      	b.n	800b954 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b944:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <xQueueGenericSend+0x1f8>)
 800b946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b954:	f001 fefe 	bl	800d754 <vPortExitCritical>
				return pdPASS;
 800b958:	2301      	movs	r3, #1
 800b95a:	e063      	b.n	800ba24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d103      	bne.n	800b96a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b962:	f001 fef7 	bl	800d754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b966:	2300      	movs	r3, #0
 800b968:	e05c      	b.n	800ba24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b970:	f107 0314 	add.w	r3, r7, #20
 800b974:	4618      	mov	r0, r3
 800b976:	f001 f809 	bl	800c98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b97a:	2301      	movs	r3, #1
 800b97c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b97e:	f001 fee9 	bl	800d754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b982:	f000 fd7b 	bl	800c47c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b986:	f001 feb5 	bl	800d6f4 <vPortEnterCritical>
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b990:	b25b      	sxtb	r3, r3
 800b992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b996:	d103      	bne.n	800b9a0 <xQueueGenericSend+0x16c>
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9a6:	b25b      	sxtb	r3, r3
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ac:	d103      	bne.n	800b9b6 <xQueueGenericSend+0x182>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9b6:	f001 fecd 	bl	800d754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9ba:	1d3a      	adds	r2, r7, #4
 800b9bc:	f107 0314 	add.w	r3, r7, #20
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 fff8 	bl	800c9b8 <xTaskCheckForTimeOut>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d124      	bne.n	800ba18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9d0:	f000 faa2 	bl	800bf18 <prvIsQueueFull>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d018      	beq.n	800ba0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	3310      	adds	r3, #16
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 ff1e 	bl	800c824 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ea:	f000 fa2d 	bl	800be48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9ee:	f000 fd53 	bl	800c498 <xTaskResumeAll>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f47f af7c 	bne.w	800b8f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ba2c <xQueueGenericSend+0x1f8>)
 800b9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba00:	601a      	str	r2, [r3, #0]
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	e772      	b.n	800b8f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba0e:	f000 fa1b 	bl	800be48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba12:	f000 fd41 	bl	800c498 <xTaskResumeAll>
 800ba16:	e76c      	b.n	800b8f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba1a:	f000 fa15 	bl	800be48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba1e:	f000 fd3b 	bl	800c498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3738      	adds	r7, #56	; 0x38
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	e000ed04 	.word	0xe000ed04

0800ba30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b090      	sub	sp, #64	; 0x40
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10a      	bne.n	800ba5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba5a:	bf00      	nop
 800ba5c:	e7fe      	b.n	800ba5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d103      	bne.n	800ba6c <xQueueGenericSendFromISR+0x3c>
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <xQueueGenericSendFromISR+0x40>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e000      	b.n	800ba72 <xQueueGenericSendFromISR+0x42>
 800ba70:	2300      	movs	r3, #0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d103      	bne.n	800ba9a <xQueueGenericSendFromISR+0x6a>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d101      	bne.n	800ba9e <xQueueGenericSendFromISR+0x6e>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e000      	b.n	800baa0 <xQueueGenericSendFromISR+0x70>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	623b      	str	r3, [r7, #32]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800baba:	f001 fefd 	bl	800d8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800babe:	f3ef 8211 	mrs	r2, BASEPRI
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	61fa      	str	r2, [r7, #28]
 800bad4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bad6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bad8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800badc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d302      	bcc.n	800baec <xQueueGenericSendFromISR+0xbc>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d12f      	bne.n	800bb4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	68b9      	ldr	r1, [r7, #8]
 800bb00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb02:	f000 f911 	bl	800bd28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0e:	d112      	bne.n	800bb36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d016      	beq.n	800bb46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	3324      	adds	r3, #36	; 0x24
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f000 fed1 	bl	800c8c4 <xTaskRemoveFromEventList>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00e      	beq.n	800bb46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2201      	movs	r2, #1
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	e007      	b.n	800bb46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	b25a      	sxtb	r2, r3
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb46:	2301      	movs	r3, #1
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bb4a:	e001      	b.n	800bb50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3740      	adds	r7, #64	; 0x40
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b08c      	sub	sp, #48	; 0x30
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb74:	2300      	movs	r3, #0
 800bb76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <xQueueReceive+0x30>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	623b      	str	r3, [r7, #32]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <xQueueReceive+0x3e>
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <xQueueReceive+0x42>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e000      	b.n	800bbac <xQueueReceive+0x44>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <xQueueReceive+0x5e>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	61fb      	str	r3, [r7, #28]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbc6:	f001 f83b 	bl	800cc40 <xTaskGetSchedulerState>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <xQueueReceive+0x6e>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <xQueueReceive+0x72>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e000      	b.n	800bbdc <xQueueReceive+0x74>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <xQueueReceive+0x8e>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	61bb      	str	r3, [r7, #24]
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbf6:	f001 fd7d 	bl	800d6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d01f      	beq.n	800bc46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc06:	68b9      	ldr	r1, [r7, #8]
 800bc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0a:	f000 f8f7 	bl	800bdfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	1e5a      	subs	r2, r3, #1
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00f      	beq.n	800bc3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	3310      	adds	r3, #16
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fe4e 	bl	800c8c4 <xTaskRemoveFromEventList>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc2e:	4b3d      	ldr	r3, [pc, #244]	; (800bd24 <xQueueReceive+0x1bc>)
 800bc30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc3e:	f001 fd89 	bl	800d754 <vPortExitCritical>
				return pdPASS;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e069      	b.n	800bd1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc4c:	f001 fd82 	bl	800d754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc50:	2300      	movs	r3, #0
 800bc52:	e062      	b.n	800bd1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc5a:	f107 0310 	add.w	r3, r7, #16
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fe94 	bl	800c98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc64:	2301      	movs	r3, #1
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc68:	f001 fd74 	bl	800d754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc6c:	f000 fc06 	bl	800c47c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc70:	f001 fd40 	bl	800d6f4 <vPortEnterCritical>
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc7a:	b25b      	sxtb	r3, r3
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d103      	bne.n	800bc8a <xQueueReceive+0x122>
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc90:	b25b      	sxtb	r3, r3
 800bc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc96:	d103      	bne.n	800bca0 <xQueueReceive+0x138>
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bca0:	f001 fd58 	bl	800d754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bca4:	1d3a      	adds	r2, r7, #4
 800bca6:	f107 0310 	add.w	r3, r7, #16
 800bcaa:	4611      	mov	r1, r2
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 fe83 	bl	800c9b8 <xTaskCheckForTimeOut>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d123      	bne.n	800bd00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcba:	f000 f917 	bl	800beec <prvIsQueueEmpty>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d017      	beq.n	800bcf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	3324      	adds	r3, #36	; 0x24
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	4611      	mov	r1, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 fda9 	bl	800c824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd4:	f000 f8b8 	bl	800be48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcd8:	f000 fbde 	bl	800c498 <xTaskResumeAll>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d189      	bne.n	800bbf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bce2:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <xQueueReceive+0x1bc>)
 800bce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	e780      	b.n	800bbf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bcf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf6:	f000 f8a7 	bl	800be48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcfa:	f000 fbcd 	bl	800c498 <xTaskResumeAll>
 800bcfe:	e77a      	b.n	800bbf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd02:	f000 f8a1 	bl	800be48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd06:	f000 fbc7 	bl	800c498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0c:	f000 f8ee 	bl	800beec <prvIsQueueEmpty>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f43f af6f 	beq.w	800bbf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3730      	adds	r7, #48	; 0x30
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	e000ed04 	.word	0xe000ed04

0800bd28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd34:	2300      	movs	r3, #0
 800bd36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10d      	bne.n	800bd62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d14d      	bne.n	800bdea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 ff92 	bl	800cc7c <xTaskPriorityDisinherit>
 800bd58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	609a      	str	r2, [r3, #8]
 800bd60:	e043      	b.n	800bdea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d119      	bne.n	800bd9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6858      	ldr	r0, [r3, #4]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd70:	461a      	mov	r2, r3
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	f002 fdd9 	bl	800e92a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd80:	441a      	add	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d32b      	bcc.n	800bdea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	605a      	str	r2, [r3, #4]
 800bd9a:	e026      	b.n	800bdea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68d8      	ldr	r0, [r3, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda4:	461a      	mov	r2, r3
 800bda6:	68b9      	ldr	r1, [r7, #8]
 800bda8:	f002 fdbf 	bl	800e92a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	68da      	ldr	r2, [r3, #12]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	425b      	negs	r3, r3
 800bdb6:	441a      	add	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	68da      	ldr	r2, [r3, #12]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d207      	bcs.n	800bdd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689a      	ldr	r2, [r3, #8]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd0:	425b      	negs	r3, r3
 800bdd2:	441a      	add	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d105      	bne.n	800bdea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	1c5a      	adds	r2, r3, #1
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdf2:	697b      	ldr	r3, [r7, #20]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d018      	beq.n	800be40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68da      	ldr	r2, [r3, #12]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	441a      	add	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	68da      	ldr	r2, [r3, #12]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	429a      	cmp	r2, r3
 800be26:	d303      	bcc.n	800be30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68d9      	ldr	r1, [r3, #12]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be38:	461a      	mov	r2, r3
 800be3a:	6838      	ldr	r0, [r7, #0]
 800be3c:	f002 fd75 	bl	800e92a <memcpy>
	}
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be50:	f001 fc50 	bl	800d6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be5c:	e011      	b.n	800be82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	d012      	beq.n	800be8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	3324      	adds	r3, #36	; 0x24
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fd2a 	bl	800c8c4 <xTaskRemoveFromEventList>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be76:	f000 fe01 	bl	800ca7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	dce9      	bgt.n	800be5e <prvUnlockQueue+0x16>
 800be8a:	e000      	b.n	800be8e <prvUnlockQueue+0x46>
					break;
 800be8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	22ff      	movs	r2, #255	; 0xff
 800be92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be96:	f001 fc5d 	bl	800d754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be9a:	f001 fc2b 	bl	800d6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bea4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bea6:	e011      	b.n	800becc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d012      	beq.n	800bed6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3310      	adds	r3, #16
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 fd05 	bl	800c8c4 <xTaskRemoveFromEventList>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bec0:	f000 fddc 	bl	800ca7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800becc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dce9      	bgt.n	800bea8 <prvUnlockQueue+0x60>
 800bed4:	e000      	b.n	800bed8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bed6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	22ff      	movs	r2, #255	; 0xff
 800bedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bee0:	f001 fc38 	bl	800d754 <vPortExitCritical>
}
 800bee4:	bf00      	nop
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bef4:	f001 fbfe 	bl	800d6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf00:	2301      	movs	r3, #1
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	e001      	b.n	800bf0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf06:	2300      	movs	r3, #0
 800bf08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf0a:	f001 fc23 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf20:	f001 fbe8 	bl	800d6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d102      	bne.n	800bf36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf30:	2301      	movs	r3, #1
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	e001      	b.n	800bf3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf3a:	f001 fc0b 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf52:	2300      	movs	r3, #0
 800bf54:	60fb      	str	r3, [r7, #12]
 800bf56:	e014      	b.n	800bf82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf58:	4a0f      	ldr	r2, [pc, #60]	; (800bf98 <vQueueAddToRegistry+0x50>)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10b      	bne.n	800bf7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf64:	490c      	ldr	r1, [pc, #48]	; (800bf98 <vQueueAddToRegistry+0x50>)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf6e:	4a0a      	ldr	r2, [pc, #40]	; (800bf98 <vQueueAddToRegistry+0x50>)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	4413      	add	r3, r2
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf7a:	e006      	b.n	800bf8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b07      	cmp	r3, #7
 800bf86:	d9e7      	bls.n	800bf58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf88:	bf00      	nop
 800bf8a:	bf00      	nop
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	20001120 	.word	0x20001120

0800bf9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bfac:	f001 fba2 	bl	800d6f4 <vPortEnterCritical>
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfb6:	b25b      	sxtb	r3, r3
 800bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbc:	d103      	bne.n	800bfc6 <vQueueWaitForMessageRestricted+0x2a>
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfcc:	b25b      	sxtb	r3, r3
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	d103      	bne.n	800bfdc <vQueueWaitForMessageRestricted+0x40>
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfdc:	f001 fbba 	bl	800d754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d106      	bne.n	800bff6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	3324      	adds	r3, #36	; 0x24
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fc3b 	bl	800c86c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bff6:	6978      	ldr	r0, [r7, #20]
 800bff8:	f7ff ff26 	bl	800be48 <prvUnlockQueue>
	}
 800bffc:	bf00      	nop
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08e      	sub	sp, #56	; 0x38
 800c008:	af04      	add	r7, sp, #16
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10a      	bne.n	800c02e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	623b      	str	r3, [r7, #32]
}
 800c02a:	bf00      	nop
 800c02c:	e7fe      	b.n	800c02c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xTaskCreateStatic+0x46>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	61fb      	str	r3, [r7, #28]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c04a:	235c      	movs	r3, #92	; 0x5c
 800c04c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b5c      	cmp	r3, #92	; 0x5c
 800c052:	d00a      	beq.n	800c06a <xTaskCreateStatic+0x66>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	61bb      	str	r3, [r7, #24]
}
 800c066:	bf00      	nop
 800c068:	e7fe      	b.n	800c068 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c06a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d01e      	beq.n	800c0b0 <xTaskCreateStatic+0xac>
 800c072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01b      	beq.n	800c0b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c080:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	2202      	movs	r2, #2
 800c086:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c08a:	2300      	movs	r3, #0
 800c08c:	9303      	str	r3, [sp, #12]
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c090:	9302      	str	r3, [sp, #8]
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 f850 	bl	800c148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0aa:	f000 f8dd 	bl	800c268 <prvAddNewTaskToReadyList>
 800c0ae:	e001      	b.n	800c0b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0b4:	697b      	ldr	r3, [r7, #20]
	}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3728      	adds	r7, #40	; 0x28
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b08c      	sub	sp, #48	; 0x30
 800c0c2:	af04      	add	r7, sp, #16
 800c0c4:	60f8      	str	r0, [r7, #12]
 800c0c6:	60b9      	str	r1, [r7, #8]
 800c0c8:	603b      	str	r3, [r7, #0]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0ce:	88fb      	ldrh	r3, [r7, #6]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f001 fc30 	bl	800d938 <pvPortMalloc>
 800c0d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00e      	beq.n	800c0fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0e0:	205c      	movs	r0, #92	; 0x5c
 800c0e2:	f001 fc29 	bl	800d938 <pvPortMalloc>
 800c0e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	697a      	ldr	r2, [r7, #20]
 800c0f2:	631a      	str	r2, [r3, #48]	; 0x30
 800c0f4:	e005      	b.n	800c102 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0f6:	6978      	ldr	r0, [r7, #20]
 800c0f8:	f001 fcea 	bl	800dad0 <vPortFree>
 800c0fc:	e001      	b.n	800c102 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d017      	beq.n	800c138 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c110:	88fa      	ldrh	r2, [r7, #6]
 800c112:	2300      	movs	r3, #0
 800c114:	9303      	str	r3, [sp, #12]
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	9302      	str	r3, [sp, #8]
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68b9      	ldr	r1, [r7, #8]
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f000 f80e 	bl	800c148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c12c:	69f8      	ldr	r0, [r7, #28]
 800c12e:	f000 f89b 	bl	800c268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c132:	2301      	movs	r3, #1
 800c134:	61bb      	str	r3, [r7, #24]
 800c136:	e002      	b.n	800c13e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c138:	f04f 33ff 	mov.w	r3, #4294967295
 800c13c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c13e:	69bb      	ldr	r3, [r7, #24]
	}
 800c140:	4618      	mov	r0, r3
 800c142:	3720      	adds	r7, #32
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	461a      	mov	r2, r3
 800c160:	21a5      	movs	r1, #165	; 0xa5
 800c162:	f002 fb62 	bl	800e82a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c170:	3b01      	subs	r3, #1
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	f023 0307 	bic.w	r3, r3, #7
 800c17e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00a      	beq.n	800c1a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	617b      	str	r3, [r7, #20]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d01f      	beq.n	800c1e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	61fb      	str	r3, [r7, #28]
 800c1aa:	e012      	b.n	800c1d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	7819      	ldrb	r1, [r3, #0]
 800c1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	3334      	adds	r3, #52	; 0x34
 800c1bc:	460a      	mov	r2, r1
 800c1be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d006      	beq.n	800c1da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	61fb      	str	r3, [r7, #28]
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	2b0f      	cmp	r3, #15
 800c1d6:	d9e9      	bls.n	800c1ac <prvInitialiseNewTask+0x64>
 800c1d8:	e000      	b.n	800c1dc <prvInitialiseNewTask+0x94>
			{
				break;
 800c1da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1e4:	e003      	b.n	800c1ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	2b37      	cmp	r3, #55	; 0x37
 800c1f2:	d901      	bls.n	800c1f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1f4:	2337      	movs	r3, #55	; 0x37
 800c1f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c202:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	2200      	movs	r2, #0
 800c208:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	3304      	adds	r3, #4
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff f978 	bl	800b504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	3318      	adds	r3, #24
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff f973 	bl	800b504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c222:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c232:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	2200      	movs	r2, #0
 800c238:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	68f9      	ldr	r1, [r7, #12]
 800c246:	69b8      	ldr	r0, [r7, #24]
 800c248:	f001 f928 	bl	800d49c <pxPortInitialiseStack>
 800c24c:	4602      	mov	r2, r0
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c25c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c25e:	bf00      	nop
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c270:	f001 fa40 	bl	800d6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c274:	4b2d      	ldr	r3, [pc, #180]	; (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	4a2c      	ldr	r2, [pc, #176]	; (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c27c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c27e:	4b2c      	ldr	r3, [pc, #176]	; (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d109      	bne.n	800c29a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c286:	4a2a      	ldr	r2, [pc, #168]	; (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c28c:	4b27      	ldr	r3, [pc, #156]	; (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d110      	bne.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c294:	f000 fc16 	bl	800cac4 <prvInitialiseTaskLists>
 800c298:	e00d      	b.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c29a:	4b26      	ldr	r3, [pc, #152]	; (800c334 <prvAddNewTaskToReadyList+0xcc>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d109      	bne.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2a2:	4b23      	ldr	r3, [pc, #140]	; (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d802      	bhi.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2b0:	4a1f      	ldr	r2, [pc, #124]	; (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2b6:	4b20      	ldr	r3, [pc, #128]	; (800c338 <prvAddNewTaskToReadyList+0xd0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	4a1e      	ldr	r2, [pc, #120]	; (800c338 <prvAddNewTaskToReadyList+0xd0>)
 800c2be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2c0:	4b1d      	ldr	r3, [pc, #116]	; (800c338 <prvAddNewTaskToReadyList+0xd0>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2cc:	4b1b      	ldr	r3, [pc, #108]	; (800c33c <prvAddNewTaskToReadyList+0xd4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d903      	bls.n	800c2dc <prvAddNewTaskToReadyList+0x74>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d8:	4a18      	ldr	r2, [pc, #96]	; (800c33c <prvAddNewTaskToReadyList+0xd4>)
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4a15      	ldr	r2, [pc, #84]	; (800c340 <prvAddNewTaskToReadyList+0xd8>)
 800c2ea:	441a      	add	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7ff f913 	bl	800b51e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2f8:	f001 fa2c 	bl	800d754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2fc:	4b0d      	ldr	r3, [pc, #52]	; (800c334 <prvAddNewTaskToReadyList+0xcc>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00e      	beq.n	800c322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c304:	4b0a      	ldr	r3, [pc, #40]	; (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d207      	bcs.n	800c322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c312:	4b0c      	ldr	r3, [pc, #48]	; (800c344 <prvAddNewTaskToReadyList+0xdc>)
 800c314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c318:	601a      	str	r2, [r3, #0]
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20001634 	.word	0x20001634
 800c330:	20001160 	.word	0x20001160
 800c334:	20001640 	.word	0x20001640
 800c338:	20001650 	.word	0x20001650
 800c33c:	2000163c 	.word	0x2000163c
 800c340:	20001164 	.word	0x20001164
 800c344:	e000ed04 	.word	0xe000ed04

0800c348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c350:	2300      	movs	r3, #0
 800c352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d017      	beq.n	800c38a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c35a:	4b13      	ldr	r3, [pc, #76]	; (800c3a8 <vTaskDelay+0x60>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00a      	beq.n	800c378 <vTaskDelay+0x30>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	60bb      	str	r3, [r7, #8]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c378:	f000 f880 	bl	800c47c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c37c:	2100      	movs	r1, #0
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fcea 	bl	800cd58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c384:	f000 f888 	bl	800c498 <xTaskResumeAll>
 800c388:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d107      	bne.n	800c3a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c390:	4b06      	ldr	r3, [pc, #24]	; (800c3ac <vTaskDelay+0x64>)
 800c392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c396:	601a      	str	r2, [r3, #0]
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3a0:	bf00      	nop
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	2000165c 	.word	0x2000165c
 800c3ac:	e000ed04 	.word	0xe000ed04

0800c3b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08a      	sub	sp, #40	; 0x28
 800c3b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3be:	463a      	mov	r2, r7
 800c3c0:	1d39      	adds	r1, r7, #4
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff f848 	bl	800b45c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	9202      	str	r2, [sp, #8]
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	2300      	movs	r3, #0
 800c3dc:	460a      	mov	r2, r1
 800c3de:	4921      	ldr	r1, [pc, #132]	; (800c464 <vTaskStartScheduler+0xb4>)
 800c3e0:	4821      	ldr	r0, [pc, #132]	; (800c468 <vTaskStartScheduler+0xb8>)
 800c3e2:	f7ff fe0f 	bl	800c004 <xTaskCreateStatic>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	4a20      	ldr	r2, [pc, #128]	; (800c46c <vTaskStartScheduler+0xbc>)
 800c3ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3ec:	4b1f      	ldr	r3, [pc, #124]	; (800c46c <vTaskStartScheduler+0xbc>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	e001      	b.n	800c3fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d102      	bne.n	800c40a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c404:	f000 fcfc 	bl	800ce00 <xTimerCreateTimerTask>
 800c408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d116      	bne.n	800c43e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	613b      	str	r3, [r7, #16]
}
 800c422:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c424:	4b12      	ldr	r3, [pc, #72]	; (800c470 <vTaskStartScheduler+0xc0>)
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c42c:	4b11      	ldr	r3, [pc, #68]	; (800c474 <vTaskStartScheduler+0xc4>)
 800c42e:	2201      	movs	r2, #1
 800c430:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c432:	4b11      	ldr	r3, [pc, #68]	; (800c478 <vTaskStartScheduler+0xc8>)
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c438:	f001 f8ba 	bl	800d5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c43c:	e00e      	b.n	800c45c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c444:	d10a      	bne.n	800c45c <vTaskStartScheduler+0xac>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60fb      	str	r3, [r7, #12]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <vTaskStartScheduler+0xaa>
}
 800c45c:	bf00      	nop
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	08011920 	.word	0x08011920
 800c468:	0800ca95 	.word	0x0800ca95
 800c46c:	20001658 	.word	0x20001658
 800c470:	20001654 	.word	0x20001654
 800c474:	20001640 	.word	0x20001640
 800c478:	20001638 	.word	0x20001638

0800c47c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c480:	4b04      	ldr	r3, [pc, #16]	; (800c494 <vTaskSuspendAll+0x18>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3301      	adds	r3, #1
 800c486:	4a03      	ldr	r2, [pc, #12]	; (800c494 <vTaskSuspendAll+0x18>)
 800c488:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c48a:	bf00      	nop
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	2000165c 	.word	0x2000165c

0800c498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4a6:	4b42      	ldr	r3, [pc, #264]	; (800c5b0 <xTaskResumeAll+0x118>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	603b      	str	r3, [r7, #0]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4c4:	f001 f916 	bl	800d6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4c8:	4b39      	ldr	r3, [pc, #228]	; (800c5b0 <xTaskResumeAll+0x118>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	4a38      	ldr	r2, [pc, #224]	; (800c5b0 <xTaskResumeAll+0x118>)
 800c4d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4d2:	4b37      	ldr	r3, [pc, #220]	; (800c5b0 <xTaskResumeAll+0x118>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d162      	bne.n	800c5a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4da:	4b36      	ldr	r3, [pc, #216]	; (800c5b4 <xTaskResumeAll+0x11c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d05e      	beq.n	800c5a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4e2:	e02f      	b.n	800c544 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e4:	4b34      	ldr	r3, [pc, #208]	; (800c5b8 <xTaskResumeAll+0x120>)
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	3318      	adds	r3, #24
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff f871 	bl	800b5d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7ff f86c 	bl	800b5d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c504:	4b2d      	ldr	r3, [pc, #180]	; (800c5bc <xTaskResumeAll+0x124>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d903      	bls.n	800c514 <xTaskResumeAll+0x7c>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c510:	4a2a      	ldr	r2, [pc, #168]	; (800c5bc <xTaskResumeAll+0x124>)
 800c512:	6013      	str	r3, [r2, #0]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c518:	4613      	mov	r3, r2
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4a27      	ldr	r2, [pc, #156]	; (800c5c0 <xTaskResumeAll+0x128>)
 800c522:	441a      	add	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3304      	adds	r3, #4
 800c528:	4619      	mov	r1, r3
 800c52a:	4610      	mov	r0, r2
 800c52c:	f7fe fff7 	bl	800b51e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c534:	4b23      	ldr	r3, [pc, #140]	; (800c5c4 <xTaskResumeAll+0x12c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d302      	bcc.n	800c544 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c53e:	4b22      	ldr	r3, [pc, #136]	; (800c5c8 <xTaskResumeAll+0x130>)
 800c540:	2201      	movs	r2, #1
 800c542:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c544:	4b1c      	ldr	r3, [pc, #112]	; (800c5b8 <xTaskResumeAll+0x120>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1cb      	bne.n	800c4e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c552:	f000 fb55 	bl	800cc00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c556:	4b1d      	ldr	r3, [pc, #116]	; (800c5cc <xTaskResumeAll+0x134>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d010      	beq.n	800c584 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c562:	f000 f847 	bl	800c5f4 <xTaskIncrementTick>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c56c:	4b16      	ldr	r3, [pc, #88]	; (800c5c8 <xTaskResumeAll+0x130>)
 800c56e:	2201      	movs	r2, #1
 800c570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	3b01      	subs	r3, #1
 800c576:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1f1      	bne.n	800c562 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c57e:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <xTaskResumeAll+0x134>)
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c584:	4b10      	ldr	r3, [pc, #64]	; (800c5c8 <xTaskResumeAll+0x130>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d009      	beq.n	800c5a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c58c:	2301      	movs	r3, #1
 800c58e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <xTaskResumeAll+0x138>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5a0:	f001 f8d8 	bl	800d754 <vPortExitCritical>

	return xAlreadyYielded;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	2000165c 	.word	0x2000165c
 800c5b4:	20001634 	.word	0x20001634
 800c5b8:	200015f4 	.word	0x200015f4
 800c5bc:	2000163c 	.word	0x2000163c
 800c5c0:	20001164 	.word	0x20001164
 800c5c4:	20001160 	.word	0x20001160
 800c5c8:	20001648 	.word	0x20001648
 800c5cc:	20001644 	.word	0x20001644
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5da:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <xTaskGetTickCount+0x1c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5e0:	687b      	ldr	r3, [r7, #4]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20001638 	.word	0x20001638

0800c5f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5fe:	4b4f      	ldr	r3, [pc, #316]	; (800c73c <xTaskIncrementTick+0x148>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	f040 808f 	bne.w	800c726 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c608:	4b4d      	ldr	r3, [pc, #308]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3301      	adds	r3, #1
 800c60e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c610:	4a4b      	ldr	r2, [pc, #300]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d120      	bne.n	800c65e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c61c:	4b49      	ldr	r3, [pc, #292]	; (800c744 <xTaskIncrementTick+0x150>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00a      	beq.n	800c63c <xTaskIncrementTick+0x48>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	603b      	str	r3, [r7, #0]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <xTaskIncrementTick+0x46>
 800c63c:	4b41      	ldr	r3, [pc, #260]	; (800c744 <xTaskIncrementTick+0x150>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	60fb      	str	r3, [r7, #12]
 800c642:	4b41      	ldr	r3, [pc, #260]	; (800c748 <xTaskIncrementTick+0x154>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a3f      	ldr	r2, [pc, #252]	; (800c744 <xTaskIncrementTick+0x150>)
 800c648:	6013      	str	r3, [r2, #0]
 800c64a:	4a3f      	ldr	r2, [pc, #252]	; (800c748 <xTaskIncrementTick+0x154>)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6013      	str	r3, [r2, #0]
 800c650:	4b3e      	ldr	r3, [pc, #248]	; (800c74c <xTaskIncrementTick+0x158>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	4a3d      	ldr	r2, [pc, #244]	; (800c74c <xTaskIncrementTick+0x158>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	f000 fad1 	bl	800cc00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c65e:	4b3c      	ldr	r3, [pc, #240]	; (800c750 <xTaskIncrementTick+0x15c>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	429a      	cmp	r2, r3
 800c666:	d349      	bcc.n	800c6fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c668:	4b36      	ldr	r3, [pc, #216]	; (800c744 <xTaskIncrementTick+0x150>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d104      	bne.n	800c67c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c672:	4b37      	ldr	r3, [pc, #220]	; (800c750 <xTaskIncrementTick+0x15c>)
 800c674:	f04f 32ff 	mov.w	r2, #4294967295
 800c678:	601a      	str	r2, [r3, #0]
					break;
 800c67a:	e03f      	b.n	800c6fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c67c:	4b31      	ldr	r3, [pc, #196]	; (800c744 <xTaskIncrementTick+0x150>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d203      	bcs.n	800c69c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c694:	4a2e      	ldr	r2, [pc, #184]	; (800c750 <xTaskIncrementTick+0x15c>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c69a:	e02f      	b.n	800c6fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe ff99 	bl	800b5d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	3318      	adds	r3, #24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe ff90 	bl	800b5d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6bc:	4b25      	ldr	r3, [pc, #148]	; (800c754 <xTaskIncrementTick+0x160>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d903      	bls.n	800c6cc <xTaskIncrementTick+0xd8>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	4a22      	ldr	r2, [pc, #136]	; (800c754 <xTaskIncrementTick+0x160>)
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4a1f      	ldr	r2, [pc, #124]	; (800c758 <xTaskIncrementTick+0x164>)
 800c6da:	441a      	add	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	3304      	adds	r3, #4
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	f7fe ff1b 	bl	800b51e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ec:	4b1b      	ldr	r3, [pc, #108]	; (800c75c <xTaskIncrementTick+0x168>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d3b8      	bcc.n	800c668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6fa:	e7b5      	b.n	800c668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6fc:	4b17      	ldr	r3, [pc, #92]	; (800c75c <xTaskIncrementTick+0x168>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c702:	4915      	ldr	r1, [pc, #84]	; (800c758 <xTaskIncrementTick+0x164>)
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	440b      	add	r3, r1
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d901      	bls.n	800c718 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c714:	2301      	movs	r3, #1
 800c716:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c718:	4b11      	ldr	r3, [pc, #68]	; (800c760 <xTaskIncrementTick+0x16c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c720:	2301      	movs	r3, #1
 800c722:	617b      	str	r3, [r7, #20]
 800c724:	e004      	b.n	800c730 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c726:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <xTaskIncrementTick+0x170>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3301      	adds	r3, #1
 800c72c:	4a0d      	ldr	r2, [pc, #52]	; (800c764 <xTaskIncrementTick+0x170>)
 800c72e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c730:	697b      	ldr	r3, [r7, #20]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	2000165c 	.word	0x2000165c
 800c740:	20001638 	.word	0x20001638
 800c744:	200015ec 	.word	0x200015ec
 800c748:	200015f0 	.word	0x200015f0
 800c74c:	2000164c 	.word	0x2000164c
 800c750:	20001654 	.word	0x20001654
 800c754:	2000163c 	.word	0x2000163c
 800c758:	20001164 	.word	0x20001164
 800c75c:	20001160 	.word	0x20001160
 800c760:	20001648 	.word	0x20001648
 800c764:	20001644 	.word	0x20001644

0800c768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c76e:	4b28      	ldr	r3, [pc, #160]	; (800c810 <vTaskSwitchContext+0xa8>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c776:	4b27      	ldr	r3, [pc, #156]	; (800c814 <vTaskSwitchContext+0xac>)
 800c778:	2201      	movs	r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c77c:	e041      	b.n	800c802 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c77e:	4b25      	ldr	r3, [pc, #148]	; (800c814 <vTaskSwitchContext+0xac>)
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c784:	4b24      	ldr	r3, [pc, #144]	; (800c818 <vTaskSwitchContext+0xb0>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e010      	b.n	800c7ae <vTaskSwitchContext+0x46>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10a      	bne.n	800c7a8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	607b      	str	r3, [r7, #4]
}
 800c7a4:	bf00      	nop
 800c7a6:	e7fe      	b.n	800c7a6 <vTaskSwitchContext+0x3e>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	491b      	ldr	r1, [pc, #108]	; (800c81c <vTaskSwitchContext+0xb4>)
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	440b      	add	r3, r1
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d0e4      	beq.n	800c78c <vTaskSwitchContext+0x24>
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4a13      	ldr	r2, [pc, #76]	; (800c81c <vTaskSwitchContext+0xb4>)
 800c7ce:	4413      	add	r3, r2
 800c7d0:	60bb      	str	r3, [r7, #8]
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	605a      	str	r2, [r3, #4]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d104      	bne.n	800c7f2 <vTaskSwitchContext+0x8a>
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	685a      	ldr	r2, [r3, #4]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	605a      	str	r2, [r3, #4]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	4a09      	ldr	r2, [pc, #36]	; (800c820 <vTaskSwitchContext+0xb8>)
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	4a06      	ldr	r2, [pc, #24]	; (800c818 <vTaskSwitchContext+0xb0>)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6013      	str	r3, [r2, #0]
}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	2000165c 	.word	0x2000165c
 800c814:	20001648 	.word	0x20001648
 800c818:	2000163c 	.word	0x2000163c
 800c81c:	20001164 	.word	0x20001164
 800c820:	20001160 	.word	0x20001160

0800c824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10a      	bne.n	800c84a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	60fb      	str	r3, [r7, #12]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c84a:	4b07      	ldr	r3, [pc, #28]	; (800c868 <vTaskPlaceOnEventList+0x44>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3318      	adds	r3, #24
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fe fe87 	bl	800b566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c858:	2101      	movs	r1, #1
 800c85a:	6838      	ldr	r0, [r7, #0]
 800c85c:	f000 fa7c 	bl	800cd58 <prvAddCurrentTaskToDelayedList>
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20001160 	.word	0x20001160

0800c86c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10a      	bne.n	800c894 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	617b      	str	r3, [r7, #20]
}
 800c890:	bf00      	nop
 800c892:	e7fe      	b.n	800c892 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c894:	4b0a      	ldr	r3, [pc, #40]	; (800c8c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3318      	adds	r3, #24
 800c89a:	4619      	mov	r1, r3
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f7fe fe3e 	bl	800b51e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	68b8      	ldr	r0, [r7, #8]
 800c8b2:	f000 fa51 	bl	800cd58 <prvAddCurrentTaskToDelayedList>
	}
 800c8b6:	bf00      	nop
 800c8b8:	3718      	adds	r7, #24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20001160 	.word	0x20001160

0800c8c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10a      	bne.n	800c8f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	60fb      	str	r3, [r7, #12]
}
 800c8ec:	bf00      	nop
 800c8ee:	e7fe      	b.n	800c8ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	3318      	adds	r3, #24
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe fe6f 	bl	800b5d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8fa:	4b1e      	ldr	r3, [pc, #120]	; (800c974 <xTaskRemoveFromEventList+0xb0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d11d      	bne.n	800c93e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	3304      	adds	r3, #4
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe fe66 	bl	800b5d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c910:	4b19      	ldr	r3, [pc, #100]	; (800c978 <xTaskRemoveFromEventList+0xb4>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d903      	bls.n	800c920 <xTaskRemoveFromEventList+0x5c>
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	4a16      	ldr	r2, [pc, #88]	; (800c978 <xTaskRemoveFromEventList+0xb4>)
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c924:	4613      	mov	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4a13      	ldr	r2, [pc, #76]	; (800c97c <xTaskRemoveFromEventList+0xb8>)
 800c92e:	441a      	add	r2, r3
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	3304      	adds	r3, #4
 800c934:	4619      	mov	r1, r3
 800c936:	4610      	mov	r0, r2
 800c938:	f7fe fdf1 	bl	800b51e <vListInsertEnd>
 800c93c:	e005      	b.n	800c94a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	3318      	adds	r3, #24
 800c942:	4619      	mov	r1, r3
 800c944:	480e      	ldr	r0, [pc, #56]	; (800c980 <xTaskRemoveFromEventList+0xbc>)
 800c946:	f7fe fdea 	bl	800b51e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94e:	4b0d      	ldr	r3, [pc, #52]	; (800c984 <xTaskRemoveFromEventList+0xc0>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c954:	429a      	cmp	r2, r3
 800c956:	d905      	bls.n	800c964 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c958:	2301      	movs	r3, #1
 800c95a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <xTaskRemoveFromEventList+0xc4>)
 800c95e:	2201      	movs	r2, #1
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	e001      	b.n	800c968 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c964:	2300      	movs	r3, #0
 800c966:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c968:	697b      	ldr	r3, [r7, #20]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3718      	adds	r7, #24
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	2000165c 	.word	0x2000165c
 800c978:	2000163c 	.word	0x2000163c
 800c97c:	20001164 	.word	0x20001164
 800c980:	200015f4 	.word	0x200015f4
 800c984:	20001160 	.word	0x20001160
 800c988:	20001648 	.word	0x20001648

0800c98c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c994:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <vTaskInternalSetTimeOutState+0x24>)
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <vTaskInternalSetTimeOutState+0x28>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	605a      	str	r2, [r3, #4]
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	2000164c 	.word	0x2000164c
 800c9b4:	20001638 	.word	0x20001638

0800c9b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10a      	bne.n	800c9de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	613b      	str	r3, [r7, #16]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	60fb      	str	r3, [r7, #12]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c9fa:	f000 fe7b 	bl	800d6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c9fe:	4b1d      	ldr	r3, [pc, #116]	; (800ca74 <xTaskCheckForTimeOut+0xbc>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	69ba      	ldr	r2, [r7, #24]
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca16:	d102      	bne.n	800ca1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61fb      	str	r3, [r7, #28]
 800ca1c:	e023      	b.n	800ca66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	4b15      	ldr	r3, [pc, #84]	; (800ca78 <xTaskCheckForTimeOut+0xc0>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d007      	beq.n	800ca3a <xTaskCheckForTimeOut+0x82>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	69ba      	ldr	r2, [r7, #24]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d302      	bcc.n	800ca3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca34:	2301      	movs	r3, #1
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	e015      	b.n	800ca66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d20b      	bcs.n	800ca5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	1ad2      	subs	r2, r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff ff9b 	bl	800c98c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca56:	2300      	movs	r3, #0
 800ca58:	61fb      	str	r3, [r7, #28]
 800ca5a:	e004      	b.n	800ca66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca62:	2301      	movs	r3, #1
 800ca64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca66:	f000 fe75 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800ca6a:	69fb      	ldr	r3, [r7, #28]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20001638 	.word	0x20001638
 800ca78:	2000164c 	.word	0x2000164c

0800ca7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca80:	4b03      	ldr	r3, [pc, #12]	; (800ca90 <vTaskMissedYield+0x14>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	601a      	str	r2, [r3, #0]
}
 800ca86:	bf00      	nop
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	20001648 	.word	0x20001648

0800ca94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca9c:	f000 f852 	bl	800cb44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caa0:	4b06      	ldr	r3, [pc, #24]	; (800cabc <prvIdleTask+0x28>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d9f9      	bls.n	800ca9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <prvIdleTask+0x2c>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cab8:	e7f0      	b.n	800ca9c <prvIdleTask+0x8>
 800caba:	bf00      	nop
 800cabc:	20001164 	.word	0x20001164
 800cac0:	e000ed04 	.word	0xe000ed04

0800cac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800caca:	2300      	movs	r3, #0
 800cacc:	607b      	str	r3, [r7, #4]
 800cace:	e00c      	b.n	800caea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	4613      	mov	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4a12      	ldr	r2, [pc, #72]	; (800cb24 <prvInitialiseTaskLists+0x60>)
 800cadc:	4413      	add	r3, r2
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe fcf0 	bl	800b4c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3301      	adds	r3, #1
 800cae8:	607b      	str	r3, [r7, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b37      	cmp	r3, #55	; 0x37
 800caee:	d9ef      	bls.n	800cad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800caf0:	480d      	ldr	r0, [pc, #52]	; (800cb28 <prvInitialiseTaskLists+0x64>)
 800caf2:	f7fe fce7 	bl	800b4c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800caf6:	480d      	ldr	r0, [pc, #52]	; (800cb2c <prvInitialiseTaskLists+0x68>)
 800caf8:	f7fe fce4 	bl	800b4c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cafc:	480c      	ldr	r0, [pc, #48]	; (800cb30 <prvInitialiseTaskLists+0x6c>)
 800cafe:	f7fe fce1 	bl	800b4c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb02:	480c      	ldr	r0, [pc, #48]	; (800cb34 <prvInitialiseTaskLists+0x70>)
 800cb04:	f7fe fcde 	bl	800b4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb08:	480b      	ldr	r0, [pc, #44]	; (800cb38 <prvInitialiseTaskLists+0x74>)
 800cb0a:	f7fe fcdb 	bl	800b4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb0e:	4b0b      	ldr	r3, [pc, #44]	; (800cb3c <prvInitialiseTaskLists+0x78>)
 800cb10:	4a05      	ldr	r2, [pc, #20]	; (800cb28 <prvInitialiseTaskLists+0x64>)
 800cb12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb14:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <prvInitialiseTaskLists+0x7c>)
 800cb16:	4a05      	ldr	r2, [pc, #20]	; (800cb2c <prvInitialiseTaskLists+0x68>)
 800cb18:	601a      	str	r2, [r3, #0]
}
 800cb1a:	bf00      	nop
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20001164 	.word	0x20001164
 800cb28:	200015c4 	.word	0x200015c4
 800cb2c:	200015d8 	.word	0x200015d8
 800cb30:	200015f4 	.word	0x200015f4
 800cb34:	20001608 	.word	0x20001608
 800cb38:	20001620 	.word	0x20001620
 800cb3c:	200015ec 	.word	0x200015ec
 800cb40:	200015f0 	.word	0x200015f0

0800cb44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb4a:	e019      	b.n	800cb80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb4c:	f000 fdd2 	bl	800d6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb50:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <prvCheckTasksWaitingTermination+0x50>)
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe fd3b 	bl	800b5d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb62:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <prvCheckTasksWaitingTermination+0x54>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	4a0b      	ldr	r2, [pc, #44]	; (800cb98 <prvCheckTasksWaitingTermination+0x54>)
 800cb6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb6c:	4b0b      	ldr	r3, [pc, #44]	; (800cb9c <prvCheckTasksWaitingTermination+0x58>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	4a0a      	ldr	r2, [pc, #40]	; (800cb9c <prvCheckTasksWaitingTermination+0x58>)
 800cb74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb76:	f000 fded 	bl	800d754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f810 	bl	800cba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb80:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <prvCheckTasksWaitingTermination+0x58>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e1      	bne.n	800cb4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20001608 	.word	0x20001608
 800cb98:	20001634 	.word	0x20001634
 800cb9c:	2000161c 	.word	0x2000161c

0800cba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d108      	bne.n	800cbc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 ff8a 	bl	800dad0 <vPortFree>
				vPortFree( pxTCB );
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 ff87 	bl	800dad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cbc2:	e018      	b.n	800cbf6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d103      	bne.n	800cbd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 ff7e 	bl	800dad0 <vPortFree>
	}
 800cbd4:	e00f      	b.n	800cbf6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d00a      	beq.n	800cbf6 <prvDeleteTCB+0x56>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <prvDeleteTCB+0x54>
	}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc06:	4b0c      	ldr	r3, [pc, #48]	; (800cc38 <prvResetNextTaskUnblockTime+0x38>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d104      	bne.n	800cc1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <prvResetNextTaskUnblockTime+0x3c>)
 800cc12:	f04f 32ff 	mov.w	r2, #4294967295
 800cc16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc18:	e008      	b.n	800cc2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1a:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <prvResetNextTaskUnblockTime+0x38>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4a04      	ldr	r2, [pc, #16]	; (800cc3c <prvResetNextTaskUnblockTime+0x3c>)
 800cc2a:	6013      	str	r3, [r2, #0]
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	200015ec 	.word	0x200015ec
 800cc3c:	20001654 	.word	0x20001654

0800cc40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <xTaskGetSchedulerState+0x34>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	607b      	str	r3, [r7, #4]
 800cc52:	e008      	b.n	800cc66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc54:	4b08      	ldr	r3, [pc, #32]	; (800cc78 <xTaskGetSchedulerState+0x38>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	607b      	str	r3, [r7, #4]
 800cc60:	e001      	b.n	800cc66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cc62:	2300      	movs	r3, #0
 800cc64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc66:	687b      	ldr	r3, [r7, #4]
	}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	20001640 	.word	0x20001640
 800cc78:	2000165c 	.word	0x2000165c

0800cc7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d056      	beq.n	800cd40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc92:	4b2e      	ldr	r3, [pc, #184]	; (800cd4c <xTaskPriorityDisinherit+0xd0>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d00a      	beq.n	800ccb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60fb      	str	r3, [r7, #12]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10a      	bne.n	800ccd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	60bb      	str	r3, [r7, #8]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccd4:	1e5a      	subs	r2, r3, #1
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d02c      	beq.n	800cd40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d128      	bne.n	800cd40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe fc70 	bl	800b5d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd10:	4b0f      	ldr	r3, [pc, #60]	; (800cd50 <xTaskPriorityDisinherit+0xd4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d903      	bls.n	800cd20 <xTaskPriorityDisinherit+0xa4>
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	4a0c      	ldr	r2, [pc, #48]	; (800cd50 <xTaskPriorityDisinherit+0xd4>)
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd24:	4613      	mov	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <xTaskPriorityDisinherit+0xd8>)
 800cd2e:	441a      	add	r2, r3
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	3304      	adds	r3, #4
 800cd34:	4619      	mov	r1, r3
 800cd36:	4610      	mov	r0, r2
 800cd38:	f7fe fbf1 	bl	800b51e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd40:	697b      	ldr	r3, [r7, #20]
	}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20001160 	.word	0x20001160
 800cd50:	2000163c 	.word	0x2000163c
 800cd54:	20001164 	.word	0x20001164

0800cd58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd62:	4b21      	ldr	r3, [pc, #132]	; (800cde8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd68:	4b20      	ldr	r3, [pc, #128]	; (800cdec <prvAddCurrentTaskToDelayedList+0x94>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fc32 	bl	800b5d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7a:	d10a      	bne.n	800cd92 <prvAddCurrentTaskToDelayedList+0x3a>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d007      	beq.n	800cd92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd82:	4b1a      	ldr	r3, [pc, #104]	; (800cdec <prvAddCurrentTaskToDelayedList+0x94>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4819      	ldr	r0, [pc, #100]	; (800cdf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd8c:	f7fe fbc7 	bl	800b51e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd90:	e026      	b.n	800cde0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd9a:	4b14      	ldr	r3, [pc, #80]	; (800cdec <prvAddCurrentTaskToDelayedList+0x94>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d209      	bcs.n	800cdbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <prvAddCurrentTaskToDelayedList+0x94>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7fe fbd5 	bl	800b566 <vListInsert>
}
 800cdbc:	e010      	b.n	800cde0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdbe:	4b0e      	ldr	r3, [pc, #56]	; (800cdf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <prvAddCurrentTaskToDelayedList+0x94>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4610      	mov	r0, r2
 800cdcc:	f7fe fbcb 	bl	800b566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d202      	bcs.n	800cde0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cdda:	4a08      	ldr	r2, [pc, #32]	; (800cdfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	6013      	str	r3, [r2, #0]
}
 800cde0:	bf00      	nop
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20001638 	.word	0x20001638
 800cdec:	20001160 	.word	0x20001160
 800cdf0:	20001620 	.word	0x20001620
 800cdf4:	200015f0 	.word	0x200015f0
 800cdf8:	200015ec 	.word	0x200015ec
 800cdfc:	20001654 	.word	0x20001654

0800ce00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08a      	sub	sp, #40	; 0x28
 800ce04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce0a:	f000 fb07 	bl	800d41c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce0e:	4b1c      	ldr	r3, [pc, #112]	; (800ce80 <xTimerCreateTimerTask+0x80>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d021      	beq.n	800ce5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce1e:	1d3a      	adds	r2, r7, #4
 800ce20:	f107 0108 	add.w	r1, r7, #8
 800ce24:	f107 030c 	add.w	r3, r7, #12
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fe fb31 	bl	800b490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce2e:	6879      	ldr	r1, [r7, #4]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	9202      	str	r2, [sp, #8]
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	2302      	movs	r3, #2
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	460a      	mov	r2, r1
 800ce40:	4910      	ldr	r1, [pc, #64]	; (800ce84 <xTimerCreateTimerTask+0x84>)
 800ce42:	4811      	ldr	r0, [pc, #68]	; (800ce88 <xTimerCreateTimerTask+0x88>)
 800ce44:	f7ff f8de 	bl	800c004 <xTaskCreateStatic>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	4a10      	ldr	r2, [pc, #64]	; (800ce8c <xTimerCreateTimerTask+0x8c>)
 800ce4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce4e:	4b0f      	ldr	r3, [pc, #60]	; (800ce8c <xTimerCreateTimerTask+0x8c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce56:	2301      	movs	r3, #1
 800ce58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	613b      	str	r3, [r7, #16]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce76:	697b      	ldr	r3, [r7, #20]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20001690 	.word	0x20001690
 800ce84:	08011928 	.word	0x08011928
 800ce88:	0800cfc5 	.word	0x0800cfc5
 800ce8c:	20001694 	.word	0x20001694

0800ce90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	; 0x28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <xTimerGenericCommand+0x2e>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	623b      	str	r3, [r7, #32]
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cebe:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <xTimerGenericCommand+0x98>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d02a      	beq.n	800cf1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	2b05      	cmp	r3, #5
 800ced6:	dc18      	bgt.n	800cf0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ced8:	f7ff feb2 	bl	800cc40 <xTaskGetSchedulerState>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d109      	bne.n	800cef6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cee2:	4b11      	ldr	r3, [pc, #68]	; (800cf28 <xTimerGenericCommand+0x98>)
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	f107 0110 	add.w	r1, r7, #16
 800ceea:	2300      	movs	r3, #0
 800ceec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceee:	f7fe fca1 	bl	800b834 <xQueueGenericSend>
 800cef2:	6278      	str	r0, [r7, #36]	; 0x24
 800cef4:	e012      	b.n	800cf1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cef6:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <xTimerGenericCommand+0x98>)
 800cef8:	6818      	ldr	r0, [r3, #0]
 800cefa:	f107 0110 	add.w	r1, r7, #16
 800cefe:	2300      	movs	r3, #0
 800cf00:	2200      	movs	r2, #0
 800cf02:	f7fe fc97 	bl	800b834 <xQueueGenericSend>
 800cf06:	6278      	str	r0, [r7, #36]	; 0x24
 800cf08:	e008      	b.n	800cf1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <xTimerGenericCommand+0x98>)
 800cf0c:	6818      	ldr	r0, [r3, #0]
 800cf0e:	f107 0110 	add.w	r1, r7, #16
 800cf12:	2300      	movs	r3, #0
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	f7fe fd8b 	bl	800ba30 <xQueueGenericSendFromISR>
 800cf1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3728      	adds	r7, #40	; 0x28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	20001690 	.word	0x20001690

0800cf2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf36:	4b22      	ldr	r3, [pc, #136]	; (800cfc0 <prvProcessExpiredTimer+0x94>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	3304      	adds	r3, #4
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fe fb47 	bl	800b5d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d022      	beq.n	800cf9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	18d1      	adds	r1, r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	6978      	ldr	r0, [r7, #20]
 800cf66:	f000 f8d1 	bl	800d10c <prvInsertTimerInActiveList>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d01f      	beq.n	800cfb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf70:	2300      	movs	r3, #0
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	2300      	movs	r3, #0
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	2100      	movs	r1, #0
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	f7ff ff88 	bl	800ce90 <xTimerGenericCommand>
 800cf80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d113      	bne.n	800cfb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	60fb      	str	r3, [r7, #12]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa4:	f023 0301 	bic.w	r3, r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	6978      	ldr	r0, [r7, #20]
 800cfb6:	4798      	blx	r3
}
 800cfb8:	bf00      	nop
 800cfba:	3718      	adds	r7, #24
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20001688 	.word	0x20001688

0800cfc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfcc:	f107 0308 	add.w	r3, r7, #8
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 f857 	bl	800d084 <prvGetNextExpireTime>
 800cfd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f000 f803 	bl	800cfe8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfe2:	f000 f8d5 	bl	800d190 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfe6:	e7f1      	b.n	800cfcc <prvTimerTask+0x8>

0800cfe8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cff2:	f7ff fa43 	bl	800c47c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cff6:	f107 0308 	add.w	r3, r7, #8
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 f866 	bl	800d0cc <prvSampleTimeNow>
 800d000:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d130      	bne.n	800d06a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <prvProcessTimerOrBlockTask+0x3c>
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	429a      	cmp	r2, r3
 800d014:	d806      	bhi.n	800d024 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d016:	f7ff fa3f 	bl	800c498 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d01a:	68f9      	ldr	r1, [r7, #12]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7ff ff85 	bl	800cf2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d022:	e024      	b.n	800d06e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d008      	beq.n	800d03c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d02a:	4b13      	ldr	r3, [pc, #76]	; (800d078 <prvProcessTimerOrBlockTask+0x90>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <prvProcessTimerOrBlockTask+0x50>
 800d034:	2301      	movs	r3, #1
 800d036:	e000      	b.n	800d03a <prvProcessTimerOrBlockTask+0x52>
 800d038:	2300      	movs	r3, #0
 800d03a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d03c:	4b0f      	ldr	r3, [pc, #60]	; (800d07c <prvProcessTimerOrBlockTask+0x94>)
 800d03e:	6818      	ldr	r0, [r3, #0]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	4619      	mov	r1, r3
 800d04a:	f7fe ffa7 	bl	800bf9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d04e:	f7ff fa23 	bl	800c498 <xTaskResumeAll>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10a      	bne.n	800d06e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d058:	4b09      	ldr	r3, [pc, #36]	; (800d080 <prvProcessTimerOrBlockTask+0x98>)
 800d05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	f3bf 8f6f 	isb	sy
}
 800d068:	e001      	b.n	800d06e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d06a:	f7ff fa15 	bl	800c498 <xTaskResumeAll>
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2000168c 	.word	0x2000168c
 800d07c:	20001690 	.word	0x20001690
 800d080:	e000ed04 	.word	0xe000ed04

0800d084 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d08c:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <prvGetNextExpireTime+0x44>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d101      	bne.n	800d09a <prvGetNextExpireTime+0x16>
 800d096:	2201      	movs	r2, #1
 800d098:	e000      	b.n	800d09c <prvGetNextExpireTime+0x18>
 800d09a:	2200      	movs	r2, #0
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d105      	bne.n	800d0b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0a8:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <prvGetNextExpireTime+0x44>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e001      	b.n	800d0b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	20001688 	.word	0x20001688

0800d0cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0d4:	f7ff fa7e 	bl	800c5d4 <xTaskGetTickCount>
 800d0d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0da:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <prvSampleTimeNow+0x3c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d205      	bcs.n	800d0f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0e4:	f000 f936 	bl	800d354 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	e002      	b.n	800d0f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0f6:	4a04      	ldr	r2, [pc, #16]	; (800d108 <prvSampleTimeNow+0x3c>)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20001698 	.word	0x20001698

0800d10c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d11a:	2300      	movs	r3, #0
 800d11c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d812      	bhi.n	800d158 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	1ad2      	subs	r2, r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d302      	bcc.n	800d146 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d140:	2301      	movs	r3, #1
 800d142:	617b      	str	r3, [r7, #20]
 800d144:	e01b      	b.n	800d17e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d146:	4b10      	ldr	r3, [pc, #64]	; (800d188 <prvInsertTimerInActiveList+0x7c>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4619      	mov	r1, r3
 800d150:	4610      	mov	r0, r2
 800d152:	f7fe fa08 	bl	800b566 <vListInsert>
 800d156:	e012      	b.n	800d17e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d206      	bcs.n	800d16e <prvInsertTimerInActiveList+0x62>
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d302      	bcc.n	800d16e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d168:	2301      	movs	r3, #1
 800d16a:	617b      	str	r3, [r7, #20]
 800d16c:	e007      	b.n	800d17e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d16e:	4b07      	ldr	r3, [pc, #28]	; (800d18c <prvInsertTimerInActiveList+0x80>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	3304      	adds	r3, #4
 800d176:	4619      	mov	r1, r3
 800d178:	4610      	mov	r0, r2
 800d17a:	f7fe f9f4 	bl	800b566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d17e:	697b      	ldr	r3, [r7, #20]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	2000168c 	.word	0x2000168c
 800d18c:	20001688 	.word	0x20001688

0800d190 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08e      	sub	sp, #56	; 0x38
 800d194:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d196:	e0ca      	b.n	800d32e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	da18      	bge.n	800d1d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d19e:	1d3b      	adds	r3, r7, #4
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	61fb      	str	r3, [r7, #28]
}
 800d1bc:	bf00      	nop
 800d1be:	e7fe      	b.n	800d1be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c6:	6850      	ldr	r0, [r2, #4]
 800d1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ca:	6892      	ldr	r2, [r2, #8]
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f2c0 80ab 	blt.w	800d32e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d004      	beq.n	800d1ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe f9f5 	bl	800b5d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff ff6b 	bl	800d0cc <prvSampleTimeNow>
 800d1f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b09      	cmp	r3, #9
 800d1fc:	f200 8096 	bhi.w	800d32c <prvProcessReceivedCommands+0x19c>
 800d200:	a201      	add	r2, pc, #4	; (adr r2, 800d208 <prvProcessReceivedCommands+0x78>)
 800d202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d206:	bf00      	nop
 800d208:	0800d231 	.word	0x0800d231
 800d20c:	0800d231 	.word	0x0800d231
 800d210:	0800d231 	.word	0x0800d231
 800d214:	0800d2a5 	.word	0x0800d2a5
 800d218:	0800d2b9 	.word	0x0800d2b9
 800d21c:	0800d303 	.word	0x0800d303
 800d220:	0800d231 	.word	0x0800d231
 800d224:	0800d231 	.word	0x0800d231
 800d228:	0800d2a5 	.word	0x0800d2a5
 800d22c:	0800d2b9 	.word	0x0800d2b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	18d1      	adds	r1, r2, r3
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d250:	f7ff ff5c 	bl	800d10c <prvInsertTimerInActiveList>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d069      	beq.n	800d32e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d260:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d268:	f003 0304 	and.w	r3, r3, #4
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d05e      	beq.n	800d32e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	441a      	add	r2, r3
 800d278:	2300      	movs	r3, #0
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	2300      	movs	r3, #0
 800d27e:	2100      	movs	r1, #0
 800d280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d282:	f7ff fe05 	bl	800ce90 <xTimerGenericCommand>
 800d286:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d14f      	bne.n	800d32e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	61bb      	str	r3, [r7, #24]
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2aa:	f023 0301 	bic.w	r3, r3, #1
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d2b6:	e03a      	b.n	800d32e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	617b      	str	r3, [r7, #20]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f0:	699a      	ldr	r2, [r3, #24]
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f4:	18d1      	adds	r1, r2, r3
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fc:	f7ff ff06 	bl	800d10c <prvInsertTimerInActiveList>
					break;
 800d300:	e015      	b.n	800d32e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d308:	f003 0302 	and.w	r3, r3, #2
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d103      	bne.n	800d318 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d312:	f000 fbdd 	bl	800dad0 <vPortFree>
 800d316:	e00a      	b.n	800d32e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d31e:	f023 0301 	bic.w	r3, r3, #1
 800d322:	b2da      	uxtb	r2, r3
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d32a:	e000      	b.n	800d32e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d32c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d32e:	4b08      	ldr	r3, [pc, #32]	; (800d350 <prvProcessReceivedCommands+0x1c0>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	1d39      	adds	r1, r7, #4
 800d334:	2200      	movs	r2, #0
 800d336:	4618      	mov	r0, r3
 800d338:	f7fe fc16 	bl	800bb68 <xQueueReceive>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f47f af2a 	bne.w	800d198 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d344:	bf00      	nop
 800d346:	bf00      	nop
 800d348:	3730      	adds	r7, #48	; 0x30
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	20001690 	.word	0x20001690

0800d354 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b088      	sub	sp, #32
 800d358:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d35a:	e048      	b.n	800d3ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d35c:	4b2d      	ldr	r3, [pc, #180]	; (800d414 <prvSwitchTimerLists+0xc0>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d366:	4b2b      	ldr	r3, [pc, #172]	; (800d414 <prvSwitchTimerLists+0xc0>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	3304      	adds	r3, #4
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe f92f 	bl	800b5d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d02e      	beq.n	800d3ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	4413      	add	r3, r2
 800d398:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d90e      	bls.n	800d3c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3ae:	4b19      	ldr	r3, [pc, #100]	; (800d414 <prvSwitchTimerLists+0xc0>)
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f7fe f8d4 	bl	800b566 <vListInsert>
 800d3be:	e016      	b.n	800d3ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff fd60 	bl	800ce90 <xTimerGenericCommand>
 800d3d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10a      	bne.n	800d3ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	603b      	str	r3, [r7, #0]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ee:	4b09      	ldr	r3, [pc, #36]	; (800d414 <prvSwitchTimerLists+0xc0>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1b1      	bne.n	800d35c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3f8:	4b06      	ldr	r3, [pc, #24]	; (800d414 <prvSwitchTimerLists+0xc0>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3fe:	4b06      	ldr	r3, [pc, #24]	; (800d418 <prvSwitchTimerLists+0xc4>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a04      	ldr	r2, [pc, #16]	; (800d414 <prvSwitchTimerLists+0xc0>)
 800d404:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d406:	4a04      	ldr	r2, [pc, #16]	; (800d418 <prvSwitchTimerLists+0xc4>)
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	6013      	str	r3, [r2, #0]
}
 800d40c:	bf00      	nop
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	20001688 	.word	0x20001688
 800d418:	2000168c 	.word	0x2000168c

0800d41c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d422:	f000 f967 	bl	800d6f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d426:	4b15      	ldr	r3, [pc, #84]	; (800d47c <prvCheckForValidListAndQueue+0x60>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d120      	bne.n	800d470 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d42e:	4814      	ldr	r0, [pc, #80]	; (800d480 <prvCheckForValidListAndQueue+0x64>)
 800d430:	f7fe f848 	bl	800b4c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d434:	4813      	ldr	r0, [pc, #76]	; (800d484 <prvCheckForValidListAndQueue+0x68>)
 800d436:	f7fe f845 	bl	800b4c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <prvCheckForValidListAndQueue+0x6c>)
 800d43c:	4a10      	ldr	r2, [pc, #64]	; (800d480 <prvCheckForValidListAndQueue+0x64>)
 800d43e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d440:	4b12      	ldr	r3, [pc, #72]	; (800d48c <prvCheckForValidListAndQueue+0x70>)
 800d442:	4a10      	ldr	r2, [pc, #64]	; (800d484 <prvCheckForValidListAndQueue+0x68>)
 800d444:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d446:	2300      	movs	r3, #0
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4b11      	ldr	r3, [pc, #68]	; (800d490 <prvCheckForValidListAndQueue+0x74>)
 800d44c:	4a11      	ldr	r2, [pc, #68]	; (800d494 <prvCheckForValidListAndQueue+0x78>)
 800d44e:	2110      	movs	r1, #16
 800d450:	200a      	movs	r0, #10
 800d452:	f7fe f953 	bl	800b6fc <xQueueGenericCreateStatic>
 800d456:	4603      	mov	r3, r0
 800d458:	4a08      	ldr	r2, [pc, #32]	; (800d47c <prvCheckForValidListAndQueue+0x60>)
 800d45a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d45c:	4b07      	ldr	r3, [pc, #28]	; (800d47c <prvCheckForValidListAndQueue+0x60>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d464:	4b05      	ldr	r3, [pc, #20]	; (800d47c <prvCheckForValidListAndQueue+0x60>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	490b      	ldr	r1, [pc, #44]	; (800d498 <prvCheckForValidListAndQueue+0x7c>)
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe fd6c 	bl	800bf48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d470:	f000 f970 	bl	800d754 <vPortExitCritical>
}
 800d474:	bf00      	nop
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20001690 	.word	0x20001690
 800d480:	20001660 	.word	0x20001660
 800d484:	20001674 	.word	0x20001674
 800d488:	20001688 	.word	0x20001688
 800d48c:	2000168c 	.word	0x2000168c
 800d490:	2000173c 	.word	0x2000173c
 800d494:	2000169c 	.word	0x2000169c
 800d498:	08011930 	.word	0x08011930

0800d49c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3b04      	subs	r3, #4
 800d4ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	3b04      	subs	r3, #4
 800d4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	f023 0201 	bic.w	r2, r3, #1
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3b04      	subs	r3, #4
 800d4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4cc:	4a0c      	ldr	r2, [pc, #48]	; (800d500 <pxPortInitialiseStack+0x64>)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3b14      	subs	r3, #20
 800d4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3b04      	subs	r3, #4
 800d4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f06f 0202 	mvn.w	r2, #2
 800d4ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3b20      	subs	r3, #32
 800d4f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	0800d505 	.word	0x0800d505

0800d504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d50e:	4b12      	ldr	r3, [pc, #72]	; (800d558 <prvTaskExitError+0x54>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d516:	d00a      	beq.n	800d52e <prvTaskExitError+0x2a>
	__asm volatile
 800d518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	60fb      	str	r3, [r7, #12]
}
 800d52a:	bf00      	nop
 800d52c:	e7fe      	b.n	800d52c <prvTaskExitError+0x28>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	60bb      	str	r3, [r7, #8]
}
 800d540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d542:	bf00      	nop
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0fc      	beq.n	800d544 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	2000000c 	.word	0x2000000c
 800d55c:	00000000 	.word	0x00000000

0800d560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d560:	4b07      	ldr	r3, [pc, #28]	; (800d580 <pxCurrentTCBConst2>)
 800d562:	6819      	ldr	r1, [r3, #0]
 800d564:	6808      	ldr	r0, [r1, #0]
 800d566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56a:	f380 8809 	msr	PSP, r0
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8811 	msr	BASEPRI, r0
 800d57a:	4770      	bx	lr
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst2>:
 800d580:	20001160 	.word	0x20001160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d588:	4808      	ldr	r0, [pc, #32]	; (800d5ac <prvPortStartFirstTask+0x24>)
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	6800      	ldr	r0, [r0, #0]
 800d58e:	f380 8808 	msr	MSP, r0
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8814 	msr	CONTROL, r0
 800d59a:	b662      	cpsie	i
 800d59c:	b661      	cpsie	f
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	df00      	svc	0
 800d5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5aa:	bf00      	nop
 800d5ac:	e000ed08 	.word	0xe000ed08

0800d5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5b6:	4b46      	ldr	r3, [pc, #280]	; (800d6d0 <xPortStartScheduler+0x120>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a46      	ldr	r2, [pc, #280]	; (800d6d4 <xPortStartScheduler+0x124>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10a      	bne.n	800d5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	613b      	str	r3, [r7, #16]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5d6:	4b3e      	ldr	r3, [pc, #248]	; (800d6d0 <xPortStartScheduler+0x120>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a3f      	ldr	r2, [pc, #252]	; (800d6d8 <xPortStartScheduler+0x128>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10a      	bne.n	800d5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	60fb      	str	r3, [r7, #12]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5f6:	4b39      	ldr	r3, [pc, #228]	; (800d6dc <xPortStartScheduler+0x12c>)
 800d5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	22ff      	movs	r2, #255	; 0xff
 800d606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d610:	78fb      	ldrb	r3, [r7, #3]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b31      	ldr	r3, [pc, #196]	; (800d6e0 <xPortStartScheduler+0x130>)
 800d61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d61e:	4b31      	ldr	r3, [pc, #196]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d620:	2207      	movs	r2, #7
 800d622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d624:	e009      	b.n	800d63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d626:	4b2f      	ldr	r3, [pc, #188]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	4a2d      	ldr	r2, [pc, #180]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	b2db      	uxtb	r3, r3
 800d638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d642:	2b80      	cmp	r3, #128	; 0x80
 800d644:	d0ef      	beq.n	800d626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d646:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f1c3 0307 	rsb	r3, r3, #7
 800d64e:	2b04      	cmp	r3, #4
 800d650:	d00a      	beq.n	800d668 <xPortStartScheduler+0xb8>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	60bb      	str	r3, [r7, #8]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d668:	4b1e      	ldr	r3, [pc, #120]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	4a1d      	ldr	r2, [pc, #116]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d672:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d67a:	4a1a      	ldr	r2, [pc, #104]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	b2da      	uxtb	r2, r3
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d686:	4b18      	ldr	r3, [pc, #96]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a17      	ldr	r2, [pc, #92]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d692:	4b15      	ldr	r3, [pc, #84]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a14      	ldr	r2, [pc, #80]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d69e:	f000 f8dd 	bl	800d85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6a2:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <xPortStartScheduler+0x13c>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6a8:	f000 f8fc 	bl	800d8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6ac:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <xPortStartScheduler+0x140>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a0f      	ldr	r2, [pc, #60]	; (800d6f0 <xPortStartScheduler+0x140>)
 800d6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6b8:	f7ff ff66 	bl	800d588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6bc:	f7ff f854 	bl	800c768 <vTaskSwitchContext>
	prvTaskExitError();
 800d6c0:	f7ff ff20 	bl	800d504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3718      	adds	r7, #24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	e000ed00 	.word	0xe000ed00
 800d6d4:	410fc271 	.word	0x410fc271
 800d6d8:	410fc270 	.word	0x410fc270
 800d6dc:	e000e400 	.word	0xe000e400
 800d6e0:	2000178c 	.word	0x2000178c
 800d6e4:	20001790 	.word	0x20001790
 800d6e8:	e000ed20 	.word	0xe000ed20
 800d6ec:	2000000c 	.word	0x2000000c
 800d6f0:	e000ef34 	.word	0xe000ef34

0800d6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	607b      	str	r3, [r7, #4]
}
 800d70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <vPortEnterCritical+0x58>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	4a0d      	ldr	r2, [pc, #52]	; (800d74c <vPortEnterCritical+0x58>)
 800d716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d718:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <vPortEnterCritical+0x58>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d10f      	bne.n	800d740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <vPortEnterCritical+0x5c>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <vPortEnterCritical+0x4c>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	603b      	str	r3, [r7, #0]
}
 800d73c:	bf00      	nop
 800d73e:	e7fe      	b.n	800d73e <vPortEnterCritical+0x4a>
	}
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	2000000c 	.word	0x2000000c
 800d750:	e000ed04 	.word	0xe000ed04

0800d754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d75a:	4b12      	ldr	r3, [pc, #72]	; (800d7a4 <vPortExitCritical+0x50>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10a      	bne.n	800d778 <vPortExitCritical+0x24>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	607b      	str	r3, [r7, #4]
}
 800d774:	bf00      	nop
 800d776:	e7fe      	b.n	800d776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d778:	4b0a      	ldr	r3, [pc, #40]	; (800d7a4 <vPortExitCritical+0x50>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	4a09      	ldr	r2, [pc, #36]	; (800d7a4 <vPortExitCritical+0x50>)
 800d780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d782:	4b08      	ldr	r3, [pc, #32]	; (800d7a4 <vPortExitCritical+0x50>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d105      	bne.n	800d796 <vPortExitCritical+0x42>
 800d78a:	2300      	movs	r3, #0
 800d78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f383 8811 	msr	BASEPRI, r3
}
 800d794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	2000000c 	.word	0x2000000c
	...

0800d7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7b0:	f3ef 8009 	mrs	r0, PSP
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	4b15      	ldr	r3, [pc, #84]	; (800d810 <pxCurrentTCBConst>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	f01e 0f10 	tst.w	lr, #16
 800d7c0:	bf08      	it	eq
 800d7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ca:	6010      	str	r0, [r2, #0]
 800d7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7d4:	f380 8811 	msr	BASEPRI, r0
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f7fe ffc2 	bl	800c768 <vTaskSwitchContext>
 800d7e4:	f04f 0000 	mov.w	r0, #0
 800d7e8:	f380 8811 	msr	BASEPRI, r0
 800d7ec:	bc09      	pop	{r0, r3}
 800d7ee:	6819      	ldr	r1, [r3, #0]
 800d7f0:	6808      	ldr	r0, [r1, #0]
 800d7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f6:	f01e 0f10 	tst.w	lr, #16
 800d7fa:	bf08      	it	eq
 800d7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d800:	f380 8809 	msr	PSP, r0
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	f3af 8000 	nop.w

0800d810 <pxCurrentTCBConst>:
 800d810:	20001160 	.word	0x20001160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop

0800d818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	607b      	str	r3, [r7, #4]
}
 800d830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d832:	f7fe fedf 	bl	800c5f4 <xTaskIncrementTick>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d83c:	4b06      	ldr	r3, [pc, #24]	; (800d858 <xPortSysTickHandler+0x40>)
 800d83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	2300      	movs	r3, #0
 800d846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	f383 8811 	msr	BASEPRI, r3
}
 800d84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d850:	bf00      	nop
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d85c:	b480      	push	{r7}
 800d85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d860:	4b0b      	ldr	r3, [pc, #44]	; (800d890 <vPortSetupTimerInterrupt+0x34>)
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d866:	4b0b      	ldr	r3, [pc, #44]	; (800d894 <vPortSetupTimerInterrupt+0x38>)
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <vPortSetupTimerInterrupt+0x3c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <vPortSetupTimerInterrupt+0x40>)
 800d872:	fba2 2303 	umull	r2, r3, r2, r3
 800d876:	099b      	lsrs	r3, r3, #6
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <vPortSetupTimerInterrupt+0x44>)
 800d87a:	3b01      	subs	r3, #1
 800d87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d87e:	4b04      	ldr	r3, [pc, #16]	; (800d890 <vPortSetupTimerInterrupt+0x34>)
 800d880:	2207      	movs	r2, #7
 800d882:	601a      	str	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	e000e010 	.word	0xe000e010
 800d894:	e000e018 	.word	0xe000e018
 800d898:	20000000 	.word	0x20000000
 800d89c:	10624dd3 	.word	0x10624dd3
 800d8a0:	e000e014 	.word	0xe000e014

0800d8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8b4 <vPortEnableVFP+0x10>
 800d8a8:	6801      	ldr	r1, [r0, #0]
 800d8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8ae:	6001      	str	r1, [r0, #0]
 800d8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8b2:	bf00      	nop
 800d8b4:	e000ed88 	.word	0xe000ed88

0800d8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8be:	f3ef 8305 	mrs	r3, IPSR
 800d8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b0f      	cmp	r3, #15
 800d8c8:	d914      	bls.n	800d8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ca:	4a17      	ldr	r2, [pc, #92]	; (800d928 <vPortValidateInterruptPriority+0x70>)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8d4:	4b15      	ldr	r3, [pc, #84]	; (800d92c <vPortValidateInterruptPriority+0x74>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	7afa      	ldrb	r2, [r7, #11]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d20a      	bcs.n	800d8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	607b      	str	r3, [r7, #4]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8f4:	4b0e      	ldr	r3, [pc, #56]	; (800d930 <vPortValidateInterruptPriority+0x78>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8fc:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <vPortValidateInterruptPriority+0x7c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d90a      	bls.n	800d91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	603b      	str	r3, [r7, #0]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <vPortValidateInterruptPriority+0x60>
	}
 800d91a:	bf00      	nop
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	e000e3f0 	.word	0xe000e3f0
 800d92c:	2000178c 	.word	0x2000178c
 800d930:	e000ed0c 	.word	0xe000ed0c
 800d934:	20001790 	.word	0x20001790

0800d938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d944:	f7fe fd9a 	bl	800c47c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d948:	4b5b      	ldr	r3, [pc, #364]	; (800dab8 <pvPortMalloc+0x180>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d950:	f000 f920 	bl	800db94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d954:	4b59      	ldr	r3, [pc, #356]	; (800dabc <pvPortMalloc+0x184>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4013      	ands	r3, r2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 8093 	bne.w	800da88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d01d      	beq.n	800d9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d968:	2208      	movs	r2, #8
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4413      	add	r3, r2
 800d96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f003 0307 	and.w	r3, r3, #7
 800d976:	2b00      	cmp	r3, #0
 800d978:	d014      	beq.n	800d9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f023 0307 	bic.w	r3, r3, #7
 800d980:	3308      	adds	r3, #8
 800d982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d06e      	beq.n	800da88 <pvPortMalloc+0x150>
 800d9aa:	4b45      	ldr	r3, [pc, #276]	; (800dac0 <pvPortMalloc+0x188>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d869      	bhi.n	800da88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9b4:	4b43      	ldr	r3, [pc, #268]	; (800dac4 <pvPortMalloc+0x18c>)
 800d9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9b8:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <pvPortMalloc+0x18c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9be:	e004      	b.n	800d9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d903      	bls.n	800d9dc <pvPortMalloc+0xa4>
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1f1      	bne.n	800d9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9dc:	4b36      	ldr	r3, [pc, #216]	; (800dab8 <pvPortMalloc+0x180>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d050      	beq.n	800da88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2208      	movs	r2, #8
 800d9ec:	4413      	add	r3, r2
 800d9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	2308      	movs	r3, #8
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	429a      	cmp	r2, r3
 800da06:	d91f      	bls.n	800da48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <pvPortMalloc+0xf8>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	613b      	str	r3, [r7, #16]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	1ad2      	subs	r2, r2, r3
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da42:	69b8      	ldr	r0, [r7, #24]
 800da44:	f000 f908 	bl	800dc58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da48:	4b1d      	ldr	r3, [pc, #116]	; (800dac0 <pvPortMalloc+0x188>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	4a1b      	ldr	r2, [pc, #108]	; (800dac0 <pvPortMalloc+0x188>)
 800da54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da56:	4b1a      	ldr	r3, [pc, #104]	; (800dac0 <pvPortMalloc+0x188>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	4b1b      	ldr	r3, [pc, #108]	; (800dac8 <pvPortMalloc+0x190>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d203      	bcs.n	800da6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da62:	4b17      	ldr	r3, [pc, #92]	; (800dac0 <pvPortMalloc+0x188>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a18      	ldr	r2, [pc, #96]	; (800dac8 <pvPortMalloc+0x190>)
 800da68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	4b13      	ldr	r3, [pc, #76]	; (800dabc <pvPortMalloc+0x184>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	431a      	orrs	r2, r3
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da7e:	4b13      	ldr	r3, [pc, #76]	; (800dacc <pvPortMalloc+0x194>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	3301      	adds	r3, #1
 800da84:	4a11      	ldr	r2, [pc, #68]	; (800dacc <pvPortMalloc+0x194>)
 800da86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da88:	f7fe fd06 	bl	800c498 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <pvPortMalloc+0x174>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	60fb      	str	r3, [r7, #12]
}
 800daa8:	bf00      	nop
 800daaa:	e7fe      	b.n	800daaa <pvPortMalloc+0x172>
	return pvReturn;
 800daac:	69fb      	ldr	r3, [r7, #28]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3728      	adds	r7, #40	; 0x28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	2000539c 	.word	0x2000539c
 800dabc:	200053b0 	.word	0x200053b0
 800dac0:	200053a0 	.word	0x200053a0
 800dac4:	20005394 	.word	0x20005394
 800dac8:	200053a4 	.word	0x200053a4
 800dacc:	200053a8 	.word	0x200053a8

0800dad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d04d      	beq.n	800db7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dae2:	2308      	movs	r3, #8
 800dae4:	425b      	negs	r3, r3
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	4413      	add	r3, r2
 800daea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	4b24      	ldr	r3, [pc, #144]	; (800db88 <vPortFree+0xb8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4013      	ands	r3, r2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10a      	bne.n	800db14 <vPortFree+0x44>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	60fb      	str	r3, [r7, #12]
}
 800db10:	bf00      	nop
 800db12:	e7fe      	b.n	800db12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00a      	beq.n	800db32 <vPortFree+0x62>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	60bb      	str	r3, [r7, #8]
}
 800db2e:	bf00      	nop
 800db30:	e7fe      	b.n	800db30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <vPortFree+0xb8>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4013      	ands	r3, r2
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d01e      	beq.n	800db7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d11a      	bne.n	800db7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	4b0e      	ldr	r3, [pc, #56]	; (800db88 <vPortFree+0xb8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	43db      	mvns	r3, r3
 800db52:	401a      	ands	r2, r3
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db58:	f7fe fc90 	bl	800c47c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <vPortFree+0xbc>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4413      	add	r3, r2
 800db66:	4a09      	ldr	r2, [pc, #36]	; (800db8c <vPortFree+0xbc>)
 800db68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db6a:	6938      	ldr	r0, [r7, #16]
 800db6c:	f000 f874 	bl	800dc58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <vPortFree+0xc0>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	4a06      	ldr	r2, [pc, #24]	; (800db90 <vPortFree+0xc0>)
 800db78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db7a:	f7fe fc8d 	bl	800c498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db7e:	bf00      	nop
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	200053b0 	.word	0x200053b0
 800db8c:	200053a0 	.word	0x200053a0
 800db90:	200053ac 	.word	0x200053ac

0800db94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800db9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dba0:	4b27      	ldr	r3, [pc, #156]	; (800dc40 <prvHeapInit+0xac>)
 800dba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00c      	beq.n	800dbc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3307      	adds	r3, #7
 800dbb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f023 0307 	bic.w	r3, r3, #7
 800dbba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	4a1f      	ldr	r2, [pc, #124]	; (800dc40 <prvHeapInit+0xac>)
 800dbc4:	4413      	add	r3, r2
 800dbc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbcc:	4a1d      	ldr	r2, [pc, #116]	; (800dc44 <prvHeapInit+0xb0>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbd2:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <prvHeapInit+0xb0>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	4413      	add	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbe0:	2208      	movs	r2, #8
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	1a9b      	subs	r3, r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f023 0307 	bic.w	r3, r3, #7
 800dbee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <prvHeapInit+0xb4>)
 800dbf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbf6:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <prvHeapInit+0xb4>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbfe:	4b12      	ldr	r3, [pc, #72]	; (800dc48 <prvHeapInit+0xb4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	1ad2      	subs	r2, r2, r3
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc14:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <prvHeapInit+0xb4>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4a0a      	ldr	r2, [pc, #40]	; (800dc4c <prvHeapInit+0xb8>)
 800dc22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4a09      	ldr	r2, [pc, #36]	; (800dc50 <prvHeapInit+0xbc>)
 800dc2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <prvHeapInit+0xc0>)
 800dc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc32:	601a      	str	r2, [r3, #0]
}
 800dc34:	bf00      	nop
 800dc36:	3714      	adds	r7, #20
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	20001794 	.word	0x20001794
 800dc44:	20005394 	.word	0x20005394
 800dc48:	2000539c 	.word	0x2000539c
 800dc4c:	200053a4 	.word	0x200053a4
 800dc50:	200053a0 	.word	0x200053a0
 800dc54:	200053b0 	.word	0x200053b0

0800dc58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc60:	4b28      	ldr	r3, [pc, #160]	; (800dd04 <prvInsertBlockIntoFreeList+0xac>)
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	e002      	b.n	800dc6c <prvInsertBlockIntoFreeList+0x14>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d8f7      	bhi.n	800dc66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	4413      	add	r3, r2
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d108      	bne.n	800dc9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	441a      	add	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	441a      	add	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d118      	bne.n	800dce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b15      	ldr	r3, [pc, #84]	; (800dd08 <prvInsertBlockIntoFreeList+0xb0>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d00d      	beq.n	800dcd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	441a      	add	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	e008      	b.n	800dce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <prvInsertBlockIntoFreeList+0xb0>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e003      	b.n	800dce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d002      	beq.n	800dcf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	20005394 	.word	0x20005394
 800dd08:	2000539c 	.word	0x2000539c

0800dd0c <abs>:
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	bfb8      	it	lt
 800dd10:	4240      	neglt	r0, r0
 800dd12:	4770      	bx	lr

0800dd14 <__cvt>:
 800dd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd18:	ec55 4b10 	vmov	r4, r5, d0
 800dd1c:	2d00      	cmp	r5, #0
 800dd1e:	460e      	mov	r6, r1
 800dd20:	4619      	mov	r1, r3
 800dd22:	462b      	mov	r3, r5
 800dd24:	bfbb      	ittet	lt
 800dd26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd2a:	461d      	movlt	r5, r3
 800dd2c:	2300      	movge	r3, #0
 800dd2e:	232d      	movlt	r3, #45	; 0x2d
 800dd30:	700b      	strb	r3, [r1, #0]
 800dd32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd38:	4691      	mov	r9, r2
 800dd3a:	f023 0820 	bic.w	r8, r3, #32
 800dd3e:	bfbc      	itt	lt
 800dd40:	4622      	movlt	r2, r4
 800dd42:	4614      	movlt	r4, r2
 800dd44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd48:	d005      	beq.n	800dd56 <__cvt+0x42>
 800dd4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd4e:	d100      	bne.n	800dd52 <__cvt+0x3e>
 800dd50:	3601      	adds	r6, #1
 800dd52:	2102      	movs	r1, #2
 800dd54:	e000      	b.n	800dd58 <__cvt+0x44>
 800dd56:	2103      	movs	r1, #3
 800dd58:	ab03      	add	r3, sp, #12
 800dd5a:	9301      	str	r3, [sp, #4]
 800dd5c:	ab02      	add	r3, sp, #8
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	ec45 4b10 	vmov	d0, r4, r5
 800dd64:	4653      	mov	r3, sl
 800dd66:	4632      	mov	r2, r6
 800dd68:	f000 fe76 	bl	800ea58 <_dtoa_r>
 800dd6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd70:	4607      	mov	r7, r0
 800dd72:	d102      	bne.n	800dd7a <__cvt+0x66>
 800dd74:	f019 0f01 	tst.w	r9, #1
 800dd78:	d022      	beq.n	800ddc0 <__cvt+0xac>
 800dd7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd7e:	eb07 0906 	add.w	r9, r7, r6
 800dd82:	d110      	bne.n	800dda6 <__cvt+0x92>
 800dd84:	783b      	ldrb	r3, [r7, #0]
 800dd86:	2b30      	cmp	r3, #48	; 0x30
 800dd88:	d10a      	bne.n	800dda0 <__cvt+0x8c>
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd96:	b918      	cbnz	r0, 800dda0 <__cvt+0x8c>
 800dd98:	f1c6 0601 	rsb	r6, r6, #1
 800dd9c:	f8ca 6000 	str.w	r6, [sl]
 800dda0:	f8da 3000 	ldr.w	r3, [sl]
 800dda4:	4499      	add	r9, r3
 800dda6:	2200      	movs	r2, #0
 800dda8:	2300      	movs	r3, #0
 800ddaa:	4620      	mov	r0, r4
 800ddac:	4629      	mov	r1, r5
 800ddae:	f7f2 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddb2:	b108      	cbz	r0, 800ddb8 <__cvt+0xa4>
 800ddb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ddb8:	2230      	movs	r2, #48	; 0x30
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	454b      	cmp	r3, r9
 800ddbe:	d307      	bcc.n	800ddd0 <__cvt+0xbc>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddc4:	1bdb      	subs	r3, r3, r7
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	b004      	add	sp, #16
 800ddcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd0:	1c59      	adds	r1, r3, #1
 800ddd2:	9103      	str	r1, [sp, #12]
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	e7f0      	b.n	800ddba <__cvt+0xa6>

0800ddd8 <__exponent>:
 800ddd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddda:	4603      	mov	r3, r0
 800dddc:	2900      	cmp	r1, #0
 800ddde:	bfb8      	it	lt
 800dde0:	4249      	neglt	r1, r1
 800dde2:	f803 2b02 	strb.w	r2, [r3], #2
 800dde6:	bfb4      	ite	lt
 800dde8:	222d      	movlt	r2, #45	; 0x2d
 800ddea:	222b      	movge	r2, #43	; 0x2b
 800ddec:	2909      	cmp	r1, #9
 800ddee:	7042      	strb	r2, [r0, #1]
 800ddf0:	dd2a      	ble.n	800de48 <__exponent+0x70>
 800ddf2:	f10d 0207 	add.w	r2, sp, #7
 800ddf6:	4617      	mov	r7, r2
 800ddf8:	260a      	movs	r6, #10
 800ddfa:	4694      	mov	ip, r2
 800ddfc:	fb91 f5f6 	sdiv	r5, r1, r6
 800de00:	fb06 1415 	mls	r4, r6, r5, r1
 800de04:	3430      	adds	r4, #48	; 0x30
 800de06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800de0a:	460c      	mov	r4, r1
 800de0c:	2c63      	cmp	r4, #99	; 0x63
 800de0e:	f102 32ff 	add.w	r2, r2, #4294967295
 800de12:	4629      	mov	r1, r5
 800de14:	dcf1      	bgt.n	800ddfa <__exponent+0x22>
 800de16:	3130      	adds	r1, #48	; 0x30
 800de18:	f1ac 0402 	sub.w	r4, ip, #2
 800de1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800de20:	1c41      	adds	r1, r0, #1
 800de22:	4622      	mov	r2, r4
 800de24:	42ba      	cmp	r2, r7
 800de26:	d30a      	bcc.n	800de3e <__exponent+0x66>
 800de28:	f10d 0209 	add.w	r2, sp, #9
 800de2c:	eba2 020c 	sub.w	r2, r2, ip
 800de30:	42bc      	cmp	r4, r7
 800de32:	bf88      	it	hi
 800de34:	2200      	movhi	r2, #0
 800de36:	4413      	add	r3, r2
 800de38:	1a18      	subs	r0, r3, r0
 800de3a:	b003      	add	sp, #12
 800de3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800de42:	f801 5f01 	strb.w	r5, [r1, #1]!
 800de46:	e7ed      	b.n	800de24 <__exponent+0x4c>
 800de48:	2330      	movs	r3, #48	; 0x30
 800de4a:	3130      	adds	r1, #48	; 0x30
 800de4c:	7083      	strb	r3, [r0, #2]
 800de4e:	70c1      	strb	r1, [r0, #3]
 800de50:	1d03      	adds	r3, r0, #4
 800de52:	e7f1      	b.n	800de38 <__exponent+0x60>

0800de54 <_printf_float>:
 800de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	ed2d 8b02 	vpush	{d8}
 800de5c:	b08d      	sub	sp, #52	; 0x34
 800de5e:	460c      	mov	r4, r1
 800de60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de64:	4616      	mov	r6, r2
 800de66:	461f      	mov	r7, r3
 800de68:	4605      	mov	r5, r0
 800de6a:	f000 fce7 	bl	800e83c <_localeconv_r>
 800de6e:	f8d0 a000 	ldr.w	sl, [r0]
 800de72:	4650      	mov	r0, sl
 800de74:	f7f2 f9fc 	bl	8000270 <strlen>
 800de78:	2300      	movs	r3, #0
 800de7a:	930a      	str	r3, [sp, #40]	; 0x28
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	9305      	str	r3, [sp, #20]
 800de80:	f8d8 3000 	ldr.w	r3, [r8]
 800de84:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de88:	3307      	adds	r3, #7
 800de8a:	f023 0307 	bic.w	r3, r3, #7
 800de8e:	f103 0208 	add.w	r2, r3, #8
 800de92:	f8c8 2000 	str.w	r2, [r8]
 800de96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de9e:	9307      	str	r3, [sp, #28]
 800dea0:	f8cd 8018 	str.w	r8, [sp, #24]
 800dea4:	ee08 0a10 	vmov	s16, r0
 800dea8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800deac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800deb0:	4b9e      	ldr	r3, [pc, #632]	; (800e12c <_printf_float+0x2d8>)
 800deb2:	f04f 32ff 	mov.w	r2, #4294967295
 800deb6:	f7f2 fe39 	bl	8000b2c <__aeabi_dcmpun>
 800deba:	bb88      	cbnz	r0, 800df20 <_printf_float+0xcc>
 800debc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dec0:	4b9a      	ldr	r3, [pc, #616]	; (800e12c <_printf_float+0x2d8>)
 800dec2:	f04f 32ff 	mov.w	r2, #4294967295
 800dec6:	f7f2 fe13 	bl	8000af0 <__aeabi_dcmple>
 800deca:	bb48      	cbnz	r0, 800df20 <_printf_float+0xcc>
 800decc:	2200      	movs	r2, #0
 800dece:	2300      	movs	r3, #0
 800ded0:	4640      	mov	r0, r8
 800ded2:	4649      	mov	r1, r9
 800ded4:	f7f2 fe02 	bl	8000adc <__aeabi_dcmplt>
 800ded8:	b110      	cbz	r0, 800dee0 <_printf_float+0x8c>
 800deda:	232d      	movs	r3, #45	; 0x2d
 800dedc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dee0:	4a93      	ldr	r2, [pc, #588]	; (800e130 <_printf_float+0x2dc>)
 800dee2:	4b94      	ldr	r3, [pc, #592]	; (800e134 <_printf_float+0x2e0>)
 800dee4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dee8:	bf94      	ite	ls
 800deea:	4690      	movls	r8, r2
 800deec:	4698      	movhi	r8, r3
 800deee:	2303      	movs	r3, #3
 800def0:	6123      	str	r3, [r4, #16]
 800def2:	9b05      	ldr	r3, [sp, #20]
 800def4:	f023 0304 	bic.w	r3, r3, #4
 800def8:	6023      	str	r3, [r4, #0]
 800defa:	f04f 0900 	mov.w	r9, #0
 800defe:	9700      	str	r7, [sp, #0]
 800df00:	4633      	mov	r3, r6
 800df02:	aa0b      	add	r2, sp, #44	; 0x2c
 800df04:	4621      	mov	r1, r4
 800df06:	4628      	mov	r0, r5
 800df08:	f000 f9da 	bl	800e2c0 <_printf_common>
 800df0c:	3001      	adds	r0, #1
 800df0e:	f040 8090 	bne.w	800e032 <_printf_float+0x1de>
 800df12:	f04f 30ff 	mov.w	r0, #4294967295
 800df16:	b00d      	add	sp, #52	; 0x34
 800df18:	ecbd 8b02 	vpop	{d8}
 800df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df20:	4642      	mov	r2, r8
 800df22:	464b      	mov	r3, r9
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	f7f2 fe00 	bl	8000b2c <__aeabi_dcmpun>
 800df2c:	b140      	cbz	r0, 800df40 <_printf_float+0xec>
 800df2e:	464b      	mov	r3, r9
 800df30:	2b00      	cmp	r3, #0
 800df32:	bfbc      	itt	lt
 800df34:	232d      	movlt	r3, #45	; 0x2d
 800df36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df3a:	4a7f      	ldr	r2, [pc, #508]	; (800e138 <_printf_float+0x2e4>)
 800df3c:	4b7f      	ldr	r3, [pc, #508]	; (800e13c <_printf_float+0x2e8>)
 800df3e:	e7d1      	b.n	800dee4 <_printf_float+0x90>
 800df40:	6863      	ldr	r3, [r4, #4]
 800df42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df46:	9206      	str	r2, [sp, #24]
 800df48:	1c5a      	adds	r2, r3, #1
 800df4a:	d13f      	bne.n	800dfcc <_printf_float+0x178>
 800df4c:	2306      	movs	r3, #6
 800df4e:	6063      	str	r3, [r4, #4]
 800df50:	9b05      	ldr	r3, [sp, #20]
 800df52:	6861      	ldr	r1, [r4, #4]
 800df54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df58:	2300      	movs	r3, #0
 800df5a:	9303      	str	r3, [sp, #12]
 800df5c:	ab0a      	add	r3, sp, #40	; 0x28
 800df5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df62:	ab09      	add	r3, sp, #36	; 0x24
 800df64:	ec49 8b10 	vmov	d0, r8, r9
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	6022      	str	r2, [r4, #0]
 800df6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df70:	4628      	mov	r0, r5
 800df72:	f7ff fecf 	bl	800dd14 <__cvt>
 800df76:	9b06      	ldr	r3, [sp, #24]
 800df78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df7a:	2b47      	cmp	r3, #71	; 0x47
 800df7c:	4680      	mov	r8, r0
 800df7e:	d108      	bne.n	800df92 <_printf_float+0x13e>
 800df80:	1cc8      	adds	r0, r1, #3
 800df82:	db02      	blt.n	800df8a <_printf_float+0x136>
 800df84:	6863      	ldr	r3, [r4, #4]
 800df86:	4299      	cmp	r1, r3
 800df88:	dd41      	ble.n	800e00e <_printf_float+0x1ba>
 800df8a:	f1ab 0302 	sub.w	r3, fp, #2
 800df8e:	fa5f fb83 	uxtb.w	fp, r3
 800df92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df96:	d820      	bhi.n	800dfda <_printf_float+0x186>
 800df98:	3901      	subs	r1, #1
 800df9a:	465a      	mov	r2, fp
 800df9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dfa0:	9109      	str	r1, [sp, #36]	; 0x24
 800dfa2:	f7ff ff19 	bl	800ddd8 <__exponent>
 800dfa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfa8:	1813      	adds	r3, r2, r0
 800dfaa:	2a01      	cmp	r2, #1
 800dfac:	4681      	mov	r9, r0
 800dfae:	6123      	str	r3, [r4, #16]
 800dfb0:	dc02      	bgt.n	800dfb8 <_printf_float+0x164>
 800dfb2:	6822      	ldr	r2, [r4, #0]
 800dfb4:	07d2      	lsls	r2, r2, #31
 800dfb6:	d501      	bpl.n	800dfbc <_printf_float+0x168>
 800dfb8:	3301      	adds	r3, #1
 800dfba:	6123      	str	r3, [r4, #16]
 800dfbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d09c      	beq.n	800defe <_printf_float+0xaa>
 800dfc4:	232d      	movs	r3, #45	; 0x2d
 800dfc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfca:	e798      	b.n	800defe <_printf_float+0xaa>
 800dfcc:	9a06      	ldr	r2, [sp, #24]
 800dfce:	2a47      	cmp	r2, #71	; 0x47
 800dfd0:	d1be      	bne.n	800df50 <_printf_float+0xfc>
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1bc      	bne.n	800df50 <_printf_float+0xfc>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e7b9      	b.n	800df4e <_printf_float+0xfa>
 800dfda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dfde:	d118      	bne.n	800e012 <_printf_float+0x1be>
 800dfe0:	2900      	cmp	r1, #0
 800dfe2:	6863      	ldr	r3, [r4, #4]
 800dfe4:	dd0b      	ble.n	800dffe <_printf_float+0x1aa>
 800dfe6:	6121      	str	r1, [r4, #16]
 800dfe8:	b913      	cbnz	r3, 800dff0 <_printf_float+0x19c>
 800dfea:	6822      	ldr	r2, [r4, #0]
 800dfec:	07d0      	lsls	r0, r2, #31
 800dfee:	d502      	bpl.n	800dff6 <_printf_float+0x1a2>
 800dff0:	3301      	adds	r3, #1
 800dff2:	440b      	add	r3, r1
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	65a1      	str	r1, [r4, #88]	; 0x58
 800dff8:	f04f 0900 	mov.w	r9, #0
 800dffc:	e7de      	b.n	800dfbc <_printf_float+0x168>
 800dffe:	b913      	cbnz	r3, 800e006 <_printf_float+0x1b2>
 800e000:	6822      	ldr	r2, [r4, #0]
 800e002:	07d2      	lsls	r2, r2, #31
 800e004:	d501      	bpl.n	800e00a <_printf_float+0x1b6>
 800e006:	3302      	adds	r3, #2
 800e008:	e7f4      	b.n	800dff4 <_printf_float+0x1a0>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e7f2      	b.n	800dff4 <_printf_float+0x1a0>
 800e00e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e014:	4299      	cmp	r1, r3
 800e016:	db05      	blt.n	800e024 <_printf_float+0x1d0>
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	6121      	str	r1, [r4, #16]
 800e01c:	07d8      	lsls	r0, r3, #31
 800e01e:	d5ea      	bpl.n	800dff6 <_printf_float+0x1a2>
 800e020:	1c4b      	adds	r3, r1, #1
 800e022:	e7e7      	b.n	800dff4 <_printf_float+0x1a0>
 800e024:	2900      	cmp	r1, #0
 800e026:	bfd4      	ite	le
 800e028:	f1c1 0202 	rsble	r2, r1, #2
 800e02c:	2201      	movgt	r2, #1
 800e02e:	4413      	add	r3, r2
 800e030:	e7e0      	b.n	800dff4 <_printf_float+0x1a0>
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	055a      	lsls	r2, r3, #21
 800e036:	d407      	bmi.n	800e048 <_printf_float+0x1f4>
 800e038:	6923      	ldr	r3, [r4, #16]
 800e03a:	4642      	mov	r2, r8
 800e03c:	4631      	mov	r1, r6
 800e03e:	4628      	mov	r0, r5
 800e040:	47b8      	blx	r7
 800e042:	3001      	adds	r0, #1
 800e044:	d12c      	bne.n	800e0a0 <_printf_float+0x24c>
 800e046:	e764      	b.n	800df12 <_printf_float+0xbe>
 800e048:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e04c:	f240 80e0 	bls.w	800e210 <_printf_float+0x3bc>
 800e050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	f7f2 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d034      	beq.n	800e0ca <_printf_float+0x276>
 800e060:	4a37      	ldr	r2, [pc, #220]	; (800e140 <_printf_float+0x2ec>)
 800e062:	2301      	movs	r3, #1
 800e064:	4631      	mov	r1, r6
 800e066:	4628      	mov	r0, r5
 800e068:	47b8      	blx	r7
 800e06a:	3001      	adds	r0, #1
 800e06c:	f43f af51 	beq.w	800df12 <_printf_float+0xbe>
 800e070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e074:	429a      	cmp	r2, r3
 800e076:	db02      	blt.n	800e07e <_printf_float+0x22a>
 800e078:	6823      	ldr	r3, [r4, #0]
 800e07a:	07d8      	lsls	r0, r3, #31
 800e07c:	d510      	bpl.n	800e0a0 <_printf_float+0x24c>
 800e07e:	ee18 3a10 	vmov	r3, s16
 800e082:	4652      	mov	r2, sl
 800e084:	4631      	mov	r1, r6
 800e086:	4628      	mov	r0, r5
 800e088:	47b8      	blx	r7
 800e08a:	3001      	adds	r0, #1
 800e08c:	f43f af41 	beq.w	800df12 <_printf_float+0xbe>
 800e090:	f04f 0800 	mov.w	r8, #0
 800e094:	f104 091a 	add.w	r9, r4, #26
 800e098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e09a:	3b01      	subs	r3, #1
 800e09c:	4543      	cmp	r3, r8
 800e09e:	dc09      	bgt.n	800e0b4 <_printf_float+0x260>
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	079b      	lsls	r3, r3, #30
 800e0a4:	f100 8107 	bmi.w	800e2b6 <_printf_float+0x462>
 800e0a8:	68e0      	ldr	r0, [r4, #12]
 800e0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0ac:	4298      	cmp	r0, r3
 800e0ae:	bfb8      	it	lt
 800e0b0:	4618      	movlt	r0, r3
 800e0b2:	e730      	b.n	800df16 <_printf_float+0xc2>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	464a      	mov	r2, r9
 800e0b8:	4631      	mov	r1, r6
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	47b8      	blx	r7
 800e0be:	3001      	adds	r0, #1
 800e0c0:	f43f af27 	beq.w	800df12 <_printf_float+0xbe>
 800e0c4:	f108 0801 	add.w	r8, r8, #1
 800e0c8:	e7e6      	b.n	800e098 <_printf_float+0x244>
 800e0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	dc39      	bgt.n	800e144 <_printf_float+0x2f0>
 800e0d0:	4a1b      	ldr	r2, [pc, #108]	; (800e140 <_printf_float+0x2ec>)
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b8      	blx	r7
 800e0da:	3001      	adds	r0, #1
 800e0dc:	f43f af19 	beq.w	800df12 <_printf_float+0xbe>
 800e0e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	d102      	bne.n	800e0ee <_printf_float+0x29a>
 800e0e8:	6823      	ldr	r3, [r4, #0]
 800e0ea:	07d9      	lsls	r1, r3, #31
 800e0ec:	d5d8      	bpl.n	800e0a0 <_printf_float+0x24c>
 800e0ee:	ee18 3a10 	vmov	r3, s16
 800e0f2:	4652      	mov	r2, sl
 800e0f4:	4631      	mov	r1, r6
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	47b8      	blx	r7
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	f43f af09 	beq.w	800df12 <_printf_float+0xbe>
 800e100:	f04f 0900 	mov.w	r9, #0
 800e104:	f104 0a1a 	add.w	sl, r4, #26
 800e108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e10a:	425b      	negs	r3, r3
 800e10c:	454b      	cmp	r3, r9
 800e10e:	dc01      	bgt.n	800e114 <_printf_float+0x2c0>
 800e110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e112:	e792      	b.n	800e03a <_printf_float+0x1e6>
 800e114:	2301      	movs	r3, #1
 800e116:	4652      	mov	r2, sl
 800e118:	4631      	mov	r1, r6
 800e11a:	4628      	mov	r0, r5
 800e11c:	47b8      	blx	r7
 800e11e:	3001      	adds	r0, #1
 800e120:	f43f aef7 	beq.w	800df12 <_printf_float+0xbe>
 800e124:	f109 0901 	add.w	r9, r9, #1
 800e128:	e7ee      	b.n	800e108 <_printf_float+0x2b4>
 800e12a:	bf00      	nop
 800e12c:	7fefffff 	.word	0x7fefffff
 800e130:	08012494 	.word	0x08012494
 800e134:	08012498 	.word	0x08012498
 800e138:	0801249c 	.word	0x0801249c
 800e13c:	080124a0 	.word	0x080124a0
 800e140:	080124a4 	.word	0x080124a4
 800e144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e148:	429a      	cmp	r2, r3
 800e14a:	bfa8      	it	ge
 800e14c:	461a      	movge	r2, r3
 800e14e:	2a00      	cmp	r2, #0
 800e150:	4691      	mov	r9, r2
 800e152:	dc37      	bgt.n	800e1c4 <_printf_float+0x370>
 800e154:	f04f 0b00 	mov.w	fp, #0
 800e158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e15c:	f104 021a 	add.w	r2, r4, #26
 800e160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	eba3 0309 	sub.w	r3, r3, r9
 800e168:	455b      	cmp	r3, fp
 800e16a:	dc33      	bgt.n	800e1d4 <_printf_float+0x380>
 800e16c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e170:	429a      	cmp	r2, r3
 800e172:	db3b      	blt.n	800e1ec <_printf_float+0x398>
 800e174:	6823      	ldr	r3, [r4, #0]
 800e176:	07da      	lsls	r2, r3, #31
 800e178:	d438      	bmi.n	800e1ec <_printf_float+0x398>
 800e17a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e17e:	eba2 0903 	sub.w	r9, r2, r3
 800e182:	9b05      	ldr	r3, [sp, #20]
 800e184:	1ad2      	subs	r2, r2, r3
 800e186:	4591      	cmp	r9, r2
 800e188:	bfa8      	it	ge
 800e18a:	4691      	movge	r9, r2
 800e18c:	f1b9 0f00 	cmp.w	r9, #0
 800e190:	dc35      	bgt.n	800e1fe <_printf_float+0x3aa>
 800e192:	f04f 0800 	mov.w	r8, #0
 800e196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e19a:	f104 0a1a 	add.w	sl, r4, #26
 800e19e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1a2:	1a9b      	subs	r3, r3, r2
 800e1a4:	eba3 0309 	sub.w	r3, r3, r9
 800e1a8:	4543      	cmp	r3, r8
 800e1aa:	f77f af79 	ble.w	800e0a0 <_printf_float+0x24c>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	4652      	mov	r2, sl
 800e1b2:	4631      	mov	r1, r6
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	47b8      	blx	r7
 800e1b8:	3001      	adds	r0, #1
 800e1ba:	f43f aeaa 	beq.w	800df12 <_printf_float+0xbe>
 800e1be:	f108 0801 	add.w	r8, r8, #1
 800e1c2:	e7ec      	b.n	800e19e <_printf_float+0x34a>
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	4642      	mov	r2, r8
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	d1c0      	bne.n	800e154 <_printf_float+0x300>
 800e1d2:	e69e      	b.n	800df12 <_printf_float+0xbe>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	4628      	mov	r0, r5
 800e1da:	9205      	str	r2, [sp, #20]
 800e1dc:	47b8      	blx	r7
 800e1de:	3001      	adds	r0, #1
 800e1e0:	f43f ae97 	beq.w	800df12 <_printf_float+0xbe>
 800e1e4:	9a05      	ldr	r2, [sp, #20]
 800e1e6:	f10b 0b01 	add.w	fp, fp, #1
 800e1ea:	e7b9      	b.n	800e160 <_printf_float+0x30c>
 800e1ec:	ee18 3a10 	vmov	r3, s16
 800e1f0:	4652      	mov	r2, sl
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	47b8      	blx	r7
 800e1f8:	3001      	adds	r0, #1
 800e1fa:	d1be      	bne.n	800e17a <_printf_float+0x326>
 800e1fc:	e689      	b.n	800df12 <_printf_float+0xbe>
 800e1fe:	9a05      	ldr	r2, [sp, #20]
 800e200:	464b      	mov	r3, r9
 800e202:	4442      	add	r2, r8
 800e204:	4631      	mov	r1, r6
 800e206:	4628      	mov	r0, r5
 800e208:	47b8      	blx	r7
 800e20a:	3001      	adds	r0, #1
 800e20c:	d1c1      	bne.n	800e192 <_printf_float+0x33e>
 800e20e:	e680      	b.n	800df12 <_printf_float+0xbe>
 800e210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e212:	2a01      	cmp	r2, #1
 800e214:	dc01      	bgt.n	800e21a <_printf_float+0x3c6>
 800e216:	07db      	lsls	r3, r3, #31
 800e218:	d53a      	bpl.n	800e290 <_printf_float+0x43c>
 800e21a:	2301      	movs	r3, #1
 800e21c:	4642      	mov	r2, r8
 800e21e:	4631      	mov	r1, r6
 800e220:	4628      	mov	r0, r5
 800e222:	47b8      	blx	r7
 800e224:	3001      	adds	r0, #1
 800e226:	f43f ae74 	beq.w	800df12 <_printf_float+0xbe>
 800e22a:	ee18 3a10 	vmov	r3, s16
 800e22e:	4652      	mov	r2, sl
 800e230:	4631      	mov	r1, r6
 800e232:	4628      	mov	r0, r5
 800e234:	47b8      	blx	r7
 800e236:	3001      	adds	r0, #1
 800e238:	f43f ae6b 	beq.w	800df12 <_printf_float+0xbe>
 800e23c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e240:	2200      	movs	r2, #0
 800e242:	2300      	movs	r3, #0
 800e244:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e248:	f7f2 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e24c:	b9d8      	cbnz	r0, 800e286 <_printf_float+0x432>
 800e24e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e252:	f108 0201 	add.w	r2, r8, #1
 800e256:	4631      	mov	r1, r6
 800e258:	4628      	mov	r0, r5
 800e25a:	47b8      	blx	r7
 800e25c:	3001      	adds	r0, #1
 800e25e:	d10e      	bne.n	800e27e <_printf_float+0x42a>
 800e260:	e657      	b.n	800df12 <_printf_float+0xbe>
 800e262:	2301      	movs	r3, #1
 800e264:	4652      	mov	r2, sl
 800e266:	4631      	mov	r1, r6
 800e268:	4628      	mov	r0, r5
 800e26a:	47b8      	blx	r7
 800e26c:	3001      	adds	r0, #1
 800e26e:	f43f ae50 	beq.w	800df12 <_printf_float+0xbe>
 800e272:	f108 0801 	add.w	r8, r8, #1
 800e276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e278:	3b01      	subs	r3, #1
 800e27a:	4543      	cmp	r3, r8
 800e27c:	dcf1      	bgt.n	800e262 <_printf_float+0x40e>
 800e27e:	464b      	mov	r3, r9
 800e280:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e284:	e6da      	b.n	800e03c <_printf_float+0x1e8>
 800e286:	f04f 0800 	mov.w	r8, #0
 800e28a:	f104 0a1a 	add.w	sl, r4, #26
 800e28e:	e7f2      	b.n	800e276 <_printf_float+0x422>
 800e290:	2301      	movs	r3, #1
 800e292:	4642      	mov	r2, r8
 800e294:	e7df      	b.n	800e256 <_printf_float+0x402>
 800e296:	2301      	movs	r3, #1
 800e298:	464a      	mov	r2, r9
 800e29a:	4631      	mov	r1, r6
 800e29c:	4628      	mov	r0, r5
 800e29e:	47b8      	blx	r7
 800e2a0:	3001      	adds	r0, #1
 800e2a2:	f43f ae36 	beq.w	800df12 <_printf_float+0xbe>
 800e2a6:	f108 0801 	add.w	r8, r8, #1
 800e2aa:	68e3      	ldr	r3, [r4, #12]
 800e2ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2ae:	1a5b      	subs	r3, r3, r1
 800e2b0:	4543      	cmp	r3, r8
 800e2b2:	dcf0      	bgt.n	800e296 <_printf_float+0x442>
 800e2b4:	e6f8      	b.n	800e0a8 <_printf_float+0x254>
 800e2b6:	f04f 0800 	mov.w	r8, #0
 800e2ba:	f104 0919 	add.w	r9, r4, #25
 800e2be:	e7f4      	b.n	800e2aa <_printf_float+0x456>

0800e2c0 <_printf_common>:
 800e2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c4:	4616      	mov	r6, r2
 800e2c6:	4699      	mov	r9, r3
 800e2c8:	688a      	ldr	r2, [r1, #8]
 800e2ca:	690b      	ldr	r3, [r1, #16]
 800e2cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	bfb8      	it	lt
 800e2d4:	4613      	movlt	r3, r2
 800e2d6:	6033      	str	r3, [r6, #0]
 800e2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2dc:	4607      	mov	r7, r0
 800e2de:	460c      	mov	r4, r1
 800e2e0:	b10a      	cbz	r2, 800e2e6 <_printf_common+0x26>
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	6033      	str	r3, [r6, #0]
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	0699      	lsls	r1, r3, #26
 800e2ea:	bf42      	ittt	mi
 800e2ec:	6833      	ldrmi	r3, [r6, #0]
 800e2ee:	3302      	addmi	r3, #2
 800e2f0:	6033      	strmi	r3, [r6, #0]
 800e2f2:	6825      	ldr	r5, [r4, #0]
 800e2f4:	f015 0506 	ands.w	r5, r5, #6
 800e2f8:	d106      	bne.n	800e308 <_printf_common+0x48>
 800e2fa:	f104 0a19 	add.w	sl, r4, #25
 800e2fe:	68e3      	ldr	r3, [r4, #12]
 800e300:	6832      	ldr	r2, [r6, #0]
 800e302:	1a9b      	subs	r3, r3, r2
 800e304:	42ab      	cmp	r3, r5
 800e306:	dc26      	bgt.n	800e356 <_printf_common+0x96>
 800e308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e30c:	1e13      	subs	r3, r2, #0
 800e30e:	6822      	ldr	r2, [r4, #0]
 800e310:	bf18      	it	ne
 800e312:	2301      	movne	r3, #1
 800e314:	0692      	lsls	r2, r2, #26
 800e316:	d42b      	bmi.n	800e370 <_printf_common+0xb0>
 800e318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e31c:	4649      	mov	r1, r9
 800e31e:	4638      	mov	r0, r7
 800e320:	47c0      	blx	r8
 800e322:	3001      	adds	r0, #1
 800e324:	d01e      	beq.n	800e364 <_printf_common+0xa4>
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	6922      	ldr	r2, [r4, #16]
 800e32a:	f003 0306 	and.w	r3, r3, #6
 800e32e:	2b04      	cmp	r3, #4
 800e330:	bf02      	ittt	eq
 800e332:	68e5      	ldreq	r5, [r4, #12]
 800e334:	6833      	ldreq	r3, [r6, #0]
 800e336:	1aed      	subeq	r5, r5, r3
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	bf0c      	ite	eq
 800e33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e340:	2500      	movne	r5, #0
 800e342:	4293      	cmp	r3, r2
 800e344:	bfc4      	itt	gt
 800e346:	1a9b      	subgt	r3, r3, r2
 800e348:	18ed      	addgt	r5, r5, r3
 800e34a:	2600      	movs	r6, #0
 800e34c:	341a      	adds	r4, #26
 800e34e:	42b5      	cmp	r5, r6
 800e350:	d11a      	bne.n	800e388 <_printf_common+0xc8>
 800e352:	2000      	movs	r0, #0
 800e354:	e008      	b.n	800e368 <_printf_common+0xa8>
 800e356:	2301      	movs	r3, #1
 800e358:	4652      	mov	r2, sl
 800e35a:	4649      	mov	r1, r9
 800e35c:	4638      	mov	r0, r7
 800e35e:	47c0      	blx	r8
 800e360:	3001      	adds	r0, #1
 800e362:	d103      	bne.n	800e36c <_printf_common+0xac>
 800e364:	f04f 30ff 	mov.w	r0, #4294967295
 800e368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36c:	3501      	adds	r5, #1
 800e36e:	e7c6      	b.n	800e2fe <_printf_common+0x3e>
 800e370:	18e1      	adds	r1, r4, r3
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	2030      	movs	r0, #48	; 0x30
 800e376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e37a:	4422      	add	r2, r4
 800e37c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e384:	3302      	adds	r3, #2
 800e386:	e7c7      	b.n	800e318 <_printf_common+0x58>
 800e388:	2301      	movs	r3, #1
 800e38a:	4622      	mov	r2, r4
 800e38c:	4649      	mov	r1, r9
 800e38e:	4638      	mov	r0, r7
 800e390:	47c0      	blx	r8
 800e392:	3001      	adds	r0, #1
 800e394:	d0e6      	beq.n	800e364 <_printf_common+0xa4>
 800e396:	3601      	adds	r6, #1
 800e398:	e7d9      	b.n	800e34e <_printf_common+0x8e>
	...

0800e39c <_printf_i>:
 800e39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a0:	7e0f      	ldrb	r7, [r1, #24]
 800e3a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3a4:	2f78      	cmp	r7, #120	; 0x78
 800e3a6:	4691      	mov	r9, r2
 800e3a8:	4680      	mov	r8, r0
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	469a      	mov	sl, r3
 800e3ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3b2:	d807      	bhi.n	800e3c4 <_printf_i+0x28>
 800e3b4:	2f62      	cmp	r7, #98	; 0x62
 800e3b6:	d80a      	bhi.n	800e3ce <_printf_i+0x32>
 800e3b8:	2f00      	cmp	r7, #0
 800e3ba:	f000 80d4 	beq.w	800e566 <_printf_i+0x1ca>
 800e3be:	2f58      	cmp	r7, #88	; 0x58
 800e3c0:	f000 80c0 	beq.w	800e544 <_printf_i+0x1a8>
 800e3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3cc:	e03a      	b.n	800e444 <_printf_i+0xa8>
 800e3ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3d2:	2b15      	cmp	r3, #21
 800e3d4:	d8f6      	bhi.n	800e3c4 <_printf_i+0x28>
 800e3d6:	a101      	add	r1, pc, #4	; (adr r1, 800e3dc <_printf_i+0x40>)
 800e3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3dc:	0800e435 	.word	0x0800e435
 800e3e0:	0800e449 	.word	0x0800e449
 800e3e4:	0800e3c5 	.word	0x0800e3c5
 800e3e8:	0800e3c5 	.word	0x0800e3c5
 800e3ec:	0800e3c5 	.word	0x0800e3c5
 800e3f0:	0800e3c5 	.word	0x0800e3c5
 800e3f4:	0800e449 	.word	0x0800e449
 800e3f8:	0800e3c5 	.word	0x0800e3c5
 800e3fc:	0800e3c5 	.word	0x0800e3c5
 800e400:	0800e3c5 	.word	0x0800e3c5
 800e404:	0800e3c5 	.word	0x0800e3c5
 800e408:	0800e54d 	.word	0x0800e54d
 800e40c:	0800e475 	.word	0x0800e475
 800e410:	0800e507 	.word	0x0800e507
 800e414:	0800e3c5 	.word	0x0800e3c5
 800e418:	0800e3c5 	.word	0x0800e3c5
 800e41c:	0800e56f 	.word	0x0800e56f
 800e420:	0800e3c5 	.word	0x0800e3c5
 800e424:	0800e475 	.word	0x0800e475
 800e428:	0800e3c5 	.word	0x0800e3c5
 800e42c:	0800e3c5 	.word	0x0800e3c5
 800e430:	0800e50f 	.word	0x0800e50f
 800e434:	682b      	ldr	r3, [r5, #0]
 800e436:	1d1a      	adds	r2, r3, #4
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	602a      	str	r2, [r5, #0]
 800e43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e444:	2301      	movs	r3, #1
 800e446:	e09f      	b.n	800e588 <_printf_i+0x1ec>
 800e448:	6820      	ldr	r0, [r4, #0]
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	0607      	lsls	r7, r0, #24
 800e44e:	f103 0104 	add.w	r1, r3, #4
 800e452:	6029      	str	r1, [r5, #0]
 800e454:	d501      	bpl.n	800e45a <_printf_i+0xbe>
 800e456:	681e      	ldr	r6, [r3, #0]
 800e458:	e003      	b.n	800e462 <_printf_i+0xc6>
 800e45a:	0646      	lsls	r6, r0, #25
 800e45c:	d5fb      	bpl.n	800e456 <_printf_i+0xba>
 800e45e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e462:	2e00      	cmp	r6, #0
 800e464:	da03      	bge.n	800e46e <_printf_i+0xd2>
 800e466:	232d      	movs	r3, #45	; 0x2d
 800e468:	4276      	negs	r6, r6
 800e46a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e46e:	485a      	ldr	r0, [pc, #360]	; (800e5d8 <_printf_i+0x23c>)
 800e470:	230a      	movs	r3, #10
 800e472:	e012      	b.n	800e49a <_printf_i+0xfe>
 800e474:	682b      	ldr	r3, [r5, #0]
 800e476:	6820      	ldr	r0, [r4, #0]
 800e478:	1d19      	adds	r1, r3, #4
 800e47a:	6029      	str	r1, [r5, #0]
 800e47c:	0605      	lsls	r5, r0, #24
 800e47e:	d501      	bpl.n	800e484 <_printf_i+0xe8>
 800e480:	681e      	ldr	r6, [r3, #0]
 800e482:	e002      	b.n	800e48a <_printf_i+0xee>
 800e484:	0641      	lsls	r1, r0, #25
 800e486:	d5fb      	bpl.n	800e480 <_printf_i+0xe4>
 800e488:	881e      	ldrh	r6, [r3, #0]
 800e48a:	4853      	ldr	r0, [pc, #332]	; (800e5d8 <_printf_i+0x23c>)
 800e48c:	2f6f      	cmp	r7, #111	; 0x6f
 800e48e:	bf0c      	ite	eq
 800e490:	2308      	moveq	r3, #8
 800e492:	230a      	movne	r3, #10
 800e494:	2100      	movs	r1, #0
 800e496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e49a:	6865      	ldr	r5, [r4, #4]
 800e49c:	60a5      	str	r5, [r4, #8]
 800e49e:	2d00      	cmp	r5, #0
 800e4a0:	bfa2      	ittt	ge
 800e4a2:	6821      	ldrge	r1, [r4, #0]
 800e4a4:	f021 0104 	bicge.w	r1, r1, #4
 800e4a8:	6021      	strge	r1, [r4, #0]
 800e4aa:	b90e      	cbnz	r6, 800e4b0 <_printf_i+0x114>
 800e4ac:	2d00      	cmp	r5, #0
 800e4ae:	d04b      	beq.n	800e548 <_printf_i+0x1ac>
 800e4b0:	4615      	mov	r5, r2
 800e4b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4b6:	fb03 6711 	mls	r7, r3, r1, r6
 800e4ba:	5dc7      	ldrb	r7, [r0, r7]
 800e4bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4c0:	4637      	mov	r7, r6
 800e4c2:	42bb      	cmp	r3, r7
 800e4c4:	460e      	mov	r6, r1
 800e4c6:	d9f4      	bls.n	800e4b2 <_printf_i+0x116>
 800e4c8:	2b08      	cmp	r3, #8
 800e4ca:	d10b      	bne.n	800e4e4 <_printf_i+0x148>
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	07de      	lsls	r6, r3, #31
 800e4d0:	d508      	bpl.n	800e4e4 <_printf_i+0x148>
 800e4d2:	6923      	ldr	r3, [r4, #16]
 800e4d4:	6861      	ldr	r1, [r4, #4]
 800e4d6:	4299      	cmp	r1, r3
 800e4d8:	bfde      	ittt	le
 800e4da:	2330      	movle	r3, #48	; 0x30
 800e4dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4e4:	1b52      	subs	r2, r2, r5
 800e4e6:	6122      	str	r2, [r4, #16]
 800e4e8:	f8cd a000 	str.w	sl, [sp]
 800e4ec:	464b      	mov	r3, r9
 800e4ee:	aa03      	add	r2, sp, #12
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	f7ff fee4 	bl	800e2c0 <_printf_common>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	d14a      	bne.n	800e592 <_printf_i+0x1f6>
 800e4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e500:	b004      	add	sp, #16
 800e502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	f043 0320 	orr.w	r3, r3, #32
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	4833      	ldr	r0, [pc, #204]	; (800e5dc <_printf_i+0x240>)
 800e510:	2778      	movs	r7, #120	; 0x78
 800e512:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	6829      	ldr	r1, [r5, #0]
 800e51a:	061f      	lsls	r7, r3, #24
 800e51c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e520:	d402      	bmi.n	800e528 <_printf_i+0x18c>
 800e522:	065f      	lsls	r7, r3, #25
 800e524:	bf48      	it	mi
 800e526:	b2b6      	uxthmi	r6, r6
 800e528:	07df      	lsls	r7, r3, #31
 800e52a:	bf48      	it	mi
 800e52c:	f043 0320 	orrmi.w	r3, r3, #32
 800e530:	6029      	str	r1, [r5, #0]
 800e532:	bf48      	it	mi
 800e534:	6023      	strmi	r3, [r4, #0]
 800e536:	b91e      	cbnz	r6, 800e540 <_printf_i+0x1a4>
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	f023 0320 	bic.w	r3, r3, #32
 800e53e:	6023      	str	r3, [r4, #0]
 800e540:	2310      	movs	r3, #16
 800e542:	e7a7      	b.n	800e494 <_printf_i+0xf8>
 800e544:	4824      	ldr	r0, [pc, #144]	; (800e5d8 <_printf_i+0x23c>)
 800e546:	e7e4      	b.n	800e512 <_printf_i+0x176>
 800e548:	4615      	mov	r5, r2
 800e54a:	e7bd      	b.n	800e4c8 <_printf_i+0x12c>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	6826      	ldr	r6, [r4, #0]
 800e550:	6961      	ldr	r1, [r4, #20]
 800e552:	1d18      	adds	r0, r3, #4
 800e554:	6028      	str	r0, [r5, #0]
 800e556:	0635      	lsls	r5, r6, #24
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0x1c4>
 800e55c:	6019      	str	r1, [r3, #0]
 800e55e:	e002      	b.n	800e566 <_printf_i+0x1ca>
 800e560:	0670      	lsls	r0, r6, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0x1c0>
 800e564:	8019      	strh	r1, [r3, #0]
 800e566:	2300      	movs	r3, #0
 800e568:	6123      	str	r3, [r4, #16]
 800e56a:	4615      	mov	r5, r2
 800e56c:	e7bc      	b.n	800e4e8 <_printf_i+0x14c>
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	1d1a      	adds	r2, r3, #4
 800e572:	602a      	str	r2, [r5, #0]
 800e574:	681d      	ldr	r5, [r3, #0]
 800e576:	6862      	ldr	r2, [r4, #4]
 800e578:	2100      	movs	r1, #0
 800e57a:	4628      	mov	r0, r5
 800e57c:	f7f1 fe28 	bl	80001d0 <memchr>
 800e580:	b108      	cbz	r0, 800e586 <_printf_i+0x1ea>
 800e582:	1b40      	subs	r0, r0, r5
 800e584:	6060      	str	r0, [r4, #4]
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	6123      	str	r3, [r4, #16]
 800e58a:	2300      	movs	r3, #0
 800e58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e590:	e7aa      	b.n	800e4e8 <_printf_i+0x14c>
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	462a      	mov	r2, r5
 800e596:	4649      	mov	r1, r9
 800e598:	4640      	mov	r0, r8
 800e59a:	47d0      	blx	sl
 800e59c:	3001      	adds	r0, #1
 800e59e:	d0ad      	beq.n	800e4fc <_printf_i+0x160>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	079b      	lsls	r3, r3, #30
 800e5a4:	d413      	bmi.n	800e5ce <_printf_i+0x232>
 800e5a6:	68e0      	ldr	r0, [r4, #12]
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	bfb8      	it	lt
 800e5ae:	4618      	movlt	r0, r3
 800e5b0:	e7a6      	b.n	800e500 <_printf_i+0x164>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	47d0      	blx	sl
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d09d      	beq.n	800e4fc <_printf_i+0x160>
 800e5c0:	3501      	adds	r5, #1
 800e5c2:	68e3      	ldr	r3, [r4, #12]
 800e5c4:	9903      	ldr	r1, [sp, #12]
 800e5c6:	1a5b      	subs	r3, r3, r1
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	dcf2      	bgt.n	800e5b2 <_printf_i+0x216>
 800e5cc:	e7eb      	b.n	800e5a6 <_printf_i+0x20a>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	f104 0619 	add.w	r6, r4, #25
 800e5d4:	e7f5      	b.n	800e5c2 <_printf_i+0x226>
 800e5d6:	bf00      	nop
 800e5d8:	080124a6 	.word	0x080124a6
 800e5dc:	080124b7 	.word	0x080124b7

0800e5e0 <std>:
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	b510      	push	{r4, lr}
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	e9c0 3300 	strd	r3, r3, [r0]
 800e5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ee:	6083      	str	r3, [r0, #8]
 800e5f0:	8181      	strh	r1, [r0, #12]
 800e5f2:	6643      	str	r3, [r0, #100]	; 0x64
 800e5f4:	81c2      	strh	r2, [r0, #14]
 800e5f6:	6183      	str	r3, [r0, #24]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	2208      	movs	r2, #8
 800e5fc:	305c      	adds	r0, #92	; 0x5c
 800e5fe:	f000 f914 	bl	800e82a <memset>
 800e602:	4b0d      	ldr	r3, [pc, #52]	; (800e638 <std+0x58>)
 800e604:	6263      	str	r3, [r4, #36]	; 0x24
 800e606:	4b0d      	ldr	r3, [pc, #52]	; (800e63c <std+0x5c>)
 800e608:	62a3      	str	r3, [r4, #40]	; 0x28
 800e60a:	4b0d      	ldr	r3, [pc, #52]	; (800e640 <std+0x60>)
 800e60c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e60e:	4b0d      	ldr	r3, [pc, #52]	; (800e644 <std+0x64>)
 800e610:	6323      	str	r3, [r4, #48]	; 0x30
 800e612:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <std+0x68>)
 800e614:	6224      	str	r4, [r4, #32]
 800e616:	429c      	cmp	r4, r3
 800e618:	d006      	beq.n	800e628 <std+0x48>
 800e61a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e61e:	4294      	cmp	r4, r2
 800e620:	d002      	beq.n	800e628 <std+0x48>
 800e622:	33d0      	adds	r3, #208	; 0xd0
 800e624:	429c      	cmp	r4, r3
 800e626:	d105      	bne.n	800e634 <std+0x54>
 800e628:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e630:	f000 b978 	b.w	800e924 <__retarget_lock_init_recursive>
 800e634:	bd10      	pop	{r4, pc}
 800e636:	bf00      	nop
 800e638:	0800e7a5 	.word	0x0800e7a5
 800e63c:	0800e7c7 	.word	0x0800e7c7
 800e640:	0800e7ff 	.word	0x0800e7ff
 800e644:	0800e823 	.word	0x0800e823
 800e648:	200053b4 	.word	0x200053b4

0800e64c <stdio_exit_handler>:
 800e64c:	4a02      	ldr	r2, [pc, #8]	; (800e658 <stdio_exit_handler+0xc>)
 800e64e:	4903      	ldr	r1, [pc, #12]	; (800e65c <stdio_exit_handler+0x10>)
 800e650:	4803      	ldr	r0, [pc, #12]	; (800e660 <stdio_exit_handler+0x14>)
 800e652:	f000 b869 	b.w	800e728 <_fwalk_sglue>
 800e656:	bf00      	nop
 800e658:	20000010 	.word	0x20000010
 800e65c:	080102f1 	.word	0x080102f1
 800e660:	2000001c 	.word	0x2000001c

0800e664 <cleanup_stdio>:
 800e664:	6841      	ldr	r1, [r0, #4]
 800e666:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <cleanup_stdio+0x34>)
 800e668:	4299      	cmp	r1, r3
 800e66a:	b510      	push	{r4, lr}
 800e66c:	4604      	mov	r4, r0
 800e66e:	d001      	beq.n	800e674 <cleanup_stdio+0x10>
 800e670:	f001 fe3e 	bl	80102f0 <_fflush_r>
 800e674:	68a1      	ldr	r1, [r4, #8]
 800e676:	4b09      	ldr	r3, [pc, #36]	; (800e69c <cleanup_stdio+0x38>)
 800e678:	4299      	cmp	r1, r3
 800e67a:	d002      	beq.n	800e682 <cleanup_stdio+0x1e>
 800e67c:	4620      	mov	r0, r4
 800e67e:	f001 fe37 	bl	80102f0 <_fflush_r>
 800e682:	68e1      	ldr	r1, [r4, #12]
 800e684:	4b06      	ldr	r3, [pc, #24]	; (800e6a0 <cleanup_stdio+0x3c>)
 800e686:	4299      	cmp	r1, r3
 800e688:	d004      	beq.n	800e694 <cleanup_stdio+0x30>
 800e68a:	4620      	mov	r0, r4
 800e68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e690:	f001 be2e 	b.w	80102f0 <_fflush_r>
 800e694:	bd10      	pop	{r4, pc}
 800e696:	bf00      	nop
 800e698:	200053b4 	.word	0x200053b4
 800e69c:	2000541c 	.word	0x2000541c
 800e6a0:	20005484 	.word	0x20005484

0800e6a4 <global_stdio_init.part.0>:
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <global_stdio_init.part.0+0x30>)
 800e6a8:	4c0b      	ldr	r4, [pc, #44]	; (800e6d8 <global_stdio_init.part.0+0x34>)
 800e6aa:	4a0c      	ldr	r2, [pc, #48]	; (800e6dc <global_stdio_init.part.0+0x38>)
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2104      	movs	r1, #4
 800e6b4:	f7ff ff94 	bl	800e5e0 <std>
 800e6b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e6bc:	2201      	movs	r2, #1
 800e6be:	2109      	movs	r1, #9
 800e6c0:	f7ff ff8e 	bl	800e5e0 <std>
 800e6c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6ce:	2112      	movs	r1, #18
 800e6d0:	f7ff bf86 	b.w	800e5e0 <std>
 800e6d4:	200054ec 	.word	0x200054ec
 800e6d8:	200053b4 	.word	0x200053b4
 800e6dc:	0800e64d 	.word	0x0800e64d

0800e6e0 <__sfp_lock_acquire>:
 800e6e0:	4801      	ldr	r0, [pc, #4]	; (800e6e8 <__sfp_lock_acquire+0x8>)
 800e6e2:	f000 b920 	b.w	800e926 <__retarget_lock_acquire_recursive>
 800e6e6:	bf00      	nop
 800e6e8:	200054f5 	.word	0x200054f5

0800e6ec <__sfp_lock_release>:
 800e6ec:	4801      	ldr	r0, [pc, #4]	; (800e6f4 <__sfp_lock_release+0x8>)
 800e6ee:	f000 b91b 	b.w	800e928 <__retarget_lock_release_recursive>
 800e6f2:	bf00      	nop
 800e6f4:	200054f5 	.word	0x200054f5

0800e6f8 <__sinit>:
 800e6f8:	b510      	push	{r4, lr}
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	f7ff fff0 	bl	800e6e0 <__sfp_lock_acquire>
 800e700:	6a23      	ldr	r3, [r4, #32]
 800e702:	b11b      	cbz	r3, 800e70c <__sinit+0x14>
 800e704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e708:	f7ff bff0 	b.w	800e6ec <__sfp_lock_release>
 800e70c:	4b04      	ldr	r3, [pc, #16]	; (800e720 <__sinit+0x28>)
 800e70e:	6223      	str	r3, [r4, #32]
 800e710:	4b04      	ldr	r3, [pc, #16]	; (800e724 <__sinit+0x2c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1f5      	bne.n	800e704 <__sinit+0xc>
 800e718:	f7ff ffc4 	bl	800e6a4 <global_stdio_init.part.0>
 800e71c:	e7f2      	b.n	800e704 <__sinit+0xc>
 800e71e:	bf00      	nop
 800e720:	0800e665 	.word	0x0800e665
 800e724:	200054ec 	.word	0x200054ec

0800e728 <_fwalk_sglue>:
 800e728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e72c:	4607      	mov	r7, r0
 800e72e:	4688      	mov	r8, r1
 800e730:	4614      	mov	r4, r2
 800e732:	2600      	movs	r6, #0
 800e734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e738:	f1b9 0901 	subs.w	r9, r9, #1
 800e73c:	d505      	bpl.n	800e74a <_fwalk_sglue+0x22>
 800e73e:	6824      	ldr	r4, [r4, #0]
 800e740:	2c00      	cmp	r4, #0
 800e742:	d1f7      	bne.n	800e734 <_fwalk_sglue+0xc>
 800e744:	4630      	mov	r0, r6
 800e746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e74a:	89ab      	ldrh	r3, [r5, #12]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d907      	bls.n	800e760 <_fwalk_sglue+0x38>
 800e750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e754:	3301      	adds	r3, #1
 800e756:	d003      	beq.n	800e760 <_fwalk_sglue+0x38>
 800e758:	4629      	mov	r1, r5
 800e75a:	4638      	mov	r0, r7
 800e75c:	47c0      	blx	r8
 800e75e:	4306      	orrs	r6, r0
 800e760:	3568      	adds	r5, #104	; 0x68
 800e762:	e7e9      	b.n	800e738 <_fwalk_sglue+0x10>

0800e764 <siprintf>:
 800e764:	b40e      	push	{r1, r2, r3}
 800e766:	b500      	push	{lr}
 800e768:	b09c      	sub	sp, #112	; 0x70
 800e76a:	ab1d      	add	r3, sp, #116	; 0x74
 800e76c:	9002      	str	r0, [sp, #8]
 800e76e:	9006      	str	r0, [sp, #24]
 800e770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e774:	4809      	ldr	r0, [pc, #36]	; (800e79c <siprintf+0x38>)
 800e776:	9107      	str	r1, [sp, #28]
 800e778:	9104      	str	r1, [sp, #16]
 800e77a:	4909      	ldr	r1, [pc, #36]	; (800e7a0 <siprintf+0x3c>)
 800e77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e780:	9105      	str	r1, [sp, #20]
 800e782:	6800      	ldr	r0, [r0, #0]
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	a902      	add	r1, sp, #8
 800e788:	f001 fc2e 	bl	800ffe8 <_svfiprintf_r>
 800e78c:	9b02      	ldr	r3, [sp, #8]
 800e78e:	2200      	movs	r2, #0
 800e790:	701a      	strb	r2, [r3, #0]
 800e792:	b01c      	add	sp, #112	; 0x70
 800e794:	f85d eb04 	ldr.w	lr, [sp], #4
 800e798:	b003      	add	sp, #12
 800e79a:	4770      	bx	lr
 800e79c:	20000068 	.word	0x20000068
 800e7a0:	ffff0208 	.word	0xffff0208

0800e7a4 <__sread>:
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ac:	f000 f86c 	bl	800e888 <_read_r>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	bfab      	itete	ge
 800e7b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e7b8:	181b      	addge	r3, r3, r0
 800e7ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7be:	bfac      	ite	ge
 800e7c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7c2:	81a3      	strhlt	r3, [r4, #12]
 800e7c4:	bd10      	pop	{r4, pc}

0800e7c6 <__swrite>:
 800e7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ca:	461f      	mov	r7, r3
 800e7cc:	898b      	ldrh	r3, [r1, #12]
 800e7ce:	05db      	lsls	r3, r3, #23
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	4616      	mov	r6, r2
 800e7d6:	d505      	bpl.n	800e7e4 <__swrite+0x1e>
 800e7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7dc:	2302      	movs	r3, #2
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f000 f840 	bl	800e864 <_lseek_r>
 800e7e4:	89a3      	ldrh	r3, [r4, #12]
 800e7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7ee:	81a3      	strh	r3, [r4, #12]
 800e7f0:	4632      	mov	r2, r6
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fa:	f000 b857 	b.w	800e8ac <_write_r>

0800e7fe <__sseek>:
 800e7fe:	b510      	push	{r4, lr}
 800e800:	460c      	mov	r4, r1
 800e802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e806:	f000 f82d 	bl	800e864 <_lseek_r>
 800e80a:	1c43      	adds	r3, r0, #1
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	bf15      	itete	ne
 800e810:	6560      	strne	r0, [r4, #84]	; 0x54
 800e812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e81a:	81a3      	strheq	r3, [r4, #12]
 800e81c:	bf18      	it	ne
 800e81e:	81a3      	strhne	r3, [r4, #12]
 800e820:	bd10      	pop	{r4, pc}

0800e822 <__sclose>:
 800e822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e826:	f000 b80d 	b.w	800e844 <_close_r>

0800e82a <memset>:
 800e82a:	4402      	add	r2, r0
 800e82c:	4603      	mov	r3, r0
 800e82e:	4293      	cmp	r3, r2
 800e830:	d100      	bne.n	800e834 <memset+0xa>
 800e832:	4770      	bx	lr
 800e834:	f803 1b01 	strb.w	r1, [r3], #1
 800e838:	e7f9      	b.n	800e82e <memset+0x4>
	...

0800e83c <_localeconv_r>:
 800e83c:	4800      	ldr	r0, [pc, #0]	; (800e840 <_localeconv_r+0x4>)
 800e83e:	4770      	bx	lr
 800e840:	2000015c 	.word	0x2000015c

0800e844 <_close_r>:
 800e844:	b538      	push	{r3, r4, r5, lr}
 800e846:	4d06      	ldr	r5, [pc, #24]	; (800e860 <_close_r+0x1c>)
 800e848:	2300      	movs	r3, #0
 800e84a:	4604      	mov	r4, r0
 800e84c:	4608      	mov	r0, r1
 800e84e:	602b      	str	r3, [r5, #0]
 800e850:	f7f6 fc79 	bl	8005146 <_close>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_close_r+0x1a>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_close_r+0x1a>
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	200054f0 	.word	0x200054f0

0800e864 <_lseek_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d07      	ldr	r5, [pc, #28]	; (800e884 <_lseek_r+0x20>)
 800e868:	4604      	mov	r4, r0
 800e86a:	4608      	mov	r0, r1
 800e86c:	4611      	mov	r1, r2
 800e86e:	2200      	movs	r2, #0
 800e870:	602a      	str	r2, [r5, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	f7f6 fc8e 	bl	8005194 <_lseek>
 800e878:	1c43      	adds	r3, r0, #1
 800e87a:	d102      	bne.n	800e882 <_lseek_r+0x1e>
 800e87c:	682b      	ldr	r3, [r5, #0]
 800e87e:	b103      	cbz	r3, 800e882 <_lseek_r+0x1e>
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	200054f0 	.word	0x200054f0

0800e888 <_read_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4d07      	ldr	r5, [pc, #28]	; (800e8a8 <_read_r+0x20>)
 800e88c:	4604      	mov	r4, r0
 800e88e:	4608      	mov	r0, r1
 800e890:	4611      	mov	r1, r2
 800e892:	2200      	movs	r2, #0
 800e894:	602a      	str	r2, [r5, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f7f6 fc1c 	bl	80050d4 <_read>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d102      	bne.n	800e8a6 <_read_r+0x1e>
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	b103      	cbz	r3, 800e8a6 <_read_r+0x1e>
 800e8a4:	6023      	str	r3, [r4, #0]
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	200054f0 	.word	0x200054f0

0800e8ac <_write_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d07      	ldr	r5, [pc, #28]	; (800e8cc <_write_r+0x20>)
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	4608      	mov	r0, r1
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	602a      	str	r2, [r5, #0]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	f7f6 fc27 	bl	800510e <_write>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d102      	bne.n	800e8ca <_write_r+0x1e>
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	b103      	cbz	r3, 800e8ca <_write_r+0x1e>
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	bd38      	pop	{r3, r4, r5, pc}
 800e8cc:	200054f0 	.word	0x200054f0

0800e8d0 <__errno>:
 800e8d0:	4b01      	ldr	r3, [pc, #4]	; (800e8d8 <__errno+0x8>)
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	20000068 	.word	0x20000068

0800e8dc <__libc_init_array>:
 800e8dc:	b570      	push	{r4, r5, r6, lr}
 800e8de:	4d0d      	ldr	r5, [pc, #52]	; (800e914 <__libc_init_array+0x38>)
 800e8e0:	4c0d      	ldr	r4, [pc, #52]	; (800e918 <__libc_init_array+0x3c>)
 800e8e2:	1b64      	subs	r4, r4, r5
 800e8e4:	10a4      	asrs	r4, r4, #2
 800e8e6:	2600      	movs	r6, #0
 800e8e8:	42a6      	cmp	r6, r4
 800e8ea:	d109      	bne.n	800e900 <__libc_init_array+0x24>
 800e8ec:	4d0b      	ldr	r5, [pc, #44]	; (800e91c <__libc_init_array+0x40>)
 800e8ee:	4c0c      	ldr	r4, [pc, #48]	; (800e920 <__libc_init_array+0x44>)
 800e8f0:	f002 ffce 	bl	8011890 <_init>
 800e8f4:	1b64      	subs	r4, r4, r5
 800e8f6:	10a4      	asrs	r4, r4, #2
 800e8f8:	2600      	movs	r6, #0
 800e8fa:	42a6      	cmp	r6, r4
 800e8fc:	d105      	bne.n	800e90a <__libc_init_array+0x2e>
 800e8fe:	bd70      	pop	{r4, r5, r6, pc}
 800e900:	f855 3b04 	ldr.w	r3, [r5], #4
 800e904:	4798      	blx	r3
 800e906:	3601      	adds	r6, #1
 800e908:	e7ee      	b.n	800e8e8 <__libc_init_array+0xc>
 800e90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e90e:	4798      	blx	r3
 800e910:	3601      	adds	r6, #1
 800e912:	e7f2      	b.n	800e8fa <__libc_init_array+0x1e>
 800e914:	08012840 	.word	0x08012840
 800e918:	08012840 	.word	0x08012840
 800e91c:	08012840 	.word	0x08012840
 800e920:	08012844 	.word	0x08012844

0800e924 <__retarget_lock_init_recursive>:
 800e924:	4770      	bx	lr

0800e926 <__retarget_lock_acquire_recursive>:
 800e926:	4770      	bx	lr

0800e928 <__retarget_lock_release_recursive>:
 800e928:	4770      	bx	lr

0800e92a <memcpy>:
 800e92a:	440a      	add	r2, r1
 800e92c:	4291      	cmp	r1, r2
 800e92e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e932:	d100      	bne.n	800e936 <memcpy+0xc>
 800e934:	4770      	bx	lr
 800e936:	b510      	push	{r4, lr}
 800e938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e93c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e940:	4291      	cmp	r1, r2
 800e942:	d1f9      	bne.n	800e938 <memcpy+0xe>
 800e944:	bd10      	pop	{r4, pc}

0800e946 <quorem>:
 800e946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94a:	6903      	ldr	r3, [r0, #16]
 800e94c:	690c      	ldr	r4, [r1, #16]
 800e94e:	42a3      	cmp	r3, r4
 800e950:	4607      	mov	r7, r0
 800e952:	db7e      	blt.n	800ea52 <quorem+0x10c>
 800e954:	3c01      	subs	r4, #1
 800e956:	f101 0814 	add.w	r8, r1, #20
 800e95a:	f100 0514 	add.w	r5, r0, #20
 800e95e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e962:	9301      	str	r3, [sp, #4]
 800e964:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e96c:	3301      	adds	r3, #1
 800e96e:	429a      	cmp	r2, r3
 800e970:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e978:	fbb2 f6f3 	udiv	r6, r2, r3
 800e97c:	d331      	bcc.n	800e9e2 <quorem+0x9c>
 800e97e:	f04f 0e00 	mov.w	lr, #0
 800e982:	4640      	mov	r0, r8
 800e984:	46ac      	mov	ip, r5
 800e986:	46f2      	mov	sl, lr
 800e988:	f850 2b04 	ldr.w	r2, [r0], #4
 800e98c:	b293      	uxth	r3, r2
 800e98e:	fb06 e303 	mla	r3, r6, r3, lr
 800e992:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e996:	0c1a      	lsrs	r2, r3, #16
 800e998:	b29b      	uxth	r3, r3
 800e99a:	ebaa 0303 	sub.w	r3, sl, r3
 800e99e:	f8dc a000 	ldr.w	sl, [ip]
 800e9a2:	fa13 f38a 	uxtah	r3, r3, sl
 800e9a6:	fb06 220e 	mla	r2, r6, lr, r2
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	9b00      	ldr	r3, [sp, #0]
 800e9ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e9b2:	b292      	uxth	r2, r2
 800e9b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e9b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e9c0:	4581      	cmp	r9, r0
 800e9c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9c6:	f84c 3b04 	str.w	r3, [ip], #4
 800e9ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e9ce:	d2db      	bcs.n	800e988 <quorem+0x42>
 800e9d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e9d4:	b92b      	cbnz	r3, 800e9e2 <quorem+0x9c>
 800e9d6:	9b01      	ldr	r3, [sp, #4]
 800e9d8:	3b04      	subs	r3, #4
 800e9da:	429d      	cmp	r5, r3
 800e9dc:	461a      	mov	r2, r3
 800e9de:	d32c      	bcc.n	800ea3a <quorem+0xf4>
 800e9e0:	613c      	str	r4, [r7, #16]
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	f001 f9a6 	bl	800fd34 <__mcmp>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	db22      	blt.n	800ea32 <quorem+0xec>
 800e9ec:	3601      	adds	r6, #1
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9f6:	f8d1 c000 	ldr.w	ip, [r1]
 800e9fa:	b293      	uxth	r3, r2
 800e9fc:	1ac3      	subs	r3, r0, r3
 800e9fe:	0c12      	lsrs	r2, r2, #16
 800ea00:	fa13 f38c 	uxtah	r3, r3, ip
 800ea04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ea08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea12:	45c1      	cmp	r9, r8
 800ea14:	f841 3b04 	str.w	r3, [r1], #4
 800ea18:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ea1c:	d2e9      	bcs.n	800e9f2 <quorem+0xac>
 800ea1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea26:	b922      	cbnz	r2, 800ea32 <quorem+0xec>
 800ea28:	3b04      	subs	r3, #4
 800ea2a:	429d      	cmp	r5, r3
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	d30a      	bcc.n	800ea46 <quorem+0x100>
 800ea30:	613c      	str	r4, [r7, #16]
 800ea32:	4630      	mov	r0, r6
 800ea34:	b003      	add	sp, #12
 800ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3a:	6812      	ldr	r2, [r2, #0]
 800ea3c:	3b04      	subs	r3, #4
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	d1ce      	bne.n	800e9e0 <quorem+0x9a>
 800ea42:	3c01      	subs	r4, #1
 800ea44:	e7c9      	b.n	800e9da <quorem+0x94>
 800ea46:	6812      	ldr	r2, [r2, #0]
 800ea48:	3b04      	subs	r3, #4
 800ea4a:	2a00      	cmp	r2, #0
 800ea4c:	d1f0      	bne.n	800ea30 <quorem+0xea>
 800ea4e:	3c01      	subs	r4, #1
 800ea50:	e7eb      	b.n	800ea2a <quorem+0xe4>
 800ea52:	2000      	movs	r0, #0
 800ea54:	e7ee      	b.n	800ea34 <quorem+0xee>
	...

0800ea58 <_dtoa_r>:
 800ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	ed2d 8b04 	vpush	{d8-d9}
 800ea60:	69c5      	ldr	r5, [r0, #28]
 800ea62:	b093      	sub	sp, #76	; 0x4c
 800ea64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea68:	ec57 6b10 	vmov	r6, r7, d0
 800ea6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ea70:	9107      	str	r1, [sp, #28]
 800ea72:	4604      	mov	r4, r0
 800ea74:	920a      	str	r2, [sp, #40]	; 0x28
 800ea76:	930d      	str	r3, [sp, #52]	; 0x34
 800ea78:	b975      	cbnz	r5, 800ea98 <_dtoa_r+0x40>
 800ea7a:	2010      	movs	r0, #16
 800ea7c:	f000 fe2a 	bl	800f6d4 <malloc>
 800ea80:	4602      	mov	r2, r0
 800ea82:	61e0      	str	r0, [r4, #28]
 800ea84:	b920      	cbnz	r0, 800ea90 <_dtoa_r+0x38>
 800ea86:	4bae      	ldr	r3, [pc, #696]	; (800ed40 <_dtoa_r+0x2e8>)
 800ea88:	21ef      	movs	r1, #239	; 0xef
 800ea8a:	48ae      	ldr	r0, [pc, #696]	; (800ed44 <_dtoa_r+0x2ec>)
 800ea8c:	f001 fc82 	bl	8010394 <__assert_func>
 800ea90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ea94:	6005      	str	r5, [r0, #0]
 800ea96:	60c5      	str	r5, [r0, #12]
 800ea98:	69e3      	ldr	r3, [r4, #28]
 800ea9a:	6819      	ldr	r1, [r3, #0]
 800ea9c:	b151      	cbz	r1, 800eab4 <_dtoa_r+0x5c>
 800ea9e:	685a      	ldr	r2, [r3, #4]
 800eaa0:	604a      	str	r2, [r1, #4]
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	4093      	lsls	r3, r2
 800eaa6:	608b      	str	r3, [r1, #8]
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 ff07 	bl	800f8bc <_Bfree>
 800eaae:	69e3      	ldr	r3, [r4, #28]
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	1e3b      	subs	r3, r7, #0
 800eab6:	bfbb      	ittet	lt
 800eab8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eabc:	9303      	strlt	r3, [sp, #12]
 800eabe:	2300      	movge	r3, #0
 800eac0:	2201      	movlt	r2, #1
 800eac2:	bfac      	ite	ge
 800eac4:	f8c8 3000 	strge.w	r3, [r8]
 800eac8:	f8c8 2000 	strlt.w	r2, [r8]
 800eacc:	4b9e      	ldr	r3, [pc, #632]	; (800ed48 <_dtoa_r+0x2f0>)
 800eace:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ead2:	ea33 0308 	bics.w	r3, r3, r8
 800ead6:	d11b      	bne.n	800eb10 <_dtoa_r+0xb8>
 800ead8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eada:	f242 730f 	movw	r3, #9999	; 0x270f
 800eade:	6013      	str	r3, [r2, #0]
 800eae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800eae4:	4333      	orrs	r3, r6
 800eae6:	f000 8593 	beq.w	800f610 <_dtoa_r+0xbb8>
 800eaea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eaec:	b963      	cbnz	r3, 800eb08 <_dtoa_r+0xb0>
 800eaee:	4b97      	ldr	r3, [pc, #604]	; (800ed4c <_dtoa_r+0x2f4>)
 800eaf0:	e027      	b.n	800eb42 <_dtoa_r+0xea>
 800eaf2:	4b97      	ldr	r3, [pc, #604]	; (800ed50 <_dtoa_r+0x2f8>)
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	3308      	adds	r3, #8
 800eaf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eafa:	6013      	str	r3, [r2, #0]
 800eafc:	9800      	ldr	r0, [sp, #0]
 800eafe:	b013      	add	sp, #76	; 0x4c
 800eb00:	ecbd 8b04 	vpop	{d8-d9}
 800eb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb08:	4b90      	ldr	r3, [pc, #576]	; (800ed4c <_dtoa_r+0x2f4>)
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	3303      	adds	r3, #3
 800eb0e:	e7f3      	b.n	800eaf8 <_dtoa_r+0xa0>
 800eb10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb14:	2200      	movs	r2, #0
 800eb16:	ec51 0b17 	vmov	r0, r1, d7
 800eb1a:	eeb0 8a47 	vmov.f32	s16, s14
 800eb1e:	eef0 8a67 	vmov.f32	s17, s15
 800eb22:	2300      	movs	r3, #0
 800eb24:	f7f1 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb28:	4681      	mov	r9, r0
 800eb2a:	b160      	cbz	r0, 800eb46 <_dtoa_r+0xee>
 800eb2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb2e:	2301      	movs	r3, #1
 800eb30:	6013      	str	r3, [r2, #0]
 800eb32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f000 8568 	beq.w	800f60a <_dtoa_r+0xbb2>
 800eb3a:	4b86      	ldr	r3, [pc, #536]	; (800ed54 <_dtoa_r+0x2fc>)
 800eb3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb3e:	6013      	str	r3, [r2, #0]
 800eb40:	3b01      	subs	r3, #1
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	e7da      	b.n	800eafc <_dtoa_r+0xa4>
 800eb46:	aa10      	add	r2, sp, #64	; 0x40
 800eb48:	a911      	add	r1, sp, #68	; 0x44
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb50:	eef0 0a68 	vmov.f32	s1, s17
 800eb54:	f001 f994 	bl	800fe80 <__d2b>
 800eb58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	2d00      	cmp	r5, #0
 800eb60:	d07f      	beq.n	800ec62 <_dtoa_r+0x20a>
 800eb62:	ee18 3a90 	vmov	r3, s17
 800eb66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800eb6e:	ec51 0b18 	vmov	r0, r1, d8
 800eb72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eb76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eb7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eb7e:	4619      	mov	r1, r3
 800eb80:	2200      	movs	r2, #0
 800eb82:	4b75      	ldr	r3, [pc, #468]	; (800ed58 <_dtoa_r+0x300>)
 800eb84:	f7f1 fb80 	bl	8000288 <__aeabi_dsub>
 800eb88:	a367      	add	r3, pc, #412	; (adr r3, 800ed28 <_dtoa_r+0x2d0>)
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	f7f1 fd33 	bl	80005f8 <__aeabi_dmul>
 800eb92:	a367      	add	r3, pc, #412	; (adr r3, 800ed30 <_dtoa_r+0x2d8>)
 800eb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb98:	f7f1 fb78 	bl	800028c <__adddf3>
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	4628      	mov	r0, r5
 800eba0:	460f      	mov	r7, r1
 800eba2:	f7f1 fcbf 	bl	8000524 <__aeabi_i2d>
 800eba6:	a364      	add	r3, pc, #400	; (adr r3, 800ed38 <_dtoa_r+0x2e0>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	f7f1 fd24 	bl	80005f8 <__aeabi_dmul>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	f7f1 fb68 	bl	800028c <__adddf3>
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	460f      	mov	r7, r1
 800ebc0:	f7f1 ffca 	bl	8000b58 <__aeabi_d2iz>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4683      	mov	fp, r0
 800ebc8:	2300      	movs	r3, #0
 800ebca:	4630      	mov	r0, r6
 800ebcc:	4639      	mov	r1, r7
 800ebce:	f7f1 ff85 	bl	8000adc <__aeabi_dcmplt>
 800ebd2:	b148      	cbz	r0, 800ebe8 <_dtoa_r+0x190>
 800ebd4:	4658      	mov	r0, fp
 800ebd6:	f7f1 fca5 	bl	8000524 <__aeabi_i2d>
 800ebda:	4632      	mov	r2, r6
 800ebdc:	463b      	mov	r3, r7
 800ebde:	f7f1 ff73 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebe2:	b908      	cbnz	r0, 800ebe8 <_dtoa_r+0x190>
 800ebe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebe8:	f1bb 0f16 	cmp.w	fp, #22
 800ebec:	d857      	bhi.n	800ec9e <_dtoa_r+0x246>
 800ebee:	4b5b      	ldr	r3, [pc, #364]	; (800ed5c <_dtoa_r+0x304>)
 800ebf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	ec51 0b18 	vmov	r0, r1, d8
 800ebfc:	f7f1 ff6e 	bl	8000adc <__aeabi_dcmplt>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d04e      	beq.n	800eca2 <_dtoa_r+0x24a>
 800ec04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec08:	2300      	movs	r3, #0
 800ec0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ec0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec0e:	1b5b      	subs	r3, r3, r5
 800ec10:	1e5a      	subs	r2, r3, #1
 800ec12:	bf45      	ittet	mi
 800ec14:	f1c3 0301 	rsbmi	r3, r3, #1
 800ec18:	9305      	strmi	r3, [sp, #20]
 800ec1a:	2300      	movpl	r3, #0
 800ec1c:	2300      	movmi	r3, #0
 800ec1e:	9206      	str	r2, [sp, #24]
 800ec20:	bf54      	ite	pl
 800ec22:	9305      	strpl	r3, [sp, #20]
 800ec24:	9306      	strmi	r3, [sp, #24]
 800ec26:	f1bb 0f00 	cmp.w	fp, #0
 800ec2a:	db3c      	blt.n	800eca6 <_dtoa_r+0x24e>
 800ec2c:	9b06      	ldr	r3, [sp, #24]
 800ec2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ec32:	445b      	add	r3, fp
 800ec34:	9306      	str	r3, [sp, #24]
 800ec36:	2300      	movs	r3, #0
 800ec38:	9308      	str	r3, [sp, #32]
 800ec3a:	9b07      	ldr	r3, [sp, #28]
 800ec3c:	2b09      	cmp	r3, #9
 800ec3e:	d868      	bhi.n	800ed12 <_dtoa_r+0x2ba>
 800ec40:	2b05      	cmp	r3, #5
 800ec42:	bfc4      	itt	gt
 800ec44:	3b04      	subgt	r3, #4
 800ec46:	9307      	strgt	r3, [sp, #28]
 800ec48:	9b07      	ldr	r3, [sp, #28]
 800ec4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ec4e:	bfcc      	ite	gt
 800ec50:	2500      	movgt	r5, #0
 800ec52:	2501      	movle	r5, #1
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	f200 8085 	bhi.w	800ed64 <_dtoa_r+0x30c>
 800ec5a:	e8df f003 	tbb	[pc, r3]
 800ec5e:	3b2e      	.short	0x3b2e
 800ec60:	5839      	.short	0x5839
 800ec62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ec66:	441d      	add	r5, r3
 800ec68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ec6c:	2b20      	cmp	r3, #32
 800ec6e:	bfc1      	itttt	gt
 800ec70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec74:	fa08 f803 	lslgt.w	r8, r8, r3
 800ec78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ec7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ec80:	bfd6      	itet	le
 800ec82:	f1c3 0320 	rsble	r3, r3, #32
 800ec86:	ea48 0003 	orrgt.w	r0, r8, r3
 800ec8a:	fa06 f003 	lslle.w	r0, r6, r3
 800ec8e:	f7f1 fc39 	bl	8000504 <__aeabi_ui2d>
 800ec92:	2201      	movs	r2, #1
 800ec94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ec98:	3d01      	subs	r5, #1
 800ec9a:	920e      	str	r2, [sp, #56]	; 0x38
 800ec9c:	e76f      	b.n	800eb7e <_dtoa_r+0x126>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e7b3      	b.n	800ec0a <_dtoa_r+0x1b2>
 800eca2:	900c      	str	r0, [sp, #48]	; 0x30
 800eca4:	e7b2      	b.n	800ec0c <_dtoa_r+0x1b4>
 800eca6:	9b05      	ldr	r3, [sp, #20]
 800eca8:	eba3 030b 	sub.w	r3, r3, fp
 800ecac:	9305      	str	r3, [sp, #20]
 800ecae:	f1cb 0300 	rsb	r3, fp, #0
 800ecb2:	9308      	str	r3, [sp, #32]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecb8:	e7bf      	b.n	800ec3a <_dtoa_r+0x1e2>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	dc52      	bgt.n	800ed6a <_dtoa_r+0x312>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	9301      	str	r3, [sp, #4]
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	461a      	mov	r2, r3
 800eccc:	920a      	str	r2, [sp, #40]	; 0x28
 800ecce:	e00b      	b.n	800ece8 <_dtoa_r+0x290>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e7f3      	b.n	800ecbc <_dtoa_r+0x264>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecda:	445b      	add	r3, fp
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	3301      	adds	r3, #1
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	bfb8      	it	lt
 800ece6:	2301      	movlt	r3, #1
 800ece8:	69e0      	ldr	r0, [r4, #28]
 800ecea:	2100      	movs	r1, #0
 800ecec:	2204      	movs	r2, #4
 800ecee:	f102 0614 	add.w	r6, r2, #20
 800ecf2:	429e      	cmp	r6, r3
 800ecf4:	d93d      	bls.n	800ed72 <_dtoa_r+0x31a>
 800ecf6:	6041      	str	r1, [r0, #4]
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fd9f 	bl	800f83c <_Balloc>
 800ecfe:	9000      	str	r0, [sp, #0]
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d139      	bne.n	800ed78 <_dtoa_r+0x320>
 800ed04:	4b16      	ldr	r3, [pc, #88]	; (800ed60 <_dtoa_r+0x308>)
 800ed06:	4602      	mov	r2, r0
 800ed08:	f240 11af 	movw	r1, #431	; 0x1af
 800ed0c:	e6bd      	b.n	800ea8a <_dtoa_r+0x32>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e7e1      	b.n	800ecd6 <_dtoa_r+0x27e>
 800ed12:	2501      	movs	r5, #1
 800ed14:	2300      	movs	r3, #0
 800ed16:	9307      	str	r3, [sp, #28]
 800ed18:	9509      	str	r5, [sp, #36]	; 0x24
 800ed1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed1e:	9301      	str	r3, [sp, #4]
 800ed20:	9304      	str	r3, [sp, #16]
 800ed22:	2200      	movs	r2, #0
 800ed24:	2312      	movs	r3, #18
 800ed26:	e7d1      	b.n	800eccc <_dtoa_r+0x274>
 800ed28:	636f4361 	.word	0x636f4361
 800ed2c:	3fd287a7 	.word	0x3fd287a7
 800ed30:	8b60c8b3 	.word	0x8b60c8b3
 800ed34:	3fc68a28 	.word	0x3fc68a28
 800ed38:	509f79fb 	.word	0x509f79fb
 800ed3c:	3fd34413 	.word	0x3fd34413
 800ed40:	080124d5 	.word	0x080124d5
 800ed44:	080124ec 	.word	0x080124ec
 800ed48:	7ff00000 	.word	0x7ff00000
 800ed4c:	080124d1 	.word	0x080124d1
 800ed50:	080124c8 	.word	0x080124c8
 800ed54:	080124a5 	.word	0x080124a5
 800ed58:	3ff80000 	.word	0x3ff80000
 800ed5c:	080125d8 	.word	0x080125d8
 800ed60:	08012544 	.word	0x08012544
 800ed64:	2301      	movs	r3, #1
 800ed66:	9309      	str	r3, [sp, #36]	; 0x24
 800ed68:	e7d7      	b.n	800ed1a <_dtoa_r+0x2c2>
 800ed6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed6c:	9301      	str	r3, [sp, #4]
 800ed6e:	9304      	str	r3, [sp, #16]
 800ed70:	e7ba      	b.n	800ece8 <_dtoa_r+0x290>
 800ed72:	3101      	adds	r1, #1
 800ed74:	0052      	lsls	r2, r2, #1
 800ed76:	e7ba      	b.n	800ecee <_dtoa_r+0x296>
 800ed78:	69e3      	ldr	r3, [r4, #28]
 800ed7a:	9a00      	ldr	r2, [sp, #0]
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	9b04      	ldr	r3, [sp, #16]
 800ed80:	2b0e      	cmp	r3, #14
 800ed82:	f200 80a8 	bhi.w	800eed6 <_dtoa_r+0x47e>
 800ed86:	2d00      	cmp	r5, #0
 800ed88:	f000 80a5 	beq.w	800eed6 <_dtoa_r+0x47e>
 800ed8c:	f1bb 0f00 	cmp.w	fp, #0
 800ed90:	dd38      	ble.n	800ee04 <_dtoa_r+0x3ac>
 800ed92:	4bc0      	ldr	r3, [pc, #768]	; (800f094 <_dtoa_r+0x63c>)
 800ed94:	f00b 020f 	and.w	r2, fp, #15
 800ed98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eda0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eda4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eda8:	d019      	beq.n	800edde <_dtoa_r+0x386>
 800edaa:	4bbb      	ldr	r3, [pc, #748]	; (800f098 <_dtoa_r+0x640>)
 800edac:	ec51 0b18 	vmov	r0, r1, d8
 800edb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800edb4:	f7f1 fd4a 	bl	800084c <__aeabi_ddiv>
 800edb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edbc:	f008 080f 	and.w	r8, r8, #15
 800edc0:	2503      	movs	r5, #3
 800edc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f098 <_dtoa_r+0x640>
 800edc6:	f1b8 0f00 	cmp.w	r8, #0
 800edca:	d10a      	bne.n	800ede2 <_dtoa_r+0x38a>
 800edcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edd0:	4632      	mov	r2, r6
 800edd2:	463b      	mov	r3, r7
 800edd4:	f7f1 fd3a 	bl	800084c <__aeabi_ddiv>
 800edd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eddc:	e02b      	b.n	800ee36 <_dtoa_r+0x3de>
 800edde:	2502      	movs	r5, #2
 800ede0:	e7ef      	b.n	800edc2 <_dtoa_r+0x36a>
 800ede2:	f018 0f01 	tst.w	r8, #1
 800ede6:	d008      	beq.n	800edfa <_dtoa_r+0x3a2>
 800ede8:	4630      	mov	r0, r6
 800edea:	4639      	mov	r1, r7
 800edec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800edf0:	f7f1 fc02 	bl	80005f8 <__aeabi_dmul>
 800edf4:	3501      	adds	r5, #1
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800edfe:	f109 0908 	add.w	r9, r9, #8
 800ee02:	e7e0      	b.n	800edc6 <_dtoa_r+0x36e>
 800ee04:	f000 809f 	beq.w	800ef46 <_dtoa_r+0x4ee>
 800ee08:	f1cb 0600 	rsb	r6, fp, #0
 800ee0c:	4ba1      	ldr	r3, [pc, #644]	; (800f094 <_dtoa_r+0x63c>)
 800ee0e:	4fa2      	ldr	r7, [pc, #648]	; (800f098 <_dtoa_r+0x640>)
 800ee10:	f006 020f 	and.w	r2, r6, #15
 800ee14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	ec51 0b18 	vmov	r0, r1, d8
 800ee20:	f7f1 fbea 	bl	80005f8 <__aeabi_dmul>
 800ee24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee28:	1136      	asrs	r6, r6, #4
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	2502      	movs	r5, #2
 800ee2e:	2e00      	cmp	r6, #0
 800ee30:	d17e      	bne.n	800ef30 <_dtoa_r+0x4d8>
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1d0      	bne.n	800edd8 <_dtoa_r+0x380>
 800ee36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 8084 	beq.w	800ef4a <_dtoa_r+0x4f2>
 800ee42:	4b96      	ldr	r3, [pc, #600]	; (800f09c <_dtoa_r+0x644>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	4640      	mov	r0, r8
 800ee48:	4649      	mov	r1, r9
 800ee4a:	f7f1 fe47 	bl	8000adc <__aeabi_dcmplt>
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d07b      	beq.n	800ef4a <_dtoa_r+0x4f2>
 800ee52:	9b04      	ldr	r3, [sp, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d078      	beq.n	800ef4a <_dtoa_r+0x4f2>
 800ee58:	9b01      	ldr	r3, [sp, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	dd39      	ble.n	800eed2 <_dtoa_r+0x47a>
 800ee5e:	4b90      	ldr	r3, [pc, #576]	; (800f0a0 <_dtoa_r+0x648>)
 800ee60:	2200      	movs	r2, #0
 800ee62:	4640      	mov	r0, r8
 800ee64:	4649      	mov	r1, r9
 800ee66:	f7f1 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ee6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee6e:	9e01      	ldr	r6, [sp, #4]
 800ee70:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ee74:	3501      	adds	r5, #1
 800ee76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f7f1 fb52 	bl	8000524 <__aeabi_i2d>
 800ee80:	4642      	mov	r2, r8
 800ee82:	464b      	mov	r3, r9
 800ee84:	f7f1 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ee88:	4b86      	ldr	r3, [pc, #536]	; (800f0a4 <_dtoa_r+0x64c>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f7f1 f9fe 	bl	800028c <__adddf3>
 800ee90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ee94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee98:	9303      	str	r3, [sp, #12]
 800ee9a:	2e00      	cmp	r6, #0
 800ee9c:	d158      	bne.n	800ef50 <_dtoa_r+0x4f8>
 800ee9e:	4b82      	ldr	r3, [pc, #520]	; (800f0a8 <_dtoa_r+0x650>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	4640      	mov	r0, r8
 800eea4:	4649      	mov	r1, r9
 800eea6:	f7f1 f9ef 	bl	8000288 <__aeabi_dsub>
 800eeaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eeae:	4680      	mov	r8, r0
 800eeb0:	4689      	mov	r9, r1
 800eeb2:	f7f1 fe31 	bl	8000b18 <__aeabi_dcmpgt>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	f040 8296 	bne.w	800f3e8 <_dtoa_r+0x990>
 800eebc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eec0:	4640      	mov	r0, r8
 800eec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eec6:	4649      	mov	r1, r9
 800eec8:	f7f1 fe08 	bl	8000adc <__aeabi_dcmplt>
 800eecc:	2800      	cmp	r0, #0
 800eece:	f040 8289 	bne.w	800f3e4 <_dtoa_r+0x98c>
 800eed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800eed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f2c0 814e 	blt.w	800f17a <_dtoa_r+0x722>
 800eede:	f1bb 0f0e 	cmp.w	fp, #14
 800eee2:	f300 814a 	bgt.w	800f17a <_dtoa_r+0x722>
 800eee6:	4b6b      	ldr	r3, [pc, #428]	; (800f094 <_dtoa_r+0x63c>)
 800eee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eeec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f280 80dc 	bge.w	800f0b0 <_dtoa_r+0x658>
 800eef8:	9b04      	ldr	r3, [sp, #16]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f300 80d8 	bgt.w	800f0b0 <_dtoa_r+0x658>
 800ef00:	f040 826f 	bne.w	800f3e2 <_dtoa_r+0x98a>
 800ef04:	4b68      	ldr	r3, [pc, #416]	; (800f0a8 <_dtoa_r+0x650>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	4640      	mov	r0, r8
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	f7f1 fb74 	bl	80005f8 <__aeabi_dmul>
 800ef10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef14:	f7f1 fdf6 	bl	8000b04 <__aeabi_dcmpge>
 800ef18:	9e04      	ldr	r6, [sp, #16]
 800ef1a:	4637      	mov	r7, r6
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f040 8245 	bne.w	800f3ac <_dtoa_r+0x954>
 800ef22:	9d00      	ldr	r5, [sp, #0]
 800ef24:	2331      	movs	r3, #49	; 0x31
 800ef26:	f805 3b01 	strb.w	r3, [r5], #1
 800ef2a:	f10b 0b01 	add.w	fp, fp, #1
 800ef2e:	e241      	b.n	800f3b4 <_dtoa_r+0x95c>
 800ef30:	07f2      	lsls	r2, r6, #31
 800ef32:	d505      	bpl.n	800ef40 <_dtoa_r+0x4e8>
 800ef34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef38:	f7f1 fb5e 	bl	80005f8 <__aeabi_dmul>
 800ef3c:	3501      	adds	r5, #1
 800ef3e:	2301      	movs	r3, #1
 800ef40:	1076      	asrs	r6, r6, #1
 800ef42:	3708      	adds	r7, #8
 800ef44:	e773      	b.n	800ee2e <_dtoa_r+0x3d6>
 800ef46:	2502      	movs	r5, #2
 800ef48:	e775      	b.n	800ee36 <_dtoa_r+0x3de>
 800ef4a:	9e04      	ldr	r6, [sp, #16]
 800ef4c:	465f      	mov	r7, fp
 800ef4e:	e792      	b.n	800ee76 <_dtoa_r+0x41e>
 800ef50:	9900      	ldr	r1, [sp, #0]
 800ef52:	4b50      	ldr	r3, [pc, #320]	; (800f094 <_dtoa_r+0x63c>)
 800ef54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef58:	4431      	add	r1, r6
 800ef5a:	9102      	str	r1, [sp, #8]
 800ef5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef5e:	eeb0 9a47 	vmov.f32	s18, s14
 800ef62:	eef0 9a67 	vmov.f32	s19, s15
 800ef66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	d044      	beq.n	800effc <_dtoa_r+0x5a4>
 800ef72:	494e      	ldr	r1, [pc, #312]	; (800f0ac <_dtoa_r+0x654>)
 800ef74:	2000      	movs	r0, #0
 800ef76:	f7f1 fc69 	bl	800084c <__aeabi_ddiv>
 800ef7a:	ec53 2b19 	vmov	r2, r3, d9
 800ef7e:	f7f1 f983 	bl	8000288 <__aeabi_dsub>
 800ef82:	9d00      	ldr	r5, [sp, #0]
 800ef84:	ec41 0b19 	vmov	d9, r0, r1
 800ef88:	4649      	mov	r1, r9
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	f7f1 fde4 	bl	8000b58 <__aeabi_d2iz>
 800ef90:	4606      	mov	r6, r0
 800ef92:	f7f1 fac7 	bl	8000524 <__aeabi_i2d>
 800ef96:	4602      	mov	r2, r0
 800ef98:	460b      	mov	r3, r1
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	4649      	mov	r1, r9
 800ef9e:	f7f1 f973 	bl	8000288 <__aeabi_dsub>
 800efa2:	3630      	adds	r6, #48	; 0x30
 800efa4:	f805 6b01 	strb.w	r6, [r5], #1
 800efa8:	ec53 2b19 	vmov	r2, r3, d9
 800efac:	4680      	mov	r8, r0
 800efae:	4689      	mov	r9, r1
 800efb0:	f7f1 fd94 	bl	8000adc <__aeabi_dcmplt>
 800efb4:	2800      	cmp	r0, #0
 800efb6:	d164      	bne.n	800f082 <_dtoa_r+0x62a>
 800efb8:	4642      	mov	r2, r8
 800efba:	464b      	mov	r3, r9
 800efbc:	4937      	ldr	r1, [pc, #220]	; (800f09c <_dtoa_r+0x644>)
 800efbe:	2000      	movs	r0, #0
 800efc0:	f7f1 f962 	bl	8000288 <__aeabi_dsub>
 800efc4:	ec53 2b19 	vmov	r2, r3, d9
 800efc8:	f7f1 fd88 	bl	8000adc <__aeabi_dcmplt>
 800efcc:	2800      	cmp	r0, #0
 800efce:	f040 80b6 	bne.w	800f13e <_dtoa_r+0x6e6>
 800efd2:	9b02      	ldr	r3, [sp, #8]
 800efd4:	429d      	cmp	r5, r3
 800efd6:	f43f af7c 	beq.w	800eed2 <_dtoa_r+0x47a>
 800efda:	4b31      	ldr	r3, [pc, #196]	; (800f0a0 <_dtoa_r+0x648>)
 800efdc:	ec51 0b19 	vmov	r0, r1, d9
 800efe0:	2200      	movs	r2, #0
 800efe2:	f7f1 fb09 	bl	80005f8 <__aeabi_dmul>
 800efe6:	4b2e      	ldr	r3, [pc, #184]	; (800f0a0 <_dtoa_r+0x648>)
 800efe8:	ec41 0b19 	vmov	d9, r0, r1
 800efec:	2200      	movs	r2, #0
 800efee:	4640      	mov	r0, r8
 800eff0:	4649      	mov	r1, r9
 800eff2:	f7f1 fb01 	bl	80005f8 <__aeabi_dmul>
 800eff6:	4680      	mov	r8, r0
 800eff8:	4689      	mov	r9, r1
 800effa:	e7c5      	b.n	800ef88 <_dtoa_r+0x530>
 800effc:	ec51 0b17 	vmov	r0, r1, d7
 800f000:	f7f1 fafa 	bl	80005f8 <__aeabi_dmul>
 800f004:	9b02      	ldr	r3, [sp, #8]
 800f006:	9d00      	ldr	r5, [sp, #0]
 800f008:	930f      	str	r3, [sp, #60]	; 0x3c
 800f00a:	ec41 0b19 	vmov	d9, r0, r1
 800f00e:	4649      	mov	r1, r9
 800f010:	4640      	mov	r0, r8
 800f012:	f7f1 fda1 	bl	8000b58 <__aeabi_d2iz>
 800f016:	4606      	mov	r6, r0
 800f018:	f7f1 fa84 	bl	8000524 <__aeabi_i2d>
 800f01c:	3630      	adds	r6, #48	; 0x30
 800f01e:	4602      	mov	r2, r0
 800f020:	460b      	mov	r3, r1
 800f022:	4640      	mov	r0, r8
 800f024:	4649      	mov	r1, r9
 800f026:	f7f1 f92f 	bl	8000288 <__aeabi_dsub>
 800f02a:	f805 6b01 	strb.w	r6, [r5], #1
 800f02e:	9b02      	ldr	r3, [sp, #8]
 800f030:	429d      	cmp	r5, r3
 800f032:	4680      	mov	r8, r0
 800f034:	4689      	mov	r9, r1
 800f036:	f04f 0200 	mov.w	r2, #0
 800f03a:	d124      	bne.n	800f086 <_dtoa_r+0x62e>
 800f03c:	4b1b      	ldr	r3, [pc, #108]	; (800f0ac <_dtoa_r+0x654>)
 800f03e:	ec51 0b19 	vmov	r0, r1, d9
 800f042:	f7f1 f923 	bl	800028c <__adddf3>
 800f046:	4602      	mov	r2, r0
 800f048:	460b      	mov	r3, r1
 800f04a:	4640      	mov	r0, r8
 800f04c:	4649      	mov	r1, r9
 800f04e:	f7f1 fd63 	bl	8000b18 <__aeabi_dcmpgt>
 800f052:	2800      	cmp	r0, #0
 800f054:	d173      	bne.n	800f13e <_dtoa_r+0x6e6>
 800f056:	ec53 2b19 	vmov	r2, r3, d9
 800f05a:	4914      	ldr	r1, [pc, #80]	; (800f0ac <_dtoa_r+0x654>)
 800f05c:	2000      	movs	r0, #0
 800f05e:	f7f1 f913 	bl	8000288 <__aeabi_dsub>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4640      	mov	r0, r8
 800f068:	4649      	mov	r1, r9
 800f06a:	f7f1 fd37 	bl	8000adc <__aeabi_dcmplt>
 800f06e:	2800      	cmp	r0, #0
 800f070:	f43f af2f 	beq.w	800eed2 <_dtoa_r+0x47a>
 800f074:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f076:	1e6b      	subs	r3, r5, #1
 800f078:	930f      	str	r3, [sp, #60]	; 0x3c
 800f07a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f07e:	2b30      	cmp	r3, #48	; 0x30
 800f080:	d0f8      	beq.n	800f074 <_dtoa_r+0x61c>
 800f082:	46bb      	mov	fp, r7
 800f084:	e04a      	b.n	800f11c <_dtoa_r+0x6c4>
 800f086:	4b06      	ldr	r3, [pc, #24]	; (800f0a0 <_dtoa_r+0x648>)
 800f088:	f7f1 fab6 	bl	80005f8 <__aeabi_dmul>
 800f08c:	4680      	mov	r8, r0
 800f08e:	4689      	mov	r9, r1
 800f090:	e7bd      	b.n	800f00e <_dtoa_r+0x5b6>
 800f092:	bf00      	nop
 800f094:	080125d8 	.word	0x080125d8
 800f098:	080125b0 	.word	0x080125b0
 800f09c:	3ff00000 	.word	0x3ff00000
 800f0a0:	40240000 	.word	0x40240000
 800f0a4:	401c0000 	.word	0x401c0000
 800f0a8:	40140000 	.word	0x40140000
 800f0ac:	3fe00000 	.word	0x3fe00000
 800f0b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f0b4:	9d00      	ldr	r5, [sp, #0]
 800f0b6:	4642      	mov	r2, r8
 800f0b8:	464b      	mov	r3, r9
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	4639      	mov	r1, r7
 800f0be:	f7f1 fbc5 	bl	800084c <__aeabi_ddiv>
 800f0c2:	f7f1 fd49 	bl	8000b58 <__aeabi_d2iz>
 800f0c6:	9001      	str	r0, [sp, #4]
 800f0c8:	f7f1 fa2c 	bl	8000524 <__aeabi_i2d>
 800f0cc:	4642      	mov	r2, r8
 800f0ce:	464b      	mov	r3, r9
 800f0d0:	f7f1 fa92 	bl	80005f8 <__aeabi_dmul>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	4630      	mov	r0, r6
 800f0da:	4639      	mov	r1, r7
 800f0dc:	f7f1 f8d4 	bl	8000288 <__aeabi_dsub>
 800f0e0:	9e01      	ldr	r6, [sp, #4]
 800f0e2:	9f04      	ldr	r7, [sp, #16]
 800f0e4:	3630      	adds	r6, #48	; 0x30
 800f0e6:	f805 6b01 	strb.w	r6, [r5], #1
 800f0ea:	9e00      	ldr	r6, [sp, #0]
 800f0ec:	1bae      	subs	r6, r5, r6
 800f0ee:	42b7      	cmp	r7, r6
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	d134      	bne.n	800f160 <_dtoa_r+0x708>
 800f0f6:	f7f1 f8c9 	bl	800028c <__adddf3>
 800f0fa:	4642      	mov	r2, r8
 800f0fc:	464b      	mov	r3, r9
 800f0fe:	4606      	mov	r6, r0
 800f100:	460f      	mov	r7, r1
 800f102:	f7f1 fd09 	bl	8000b18 <__aeabi_dcmpgt>
 800f106:	b9c8      	cbnz	r0, 800f13c <_dtoa_r+0x6e4>
 800f108:	4642      	mov	r2, r8
 800f10a:	464b      	mov	r3, r9
 800f10c:	4630      	mov	r0, r6
 800f10e:	4639      	mov	r1, r7
 800f110:	f7f1 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 800f114:	b110      	cbz	r0, 800f11c <_dtoa_r+0x6c4>
 800f116:	9b01      	ldr	r3, [sp, #4]
 800f118:	07db      	lsls	r3, r3, #31
 800f11a:	d40f      	bmi.n	800f13c <_dtoa_r+0x6e4>
 800f11c:	4651      	mov	r1, sl
 800f11e:	4620      	mov	r0, r4
 800f120:	f000 fbcc 	bl	800f8bc <_Bfree>
 800f124:	2300      	movs	r3, #0
 800f126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f128:	702b      	strb	r3, [r5, #0]
 800f12a:	f10b 0301 	add.w	r3, fp, #1
 800f12e:	6013      	str	r3, [r2, #0]
 800f130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f132:	2b00      	cmp	r3, #0
 800f134:	f43f ace2 	beq.w	800eafc <_dtoa_r+0xa4>
 800f138:	601d      	str	r5, [r3, #0]
 800f13a:	e4df      	b.n	800eafc <_dtoa_r+0xa4>
 800f13c:	465f      	mov	r7, fp
 800f13e:	462b      	mov	r3, r5
 800f140:	461d      	mov	r5, r3
 800f142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f146:	2a39      	cmp	r2, #57	; 0x39
 800f148:	d106      	bne.n	800f158 <_dtoa_r+0x700>
 800f14a:	9a00      	ldr	r2, [sp, #0]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d1f7      	bne.n	800f140 <_dtoa_r+0x6e8>
 800f150:	9900      	ldr	r1, [sp, #0]
 800f152:	2230      	movs	r2, #48	; 0x30
 800f154:	3701      	adds	r7, #1
 800f156:	700a      	strb	r2, [r1, #0]
 800f158:	781a      	ldrb	r2, [r3, #0]
 800f15a:	3201      	adds	r2, #1
 800f15c:	701a      	strb	r2, [r3, #0]
 800f15e:	e790      	b.n	800f082 <_dtoa_r+0x62a>
 800f160:	4ba3      	ldr	r3, [pc, #652]	; (800f3f0 <_dtoa_r+0x998>)
 800f162:	2200      	movs	r2, #0
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	2200      	movs	r2, #0
 800f16a:	2300      	movs	r3, #0
 800f16c:	4606      	mov	r6, r0
 800f16e:	460f      	mov	r7, r1
 800f170:	f7f1 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800f174:	2800      	cmp	r0, #0
 800f176:	d09e      	beq.n	800f0b6 <_dtoa_r+0x65e>
 800f178:	e7d0      	b.n	800f11c <_dtoa_r+0x6c4>
 800f17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f17c:	2a00      	cmp	r2, #0
 800f17e:	f000 80ca 	beq.w	800f316 <_dtoa_r+0x8be>
 800f182:	9a07      	ldr	r2, [sp, #28]
 800f184:	2a01      	cmp	r2, #1
 800f186:	f300 80ad 	bgt.w	800f2e4 <_dtoa_r+0x88c>
 800f18a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f18c:	2a00      	cmp	r2, #0
 800f18e:	f000 80a5 	beq.w	800f2dc <_dtoa_r+0x884>
 800f192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f196:	9e08      	ldr	r6, [sp, #32]
 800f198:	9d05      	ldr	r5, [sp, #20]
 800f19a:	9a05      	ldr	r2, [sp, #20]
 800f19c:	441a      	add	r2, r3
 800f19e:	9205      	str	r2, [sp, #20]
 800f1a0:	9a06      	ldr	r2, [sp, #24]
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	441a      	add	r2, r3
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	9206      	str	r2, [sp, #24]
 800f1aa:	f000 fc3d 	bl	800fa28 <__i2b>
 800f1ae:	4607      	mov	r7, r0
 800f1b0:	b165      	cbz	r5, 800f1cc <_dtoa_r+0x774>
 800f1b2:	9b06      	ldr	r3, [sp, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	dd09      	ble.n	800f1cc <_dtoa_r+0x774>
 800f1b8:	42ab      	cmp	r3, r5
 800f1ba:	9a05      	ldr	r2, [sp, #20]
 800f1bc:	bfa8      	it	ge
 800f1be:	462b      	movge	r3, r5
 800f1c0:	1ad2      	subs	r2, r2, r3
 800f1c2:	9205      	str	r2, [sp, #20]
 800f1c4:	9a06      	ldr	r2, [sp, #24]
 800f1c6:	1aed      	subs	r5, r5, r3
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	9306      	str	r3, [sp, #24]
 800f1cc:	9b08      	ldr	r3, [sp, #32]
 800f1ce:	b1f3      	cbz	r3, 800f20e <_dtoa_r+0x7b6>
 800f1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f000 80a3 	beq.w	800f31e <_dtoa_r+0x8c6>
 800f1d8:	2e00      	cmp	r6, #0
 800f1da:	dd10      	ble.n	800f1fe <_dtoa_r+0x7a6>
 800f1dc:	4639      	mov	r1, r7
 800f1de:	4632      	mov	r2, r6
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f000 fce1 	bl	800fba8 <__pow5mult>
 800f1e6:	4652      	mov	r2, sl
 800f1e8:	4601      	mov	r1, r0
 800f1ea:	4607      	mov	r7, r0
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 fc31 	bl	800fa54 <__multiply>
 800f1f2:	4651      	mov	r1, sl
 800f1f4:	4680      	mov	r8, r0
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 fb60 	bl	800f8bc <_Bfree>
 800f1fc:	46c2      	mov	sl, r8
 800f1fe:	9b08      	ldr	r3, [sp, #32]
 800f200:	1b9a      	subs	r2, r3, r6
 800f202:	d004      	beq.n	800f20e <_dtoa_r+0x7b6>
 800f204:	4651      	mov	r1, sl
 800f206:	4620      	mov	r0, r4
 800f208:	f000 fcce 	bl	800fba8 <__pow5mult>
 800f20c:	4682      	mov	sl, r0
 800f20e:	2101      	movs	r1, #1
 800f210:	4620      	mov	r0, r4
 800f212:	f000 fc09 	bl	800fa28 <__i2b>
 800f216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	4606      	mov	r6, r0
 800f21c:	f340 8081 	ble.w	800f322 <_dtoa_r+0x8ca>
 800f220:	461a      	mov	r2, r3
 800f222:	4601      	mov	r1, r0
 800f224:	4620      	mov	r0, r4
 800f226:	f000 fcbf 	bl	800fba8 <__pow5mult>
 800f22a:	9b07      	ldr	r3, [sp, #28]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	4606      	mov	r6, r0
 800f230:	dd7a      	ble.n	800f328 <_dtoa_r+0x8d0>
 800f232:	f04f 0800 	mov.w	r8, #0
 800f236:	6933      	ldr	r3, [r6, #16]
 800f238:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f23c:	6918      	ldr	r0, [r3, #16]
 800f23e:	f000 fba5 	bl	800f98c <__hi0bits>
 800f242:	f1c0 0020 	rsb	r0, r0, #32
 800f246:	9b06      	ldr	r3, [sp, #24]
 800f248:	4418      	add	r0, r3
 800f24a:	f010 001f 	ands.w	r0, r0, #31
 800f24e:	f000 8094 	beq.w	800f37a <_dtoa_r+0x922>
 800f252:	f1c0 0320 	rsb	r3, r0, #32
 800f256:	2b04      	cmp	r3, #4
 800f258:	f340 8085 	ble.w	800f366 <_dtoa_r+0x90e>
 800f25c:	9b05      	ldr	r3, [sp, #20]
 800f25e:	f1c0 001c 	rsb	r0, r0, #28
 800f262:	4403      	add	r3, r0
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	9b06      	ldr	r3, [sp, #24]
 800f268:	4403      	add	r3, r0
 800f26a:	4405      	add	r5, r0
 800f26c:	9306      	str	r3, [sp, #24]
 800f26e:	9b05      	ldr	r3, [sp, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	dd05      	ble.n	800f280 <_dtoa_r+0x828>
 800f274:	4651      	mov	r1, sl
 800f276:	461a      	mov	r2, r3
 800f278:	4620      	mov	r0, r4
 800f27a:	f000 fcef 	bl	800fc5c <__lshift>
 800f27e:	4682      	mov	sl, r0
 800f280:	9b06      	ldr	r3, [sp, #24]
 800f282:	2b00      	cmp	r3, #0
 800f284:	dd05      	ble.n	800f292 <_dtoa_r+0x83a>
 800f286:	4631      	mov	r1, r6
 800f288:	461a      	mov	r2, r3
 800f28a:	4620      	mov	r0, r4
 800f28c:	f000 fce6 	bl	800fc5c <__lshift>
 800f290:	4606      	mov	r6, r0
 800f292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f294:	2b00      	cmp	r3, #0
 800f296:	d072      	beq.n	800f37e <_dtoa_r+0x926>
 800f298:	4631      	mov	r1, r6
 800f29a:	4650      	mov	r0, sl
 800f29c:	f000 fd4a 	bl	800fd34 <__mcmp>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	da6c      	bge.n	800f37e <_dtoa_r+0x926>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4651      	mov	r1, sl
 800f2a8:	220a      	movs	r2, #10
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f000 fb28 	bl	800f900 <__multadd>
 800f2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b6:	4682      	mov	sl, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f000 81b0 	beq.w	800f61e <_dtoa_r+0xbc6>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	220a      	movs	r2, #10
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f000 fb1b 	bl	800f900 <__multadd>
 800f2ca:	9b01      	ldr	r3, [sp, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	f300 8096 	bgt.w	800f400 <_dtoa_r+0x9a8>
 800f2d4:	9b07      	ldr	r3, [sp, #28]
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	dc59      	bgt.n	800f38e <_dtoa_r+0x936>
 800f2da:	e091      	b.n	800f400 <_dtoa_r+0x9a8>
 800f2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2e2:	e758      	b.n	800f196 <_dtoa_r+0x73e>
 800f2e4:	9b04      	ldr	r3, [sp, #16]
 800f2e6:	1e5e      	subs	r6, r3, #1
 800f2e8:	9b08      	ldr	r3, [sp, #32]
 800f2ea:	42b3      	cmp	r3, r6
 800f2ec:	bfbf      	itttt	lt
 800f2ee:	9b08      	ldrlt	r3, [sp, #32]
 800f2f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f2f2:	9608      	strlt	r6, [sp, #32]
 800f2f4:	1af3      	sublt	r3, r6, r3
 800f2f6:	bfb4      	ite	lt
 800f2f8:	18d2      	addlt	r2, r2, r3
 800f2fa:	1b9e      	subge	r6, r3, r6
 800f2fc:	9b04      	ldr	r3, [sp, #16]
 800f2fe:	bfbc      	itt	lt
 800f300:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f302:	2600      	movlt	r6, #0
 800f304:	2b00      	cmp	r3, #0
 800f306:	bfb7      	itett	lt
 800f308:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f30c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f310:	1a9d      	sublt	r5, r3, r2
 800f312:	2300      	movlt	r3, #0
 800f314:	e741      	b.n	800f19a <_dtoa_r+0x742>
 800f316:	9e08      	ldr	r6, [sp, #32]
 800f318:	9d05      	ldr	r5, [sp, #20]
 800f31a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f31c:	e748      	b.n	800f1b0 <_dtoa_r+0x758>
 800f31e:	9a08      	ldr	r2, [sp, #32]
 800f320:	e770      	b.n	800f204 <_dtoa_r+0x7ac>
 800f322:	9b07      	ldr	r3, [sp, #28]
 800f324:	2b01      	cmp	r3, #1
 800f326:	dc19      	bgt.n	800f35c <_dtoa_r+0x904>
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	b9bb      	cbnz	r3, 800f35c <_dtoa_r+0x904>
 800f32c:	9b03      	ldr	r3, [sp, #12]
 800f32e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f332:	b99b      	cbnz	r3, 800f35c <_dtoa_r+0x904>
 800f334:	9b03      	ldr	r3, [sp, #12]
 800f336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f33a:	0d1b      	lsrs	r3, r3, #20
 800f33c:	051b      	lsls	r3, r3, #20
 800f33e:	b183      	cbz	r3, 800f362 <_dtoa_r+0x90a>
 800f340:	9b05      	ldr	r3, [sp, #20]
 800f342:	3301      	adds	r3, #1
 800f344:	9305      	str	r3, [sp, #20]
 800f346:	9b06      	ldr	r3, [sp, #24]
 800f348:	3301      	adds	r3, #1
 800f34a:	9306      	str	r3, [sp, #24]
 800f34c:	f04f 0801 	mov.w	r8, #1
 800f350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f352:	2b00      	cmp	r3, #0
 800f354:	f47f af6f 	bne.w	800f236 <_dtoa_r+0x7de>
 800f358:	2001      	movs	r0, #1
 800f35a:	e774      	b.n	800f246 <_dtoa_r+0x7ee>
 800f35c:	f04f 0800 	mov.w	r8, #0
 800f360:	e7f6      	b.n	800f350 <_dtoa_r+0x8f8>
 800f362:	4698      	mov	r8, r3
 800f364:	e7f4      	b.n	800f350 <_dtoa_r+0x8f8>
 800f366:	d082      	beq.n	800f26e <_dtoa_r+0x816>
 800f368:	9a05      	ldr	r2, [sp, #20]
 800f36a:	331c      	adds	r3, #28
 800f36c:	441a      	add	r2, r3
 800f36e:	9205      	str	r2, [sp, #20]
 800f370:	9a06      	ldr	r2, [sp, #24]
 800f372:	441a      	add	r2, r3
 800f374:	441d      	add	r5, r3
 800f376:	9206      	str	r2, [sp, #24]
 800f378:	e779      	b.n	800f26e <_dtoa_r+0x816>
 800f37a:	4603      	mov	r3, r0
 800f37c:	e7f4      	b.n	800f368 <_dtoa_r+0x910>
 800f37e:	9b04      	ldr	r3, [sp, #16]
 800f380:	2b00      	cmp	r3, #0
 800f382:	dc37      	bgt.n	800f3f4 <_dtoa_r+0x99c>
 800f384:	9b07      	ldr	r3, [sp, #28]
 800f386:	2b02      	cmp	r3, #2
 800f388:	dd34      	ble.n	800f3f4 <_dtoa_r+0x99c>
 800f38a:	9b04      	ldr	r3, [sp, #16]
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	9b01      	ldr	r3, [sp, #4]
 800f390:	b963      	cbnz	r3, 800f3ac <_dtoa_r+0x954>
 800f392:	4631      	mov	r1, r6
 800f394:	2205      	movs	r2, #5
 800f396:	4620      	mov	r0, r4
 800f398:	f000 fab2 	bl	800f900 <__multadd>
 800f39c:	4601      	mov	r1, r0
 800f39e:	4606      	mov	r6, r0
 800f3a0:	4650      	mov	r0, sl
 800f3a2:	f000 fcc7 	bl	800fd34 <__mcmp>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f73f adbb 	bgt.w	800ef22 <_dtoa_r+0x4ca>
 800f3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ae:	9d00      	ldr	r5, [sp, #0]
 800f3b0:	ea6f 0b03 	mvn.w	fp, r3
 800f3b4:	f04f 0800 	mov.w	r8, #0
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 fa7e 	bl	800f8bc <_Bfree>
 800f3c0:	2f00      	cmp	r7, #0
 800f3c2:	f43f aeab 	beq.w	800f11c <_dtoa_r+0x6c4>
 800f3c6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ca:	d005      	beq.n	800f3d8 <_dtoa_r+0x980>
 800f3cc:	45b8      	cmp	r8, r7
 800f3ce:	d003      	beq.n	800f3d8 <_dtoa_r+0x980>
 800f3d0:	4641      	mov	r1, r8
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 fa72 	bl	800f8bc <_Bfree>
 800f3d8:	4639      	mov	r1, r7
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 fa6e 	bl	800f8bc <_Bfree>
 800f3e0:	e69c      	b.n	800f11c <_dtoa_r+0x6c4>
 800f3e2:	2600      	movs	r6, #0
 800f3e4:	4637      	mov	r7, r6
 800f3e6:	e7e1      	b.n	800f3ac <_dtoa_r+0x954>
 800f3e8:	46bb      	mov	fp, r7
 800f3ea:	4637      	mov	r7, r6
 800f3ec:	e599      	b.n	800ef22 <_dtoa_r+0x4ca>
 800f3ee:	bf00      	nop
 800f3f0:	40240000 	.word	0x40240000
 800f3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f000 80c8 	beq.w	800f58c <_dtoa_r+0xb34>
 800f3fc:	9b04      	ldr	r3, [sp, #16]
 800f3fe:	9301      	str	r3, [sp, #4]
 800f400:	2d00      	cmp	r5, #0
 800f402:	dd05      	ble.n	800f410 <_dtoa_r+0x9b8>
 800f404:	4639      	mov	r1, r7
 800f406:	462a      	mov	r2, r5
 800f408:	4620      	mov	r0, r4
 800f40a:	f000 fc27 	bl	800fc5c <__lshift>
 800f40e:	4607      	mov	r7, r0
 800f410:	f1b8 0f00 	cmp.w	r8, #0
 800f414:	d05b      	beq.n	800f4ce <_dtoa_r+0xa76>
 800f416:	6879      	ldr	r1, [r7, #4]
 800f418:	4620      	mov	r0, r4
 800f41a:	f000 fa0f 	bl	800f83c <_Balloc>
 800f41e:	4605      	mov	r5, r0
 800f420:	b928      	cbnz	r0, 800f42e <_dtoa_r+0x9d6>
 800f422:	4b83      	ldr	r3, [pc, #524]	; (800f630 <_dtoa_r+0xbd8>)
 800f424:	4602      	mov	r2, r0
 800f426:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f42a:	f7ff bb2e 	b.w	800ea8a <_dtoa_r+0x32>
 800f42e:	693a      	ldr	r2, [r7, #16]
 800f430:	3202      	adds	r2, #2
 800f432:	0092      	lsls	r2, r2, #2
 800f434:	f107 010c 	add.w	r1, r7, #12
 800f438:	300c      	adds	r0, #12
 800f43a:	f7ff fa76 	bl	800e92a <memcpy>
 800f43e:	2201      	movs	r2, #1
 800f440:	4629      	mov	r1, r5
 800f442:	4620      	mov	r0, r4
 800f444:	f000 fc0a 	bl	800fc5c <__lshift>
 800f448:	9b00      	ldr	r3, [sp, #0]
 800f44a:	3301      	adds	r3, #1
 800f44c:	9304      	str	r3, [sp, #16]
 800f44e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f452:	4413      	add	r3, r2
 800f454:	9308      	str	r3, [sp, #32]
 800f456:	9b02      	ldr	r3, [sp, #8]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	46b8      	mov	r8, r7
 800f45e:	9306      	str	r3, [sp, #24]
 800f460:	4607      	mov	r7, r0
 800f462:	9b04      	ldr	r3, [sp, #16]
 800f464:	4631      	mov	r1, r6
 800f466:	3b01      	subs	r3, #1
 800f468:	4650      	mov	r0, sl
 800f46a:	9301      	str	r3, [sp, #4]
 800f46c:	f7ff fa6b 	bl	800e946 <quorem>
 800f470:	4641      	mov	r1, r8
 800f472:	9002      	str	r0, [sp, #8]
 800f474:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f478:	4650      	mov	r0, sl
 800f47a:	f000 fc5b 	bl	800fd34 <__mcmp>
 800f47e:	463a      	mov	r2, r7
 800f480:	9005      	str	r0, [sp, #20]
 800f482:	4631      	mov	r1, r6
 800f484:	4620      	mov	r0, r4
 800f486:	f000 fc71 	bl	800fd6c <__mdiff>
 800f48a:	68c2      	ldr	r2, [r0, #12]
 800f48c:	4605      	mov	r5, r0
 800f48e:	bb02      	cbnz	r2, 800f4d2 <_dtoa_r+0xa7a>
 800f490:	4601      	mov	r1, r0
 800f492:	4650      	mov	r0, sl
 800f494:	f000 fc4e 	bl	800fd34 <__mcmp>
 800f498:	4602      	mov	r2, r0
 800f49a:	4629      	mov	r1, r5
 800f49c:	4620      	mov	r0, r4
 800f49e:	9209      	str	r2, [sp, #36]	; 0x24
 800f4a0:	f000 fa0c 	bl	800f8bc <_Bfree>
 800f4a4:	9b07      	ldr	r3, [sp, #28]
 800f4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4a8:	9d04      	ldr	r5, [sp, #16]
 800f4aa:	ea43 0102 	orr.w	r1, r3, r2
 800f4ae:	9b06      	ldr	r3, [sp, #24]
 800f4b0:	4319      	orrs	r1, r3
 800f4b2:	d110      	bne.n	800f4d6 <_dtoa_r+0xa7e>
 800f4b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f4b8:	d029      	beq.n	800f50e <_dtoa_r+0xab6>
 800f4ba:	9b05      	ldr	r3, [sp, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	dd02      	ble.n	800f4c6 <_dtoa_r+0xa6e>
 800f4c0:	9b02      	ldr	r3, [sp, #8]
 800f4c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f4c6:	9b01      	ldr	r3, [sp, #4]
 800f4c8:	f883 9000 	strb.w	r9, [r3]
 800f4cc:	e774      	b.n	800f3b8 <_dtoa_r+0x960>
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	e7ba      	b.n	800f448 <_dtoa_r+0x9f0>
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	e7e1      	b.n	800f49a <_dtoa_r+0xa42>
 800f4d6:	9b05      	ldr	r3, [sp, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	db04      	blt.n	800f4e6 <_dtoa_r+0xa8e>
 800f4dc:	9907      	ldr	r1, [sp, #28]
 800f4de:	430b      	orrs	r3, r1
 800f4e0:	9906      	ldr	r1, [sp, #24]
 800f4e2:	430b      	orrs	r3, r1
 800f4e4:	d120      	bne.n	800f528 <_dtoa_r+0xad0>
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	dded      	ble.n	800f4c6 <_dtoa_r+0xa6e>
 800f4ea:	4651      	mov	r1, sl
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f000 fbb4 	bl	800fc5c <__lshift>
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	4682      	mov	sl, r0
 800f4f8:	f000 fc1c 	bl	800fd34 <__mcmp>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	dc03      	bgt.n	800f508 <_dtoa_r+0xab0>
 800f500:	d1e1      	bne.n	800f4c6 <_dtoa_r+0xa6e>
 800f502:	f019 0f01 	tst.w	r9, #1
 800f506:	d0de      	beq.n	800f4c6 <_dtoa_r+0xa6e>
 800f508:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f50c:	d1d8      	bne.n	800f4c0 <_dtoa_r+0xa68>
 800f50e:	9a01      	ldr	r2, [sp, #4]
 800f510:	2339      	movs	r3, #57	; 0x39
 800f512:	7013      	strb	r3, [r2, #0]
 800f514:	462b      	mov	r3, r5
 800f516:	461d      	mov	r5, r3
 800f518:	3b01      	subs	r3, #1
 800f51a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f51e:	2a39      	cmp	r2, #57	; 0x39
 800f520:	d06c      	beq.n	800f5fc <_dtoa_r+0xba4>
 800f522:	3201      	adds	r2, #1
 800f524:	701a      	strb	r2, [r3, #0]
 800f526:	e747      	b.n	800f3b8 <_dtoa_r+0x960>
 800f528:	2a00      	cmp	r2, #0
 800f52a:	dd07      	ble.n	800f53c <_dtoa_r+0xae4>
 800f52c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f530:	d0ed      	beq.n	800f50e <_dtoa_r+0xab6>
 800f532:	9a01      	ldr	r2, [sp, #4]
 800f534:	f109 0301 	add.w	r3, r9, #1
 800f538:	7013      	strb	r3, [r2, #0]
 800f53a:	e73d      	b.n	800f3b8 <_dtoa_r+0x960>
 800f53c:	9b04      	ldr	r3, [sp, #16]
 800f53e:	9a08      	ldr	r2, [sp, #32]
 800f540:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f544:	4293      	cmp	r3, r2
 800f546:	d043      	beq.n	800f5d0 <_dtoa_r+0xb78>
 800f548:	4651      	mov	r1, sl
 800f54a:	2300      	movs	r3, #0
 800f54c:	220a      	movs	r2, #10
 800f54e:	4620      	mov	r0, r4
 800f550:	f000 f9d6 	bl	800f900 <__multadd>
 800f554:	45b8      	cmp	r8, r7
 800f556:	4682      	mov	sl, r0
 800f558:	f04f 0300 	mov.w	r3, #0
 800f55c:	f04f 020a 	mov.w	r2, #10
 800f560:	4641      	mov	r1, r8
 800f562:	4620      	mov	r0, r4
 800f564:	d107      	bne.n	800f576 <_dtoa_r+0xb1e>
 800f566:	f000 f9cb 	bl	800f900 <__multadd>
 800f56a:	4680      	mov	r8, r0
 800f56c:	4607      	mov	r7, r0
 800f56e:	9b04      	ldr	r3, [sp, #16]
 800f570:	3301      	adds	r3, #1
 800f572:	9304      	str	r3, [sp, #16]
 800f574:	e775      	b.n	800f462 <_dtoa_r+0xa0a>
 800f576:	f000 f9c3 	bl	800f900 <__multadd>
 800f57a:	4639      	mov	r1, r7
 800f57c:	4680      	mov	r8, r0
 800f57e:	2300      	movs	r3, #0
 800f580:	220a      	movs	r2, #10
 800f582:	4620      	mov	r0, r4
 800f584:	f000 f9bc 	bl	800f900 <__multadd>
 800f588:	4607      	mov	r7, r0
 800f58a:	e7f0      	b.n	800f56e <_dtoa_r+0xb16>
 800f58c:	9b04      	ldr	r3, [sp, #16]
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	9d00      	ldr	r5, [sp, #0]
 800f592:	4631      	mov	r1, r6
 800f594:	4650      	mov	r0, sl
 800f596:	f7ff f9d6 	bl	800e946 <quorem>
 800f59a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f59e:	9b00      	ldr	r3, [sp, #0]
 800f5a0:	f805 9b01 	strb.w	r9, [r5], #1
 800f5a4:	1aea      	subs	r2, r5, r3
 800f5a6:	9b01      	ldr	r3, [sp, #4]
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	dd07      	ble.n	800f5bc <_dtoa_r+0xb64>
 800f5ac:	4651      	mov	r1, sl
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	220a      	movs	r2, #10
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 f9a4 	bl	800f900 <__multadd>
 800f5b8:	4682      	mov	sl, r0
 800f5ba:	e7ea      	b.n	800f592 <_dtoa_r+0xb3a>
 800f5bc:	9b01      	ldr	r3, [sp, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	bfc8      	it	gt
 800f5c2:	461d      	movgt	r5, r3
 800f5c4:	9b00      	ldr	r3, [sp, #0]
 800f5c6:	bfd8      	it	le
 800f5c8:	2501      	movle	r5, #1
 800f5ca:	441d      	add	r5, r3
 800f5cc:	f04f 0800 	mov.w	r8, #0
 800f5d0:	4651      	mov	r1, sl
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f000 fb41 	bl	800fc5c <__lshift>
 800f5da:	4631      	mov	r1, r6
 800f5dc:	4682      	mov	sl, r0
 800f5de:	f000 fba9 	bl	800fd34 <__mcmp>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	dc96      	bgt.n	800f514 <_dtoa_r+0xabc>
 800f5e6:	d102      	bne.n	800f5ee <_dtoa_r+0xb96>
 800f5e8:	f019 0f01 	tst.w	r9, #1
 800f5ec:	d192      	bne.n	800f514 <_dtoa_r+0xabc>
 800f5ee:	462b      	mov	r3, r5
 800f5f0:	461d      	mov	r5, r3
 800f5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5f6:	2a30      	cmp	r2, #48	; 0x30
 800f5f8:	d0fa      	beq.n	800f5f0 <_dtoa_r+0xb98>
 800f5fa:	e6dd      	b.n	800f3b8 <_dtoa_r+0x960>
 800f5fc:	9a00      	ldr	r2, [sp, #0]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d189      	bne.n	800f516 <_dtoa_r+0xabe>
 800f602:	f10b 0b01 	add.w	fp, fp, #1
 800f606:	2331      	movs	r3, #49	; 0x31
 800f608:	e796      	b.n	800f538 <_dtoa_r+0xae0>
 800f60a:	4b0a      	ldr	r3, [pc, #40]	; (800f634 <_dtoa_r+0xbdc>)
 800f60c:	f7ff ba99 	b.w	800eb42 <_dtoa_r+0xea>
 800f610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f612:	2b00      	cmp	r3, #0
 800f614:	f47f aa6d 	bne.w	800eaf2 <_dtoa_r+0x9a>
 800f618:	4b07      	ldr	r3, [pc, #28]	; (800f638 <_dtoa_r+0xbe0>)
 800f61a:	f7ff ba92 	b.w	800eb42 <_dtoa_r+0xea>
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	dcb5      	bgt.n	800f590 <_dtoa_r+0xb38>
 800f624:	9b07      	ldr	r3, [sp, #28]
 800f626:	2b02      	cmp	r3, #2
 800f628:	f73f aeb1 	bgt.w	800f38e <_dtoa_r+0x936>
 800f62c:	e7b0      	b.n	800f590 <_dtoa_r+0xb38>
 800f62e:	bf00      	nop
 800f630:	08012544 	.word	0x08012544
 800f634:	080124a4 	.word	0x080124a4
 800f638:	080124c8 	.word	0x080124c8

0800f63c <_free_r>:
 800f63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f63e:	2900      	cmp	r1, #0
 800f640:	d044      	beq.n	800f6cc <_free_r+0x90>
 800f642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f646:	9001      	str	r0, [sp, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f1a1 0404 	sub.w	r4, r1, #4
 800f64e:	bfb8      	it	lt
 800f650:	18e4      	addlt	r4, r4, r3
 800f652:	f000 f8e7 	bl	800f824 <__malloc_lock>
 800f656:	4a1e      	ldr	r2, [pc, #120]	; (800f6d0 <_free_r+0x94>)
 800f658:	9801      	ldr	r0, [sp, #4]
 800f65a:	6813      	ldr	r3, [r2, #0]
 800f65c:	b933      	cbnz	r3, 800f66c <_free_r+0x30>
 800f65e:	6063      	str	r3, [r4, #4]
 800f660:	6014      	str	r4, [r2, #0]
 800f662:	b003      	add	sp, #12
 800f664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f668:	f000 b8e2 	b.w	800f830 <__malloc_unlock>
 800f66c:	42a3      	cmp	r3, r4
 800f66e:	d908      	bls.n	800f682 <_free_r+0x46>
 800f670:	6825      	ldr	r5, [r4, #0]
 800f672:	1961      	adds	r1, r4, r5
 800f674:	428b      	cmp	r3, r1
 800f676:	bf01      	itttt	eq
 800f678:	6819      	ldreq	r1, [r3, #0]
 800f67a:	685b      	ldreq	r3, [r3, #4]
 800f67c:	1949      	addeq	r1, r1, r5
 800f67e:	6021      	streq	r1, [r4, #0]
 800f680:	e7ed      	b.n	800f65e <_free_r+0x22>
 800f682:	461a      	mov	r2, r3
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	b10b      	cbz	r3, 800f68c <_free_r+0x50>
 800f688:	42a3      	cmp	r3, r4
 800f68a:	d9fa      	bls.n	800f682 <_free_r+0x46>
 800f68c:	6811      	ldr	r1, [r2, #0]
 800f68e:	1855      	adds	r5, r2, r1
 800f690:	42a5      	cmp	r5, r4
 800f692:	d10b      	bne.n	800f6ac <_free_r+0x70>
 800f694:	6824      	ldr	r4, [r4, #0]
 800f696:	4421      	add	r1, r4
 800f698:	1854      	adds	r4, r2, r1
 800f69a:	42a3      	cmp	r3, r4
 800f69c:	6011      	str	r1, [r2, #0]
 800f69e:	d1e0      	bne.n	800f662 <_free_r+0x26>
 800f6a0:	681c      	ldr	r4, [r3, #0]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	6053      	str	r3, [r2, #4]
 800f6a6:	440c      	add	r4, r1
 800f6a8:	6014      	str	r4, [r2, #0]
 800f6aa:	e7da      	b.n	800f662 <_free_r+0x26>
 800f6ac:	d902      	bls.n	800f6b4 <_free_r+0x78>
 800f6ae:	230c      	movs	r3, #12
 800f6b0:	6003      	str	r3, [r0, #0]
 800f6b2:	e7d6      	b.n	800f662 <_free_r+0x26>
 800f6b4:	6825      	ldr	r5, [r4, #0]
 800f6b6:	1961      	adds	r1, r4, r5
 800f6b8:	428b      	cmp	r3, r1
 800f6ba:	bf04      	itt	eq
 800f6bc:	6819      	ldreq	r1, [r3, #0]
 800f6be:	685b      	ldreq	r3, [r3, #4]
 800f6c0:	6063      	str	r3, [r4, #4]
 800f6c2:	bf04      	itt	eq
 800f6c4:	1949      	addeq	r1, r1, r5
 800f6c6:	6021      	streq	r1, [r4, #0]
 800f6c8:	6054      	str	r4, [r2, #4]
 800f6ca:	e7ca      	b.n	800f662 <_free_r+0x26>
 800f6cc:	b003      	add	sp, #12
 800f6ce:	bd30      	pop	{r4, r5, pc}
 800f6d0:	200054f8 	.word	0x200054f8

0800f6d4 <malloc>:
 800f6d4:	4b02      	ldr	r3, [pc, #8]	; (800f6e0 <malloc+0xc>)
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	f000 b823 	b.w	800f724 <_malloc_r>
 800f6de:	bf00      	nop
 800f6e0:	20000068 	.word	0x20000068

0800f6e4 <sbrk_aligned>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	4e0e      	ldr	r6, [pc, #56]	; (800f720 <sbrk_aligned+0x3c>)
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	6831      	ldr	r1, [r6, #0]
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	b911      	cbnz	r1, 800f6f6 <sbrk_aligned+0x12>
 800f6f0:	f000 fe40 	bl	8010374 <_sbrk_r>
 800f6f4:	6030      	str	r0, [r6, #0]
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	f000 fe3b 	bl	8010374 <_sbrk_r>
 800f6fe:	1c43      	adds	r3, r0, #1
 800f700:	d00a      	beq.n	800f718 <sbrk_aligned+0x34>
 800f702:	1cc4      	adds	r4, r0, #3
 800f704:	f024 0403 	bic.w	r4, r4, #3
 800f708:	42a0      	cmp	r0, r4
 800f70a:	d007      	beq.n	800f71c <sbrk_aligned+0x38>
 800f70c:	1a21      	subs	r1, r4, r0
 800f70e:	4628      	mov	r0, r5
 800f710:	f000 fe30 	bl	8010374 <_sbrk_r>
 800f714:	3001      	adds	r0, #1
 800f716:	d101      	bne.n	800f71c <sbrk_aligned+0x38>
 800f718:	f04f 34ff 	mov.w	r4, #4294967295
 800f71c:	4620      	mov	r0, r4
 800f71e:	bd70      	pop	{r4, r5, r6, pc}
 800f720:	200054fc 	.word	0x200054fc

0800f724 <_malloc_r>:
 800f724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f728:	1ccd      	adds	r5, r1, #3
 800f72a:	f025 0503 	bic.w	r5, r5, #3
 800f72e:	3508      	adds	r5, #8
 800f730:	2d0c      	cmp	r5, #12
 800f732:	bf38      	it	cc
 800f734:	250c      	movcc	r5, #12
 800f736:	2d00      	cmp	r5, #0
 800f738:	4607      	mov	r7, r0
 800f73a:	db01      	blt.n	800f740 <_malloc_r+0x1c>
 800f73c:	42a9      	cmp	r1, r5
 800f73e:	d905      	bls.n	800f74c <_malloc_r+0x28>
 800f740:	230c      	movs	r3, #12
 800f742:	603b      	str	r3, [r7, #0]
 800f744:	2600      	movs	r6, #0
 800f746:	4630      	mov	r0, r6
 800f748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f74c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f820 <_malloc_r+0xfc>
 800f750:	f000 f868 	bl	800f824 <__malloc_lock>
 800f754:	f8d8 3000 	ldr.w	r3, [r8]
 800f758:	461c      	mov	r4, r3
 800f75a:	bb5c      	cbnz	r4, 800f7b4 <_malloc_r+0x90>
 800f75c:	4629      	mov	r1, r5
 800f75e:	4638      	mov	r0, r7
 800f760:	f7ff ffc0 	bl	800f6e4 <sbrk_aligned>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	4604      	mov	r4, r0
 800f768:	d155      	bne.n	800f816 <_malloc_r+0xf2>
 800f76a:	f8d8 4000 	ldr.w	r4, [r8]
 800f76e:	4626      	mov	r6, r4
 800f770:	2e00      	cmp	r6, #0
 800f772:	d145      	bne.n	800f800 <_malloc_r+0xdc>
 800f774:	2c00      	cmp	r4, #0
 800f776:	d048      	beq.n	800f80a <_malloc_r+0xe6>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	4631      	mov	r1, r6
 800f77c:	4638      	mov	r0, r7
 800f77e:	eb04 0903 	add.w	r9, r4, r3
 800f782:	f000 fdf7 	bl	8010374 <_sbrk_r>
 800f786:	4581      	cmp	r9, r0
 800f788:	d13f      	bne.n	800f80a <_malloc_r+0xe6>
 800f78a:	6821      	ldr	r1, [r4, #0]
 800f78c:	1a6d      	subs	r5, r5, r1
 800f78e:	4629      	mov	r1, r5
 800f790:	4638      	mov	r0, r7
 800f792:	f7ff ffa7 	bl	800f6e4 <sbrk_aligned>
 800f796:	3001      	adds	r0, #1
 800f798:	d037      	beq.n	800f80a <_malloc_r+0xe6>
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	442b      	add	r3, r5
 800f79e:	6023      	str	r3, [r4, #0]
 800f7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d038      	beq.n	800f81a <_malloc_r+0xf6>
 800f7a8:	685a      	ldr	r2, [r3, #4]
 800f7aa:	42a2      	cmp	r2, r4
 800f7ac:	d12b      	bne.n	800f806 <_malloc_r+0xe2>
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	605a      	str	r2, [r3, #4]
 800f7b2:	e00f      	b.n	800f7d4 <_malloc_r+0xb0>
 800f7b4:	6822      	ldr	r2, [r4, #0]
 800f7b6:	1b52      	subs	r2, r2, r5
 800f7b8:	d41f      	bmi.n	800f7fa <_malloc_r+0xd6>
 800f7ba:	2a0b      	cmp	r2, #11
 800f7bc:	d917      	bls.n	800f7ee <_malloc_r+0xca>
 800f7be:	1961      	adds	r1, r4, r5
 800f7c0:	42a3      	cmp	r3, r4
 800f7c2:	6025      	str	r5, [r4, #0]
 800f7c4:	bf18      	it	ne
 800f7c6:	6059      	strne	r1, [r3, #4]
 800f7c8:	6863      	ldr	r3, [r4, #4]
 800f7ca:	bf08      	it	eq
 800f7cc:	f8c8 1000 	streq.w	r1, [r8]
 800f7d0:	5162      	str	r2, [r4, r5]
 800f7d2:	604b      	str	r3, [r1, #4]
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f104 060b 	add.w	r6, r4, #11
 800f7da:	f000 f829 	bl	800f830 <__malloc_unlock>
 800f7de:	f026 0607 	bic.w	r6, r6, #7
 800f7e2:	1d23      	adds	r3, r4, #4
 800f7e4:	1af2      	subs	r2, r6, r3
 800f7e6:	d0ae      	beq.n	800f746 <_malloc_r+0x22>
 800f7e8:	1b9b      	subs	r3, r3, r6
 800f7ea:	50a3      	str	r3, [r4, r2]
 800f7ec:	e7ab      	b.n	800f746 <_malloc_r+0x22>
 800f7ee:	42a3      	cmp	r3, r4
 800f7f0:	6862      	ldr	r2, [r4, #4]
 800f7f2:	d1dd      	bne.n	800f7b0 <_malloc_r+0x8c>
 800f7f4:	f8c8 2000 	str.w	r2, [r8]
 800f7f8:	e7ec      	b.n	800f7d4 <_malloc_r+0xb0>
 800f7fa:	4623      	mov	r3, r4
 800f7fc:	6864      	ldr	r4, [r4, #4]
 800f7fe:	e7ac      	b.n	800f75a <_malloc_r+0x36>
 800f800:	4634      	mov	r4, r6
 800f802:	6876      	ldr	r6, [r6, #4]
 800f804:	e7b4      	b.n	800f770 <_malloc_r+0x4c>
 800f806:	4613      	mov	r3, r2
 800f808:	e7cc      	b.n	800f7a4 <_malloc_r+0x80>
 800f80a:	230c      	movs	r3, #12
 800f80c:	603b      	str	r3, [r7, #0]
 800f80e:	4638      	mov	r0, r7
 800f810:	f000 f80e 	bl	800f830 <__malloc_unlock>
 800f814:	e797      	b.n	800f746 <_malloc_r+0x22>
 800f816:	6025      	str	r5, [r4, #0]
 800f818:	e7dc      	b.n	800f7d4 <_malloc_r+0xb0>
 800f81a:	605b      	str	r3, [r3, #4]
 800f81c:	deff      	udf	#255	; 0xff
 800f81e:	bf00      	nop
 800f820:	200054f8 	.word	0x200054f8

0800f824 <__malloc_lock>:
 800f824:	4801      	ldr	r0, [pc, #4]	; (800f82c <__malloc_lock+0x8>)
 800f826:	f7ff b87e 	b.w	800e926 <__retarget_lock_acquire_recursive>
 800f82a:	bf00      	nop
 800f82c:	200054f4 	.word	0x200054f4

0800f830 <__malloc_unlock>:
 800f830:	4801      	ldr	r0, [pc, #4]	; (800f838 <__malloc_unlock+0x8>)
 800f832:	f7ff b879 	b.w	800e928 <__retarget_lock_release_recursive>
 800f836:	bf00      	nop
 800f838:	200054f4 	.word	0x200054f4

0800f83c <_Balloc>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	69c6      	ldr	r6, [r0, #28]
 800f840:	4604      	mov	r4, r0
 800f842:	460d      	mov	r5, r1
 800f844:	b976      	cbnz	r6, 800f864 <_Balloc+0x28>
 800f846:	2010      	movs	r0, #16
 800f848:	f7ff ff44 	bl	800f6d4 <malloc>
 800f84c:	4602      	mov	r2, r0
 800f84e:	61e0      	str	r0, [r4, #28]
 800f850:	b920      	cbnz	r0, 800f85c <_Balloc+0x20>
 800f852:	4b18      	ldr	r3, [pc, #96]	; (800f8b4 <_Balloc+0x78>)
 800f854:	4818      	ldr	r0, [pc, #96]	; (800f8b8 <_Balloc+0x7c>)
 800f856:	216b      	movs	r1, #107	; 0x6b
 800f858:	f000 fd9c 	bl	8010394 <__assert_func>
 800f85c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f860:	6006      	str	r6, [r0, #0]
 800f862:	60c6      	str	r6, [r0, #12]
 800f864:	69e6      	ldr	r6, [r4, #28]
 800f866:	68f3      	ldr	r3, [r6, #12]
 800f868:	b183      	cbz	r3, 800f88c <_Balloc+0x50>
 800f86a:	69e3      	ldr	r3, [r4, #28]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f872:	b9b8      	cbnz	r0, 800f8a4 <_Balloc+0x68>
 800f874:	2101      	movs	r1, #1
 800f876:	fa01 f605 	lsl.w	r6, r1, r5
 800f87a:	1d72      	adds	r2, r6, #5
 800f87c:	0092      	lsls	r2, r2, #2
 800f87e:	4620      	mov	r0, r4
 800f880:	f000 fda6 	bl	80103d0 <_calloc_r>
 800f884:	b160      	cbz	r0, 800f8a0 <_Balloc+0x64>
 800f886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f88a:	e00e      	b.n	800f8aa <_Balloc+0x6e>
 800f88c:	2221      	movs	r2, #33	; 0x21
 800f88e:	2104      	movs	r1, #4
 800f890:	4620      	mov	r0, r4
 800f892:	f000 fd9d 	bl	80103d0 <_calloc_r>
 800f896:	69e3      	ldr	r3, [r4, #28]
 800f898:	60f0      	str	r0, [r6, #12]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d1e4      	bne.n	800f86a <_Balloc+0x2e>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
 800f8a4:	6802      	ldr	r2, [r0, #0]
 800f8a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8b0:	e7f7      	b.n	800f8a2 <_Balloc+0x66>
 800f8b2:	bf00      	nop
 800f8b4:	080124d5 	.word	0x080124d5
 800f8b8:	08012555 	.word	0x08012555

0800f8bc <_Bfree>:
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	69c6      	ldr	r6, [r0, #28]
 800f8c0:	4605      	mov	r5, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	b976      	cbnz	r6, 800f8e4 <_Bfree+0x28>
 800f8c6:	2010      	movs	r0, #16
 800f8c8:	f7ff ff04 	bl	800f6d4 <malloc>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	61e8      	str	r0, [r5, #28]
 800f8d0:	b920      	cbnz	r0, 800f8dc <_Bfree+0x20>
 800f8d2:	4b09      	ldr	r3, [pc, #36]	; (800f8f8 <_Bfree+0x3c>)
 800f8d4:	4809      	ldr	r0, [pc, #36]	; (800f8fc <_Bfree+0x40>)
 800f8d6:	218f      	movs	r1, #143	; 0x8f
 800f8d8:	f000 fd5c 	bl	8010394 <__assert_func>
 800f8dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8e0:	6006      	str	r6, [r0, #0]
 800f8e2:	60c6      	str	r6, [r0, #12]
 800f8e4:	b13c      	cbz	r4, 800f8f6 <_Bfree+0x3a>
 800f8e6:	69eb      	ldr	r3, [r5, #28]
 800f8e8:	6862      	ldr	r2, [r4, #4]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8f0:	6021      	str	r1, [r4, #0]
 800f8f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	080124d5 	.word	0x080124d5
 800f8fc:	08012555 	.word	0x08012555

0800f900 <__multadd>:
 800f900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f904:	690d      	ldr	r5, [r1, #16]
 800f906:	4607      	mov	r7, r0
 800f908:	460c      	mov	r4, r1
 800f90a:	461e      	mov	r6, r3
 800f90c:	f101 0c14 	add.w	ip, r1, #20
 800f910:	2000      	movs	r0, #0
 800f912:	f8dc 3000 	ldr.w	r3, [ip]
 800f916:	b299      	uxth	r1, r3
 800f918:	fb02 6101 	mla	r1, r2, r1, r6
 800f91c:	0c1e      	lsrs	r6, r3, #16
 800f91e:	0c0b      	lsrs	r3, r1, #16
 800f920:	fb02 3306 	mla	r3, r2, r6, r3
 800f924:	b289      	uxth	r1, r1
 800f926:	3001      	adds	r0, #1
 800f928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f92c:	4285      	cmp	r5, r0
 800f92e:	f84c 1b04 	str.w	r1, [ip], #4
 800f932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f936:	dcec      	bgt.n	800f912 <__multadd+0x12>
 800f938:	b30e      	cbz	r6, 800f97e <__multadd+0x7e>
 800f93a:	68a3      	ldr	r3, [r4, #8]
 800f93c:	42ab      	cmp	r3, r5
 800f93e:	dc19      	bgt.n	800f974 <__multadd+0x74>
 800f940:	6861      	ldr	r1, [r4, #4]
 800f942:	4638      	mov	r0, r7
 800f944:	3101      	adds	r1, #1
 800f946:	f7ff ff79 	bl	800f83c <_Balloc>
 800f94a:	4680      	mov	r8, r0
 800f94c:	b928      	cbnz	r0, 800f95a <__multadd+0x5a>
 800f94e:	4602      	mov	r2, r0
 800f950:	4b0c      	ldr	r3, [pc, #48]	; (800f984 <__multadd+0x84>)
 800f952:	480d      	ldr	r0, [pc, #52]	; (800f988 <__multadd+0x88>)
 800f954:	21ba      	movs	r1, #186	; 0xba
 800f956:	f000 fd1d 	bl	8010394 <__assert_func>
 800f95a:	6922      	ldr	r2, [r4, #16]
 800f95c:	3202      	adds	r2, #2
 800f95e:	f104 010c 	add.w	r1, r4, #12
 800f962:	0092      	lsls	r2, r2, #2
 800f964:	300c      	adds	r0, #12
 800f966:	f7fe ffe0 	bl	800e92a <memcpy>
 800f96a:	4621      	mov	r1, r4
 800f96c:	4638      	mov	r0, r7
 800f96e:	f7ff ffa5 	bl	800f8bc <_Bfree>
 800f972:	4644      	mov	r4, r8
 800f974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f978:	3501      	adds	r5, #1
 800f97a:	615e      	str	r6, [r3, #20]
 800f97c:	6125      	str	r5, [r4, #16]
 800f97e:	4620      	mov	r0, r4
 800f980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f984:	08012544 	.word	0x08012544
 800f988:	08012555 	.word	0x08012555

0800f98c <__hi0bits>:
 800f98c:	0c03      	lsrs	r3, r0, #16
 800f98e:	041b      	lsls	r3, r3, #16
 800f990:	b9d3      	cbnz	r3, 800f9c8 <__hi0bits+0x3c>
 800f992:	0400      	lsls	r0, r0, #16
 800f994:	2310      	movs	r3, #16
 800f996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f99a:	bf04      	itt	eq
 800f99c:	0200      	lsleq	r0, r0, #8
 800f99e:	3308      	addeq	r3, #8
 800f9a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f9a4:	bf04      	itt	eq
 800f9a6:	0100      	lsleq	r0, r0, #4
 800f9a8:	3304      	addeq	r3, #4
 800f9aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f9ae:	bf04      	itt	eq
 800f9b0:	0080      	lsleq	r0, r0, #2
 800f9b2:	3302      	addeq	r3, #2
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	db05      	blt.n	800f9c4 <__hi0bits+0x38>
 800f9b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f9bc:	f103 0301 	add.w	r3, r3, #1
 800f9c0:	bf08      	it	eq
 800f9c2:	2320      	moveq	r3, #32
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	4770      	bx	lr
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	e7e4      	b.n	800f996 <__hi0bits+0xa>

0800f9cc <__lo0bits>:
 800f9cc:	6803      	ldr	r3, [r0, #0]
 800f9ce:	f013 0207 	ands.w	r2, r3, #7
 800f9d2:	d00c      	beq.n	800f9ee <__lo0bits+0x22>
 800f9d4:	07d9      	lsls	r1, r3, #31
 800f9d6:	d422      	bmi.n	800fa1e <__lo0bits+0x52>
 800f9d8:	079a      	lsls	r2, r3, #30
 800f9da:	bf49      	itett	mi
 800f9dc:	085b      	lsrmi	r3, r3, #1
 800f9de:	089b      	lsrpl	r3, r3, #2
 800f9e0:	6003      	strmi	r3, [r0, #0]
 800f9e2:	2201      	movmi	r2, #1
 800f9e4:	bf5c      	itt	pl
 800f9e6:	6003      	strpl	r3, [r0, #0]
 800f9e8:	2202      	movpl	r2, #2
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	4770      	bx	lr
 800f9ee:	b299      	uxth	r1, r3
 800f9f0:	b909      	cbnz	r1, 800f9f6 <__lo0bits+0x2a>
 800f9f2:	0c1b      	lsrs	r3, r3, #16
 800f9f4:	2210      	movs	r2, #16
 800f9f6:	b2d9      	uxtb	r1, r3
 800f9f8:	b909      	cbnz	r1, 800f9fe <__lo0bits+0x32>
 800f9fa:	3208      	adds	r2, #8
 800f9fc:	0a1b      	lsrs	r3, r3, #8
 800f9fe:	0719      	lsls	r1, r3, #28
 800fa00:	bf04      	itt	eq
 800fa02:	091b      	lsreq	r3, r3, #4
 800fa04:	3204      	addeq	r2, #4
 800fa06:	0799      	lsls	r1, r3, #30
 800fa08:	bf04      	itt	eq
 800fa0a:	089b      	lsreq	r3, r3, #2
 800fa0c:	3202      	addeq	r2, #2
 800fa0e:	07d9      	lsls	r1, r3, #31
 800fa10:	d403      	bmi.n	800fa1a <__lo0bits+0x4e>
 800fa12:	085b      	lsrs	r3, r3, #1
 800fa14:	f102 0201 	add.w	r2, r2, #1
 800fa18:	d003      	beq.n	800fa22 <__lo0bits+0x56>
 800fa1a:	6003      	str	r3, [r0, #0]
 800fa1c:	e7e5      	b.n	800f9ea <__lo0bits+0x1e>
 800fa1e:	2200      	movs	r2, #0
 800fa20:	e7e3      	b.n	800f9ea <__lo0bits+0x1e>
 800fa22:	2220      	movs	r2, #32
 800fa24:	e7e1      	b.n	800f9ea <__lo0bits+0x1e>
	...

0800fa28 <__i2b>:
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	460c      	mov	r4, r1
 800fa2c:	2101      	movs	r1, #1
 800fa2e:	f7ff ff05 	bl	800f83c <_Balloc>
 800fa32:	4602      	mov	r2, r0
 800fa34:	b928      	cbnz	r0, 800fa42 <__i2b+0x1a>
 800fa36:	4b05      	ldr	r3, [pc, #20]	; (800fa4c <__i2b+0x24>)
 800fa38:	4805      	ldr	r0, [pc, #20]	; (800fa50 <__i2b+0x28>)
 800fa3a:	f240 1145 	movw	r1, #325	; 0x145
 800fa3e:	f000 fca9 	bl	8010394 <__assert_func>
 800fa42:	2301      	movs	r3, #1
 800fa44:	6144      	str	r4, [r0, #20]
 800fa46:	6103      	str	r3, [r0, #16]
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	bf00      	nop
 800fa4c:	08012544 	.word	0x08012544
 800fa50:	08012555 	.word	0x08012555

0800fa54 <__multiply>:
 800fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa58:	4691      	mov	r9, r2
 800fa5a:	690a      	ldr	r2, [r1, #16]
 800fa5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	bfb8      	it	lt
 800fa64:	460b      	movlt	r3, r1
 800fa66:	460c      	mov	r4, r1
 800fa68:	bfbc      	itt	lt
 800fa6a:	464c      	movlt	r4, r9
 800fa6c:	4699      	movlt	r9, r3
 800fa6e:	6927      	ldr	r7, [r4, #16]
 800fa70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa74:	68a3      	ldr	r3, [r4, #8]
 800fa76:	6861      	ldr	r1, [r4, #4]
 800fa78:	eb07 060a 	add.w	r6, r7, sl
 800fa7c:	42b3      	cmp	r3, r6
 800fa7e:	b085      	sub	sp, #20
 800fa80:	bfb8      	it	lt
 800fa82:	3101      	addlt	r1, #1
 800fa84:	f7ff feda 	bl	800f83c <_Balloc>
 800fa88:	b930      	cbnz	r0, 800fa98 <__multiply+0x44>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	4b44      	ldr	r3, [pc, #272]	; (800fba0 <__multiply+0x14c>)
 800fa8e:	4845      	ldr	r0, [pc, #276]	; (800fba4 <__multiply+0x150>)
 800fa90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fa94:	f000 fc7e 	bl	8010394 <__assert_func>
 800fa98:	f100 0514 	add.w	r5, r0, #20
 800fa9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800faa0:	462b      	mov	r3, r5
 800faa2:	2200      	movs	r2, #0
 800faa4:	4543      	cmp	r3, r8
 800faa6:	d321      	bcc.n	800faec <__multiply+0x98>
 800faa8:	f104 0314 	add.w	r3, r4, #20
 800faac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fab0:	f109 0314 	add.w	r3, r9, #20
 800fab4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fab8:	9202      	str	r2, [sp, #8]
 800faba:	1b3a      	subs	r2, r7, r4
 800fabc:	3a15      	subs	r2, #21
 800fabe:	f022 0203 	bic.w	r2, r2, #3
 800fac2:	3204      	adds	r2, #4
 800fac4:	f104 0115 	add.w	r1, r4, #21
 800fac8:	428f      	cmp	r7, r1
 800faca:	bf38      	it	cc
 800facc:	2204      	movcc	r2, #4
 800face:	9201      	str	r2, [sp, #4]
 800fad0:	9a02      	ldr	r2, [sp, #8]
 800fad2:	9303      	str	r3, [sp, #12]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d80c      	bhi.n	800faf2 <__multiply+0x9e>
 800fad8:	2e00      	cmp	r6, #0
 800fada:	dd03      	ble.n	800fae4 <__multiply+0x90>
 800fadc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d05b      	beq.n	800fb9c <__multiply+0x148>
 800fae4:	6106      	str	r6, [r0, #16]
 800fae6:	b005      	add	sp, #20
 800fae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faec:	f843 2b04 	str.w	r2, [r3], #4
 800faf0:	e7d8      	b.n	800faa4 <__multiply+0x50>
 800faf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800faf6:	f1ba 0f00 	cmp.w	sl, #0
 800fafa:	d024      	beq.n	800fb46 <__multiply+0xf2>
 800fafc:	f104 0e14 	add.w	lr, r4, #20
 800fb00:	46a9      	mov	r9, r5
 800fb02:	f04f 0c00 	mov.w	ip, #0
 800fb06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fb0a:	f8d9 1000 	ldr.w	r1, [r9]
 800fb0e:	fa1f fb82 	uxth.w	fp, r2
 800fb12:	b289      	uxth	r1, r1
 800fb14:	fb0a 110b 	mla	r1, sl, fp, r1
 800fb18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fb1c:	f8d9 2000 	ldr.w	r2, [r9]
 800fb20:	4461      	add	r1, ip
 800fb22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb26:	fb0a c20b 	mla	r2, sl, fp, ip
 800fb2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb2e:	b289      	uxth	r1, r1
 800fb30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb34:	4577      	cmp	r7, lr
 800fb36:	f849 1b04 	str.w	r1, [r9], #4
 800fb3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb3e:	d8e2      	bhi.n	800fb06 <__multiply+0xb2>
 800fb40:	9a01      	ldr	r2, [sp, #4]
 800fb42:	f845 c002 	str.w	ip, [r5, r2]
 800fb46:	9a03      	ldr	r2, [sp, #12]
 800fb48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	f1b9 0f00 	cmp.w	r9, #0
 800fb52:	d021      	beq.n	800fb98 <__multiply+0x144>
 800fb54:	6829      	ldr	r1, [r5, #0]
 800fb56:	f104 0c14 	add.w	ip, r4, #20
 800fb5a:	46ae      	mov	lr, r5
 800fb5c:	f04f 0a00 	mov.w	sl, #0
 800fb60:	f8bc b000 	ldrh.w	fp, [ip]
 800fb64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb68:	fb09 220b 	mla	r2, r9, fp, r2
 800fb6c:	4452      	add	r2, sl
 800fb6e:	b289      	uxth	r1, r1
 800fb70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb74:	f84e 1b04 	str.w	r1, [lr], #4
 800fb78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb80:	f8be 1000 	ldrh.w	r1, [lr]
 800fb84:	fb09 110a 	mla	r1, r9, sl, r1
 800fb88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fb8c:	4567      	cmp	r7, ip
 800fb8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb92:	d8e5      	bhi.n	800fb60 <__multiply+0x10c>
 800fb94:	9a01      	ldr	r2, [sp, #4]
 800fb96:	50a9      	str	r1, [r5, r2]
 800fb98:	3504      	adds	r5, #4
 800fb9a:	e799      	b.n	800fad0 <__multiply+0x7c>
 800fb9c:	3e01      	subs	r6, #1
 800fb9e:	e79b      	b.n	800fad8 <__multiply+0x84>
 800fba0:	08012544 	.word	0x08012544
 800fba4:	08012555 	.word	0x08012555

0800fba8 <__pow5mult>:
 800fba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbac:	4615      	mov	r5, r2
 800fbae:	f012 0203 	ands.w	r2, r2, #3
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	460f      	mov	r7, r1
 800fbb6:	d007      	beq.n	800fbc8 <__pow5mult+0x20>
 800fbb8:	4c25      	ldr	r4, [pc, #148]	; (800fc50 <__pow5mult+0xa8>)
 800fbba:	3a01      	subs	r2, #1
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbc2:	f7ff fe9d 	bl	800f900 <__multadd>
 800fbc6:	4607      	mov	r7, r0
 800fbc8:	10ad      	asrs	r5, r5, #2
 800fbca:	d03d      	beq.n	800fc48 <__pow5mult+0xa0>
 800fbcc:	69f4      	ldr	r4, [r6, #28]
 800fbce:	b97c      	cbnz	r4, 800fbf0 <__pow5mult+0x48>
 800fbd0:	2010      	movs	r0, #16
 800fbd2:	f7ff fd7f 	bl	800f6d4 <malloc>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	61f0      	str	r0, [r6, #28]
 800fbda:	b928      	cbnz	r0, 800fbe8 <__pow5mult+0x40>
 800fbdc:	4b1d      	ldr	r3, [pc, #116]	; (800fc54 <__pow5mult+0xac>)
 800fbde:	481e      	ldr	r0, [pc, #120]	; (800fc58 <__pow5mult+0xb0>)
 800fbe0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fbe4:	f000 fbd6 	bl	8010394 <__assert_func>
 800fbe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbec:	6004      	str	r4, [r0, #0]
 800fbee:	60c4      	str	r4, [r0, #12]
 800fbf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fbf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbf8:	b94c      	cbnz	r4, 800fc0e <__pow5mult+0x66>
 800fbfa:	f240 2171 	movw	r1, #625	; 0x271
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f7ff ff12 	bl	800fa28 <__i2b>
 800fc04:	2300      	movs	r3, #0
 800fc06:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	6003      	str	r3, [r0, #0]
 800fc0e:	f04f 0900 	mov.w	r9, #0
 800fc12:	07eb      	lsls	r3, r5, #31
 800fc14:	d50a      	bpl.n	800fc2c <__pow5mult+0x84>
 800fc16:	4639      	mov	r1, r7
 800fc18:	4622      	mov	r2, r4
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f7ff ff1a 	bl	800fa54 <__multiply>
 800fc20:	4639      	mov	r1, r7
 800fc22:	4680      	mov	r8, r0
 800fc24:	4630      	mov	r0, r6
 800fc26:	f7ff fe49 	bl	800f8bc <_Bfree>
 800fc2a:	4647      	mov	r7, r8
 800fc2c:	106d      	asrs	r5, r5, #1
 800fc2e:	d00b      	beq.n	800fc48 <__pow5mult+0xa0>
 800fc30:	6820      	ldr	r0, [r4, #0]
 800fc32:	b938      	cbnz	r0, 800fc44 <__pow5mult+0x9c>
 800fc34:	4622      	mov	r2, r4
 800fc36:	4621      	mov	r1, r4
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f7ff ff0b 	bl	800fa54 <__multiply>
 800fc3e:	6020      	str	r0, [r4, #0]
 800fc40:	f8c0 9000 	str.w	r9, [r0]
 800fc44:	4604      	mov	r4, r0
 800fc46:	e7e4      	b.n	800fc12 <__pow5mult+0x6a>
 800fc48:	4638      	mov	r0, r7
 800fc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc4e:	bf00      	nop
 800fc50:	080126a0 	.word	0x080126a0
 800fc54:	080124d5 	.word	0x080124d5
 800fc58:	08012555 	.word	0x08012555

0800fc5c <__lshift>:
 800fc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc60:	460c      	mov	r4, r1
 800fc62:	6849      	ldr	r1, [r1, #4]
 800fc64:	6923      	ldr	r3, [r4, #16]
 800fc66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc6a:	68a3      	ldr	r3, [r4, #8]
 800fc6c:	4607      	mov	r7, r0
 800fc6e:	4691      	mov	r9, r2
 800fc70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc74:	f108 0601 	add.w	r6, r8, #1
 800fc78:	42b3      	cmp	r3, r6
 800fc7a:	db0b      	blt.n	800fc94 <__lshift+0x38>
 800fc7c:	4638      	mov	r0, r7
 800fc7e:	f7ff fddd 	bl	800f83c <_Balloc>
 800fc82:	4605      	mov	r5, r0
 800fc84:	b948      	cbnz	r0, 800fc9a <__lshift+0x3e>
 800fc86:	4602      	mov	r2, r0
 800fc88:	4b28      	ldr	r3, [pc, #160]	; (800fd2c <__lshift+0xd0>)
 800fc8a:	4829      	ldr	r0, [pc, #164]	; (800fd30 <__lshift+0xd4>)
 800fc8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fc90:	f000 fb80 	bl	8010394 <__assert_func>
 800fc94:	3101      	adds	r1, #1
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	e7ee      	b.n	800fc78 <__lshift+0x1c>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	f100 0114 	add.w	r1, r0, #20
 800fca0:	f100 0210 	add.w	r2, r0, #16
 800fca4:	4618      	mov	r0, r3
 800fca6:	4553      	cmp	r3, sl
 800fca8:	db33      	blt.n	800fd12 <__lshift+0xb6>
 800fcaa:	6920      	ldr	r0, [r4, #16]
 800fcac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fcb0:	f104 0314 	add.w	r3, r4, #20
 800fcb4:	f019 091f 	ands.w	r9, r9, #31
 800fcb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcc0:	d02b      	beq.n	800fd1a <__lshift+0xbe>
 800fcc2:	f1c9 0e20 	rsb	lr, r9, #32
 800fcc6:	468a      	mov	sl, r1
 800fcc8:	2200      	movs	r2, #0
 800fcca:	6818      	ldr	r0, [r3, #0]
 800fccc:	fa00 f009 	lsl.w	r0, r0, r9
 800fcd0:	4310      	orrs	r0, r2
 800fcd2:	f84a 0b04 	str.w	r0, [sl], #4
 800fcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcda:	459c      	cmp	ip, r3
 800fcdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800fce0:	d8f3      	bhi.n	800fcca <__lshift+0x6e>
 800fce2:	ebac 0304 	sub.w	r3, ip, r4
 800fce6:	3b15      	subs	r3, #21
 800fce8:	f023 0303 	bic.w	r3, r3, #3
 800fcec:	3304      	adds	r3, #4
 800fcee:	f104 0015 	add.w	r0, r4, #21
 800fcf2:	4584      	cmp	ip, r0
 800fcf4:	bf38      	it	cc
 800fcf6:	2304      	movcc	r3, #4
 800fcf8:	50ca      	str	r2, [r1, r3]
 800fcfa:	b10a      	cbz	r2, 800fd00 <__lshift+0xa4>
 800fcfc:	f108 0602 	add.w	r6, r8, #2
 800fd00:	3e01      	subs	r6, #1
 800fd02:	4638      	mov	r0, r7
 800fd04:	612e      	str	r6, [r5, #16]
 800fd06:	4621      	mov	r1, r4
 800fd08:	f7ff fdd8 	bl	800f8bc <_Bfree>
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd12:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd16:	3301      	adds	r3, #1
 800fd18:	e7c5      	b.n	800fca6 <__lshift+0x4a>
 800fd1a:	3904      	subs	r1, #4
 800fd1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd20:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd24:	459c      	cmp	ip, r3
 800fd26:	d8f9      	bhi.n	800fd1c <__lshift+0xc0>
 800fd28:	e7ea      	b.n	800fd00 <__lshift+0xa4>
 800fd2a:	bf00      	nop
 800fd2c:	08012544 	.word	0x08012544
 800fd30:	08012555 	.word	0x08012555

0800fd34 <__mcmp>:
 800fd34:	b530      	push	{r4, r5, lr}
 800fd36:	6902      	ldr	r2, [r0, #16]
 800fd38:	690c      	ldr	r4, [r1, #16]
 800fd3a:	1b12      	subs	r2, r2, r4
 800fd3c:	d10e      	bne.n	800fd5c <__mcmp+0x28>
 800fd3e:	f100 0314 	add.w	r3, r0, #20
 800fd42:	3114      	adds	r1, #20
 800fd44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd54:	42a5      	cmp	r5, r4
 800fd56:	d003      	beq.n	800fd60 <__mcmp+0x2c>
 800fd58:	d305      	bcc.n	800fd66 <__mcmp+0x32>
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	bd30      	pop	{r4, r5, pc}
 800fd60:	4283      	cmp	r3, r0
 800fd62:	d3f3      	bcc.n	800fd4c <__mcmp+0x18>
 800fd64:	e7fa      	b.n	800fd5c <__mcmp+0x28>
 800fd66:	f04f 32ff 	mov.w	r2, #4294967295
 800fd6a:	e7f7      	b.n	800fd5c <__mcmp+0x28>

0800fd6c <__mdiff>:
 800fd6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	460c      	mov	r4, r1
 800fd72:	4606      	mov	r6, r0
 800fd74:	4611      	mov	r1, r2
 800fd76:	4620      	mov	r0, r4
 800fd78:	4690      	mov	r8, r2
 800fd7a:	f7ff ffdb 	bl	800fd34 <__mcmp>
 800fd7e:	1e05      	subs	r5, r0, #0
 800fd80:	d110      	bne.n	800fda4 <__mdiff+0x38>
 800fd82:	4629      	mov	r1, r5
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7ff fd59 	bl	800f83c <_Balloc>
 800fd8a:	b930      	cbnz	r0, 800fd9a <__mdiff+0x2e>
 800fd8c:	4b3a      	ldr	r3, [pc, #232]	; (800fe78 <__mdiff+0x10c>)
 800fd8e:	4602      	mov	r2, r0
 800fd90:	f240 2137 	movw	r1, #567	; 0x237
 800fd94:	4839      	ldr	r0, [pc, #228]	; (800fe7c <__mdiff+0x110>)
 800fd96:	f000 fafd 	bl	8010394 <__assert_func>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fda0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda4:	bfa4      	itt	ge
 800fda6:	4643      	movge	r3, r8
 800fda8:	46a0      	movge	r8, r4
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fdb0:	bfa6      	itte	ge
 800fdb2:	461c      	movge	r4, r3
 800fdb4:	2500      	movge	r5, #0
 800fdb6:	2501      	movlt	r5, #1
 800fdb8:	f7ff fd40 	bl	800f83c <_Balloc>
 800fdbc:	b920      	cbnz	r0, 800fdc8 <__mdiff+0x5c>
 800fdbe:	4b2e      	ldr	r3, [pc, #184]	; (800fe78 <__mdiff+0x10c>)
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	f240 2145 	movw	r1, #581	; 0x245
 800fdc6:	e7e5      	b.n	800fd94 <__mdiff+0x28>
 800fdc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fdcc:	6926      	ldr	r6, [r4, #16]
 800fdce:	60c5      	str	r5, [r0, #12]
 800fdd0:	f104 0914 	add.w	r9, r4, #20
 800fdd4:	f108 0514 	add.w	r5, r8, #20
 800fdd8:	f100 0e14 	add.w	lr, r0, #20
 800fddc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fde0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fde4:	f108 0210 	add.w	r2, r8, #16
 800fde8:	46f2      	mov	sl, lr
 800fdea:	2100      	movs	r1, #0
 800fdec:	f859 3b04 	ldr.w	r3, [r9], #4
 800fdf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fdf4:	fa11 f88b 	uxtah	r8, r1, fp
 800fdf8:	b299      	uxth	r1, r3
 800fdfa:	0c1b      	lsrs	r3, r3, #16
 800fdfc:	eba8 0801 	sub.w	r8, r8, r1
 800fe00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe08:	fa1f f888 	uxth.w	r8, r8
 800fe0c:	1419      	asrs	r1, r3, #16
 800fe0e:	454e      	cmp	r6, r9
 800fe10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe14:	f84a 3b04 	str.w	r3, [sl], #4
 800fe18:	d8e8      	bhi.n	800fdec <__mdiff+0x80>
 800fe1a:	1b33      	subs	r3, r6, r4
 800fe1c:	3b15      	subs	r3, #21
 800fe1e:	f023 0303 	bic.w	r3, r3, #3
 800fe22:	3304      	adds	r3, #4
 800fe24:	3415      	adds	r4, #21
 800fe26:	42a6      	cmp	r6, r4
 800fe28:	bf38      	it	cc
 800fe2a:	2304      	movcc	r3, #4
 800fe2c:	441d      	add	r5, r3
 800fe2e:	4473      	add	r3, lr
 800fe30:	469e      	mov	lr, r3
 800fe32:	462e      	mov	r6, r5
 800fe34:	4566      	cmp	r6, ip
 800fe36:	d30e      	bcc.n	800fe56 <__mdiff+0xea>
 800fe38:	f10c 0203 	add.w	r2, ip, #3
 800fe3c:	1b52      	subs	r2, r2, r5
 800fe3e:	f022 0203 	bic.w	r2, r2, #3
 800fe42:	3d03      	subs	r5, #3
 800fe44:	45ac      	cmp	ip, r5
 800fe46:	bf38      	it	cc
 800fe48:	2200      	movcc	r2, #0
 800fe4a:	4413      	add	r3, r2
 800fe4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fe50:	b17a      	cbz	r2, 800fe72 <__mdiff+0x106>
 800fe52:	6107      	str	r7, [r0, #16]
 800fe54:	e7a4      	b.n	800fda0 <__mdiff+0x34>
 800fe56:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe5a:	fa11 f288 	uxtah	r2, r1, r8
 800fe5e:	1414      	asrs	r4, r2, #16
 800fe60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe64:	b292      	uxth	r2, r2
 800fe66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe6a:	f84e 2b04 	str.w	r2, [lr], #4
 800fe6e:	1421      	asrs	r1, r4, #16
 800fe70:	e7e0      	b.n	800fe34 <__mdiff+0xc8>
 800fe72:	3f01      	subs	r7, #1
 800fe74:	e7ea      	b.n	800fe4c <__mdiff+0xe0>
 800fe76:	bf00      	nop
 800fe78:	08012544 	.word	0x08012544
 800fe7c:	08012555 	.word	0x08012555

0800fe80 <__d2b>:
 800fe80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe84:	460f      	mov	r7, r1
 800fe86:	2101      	movs	r1, #1
 800fe88:	ec59 8b10 	vmov	r8, r9, d0
 800fe8c:	4616      	mov	r6, r2
 800fe8e:	f7ff fcd5 	bl	800f83c <_Balloc>
 800fe92:	4604      	mov	r4, r0
 800fe94:	b930      	cbnz	r0, 800fea4 <__d2b+0x24>
 800fe96:	4602      	mov	r2, r0
 800fe98:	4b24      	ldr	r3, [pc, #144]	; (800ff2c <__d2b+0xac>)
 800fe9a:	4825      	ldr	r0, [pc, #148]	; (800ff30 <__d2b+0xb0>)
 800fe9c:	f240 310f 	movw	r1, #783	; 0x30f
 800fea0:	f000 fa78 	bl	8010394 <__assert_func>
 800fea4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800feac:	bb2d      	cbnz	r5, 800fefa <__d2b+0x7a>
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	f1b8 0300 	subs.w	r3, r8, #0
 800feb4:	d026      	beq.n	800ff04 <__d2b+0x84>
 800feb6:	4668      	mov	r0, sp
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	f7ff fd87 	bl	800f9cc <__lo0bits>
 800febe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fec2:	b1e8      	cbz	r0, 800ff00 <__d2b+0x80>
 800fec4:	f1c0 0320 	rsb	r3, r0, #32
 800fec8:	fa02 f303 	lsl.w	r3, r2, r3
 800fecc:	430b      	orrs	r3, r1
 800fece:	40c2      	lsrs	r2, r0
 800fed0:	6163      	str	r3, [r4, #20]
 800fed2:	9201      	str	r2, [sp, #4]
 800fed4:	9b01      	ldr	r3, [sp, #4]
 800fed6:	61a3      	str	r3, [r4, #24]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	bf14      	ite	ne
 800fedc:	2202      	movne	r2, #2
 800fede:	2201      	moveq	r2, #1
 800fee0:	6122      	str	r2, [r4, #16]
 800fee2:	b1bd      	cbz	r5, 800ff14 <__d2b+0x94>
 800fee4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fee8:	4405      	add	r5, r0
 800feea:	603d      	str	r5, [r7, #0]
 800feec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fef0:	6030      	str	r0, [r6, #0]
 800fef2:	4620      	mov	r0, r4
 800fef4:	b003      	add	sp, #12
 800fef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fefa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fefe:	e7d6      	b.n	800feae <__d2b+0x2e>
 800ff00:	6161      	str	r1, [r4, #20]
 800ff02:	e7e7      	b.n	800fed4 <__d2b+0x54>
 800ff04:	a801      	add	r0, sp, #4
 800ff06:	f7ff fd61 	bl	800f9cc <__lo0bits>
 800ff0a:	9b01      	ldr	r3, [sp, #4]
 800ff0c:	6163      	str	r3, [r4, #20]
 800ff0e:	3020      	adds	r0, #32
 800ff10:	2201      	movs	r2, #1
 800ff12:	e7e5      	b.n	800fee0 <__d2b+0x60>
 800ff14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff1c:	6038      	str	r0, [r7, #0]
 800ff1e:	6918      	ldr	r0, [r3, #16]
 800ff20:	f7ff fd34 	bl	800f98c <__hi0bits>
 800ff24:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff28:	e7e2      	b.n	800fef0 <__d2b+0x70>
 800ff2a:	bf00      	nop
 800ff2c:	08012544 	.word	0x08012544
 800ff30:	08012555 	.word	0x08012555

0800ff34 <__ssputs_r>:
 800ff34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff38:	688e      	ldr	r6, [r1, #8]
 800ff3a:	461f      	mov	r7, r3
 800ff3c:	42be      	cmp	r6, r7
 800ff3e:	680b      	ldr	r3, [r1, #0]
 800ff40:	4682      	mov	sl, r0
 800ff42:	460c      	mov	r4, r1
 800ff44:	4690      	mov	r8, r2
 800ff46:	d82c      	bhi.n	800ffa2 <__ssputs_r+0x6e>
 800ff48:	898a      	ldrh	r2, [r1, #12]
 800ff4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff4e:	d026      	beq.n	800ff9e <__ssputs_r+0x6a>
 800ff50:	6965      	ldr	r5, [r4, #20]
 800ff52:	6909      	ldr	r1, [r1, #16]
 800ff54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff58:	eba3 0901 	sub.w	r9, r3, r1
 800ff5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff60:	1c7b      	adds	r3, r7, #1
 800ff62:	444b      	add	r3, r9
 800ff64:	106d      	asrs	r5, r5, #1
 800ff66:	429d      	cmp	r5, r3
 800ff68:	bf38      	it	cc
 800ff6a:	461d      	movcc	r5, r3
 800ff6c:	0553      	lsls	r3, r2, #21
 800ff6e:	d527      	bpl.n	800ffc0 <__ssputs_r+0x8c>
 800ff70:	4629      	mov	r1, r5
 800ff72:	f7ff fbd7 	bl	800f724 <_malloc_r>
 800ff76:	4606      	mov	r6, r0
 800ff78:	b360      	cbz	r0, 800ffd4 <__ssputs_r+0xa0>
 800ff7a:	6921      	ldr	r1, [r4, #16]
 800ff7c:	464a      	mov	r2, r9
 800ff7e:	f7fe fcd4 	bl	800e92a <memcpy>
 800ff82:	89a3      	ldrh	r3, [r4, #12]
 800ff84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff8c:	81a3      	strh	r3, [r4, #12]
 800ff8e:	6126      	str	r6, [r4, #16]
 800ff90:	6165      	str	r5, [r4, #20]
 800ff92:	444e      	add	r6, r9
 800ff94:	eba5 0509 	sub.w	r5, r5, r9
 800ff98:	6026      	str	r6, [r4, #0]
 800ff9a:	60a5      	str	r5, [r4, #8]
 800ff9c:	463e      	mov	r6, r7
 800ff9e:	42be      	cmp	r6, r7
 800ffa0:	d900      	bls.n	800ffa4 <__ssputs_r+0x70>
 800ffa2:	463e      	mov	r6, r7
 800ffa4:	6820      	ldr	r0, [r4, #0]
 800ffa6:	4632      	mov	r2, r6
 800ffa8:	4641      	mov	r1, r8
 800ffaa:	f000 f9c9 	bl	8010340 <memmove>
 800ffae:	68a3      	ldr	r3, [r4, #8]
 800ffb0:	1b9b      	subs	r3, r3, r6
 800ffb2:	60a3      	str	r3, [r4, #8]
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	4433      	add	r3, r6
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	2000      	movs	r0, #0
 800ffbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc0:	462a      	mov	r2, r5
 800ffc2:	f000 fa2d 	bl	8010420 <_realloc_r>
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d1e0      	bne.n	800ff8e <__ssputs_r+0x5a>
 800ffcc:	6921      	ldr	r1, [r4, #16]
 800ffce:	4650      	mov	r0, sl
 800ffd0:	f7ff fb34 	bl	800f63c <_free_r>
 800ffd4:	230c      	movs	r3, #12
 800ffd6:	f8ca 3000 	str.w	r3, [sl]
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe0:	81a3      	strh	r3, [r4, #12]
 800ffe2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe6:	e7e9      	b.n	800ffbc <__ssputs_r+0x88>

0800ffe8 <_svfiprintf_r>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	4698      	mov	r8, r3
 800ffee:	898b      	ldrh	r3, [r1, #12]
 800fff0:	061b      	lsls	r3, r3, #24
 800fff2:	b09d      	sub	sp, #116	; 0x74
 800fff4:	4607      	mov	r7, r0
 800fff6:	460d      	mov	r5, r1
 800fff8:	4614      	mov	r4, r2
 800fffa:	d50e      	bpl.n	801001a <_svfiprintf_r+0x32>
 800fffc:	690b      	ldr	r3, [r1, #16]
 800fffe:	b963      	cbnz	r3, 801001a <_svfiprintf_r+0x32>
 8010000:	2140      	movs	r1, #64	; 0x40
 8010002:	f7ff fb8f 	bl	800f724 <_malloc_r>
 8010006:	6028      	str	r0, [r5, #0]
 8010008:	6128      	str	r0, [r5, #16]
 801000a:	b920      	cbnz	r0, 8010016 <_svfiprintf_r+0x2e>
 801000c:	230c      	movs	r3, #12
 801000e:	603b      	str	r3, [r7, #0]
 8010010:	f04f 30ff 	mov.w	r0, #4294967295
 8010014:	e0d0      	b.n	80101b8 <_svfiprintf_r+0x1d0>
 8010016:	2340      	movs	r3, #64	; 0x40
 8010018:	616b      	str	r3, [r5, #20]
 801001a:	2300      	movs	r3, #0
 801001c:	9309      	str	r3, [sp, #36]	; 0x24
 801001e:	2320      	movs	r3, #32
 8010020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010024:	f8cd 800c 	str.w	r8, [sp, #12]
 8010028:	2330      	movs	r3, #48	; 0x30
 801002a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80101d0 <_svfiprintf_r+0x1e8>
 801002e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010032:	f04f 0901 	mov.w	r9, #1
 8010036:	4623      	mov	r3, r4
 8010038:	469a      	mov	sl, r3
 801003a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801003e:	b10a      	cbz	r2, 8010044 <_svfiprintf_r+0x5c>
 8010040:	2a25      	cmp	r2, #37	; 0x25
 8010042:	d1f9      	bne.n	8010038 <_svfiprintf_r+0x50>
 8010044:	ebba 0b04 	subs.w	fp, sl, r4
 8010048:	d00b      	beq.n	8010062 <_svfiprintf_r+0x7a>
 801004a:	465b      	mov	r3, fp
 801004c:	4622      	mov	r2, r4
 801004e:	4629      	mov	r1, r5
 8010050:	4638      	mov	r0, r7
 8010052:	f7ff ff6f 	bl	800ff34 <__ssputs_r>
 8010056:	3001      	adds	r0, #1
 8010058:	f000 80a9 	beq.w	80101ae <_svfiprintf_r+0x1c6>
 801005c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801005e:	445a      	add	r2, fp
 8010060:	9209      	str	r2, [sp, #36]	; 0x24
 8010062:	f89a 3000 	ldrb.w	r3, [sl]
 8010066:	2b00      	cmp	r3, #0
 8010068:	f000 80a1 	beq.w	80101ae <_svfiprintf_r+0x1c6>
 801006c:	2300      	movs	r3, #0
 801006e:	f04f 32ff 	mov.w	r2, #4294967295
 8010072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010076:	f10a 0a01 	add.w	sl, sl, #1
 801007a:	9304      	str	r3, [sp, #16]
 801007c:	9307      	str	r3, [sp, #28]
 801007e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010082:	931a      	str	r3, [sp, #104]	; 0x68
 8010084:	4654      	mov	r4, sl
 8010086:	2205      	movs	r2, #5
 8010088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801008c:	4850      	ldr	r0, [pc, #320]	; (80101d0 <_svfiprintf_r+0x1e8>)
 801008e:	f7f0 f89f 	bl	80001d0 <memchr>
 8010092:	9a04      	ldr	r2, [sp, #16]
 8010094:	b9d8      	cbnz	r0, 80100ce <_svfiprintf_r+0xe6>
 8010096:	06d0      	lsls	r0, r2, #27
 8010098:	bf44      	itt	mi
 801009a:	2320      	movmi	r3, #32
 801009c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100a0:	0711      	lsls	r1, r2, #28
 80100a2:	bf44      	itt	mi
 80100a4:	232b      	movmi	r3, #43	; 0x2b
 80100a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100aa:	f89a 3000 	ldrb.w	r3, [sl]
 80100ae:	2b2a      	cmp	r3, #42	; 0x2a
 80100b0:	d015      	beq.n	80100de <_svfiprintf_r+0xf6>
 80100b2:	9a07      	ldr	r2, [sp, #28]
 80100b4:	4654      	mov	r4, sl
 80100b6:	2000      	movs	r0, #0
 80100b8:	f04f 0c0a 	mov.w	ip, #10
 80100bc:	4621      	mov	r1, r4
 80100be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100c2:	3b30      	subs	r3, #48	; 0x30
 80100c4:	2b09      	cmp	r3, #9
 80100c6:	d94d      	bls.n	8010164 <_svfiprintf_r+0x17c>
 80100c8:	b1b0      	cbz	r0, 80100f8 <_svfiprintf_r+0x110>
 80100ca:	9207      	str	r2, [sp, #28]
 80100cc:	e014      	b.n	80100f8 <_svfiprintf_r+0x110>
 80100ce:	eba0 0308 	sub.w	r3, r0, r8
 80100d2:	fa09 f303 	lsl.w	r3, r9, r3
 80100d6:	4313      	orrs	r3, r2
 80100d8:	9304      	str	r3, [sp, #16]
 80100da:	46a2      	mov	sl, r4
 80100dc:	e7d2      	b.n	8010084 <_svfiprintf_r+0x9c>
 80100de:	9b03      	ldr	r3, [sp, #12]
 80100e0:	1d19      	adds	r1, r3, #4
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	9103      	str	r1, [sp, #12]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	bfbb      	ittet	lt
 80100ea:	425b      	neglt	r3, r3
 80100ec:	f042 0202 	orrlt.w	r2, r2, #2
 80100f0:	9307      	strge	r3, [sp, #28]
 80100f2:	9307      	strlt	r3, [sp, #28]
 80100f4:	bfb8      	it	lt
 80100f6:	9204      	strlt	r2, [sp, #16]
 80100f8:	7823      	ldrb	r3, [r4, #0]
 80100fa:	2b2e      	cmp	r3, #46	; 0x2e
 80100fc:	d10c      	bne.n	8010118 <_svfiprintf_r+0x130>
 80100fe:	7863      	ldrb	r3, [r4, #1]
 8010100:	2b2a      	cmp	r3, #42	; 0x2a
 8010102:	d134      	bne.n	801016e <_svfiprintf_r+0x186>
 8010104:	9b03      	ldr	r3, [sp, #12]
 8010106:	1d1a      	adds	r2, r3, #4
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	9203      	str	r2, [sp, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	bfb8      	it	lt
 8010110:	f04f 33ff 	movlt.w	r3, #4294967295
 8010114:	3402      	adds	r4, #2
 8010116:	9305      	str	r3, [sp, #20]
 8010118:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80101e0 <_svfiprintf_r+0x1f8>
 801011c:	7821      	ldrb	r1, [r4, #0]
 801011e:	2203      	movs	r2, #3
 8010120:	4650      	mov	r0, sl
 8010122:	f7f0 f855 	bl	80001d0 <memchr>
 8010126:	b138      	cbz	r0, 8010138 <_svfiprintf_r+0x150>
 8010128:	9b04      	ldr	r3, [sp, #16]
 801012a:	eba0 000a 	sub.w	r0, r0, sl
 801012e:	2240      	movs	r2, #64	; 0x40
 8010130:	4082      	lsls	r2, r0
 8010132:	4313      	orrs	r3, r2
 8010134:	3401      	adds	r4, #1
 8010136:	9304      	str	r3, [sp, #16]
 8010138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801013c:	4825      	ldr	r0, [pc, #148]	; (80101d4 <_svfiprintf_r+0x1ec>)
 801013e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010142:	2206      	movs	r2, #6
 8010144:	f7f0 f844 	bl	80001d0 <memchr>
 8010148:	2800      	cmp	r0, #0
 801014a:	d038      	beq.n	80101be <_svfiprintf_r+0x1d6>
 801014c:	4b22      	ldr	r3, [pc, #136]	; (80101d8 <_svfiprintf_r+0x1f0>)
 801014e:	bb1b      	cbnz	r3, 8010198 <_svfiprintf_r+0x1b0>
 8010150:	9b03      	ldr	r3, [sp, #12]
 8010152:	3307      	adds	r3, #7
 8010154:	f023 0307 	bic.w	r3, r3, #7
 8010158:	3308      	adds	r3, #8
 801015a:	9303      	str	r3, [sp, #12]
 801015c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801015e:	4433      	add	r3, r6
 8010160:	9309      	str	r3, [sp, #36]	; 0x24
 8010162:	e768      	b.n	8010036 <_svfiprintf_r+0x4e>
 8010164:	fb0c 3202 	mla	r2, ip, r2, r3
 8010168:	460c      	mov	r4, r1
 801016a:	2001      	movs	r0, #1
 801016c:	e7a6      	b.n	80100bc <_svfiprintf_r+0xd4>
 801016e:	2300      	movs	r3, #0
 8010170:	3401      	adds	r4, #1
 8010172:	9305      	str	r3, [sp, #20]
 8010174:	4619      	mov	r1, r3
 8010176:	f04f 0c0a 	mov.w	ip, #10
 801017a:	4620      	mov	r0, r4
 801017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010180:	3a30      	subs	r2, #48	; 0x30
 8010182:	2a09      	cmp	r2, #9
 8010184:	d903      	bls.n	801018e <_svfiprintf_r+0x1a6>
 8010186:	2b00      	cmp	r3, #0
 8010188:	d0c6      	beq.n	8010118 <_svfiprintf_r+0x130>
 801018a:	9105      	str	r1, [sp, #20]
 801018c:	e7c4      	b.n	8010118 <_svfiprintf_r+0x130>
 801018e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010192:	4604      	mov	r4, r0
 8010194:	2301      	movs	r3, #1
 8010196:	e7f0      	b.n	801017a <_svfiprintf_r+0x192>
 8010198:	ab03      	add	r3, sp, #12
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	462a      	mov	r2, r5
 801019e:	4b0f      	ldr	r3, [pc, #60]	; (80101dc <_svfiprintf_r+0x1f4>)
 80101a0:	a904      	add	r1, sp, #16
 80101a2:	4638      	mov	r0, r7
 80101a4:	f7fd fe56 	bl	800de54 <_printf_float>
 80101a8:	1c42      	adds	r2, r0, #1
 80101aa:	4606      	mov	r6, r0
 80101ac:	d1d6      	bne.n	801015c <_svfiprintf_r+0x174>
 80101ae:	89ab      	ldrh	r3, [r5, #12]
 80101b0:	065b      	lsls	r3, r3, #25
 80101b2:	f53f af2d 	bmi.w	8010010 <_svfiprintf_r+0x28>
 80101b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101b8:	b01d      	add	sp, #116	; 0x74
 80101ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101be:	ab03      	add	r3, sp, #12
 80101c0:	9300      	str	r3, [sp, #0]
 80101c2:	462a      	mov	r2, r5
 80101c4:	4b05      	ldr	r3, [pc, #20]	; (80101dc <_svfiprintf_r+0x1f4>)
 80101c6:	a904      	add	r1, sp, #16
 80101c8:	4638      	mov	r0, r7
 80101ca:	f7fe f8e7 	bl	800e39c <_printf_i>
 80101ce:	e7eb      	b.n	80101a8 <_svfiprintf_r+0x1c0>
 80101d0:	080126ac 	.word	0x080126ac
 80101d4:	080126b6 	.word	0x080126b6
 80101d8:	0800de55 	.word	0x0800de55
 80101dc:	0800ff35 	.word	0x0800ff35
 80101e0:	080126b2 	.word	0x080126b2

080101e4 <__sflush_r>:
 80101e4:	898a      	ldrh	r2, [r1, #12]
 80101e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ea:	4605      	mov	r5, r0
 80101ec:	0710      	lsls	r0, r2, #28
 80101ee:	460c      	mov	r4, r1
 80101f0:	d458      	bmi.n	80102a4 <__sflush_r+0xc0>
 80101f2:	684b      	ldr	r3, [r1, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	dc05      	bgt.n	8010204 <__sflush_r+0x20>
 80101f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dc02      	bgt.n	8010204 <__sflush_r+0x20>
 80101fe:	2000      	movs	r0, #0
 8010200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010206:	2e00      	cmp	r6, #0
 8010208:	d0f9      	beq.n	80101fe <__sflush_r+0x1a>
 801020a:	2300      	movs	r3, #0
 801020c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010210:	682f      	ldr	r7, [r5, #0]
 8010212:	6a21      	ldr	r1, [r4, #32]
 8010214:	602b      	str	r3, [r5, #0]
 8010216:	d032      	beq.n	801027e <__sflush_r+0x9a>
 8010218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	075a      	lsls	r2, r3, #29
 801021e:	d505      	bpl.n	801022c <__sflush_r+0x48>
 8010220:	6863      	ldr	r3, [r4, #4]
 8010222:	1ac0      	subs	r0, r0, r3
 8010224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010226:	b10b      	cbz	r3, 801022c <__sflush_r+0x48>
 8010228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801022a:	1ac0      	subs	r0, r0, r3
 801022c:	2300      	movs	r3, #0
 801022e:	4602      	mov	r2, r0
 8010230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010232:	6a21      	ldr	r1, [r4, #32]
 8010234:	4628      	mov	r0, r5
 8010236:	47b0      	blx	r6
 8010238:	1c43      	adds	r3, r0, #1
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	d106      	bne.n	801024c <__sflush_r+0x68>
 801023e:	6829      	ldr	r1, [r5, #0]
 8010240:	291d      	cmp	r1, #29
 8010242:	d82b      	bhi.n	801029c <__sflush_r+0xb8>
 8010244:	4a29      	ldr	r2, [pc, #164]	; (80102ec <__sflush_r+0x108>)
 8010246:	410a      	asrs	r2, r1
 8010248:	07d6      	lsls	r6, r2, #31
 801024a:	d427      	bmi.n	801029c <__sflush_r+0xb8>
 801024c:	2200      	movs	r2, #0
 801024e:	6062      	str	r2, [r4, #4]
 8010250:	04d9      	lsls	r1, r3, #19
 8010252:	6922      	ldr	r2, [r4, #16]
 8010254:	6022      	str	r2, [r4, #0]
 8010256:	d504      	bpl.n	8010262 <__sflush_r+0x7e>
 8010258:	1c42      	adds	r2, r0, #1
 801025a:	d101      	bne.n	8010260 <__sflush_r+0x7c>
 801025c:	682b      	ldr	r3, [r5, #0]
 801025e:	b903      	cbnz	r3, 8010262 <__sflush_r+0x7e>
 8010260:	6560      	str	r0, [r4, #84]	; 0x54
 8010262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010264:	602f      	str	r7, [r5, #0]
 8010266:	2900      	cmp	r1, #0
 8010268:	d0c9      	beq.n	80101fe <__sflush_r+0x1a>
 801026a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801026e:	4299      	cmp	r1, r3
 8010270:	d002      	beq.n	8010278 <__sflush_r+0x94>
 8010272:	4628      	mov	r0, r5
 8010274:	f7ff f9e2 	bl	800f63c <_free_r>
 8010278:	2000      	movs	r0, #0
 801027a:	6360      	str	r0, [r4, #52]	; 0x34
 801027c:	e7c0      	b.n	8010200 <__sflush_r+0x1c>
 801027e:	2301      	movs	r3, #1
 8010280:	4628      	mov	r0, r5
 8010282:	47b0      	blx	r6
 8010284:	1c41      	adds	r1, r0, #1
 8010286:	d1c8      	bne.n	801021a <__sflush_r+0x36>
 8010288:	682b      	ldr	r3, [r5, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d0c5      	beq.n	801021a <__sflush_r+0x36>
 801028e:	2b1d      	cmp	r3, #29
 8010290:	d001      	beq.n	8010296 <__sflush_r+0xb2>
 8010292:	2b16      	cmp	r3, #22
 8010294:	d101      	bne.n	801029a <__sflush_r+0xb6>
 8010296:	602f      	str	r7, [r5, #0]
 8010298:	e7b1      	b.n	80101fe <__sflush_r+0x1a>
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102a0:	81a3      	strh	r3, [r4, #12]
 80102a2:	e7ad      	b.n	8010200 <__sflush_r+0x1c>
 80102a4:	690f      	ldr	r7, [r1, #16]
 80102a6:	2f00      	cmp	r7, #0
 80102a8:	d0a9      	beq.n	80101fe <__sflush_r+0x1a>
 80102aa:	0793      	lsls	r3, r2, #30
 80102ac:	680e      	ldr	r6, [r1, #0]
 80102ae:	bf08      	it	eq
 80102b0:	694b      	ldreq	r3, [r1, #20]
 80102b2:	600f      	str	r7, [r1, #0]
 80102b4:	bf18      	it	ne
 80102b6:	2300      	movne	r3, #0
 80102b8:	eba6 0807 	sub.w	r8, r6, r7
 80102bc:	608b      	str	r3, [r1, #8]
 80102be:	f1b8 0f00 	cmp.w	r8, #0
 80102c2:	dd9c      	ble.n	80101fe <__sflush_r+0x1a>
 80102c4:	6a21      	ldr	r1, [r4, #32]
 80102c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102c8:	4643      	mov	r3, r8
 80102ca:	463a      	mov	r2, r7
 80102cc:	4628      	mov	r0, r5
 80102ce:	47b0      	blx	r6
 80102d0:	2800      	cmp	r0, #0
 80102d2:	dc06      	bgt.n	80102e2 <__sflush_r+0xfe>
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102da:	81a3      	strh	r3, [r4, #12]
 80102dc:	f04f 30ff 	mov.w	r0, #4294967295
 80102e0:	e78e      	b.n	8010200 <__sflush_r+0x1c>
 80102e2:	4407      	add	r7, r0
 80102e4:	eba8 0800 	sub.w	r8, r8, r0
 80102e8:	e7e9      	b.n	80102be <__sflush_r+0xda>
 80102ea:	bf00      	nop
 80102ec:	dfbffffe 	.word	0xdfbffffe

080102f0 <_fflush_r>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	690b      	ldr	r3, [r1, #16]
 80102f4:	4605      	mov	r5, r0
 80102f6:	460c      	mov	r4, r1
 80102f8:	b913      	cbnz	r3, 8010300 <_fflush_r+0x10>
 80102fa:	2500      	movs	r5, #0
 80102fc:	4628      	mov	r0, r5
 80102fe:	bd38      	pop	{r3, r4, r5, pc}
 8010300:	b118      	cbz	r0, 801030a <_fflush_r+0x1a>
 8010302:	6a03      	ldr	r3, [r0, #32]
 8010304:	b90b      	cbnz	r3, 801030a <_fflush_r+0x1a>
 8010306:	f7fe f9f7 	bl	800e6f8 <__sinit>
 801030a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0f3      	beq.n	80102fa <_fflush_r+0xa>
 8010312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010314:	07d0      	lsls	r0, r2, #31
 8010316:	d404      	bmi.n	8010322 <_fflush_r+0x32>
 8010318:	0599      	lsls	r1, r3, #22
 801031a:	d402      	bmi.n	8010322 <_fflush_r+0x32>
 801031c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801031e:	f7fe fb02 	bl	800e926 <__retarget_lock_acquire_recursive>
 8010322:	4628      	mov	r0, r5
 8010324:	4621      	mov	r1, r4
 8010326:	f7ff ff5d 	bl	80101e4 <__sflush_r>
 801032a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801032c:	07da      	lsls	r2, r3, #31
 801032e:	4605      	mov	r5, r0
 8010330:	d4e4      	bmi.n	80102fc <_fflush_r+0xc>
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	059b      	lsls	r3, r3, #22
 8010336:	d4e1      	bmi.n	80102fc <_fflush_r+0xc>
 8010338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801033a:	f7fe faf5 	bl	800e928 <__retarget_lock_release_recursive>
 801033e:	e7dd      	b.n	80102fc <_fflush_r+0xc>

08010340 <memmove>:
 8010340:	4288      	cmp	r0, r1
 8010342:	b510      	push	{r4, lr}
 8010344:	eb01 0402 	add.w	r4, r1, r2
 8010348:	d902      	bls.n	8010350 <memmove+0x10>
 801034a:	4284      	cmp	r4, r0
 801034c:	4623      	mov	r3, r4
 801034e:	d807      	bhi.n	8010360 <memmove+0x20>
 8010350:	1e43      	subs	r3, r0, #1
 8010352:	42a1      	cmp	r1, r4
 8010354:	d008      	beq.n	8010368 <memmove+0x28>
 8010356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801035a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801035e:	e7f8      	b.n	8010352 <memmove+0x12>
 8010360:	4402      	add	r2, r0
 8010362:	4601      	mov	r1, r0
 8010364:	428a      	cmp	r2, r1
 8010366:	d100      	bne.n	801036a <memmove+0x2a>
 8010368:	bd10      	pop	{r4, pc}
 801036a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801036e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010372:	e7f7      	b.n	8010364 <memmove+0x24>

08010374 <_sbrk_r>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	4d06      	ldr	r5, [pc, #24]	; (8010390 <_sbrk_r+0x1c>)
 8010378:	2300      	movs	r3, #0
 801037a:	4604      	mov	r4, r0
 801037c:	4608      	mov	r0, r1
 801037e:	602b      	str	r3, [r5, #0]
 8010380:	f7f4 ff16 	bl	80051b0 <_sbrk>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	d102      	bne.n	801038e <_sbrk_r+0x1a>
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	b103      	cbz	r3, 801038e <_sbrk_r+0x1a>
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	200054f0 	.word	0x200054f0

08010394 <__assert_func>:
 8010394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010396:	4614      	mov	r4, r2
 8010398:	461a      	mov	r2, r3
 801039a:	4b09      	ldr	r3, [pc, #36]	; (80103c0 <__assert_func+0x2c>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4605      	mov	r5, r0
 80103a0:	68d8      	ldr	r0, [r3, #12]
 80103a2:	b14c      	cbz	r4, 80103b8 <__assert_func+0x24>
 80103a4:	4b07      	ldr	r3, [pc, #28]	; (80103c4 <__assert_func+0x30>)
 80103a6:	9100      	str	r1, [sp, #0]
 80103a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103ac:	4906      	ldr	r1, [pc, #24]	; (80103c8 <__assert_func+0x34>)
 80103ae:	462b      	mov	r3, r5
 80103b0:	f000 f872 	bl	8010498 <fiprintf>
 80103b4:	f000 f882 	bl	80104bc <abort>
 80103b8:	4b04      	ldr	r3, [pc, #16]	; (80103cc <__assert_func+0x38>)
 80103ba:	461c      	mov	r4, r3
 80103bc:	e7f3      	b.n	80103a6 <__assert_func+0x12>
 80103be:	bf00      	nop
 80103c0:	20000068 	.word	0x20000068
 80103c4:	080126c7 	.word	0x080126c7
 80103c8:	080126d4 	.word	0x080126d4
 80103cc:	08012702 	.word	0x08012702

080103d0 <_calloc_r>:
 80103d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103d2:	fba1 2402 	umull	r2, r4, r1, r2
 80103d6:	b94c      	cbnz	r4, 80103ec <_calloc_r+0x1c>
 80103d8:	4611      	mov	r1, r2
 80103da:	9201      	str	r2, [sp, #4]
 80103dc:	f7ff f9a2 	bl	800f724 <_malloc_r>
 80103e0:	9a01      	ldr	r2, [sp, #4]
 80103e2:	4605      	mov	r5, r0
 80103e4:	b930      	cbnz	r0, 80103f4 <_calloc_r+0x24>
 80103e6:	4628      	mov	r0, r5
 80103e8:	b003      	add	sp, #12
 80103ea:	bd30      	pop	{r4, r5, pc}
 80103ec:	220c      	movs	r2, #12
 80103ee:	6002      	str	r2, [r0, #0]
 80103f0:	2500      	movs	r5, #0
 80103f2:	e7f8      	b.n	80103e6 <_calloc_r+0x16>
 80103f4:	4621      	mov	r1, r4
 80103f6:	f7fe fa18 	bl	800e82a <memset>
 80103fa:	e7f4      	b.n	80103e6 <_calloc_r+0x16>

080103fc <__ascii_mbtowc>:
 80103fc:	b082      	sub	sp, #8
 80103fe:	b901      	cbnz	r1, 8010402 <__ascii_mbtowc+0x6>
 8010400:	a901      	add	r1, sp, #4
 8010402:	b142      	cbz	r2, 8010416 <__ascii_mbtowc+0x1a>
 8010404:	b14b      	cbz	r3, 801041a <__ascii_mbtowc+0x1e>
 8010406:	7813      	ldrb	r3, [r2, #0]
 8010408:	600b      	str	r3, [r1, #0]
 801040a:	7812      	ldrb	r2, [r2, #0]
 801040c:	1e10      	subs	r0, r2, #0
 801040e:	bf18      	it	ne
 8010410:	2001      	movne	r0, #1
 8010412:	b002      	add	sp, #8
 8010414:	4770      	bx	lr
 8010416:	4610      	mov	r0, r2
 8010418:	e7fb      	b.n	8010412 <__ascii_mbtowc+0x16>
 801041a:	f06f 0001 	mvn.w	r0, #1
 801041e:	e7f8      	b.n	8010412 <__ascii_mbtowc+0x16>

08010420 <_realloc_r>:
 8010420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010424:	4680      	mov	r8, r0
 8010426:	4614      	mov	r4, r2
 8010428:	460e      	mov	r6, r1
 801042a:	b921      	cbnz	r1, 8010436 <_realloc_r+0x16>
 801042c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010430:	4611      	mov	r1, r2
 8010432:	f7ff b977 	b.w	800f724 <_malloc_r>
 8010436:	b92a      	cbnz	r2, 8010444 <_realloc_r+0x24>
 8010438:	f7ff f900 	bl	800f63c <_free_r>
 801043c:	4625      	mov	r5, r4
 801043e:	4628      	mov	r0, r5
 8010440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010444:	f000 f841 	bl	80104ca <_malloc_usable_size_r>
 8010448:	4284      	cmp	r4, r0
 801044a:	4607      	mov	r7, r0
 801044c:	d802      	bhi.n	8010454 <_realloc_r+0x34>
 801044e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010452:	d812      	bhi.n	801047a <_realloc_r+0x5a>
 8010454:	4621      	mov	r1, r4
 8010456:	4640      	mov	r0, r8
 8010458:	f7ff f964 	bl	800f724 <_malloc_r>
 801045c:	4605      	mov	r5, r0
 801045e:	2800      	cmp	r0, #0
 8010460:	d0ed      	beq.n	801043e <_realloc_r+0x1e>
 8010462:	42bc      	cmp	r4, r7
 8010464:	4622      	mov	r2, r4
 8010466:	4631      	mov	r1, r6
 8010468:	bf28      	it	cs
 801046a:	463a      	movcs	r2, r7
 801046c:	f7fe fa5d 	bl	800e92a <memcpy>
 8010470:	4631      	mov	r1, r6
 8010472:	4640      	mov	r0, r8
 8010474:	f7ff f8e2 	bl	800f63c <_free_r>
 8010478:	e7e1      	b.n	801043e <_realloc_r+0x1e>
 801047a:	4635      	mov	r5, r6
 801047c:	e7df      	b.n	801043e <_realloc_r+0x1e>

0801047e <__ascii_wctomb>:
 801047e:	b149      	cbz	r1, 8010494 <__ascii_wctomb+0x16>
 8010480:	2aff      	cmp	r2, #255	; 0xff
 8010482:	bf85      	ittet	hi
 8010484:	238a      	movhi	r3, #138	; 0x8a
 8010486:	6003      	strhi	r3, [r0, #0]
 8010488:	700a      	strbls	r2, [r1, #0]
 801048a:	f04f 30ff 	movhi.w	r0, #4294967295
 801048e:	bf98      	it	ls
 8010490:	2001      	movls	r0, #1
 8010492:	4770      	bx	lr
 8010494:	4608      	mov	r0, r1
 8010496:	4770      	bx	lr

08010498 <fiprintf>:
 8010498:	b40e      	push	{r1, r2, r3}
 801049a:	b503      	push	{r0, r1, lr}
 801049c:	4601      	mov	r1, r0
 801049e:	ab03      	add	r3, sp, #12
 80104a0:	4805      	ldr	r0, [pc, #20]	; (80104b8 <fiprintf+0x20>)
 80104a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104a6:	6800      	ldr	r0, [r0, #0]
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	f000 f83f 	bl	801052c <_vfiprintf_r>
 80104ae:	b002      	add	sp, #8
 80104b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104b4:	b003      	add	sp, #12
 80104b6:	4770      	bx	lr
 80104b8:	20000068 	.word	0x20000068

080104bc <abort>:
 80104bc:	b508      	push	{r3, lr}
 80104be:	2006      	movs	r0, #6
 80104c0:	f000 fa0c 	bl	80108dc <raise>
 80104c4:	2001      	movs	r0, #1
 80104c6:	f7f4 fdfb 	bl	80050c0 <_exit>

080104ca <_malloc_usable_size_r>:
 80104ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104ce:	1f18      	subs	r0, r3, #4
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	bfbc      	itt	lt
 80104d4:	580b      	ldrlt	r3, [r1, r0]
 80104d6:	18c0      	addlt	r0, r0, r3
 80104d8:	4770      	bx	lr

080104da <__sfputc_r>:
 80104da:	6893      	ldr	r3, [r2, #8]
 80104dc:	3b01      	subs	r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	b410      	push	{r4}
 80104e2:	6093      	str	r3, [r2, #8]
 80104e4:	da08      	bge.n	80104f8 <__sfputc_r+0x1e>
 80104e6:	6994      	ldr	r4, [r2, #24]
 80104e8:	42a3      	cmp	r3, r4
 80104ea:	db01      	blt.n	80104f0 <__sfputc_r+0x16>
 80104ec:	290a      	cmp	r1, #10
 80104ee:	d103      	bne.n	80104f8 <__sfputc_r+0x1e>
 80104f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104f4:	f000 b934 	b.w	8010760 <__swbuf_r>
 80104f8:	6813      	ldr	r3, [r2, #0]
 80104fa:	1c58      	adds	r0, r3, #1
 80104fc:	6010      	str	r0, [r2, #0]
 80104fe:	7019      	strb	r1, [r3, #0]
 8010500:	4608      	mov	r0, r1
 8010502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010506:	4770      	bx	lr

08010508 <__sfputs_r>:
 8010508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050a:	4606      	mov	r6, r0
 801050c:	460f      	mov	r7, r1
 801050e:	4614      	mov	r4, r2
 8010510:	18d5      	adds	r5, r2, r3
 8010512:	42ac      	cmp	r4, r5
 8010514:	d101      	bne.n	801051a <__sfputs_r+0x12>
 8010516:	2000      	movs	r0, #0
 8010518:	e007      	b.n	801052a <__sfputs_r+0x22>
 801051a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801051e:	463a      	mov	r2, r7
 8010520:	4630      	mov	r0, r6
 8010522:	f7ff ffda 	bl	80104da <__sfputc_r>
 8010526:	1c43      	adds	r3, r0, #1
 8010528:	d1f3      	bne.n	8010512 <__sfputs_r+0xa>
 801052a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801052c <_vfiprintf_r>:
 801052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010530:	460d      	mov	r5, r1
 8010532:	b09d      	sub	sp, #116	; 0x74
 8010534:	4614      	mov	r4, r2
 8010536:	4698      	mov	r8, r3
 8010538:	4606      	mov	r6, r0
 801053a:	b118      	cbz	r0, 8010544 <_vfiprintf_r+0x18>
 801053c:	6a03      	ldr	r3, [r0, #32]
 801053e:	b90b      	cbnz	r3, 8010544 <_vfiprintf_r+0x18>
 8010540:	f7fe f8da 	bl	800e6f8 <__sinit>
 8010544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010546:	07d9      	lsls	r1, r3, #31
 8010548:	d405      	bmi.n	8010556 <_vfiprintf_r+0x2a>
 801054a:	89ab      	ldrh	r3, [r5, #12]
 801054c:	059a      	lsls	r2, r3, #22
 801054e:	d402      	bmi.n	8010556 <_vfiprintf_r+0x2a>
 8010550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010552:	f7fe f9e8 	bl	800e926 <__retarget_lock_acquire_recursive>
 8010556:	89ab      	ldrh	r3, [r5, #12]
 8010558:	071b      	lsls	r3, r3, #28
 801055a:	d501      	bpl.n	8010560 <_vfiprintf_r+0x34>
 801055c:	692b      	ldr	r3, [r5, #16]
 801055e:	b99b      	cbnz	r3, 8010588 <_vfiprintf_r+0x5c>
 8010560:	4629      	mov	r1, r5
 8010562:	4630      	mov	r0, r6
 8010564:	f000 f93a 	bl	80107dc <__swsetup_r>
 8010568:	b170      	cbz	r0, 8010588 <_vfiprintf_r+0x5c>
 801056a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801056c:	07dc      	lsls	r4, r3, #31
 801056e:	d504      	bpl.n	801057a <_vfiprintf_r+0x4e>
 8010570:	f04f 30ff 	mov.w	r0, #4294967295
 8010574:	b01d      	add	sp, #116	; 0x74
 8010576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057a:	89ab      	ldrh	r3, [r5, #12]
 801057c:	0598      	lsls	r0, r3, #22
 801057e:	d4f7      	bmi.n	8010570 <_vfiprintf_r+0x44>
 8010580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010582:	f7fe f9d1 	bl	800e928 <__retarget_lock_release_recursive>
 8010586:	e7f3      	b.n	8010570 <_vfiprintf_r+0x44>
 8010588:	2300      	movs	r3, #0
 801058a:	9309      	str	r3, [sp, #36]	; 0x24
 801058c:	2320      	movs	r3, #32
 801058e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010592:	f8cd 800c 	str.w	r8, [sp, #12]
 8010596:	2330      	movs	r3, #48	; 0x30
 8010598:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801074c <_vfiprintf_r+0x220>
 801059c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105a0:	f04f 0901 	mov.w	r9, #1
 80105a4:	4623      	mov	r3, r4
 80105a6:	469a      	mov	sl, r3
 80105a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ac:	b10a      	cbz	r2, 80105b2 <_vfiprintf_r+0x86>
 80105ae:	2a25      	cmp	r2, #37	; 0x25
 80105b0:	d1f9      	bne.n	80105a6 <_vfiprintf_r+0x7a>
 80105b2:	ebba 0b04 	subs.w	fp, sl, r4
 80105b6:	d00b      	beq.n	80105d0 <_vfiprintf_r+0xa4>
 80105b8:	465b      	mov	r3, fp
 80105ba:	4622      	mov	r2, r4
 80105bc:	4629      	mov	r1, r5
 80105be:	4630      	mov	r0, r6
 80105c0:	f7ff ffa2 	bl	8010508 <__sfputs_r>
 80105c4:	3001      	adds	r0, #1
 80105c6:	f000 80a9 	beq.w	801071c <_vfiprintf_r+0x1f0>
 80105ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105cc:	445a      	add	r2, fp
 80105ce:	9209      	str	r2, [sp, #36]	; 0x24
 80105d0:	f89a 3000 	ldrb.w	r3, [sl]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 80a1 	beq.w	801071c <_vfiprintf_r+0x1f0>
 80105da:	2300      	movs	r3, #0
 80105dc:	f04f 32ff 	mov.w	r2, #4294967295
 80105e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105e4:	f10a 0a01 	add.w	sl, sl, #1
 80105e8:	9304      	str	r3, [sp, #16]
 80105ea:	9307      	str	r3, [sp, #28]
 80105ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105f0:	931a      	str	r3, [sp, #104]	; 0x68
 80105f2:	4654      	mov	r4, sl
 80105f4:	2205      	movs	r2, #5
 80105f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105fa:	4854      	ldr	r0, [pc, #336]	; (801074c <_vfiprintf_r+0x220>)
 80105fc:	f7ef fde8 	bl	80001d0 <memchr>
 8010600:	9a04      	ldr	r2, [sp, #16]
 8010602:	b9d8      	cbnz	r0, 801063c <_vfiprintf_r+0x110>
 8010604:	06d1      	lsls	r1, r2, #27
 8010606:	bf44      	itt	mi
 8010608:	2320      	movmi	r3, #32
 801060a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801060e:	0713      	lsls	r3, r2, #28
 8010610:	bf44      	itt	mi
 8010612:	232b      	movmi	r3, #43	; 0x2b
 8010614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010618:	f89a 3000 	ldrb.w	r3, [sl]
 801061c:	2b2a      	cmp	r3, #42	; 0x2a
 801061e:	d015      	beq.n	801064c <_vfiprintf_r+0x120>
 8010620:	9a07      	ldr	r2, [sp, #28]
 8010622:	4654      	mov	r4, sl
 8010624:	2000      	movs	r0, #0
 8010626:	f04f 0c0a 	mov.w	ip, #10
 801062a:	4621      	mov	r1, r4
 801062c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010630:	3b30      	subs	r3, #48	; 0x30
 8010632:	2b09      	cmp	r3, #9
 8010634:	d94d      	bls.n	80106d2 <_vfiprintf_r+0x1a6>
 8010636:	b1b0      	cbz	r0, 8010666 <_vfiprintf_r+0x13a>
 8010638:	9207      	str	r2, [sp, #28]
 801063a:	e014      	b.n	8010666 <_vfiprintf_r+0x13a>
 801063c:	eba0 0308 	sub.w	r3, r0, r8
 8010640:	fa09 f303 	lsl.w	r3, r9, r3
 8010644:	4313      	orrs	r3, r2
 8010646:	9304      	str	r3, [sp, #16]
 8010648:	46a2      	mov	sl, r4
 801064a:	e7d2      	b.n	80105f2 <_vfiprintf_r+0xc6>
 801064c:	9b03      	ldr	r3, [sp, #12]
 801064e:	1d19      	adds	r1, r3, #4
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	9103      	str	r1, [sp, #12]
 8010654:	2b00      	cmp	r3, #0
 8010656:	bfbb      	ittet	lt
 8010658:	425b      	neglt	r3, r3
 801065a:	f042 0202 	orrlt.w	r2, r2, #2
 801065e:	9307      	strge	r3, [sp, #28]
 8010660:	9307      	strlt	r3, [sp, #28]
 8010662:	bfb8      	it	lt
 8010664:	9204      	strlt	r2, [sp, #16]
 8010666:	7823      	ldrb	r3, [r4, #0]
 8010668:	2b2e      	cmp	r3, #46	; 0x2e
 801066a:	d10c      	bne.n	8010686 <_vfiprintf_r+0x15a>
 801066c:	7863      	ldrb	r3, [r4, #1]
 801066e:	2b2a      	cmp	r3, #42	; 0x2a
 8010670:	d134      	bne.n	80106dc <_vfiprintf_r+0x1b0>
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	1d1a      	adds	r2, r3, #4
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	9203      	str	r2, [sp, #12]
 801067a:	2b00      	cmp	r3, #0
 801067c:	bfb8      	it	lt
 801067e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010682:	3402      	adds	r4, #2
 8010684:	9305      	str	r3, [sp, #20]
 8010686:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801075c <_vfiprintf_r+0x230>
 801068a:	7821      	ldrb	r1, [r4, #0]
 801068c:	2203      	movs	r2, #3
 801068e:	4650      	mov	r0, sl
 8010690:	f7ef fd9e 	bl	80001d0 <memchr>
 8010694:	b138      	cbz	r0, 80106a6 <_vfiprintf_r+0x17a>
 8010696:	9b04      	ldr	r3, [sp, #16]
 8010698:	eba0 000a 	sub.w	r0, r0, sl
 801069c:	2240      	movs	r2, #64	; 0x40
 801069e:	4082      	lsls	r2, r0
 80106a0:	4313      	orrs	r3, r2
 80106a2:	3401      	adds	r4, #1
 80106a4:	9304      	str	r3, [sp, #16]
 80106a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106aa:	4829      	ldr	r0, [pc, #164]	; (8010750 <_vfiprintf_r+0x224>)
 80106ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106b0:	2206      	movs	r2, #6
 80106b2:	f7ef fd8d 	bl	80001d0 <memchr>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d03f      	beq.n	801073a <_vfiprintf_r+0x20e>
 80106ba:	4b26      	ldr	r3, [pc, #152]	; (8010754 <_vfiprintf_r+0x228>)
 80106bc:	bb1b      	cbnz	r3, 8010706 <_vfiprintf_r+0x1da>
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	3307      	adds	r3, #7
 80106c2:	f023 0307 	bic.w	r3, r3, #7
 80106c6:	3308      	adds	r3, #8
 80106c8:	9303      	str	r3, [sp, #12]
 80106ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106cc:	443b      	add	r3, r7
 80106ce:	9309      	str	r3, [sp, #36]	; 0x24
 80106d0:	e768      	b.n	80105a4 <_vfiprintf_r+0x78>
 80106d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80106d6:	460c      	mov	r4, r1
 80106d8:	2001      	movs	r0, #1
 80106da:	e7a6      	b.n	801062a <_vfiprintf_r+0xfe>
 80106dc:	2300      	movs	r3, #0
 80106de:	3401      	adds	r4, #1
 80106e0:	9305      	str	r3, [sp, #20]
 80106e2:	4619      	mov	r1, r3
 80106e4:	f04f 0c0a 	mov.w	ip, #10
 80106e8:	4620      	mov	r0, r4
 80106ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ee:	3a30      	subs	r2, #48	; 0x30
 80106f0:	2a09      	cmp	r2, #9
 80106f2:	d903      	bls.n	80106fc <_vfiprintf_r+0x1d0>
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d0c6      	beq.n	8010686 <_vfiprintf_r+0x15a>
 80106f8:	9105      	str	r1, [sp, #20]
 80106fa:	e7c4      	b.n	8010686 <_vfiprintf_r+0x15a>
 80106fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010700:	4604      	mov	r4, r0
 8010702:	2301      	movs	r3, #1
 8010704:	e7f0      	b.n	80106e8 <_vfiprintf_r+0x1bc>
 8010706:	ab03      	add	r3, sp, #12
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	462a      	mov	r2, r5
 801070c:	4b12      	ldr	r3, [pc, #72]	; (8010758 <_vfiprintf_r+0x22c>)
 801070e:	a904      	add	r1, sp, #16
 8010710:	4630      	mov	r0, r6
 8010712:	f7fd fb9f 	bl	800de54 <_printf_float>
 8010716:	4607      	mov	r7, r0
 8010718:	1c78      	adds	r0, r7, #1
 801071a:	d1d6      	bne.n	80106ca <_vfiprintf_r+0x19e>
 801071c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801071e:	07d9      	lsls	r1, r3, #31
 8010720:	d405      	bmi.n	801072e <_vfiprintf_r+0x202>
 8010722:	89ab      	ldrh	r3, [r5, #12]
 8010724:	059a      	lsls	r2, r3, #22
 8010726:	d402      	bmi.n	801072e <_vfiprintf_r+0x202>
 8010728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801072a:	f7fe f8fd 	bl	800e928 <__retarget_lock_release_recursive>
 801072e:	89ab      	ldrh	r3, [r5, #12]
 8010730:	065b      	lsls	r3, r3, #25
 8010732:	f53f af1d 	bmi.w	8010570 <_vfiprintf_r+0x44>
 8010736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010738:	e71c      	b.n	8010574 <_vfiprintf_r+0x48>
 801073a:	ab03      	add	r3, sp, #12
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	462a      	mov	r2, r5
 8010740:	4b05      	ldr	r3, [pc, #20]	; (8010758 <_vfiprintf_r+0x22c>)
 8010742:	a904      	add	r1, sp, #16
 8010744:	4630      	mov	r0, r6
 8010746:	f7fd fe29 	bl	800e39c <_printf_i>
 801074a:	e7e4      	b.n	8010716 <_vfiprintf_r+0x1ea>
 801074c:	080126ac 	.word	0x080126ac
 8010750:	080126b6 	.word	0x080126b6
 8010754:	0800de55 	.word	0x0800de55
 8010758:	08010509 	.word	0x08010509
 801075c:	080126b2 	.word	0x080126b2

08010760 <__swbuf_r>:
 8010760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010762:	460e      	mov	r6, r1
 8010764:	4614      	mov	r4, r2
 8010766:	4605      	mov	r5, r0
 8010768:	b118      	cbz	r0, 8010772 <__swbuf_r+0x12>
 801076a:	6a03      	ldr	r3, [r0, #32]
 801076c:	b90b      	cbnz	r3, 8010772 <__swbuf_r+0x12>
 801076e:	f7fd ffc3 	bl	800e6f8 <__sinit>
 8010772:	69a3      	ldr	r3, [r4, #24]
 8010774:	60a3      	str	r3, [r4, #8]
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	071a      	lsls	r2, r3, #28
 801077a:	d525      	bpl.n	80107c8 <__swbuf_r+0x68>
 801077c:	6923      	ldr	r3, [r4, #16]
 801077e:	b31b      	cbz	r3, 80107c8 <__swbuf_r+0x68>
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	6922      	ldr	r2, [r4, #16]
 8010784:	1a98      	subs	r0, r3, r2
 8010786:	6963      	ldr	r3, [r4, #20]
 8010788:	b2f6      	uxtb	r6, r6
 801078a:	4283      	cmp	r3, r0
 801078c:	4637      	mov	r7, r6
 801078e:	dc04      	bgt.n	801079a <__swbuf_r+0x3a>
 8010790:	4621      	mov	r1, r4
 8010792:	4628      	mov	r0, r5
 8010794:	f7ff fdac 	bl	80102f0 <_fflush_r>
 8010798:	b9e0      	cbnz	r0, 80107d4 <__swbuf_r+0x74>
 801079a:	68a3      	ldr	r3, [r4, #8]
 801079c:	3b01      	subs	r3, #1
 801079e:	60a3      	str	r3, [r4, #8]
 80107a0:	6823      	ldr	r3, [r4, #0]
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	6022      	str	r2, [r4, #0]
 80107a6:	701e      	strb	r6, [r3, #0]
 80107a8:	6962      	ldr	r2, [r4, #20]
 80107aa:	1c43      	adds	r3, r0, #1
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d004      	beq.n	80107ba <__swbuf_r+0x5a>
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	07db      	lsls	r3, r3, #31
 80107b4:	d506      	bpl.n	80107c4 <__swbuf_r+0x64>
 80107b6:	2e0a      	cmp	r6, #10
 80107b8:	d104      	bne.n	80107c4 <__swbuf_r+0x64>
 80107ba:	4621      	mov	r1, r4
 80107bc:	4628      	mov	r0, r5
 80107be:	f7ff fd97 	bl	80102f0 <_fflush_r>
 80107c2:	b938      	cbnz	r0, 80107d4 <__swbuf_r+0x74>
 80107c4:	4638      	mov	r0, r7
 80107c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107c8:	4621      	mov	r1, r4
 80107ca:	4628      	mov	r0, r5
 80107cc:	f000 f806 	bl	80107dc <__swsetup_r>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d0d5      	beq.n	8010780 <__swbuf_r+0x20>
 80107d4:	f04f 37ff 	mov.w	r7, #4294967295
 80107d8:	e7f4      	b.n	80107c4 <__swbuf_r+0x64>
	...

080107dc <__swsetup_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4b2a      	ldr	r3, [pc, #168]	; (8010888 <__swsetup_r+0xac>)
 80107e0:	4605      	mov	r5, r0
 80107e2:	6818      	ldr	r0, [r3, #0]
 80107e4:	460c      	mov	r4, r1
 80107e6:	b118      	cbz	r0, 80107f0 <__swsetup_r+0x14>
 80107e8:	6a03      	ldr	r3, [r0, #32]
 80107ea:	b90b      	cbnz	r3, 80107f0 <__swsetup_r+0x14>
 80107ec:	f7fd ff84 	bl	800e6f8 <__sinit>
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107f6:	0718      	lsls	r0, r3, #28
 80107f8:	d422      	bmi.n	8010840 <__swsetup_r+0x64>
 80107fa:	06d9      	lsls	r1, r3, #27
 80107fc:	d407      	bmi.n	801080e <__swsetup_r+0x32>
 80107fe:	2309      	movs	r3, #9
 8010800:	602b      	str	r3, [r5, #0]
 8010802:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010806:	81a3      	strh	r3, [r4, #12]
 8010808:	f04f 30ff 	mov.w	r0, #4294967295
 801080c:	e034      	b.n	8010878 <__swsetup_r+0x9c>
 801080e:	0758      	lsls	r0, r3, #29
 8010810:	d512      	bpl.n	8010838 <__swsetup_r+0x5c>
 8010812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010814:	b141      	cbz	r1, 8010828 <__swsetup_r+0x4c>
 8010816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801081a:	4299      	cmp	r1, r3
 801081c:	d002      	beq.n	8010824 <__swsetup_r+0x48>
 801081e:	4628      	mov	r0, r5
 8010820:	f7fe ff0c 	bl	800f63c <_free_r>
 8010824:	2300      	movs	r3, #0
 8010826:	6363      	str	r3, [r4, #52]	; 0x34
 8010828:	89a3      	ldrh	r3, [r4, #12]
 801082a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801082e:	81a3      	strh	r3, [r4, #12]
 8010830:	2300      	movs	r3, #0
 8010832:	6063      	str	r3, [r4, #4]
 8010834:	6923      	ldr	r3, [r4, #16]
 8010836:	6023      	str	r3, [r4, #0]
 8010838:	89a3      	ldrh	r3, [r4, #12]
 801083a:	f043 0308 	orr.w	r3, r3, #8
 801083e:	81a3      	strh	r3, [r4, #12]
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	b94b      	cbnz	r3, 8010858 <__swsetup_r+0x7c>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801084a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801084e:	d003      	beq.n	8010858 <__swsetup_r+0x7c>
 8010850:	4621      	mov	r1, r4
 8010852:	4628      	mov	r0, r5
 8010854:	f000 f884 	bl	8010960 <__smakebuf_r>
 8010858:	89a0      	ldrh	r0, [r4, #12]
 801085a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801085e:	f010 0301 	ands.w	r3, r0, #1
 8010862:	d00a      	beq.n	801087a <__swsetup_r+0x9e>
 8010864:	2300      	movs	r3, #0
 8010866:	60a3      	str	r3, [r4, #8]
 8010868:	6963      	ldr	r3, [r4, #20]
 801086a:	425b      	negs	r3, r3
 801086c:	61a3      	str	r3, [r4, #24]
 801086e:	6923      	ldr	r3, [r4, #16]
 8010870:	b943      	cbnz	r3, 8010884 <__swsetup_r+0xa8>
 8010872:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010876:	d1c4      	bne.n	8010802 <__swsetup_r+0x26>
 8010878:	bd38      	pop	{r3, r4, r5, pc}
 801087a:	0781      	lsls	r1, r0, #30
 801087c:	bf58      	it	pl
 801087e:	6963      	ldrpl	r3, [r4, #20]
 8010880:	60a3      	str	r3, [r4, #8]
 8010882:	e7f4      	b.n	801086e <__swsetup_r+0x92>
 8010884:	2000      	movs	r0, #0
 8010886:	e7f7      	b.n	8010878 <__swsetup_r+0x9c>
 8010888:	20000068 	.word	0x20000068

0801088c <_raise_r>:
 801088c:	291f      	cmp	r1, #31
 801088e:	b538      	push	{r3, r4, r5, lr}
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	d904      	bls.n	80108a0 <_raise_r+0x14>
 8010896:	2316      	movs	r3, #22
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	f04f 30ff 	mov.w	r0, #4294967295
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80108a2:	b112      	cbz	r2, 80108aa <_raise_r+0x1e>
 80108a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108a8:	b94b      	cbnz	r3, 80108be <_raise_r+0x32>
 80108aa:	4620      	mov	r0, r4
 80108ac:	f000 f830 	bl	8010910 <_getpid_r>
 80108b0:	462a      	mov	r2, r5
 80108b2:	4601      	mov	r1, r0
 80108b4:	4620      	mov	r0, r4
 80108b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ba:	f000 b817 	b.w	80108ec <_kill_r>
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d00a      	beq.n	80108d8 <_raise_r+0x4c>
 80108c2:	1c59      	adds	r1, r3, #1
 80108c4:	d103      	bne.n	80108ce <_raise_r+0x42>
 80108c6:	2316      	movs	r3, #22
 80108c8:	6003      	str	r3, [r0, #0]
 80108ca:	2001      	movs	r0, #1
 80108cc:	e7e7      	b.n	801089e <_raise_r+0x12>
 80108ce:	2400      	movs	r4, #0
 80108d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108d4:	4628      	mov	r0, r5
 80108d6:	4798      	blx	r3
 80108d8:	2000      	movs	r0, #0
 80108da:	e7e0      	b.n	801089e <_raise_r+0x12>

080108dc <raise>:
 80108dc:	4b02      	ldr	r3, [pc, #8]	; (80108e8 <raise+0xc>)
 80108de:	4601      	mov	r1, r0
 80108e0:	6818      	ldr	r0, [r3, #0]
 80108e2:	f7ff bfd3 	b.w	801088c <_raise_r>
 80108e6:	bf00      	nop
 80108e8:	20000068 	.word	0x20000068

080108ec <_kill_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d07      	ldr	r5, [pc, #28]	; (801090c <_kill_r+0x20>)
 80108f0:	2300      	movs	r3, #0
 80108f2:	4604      	mov	r4, r0
 80108f4:	4608      	mov	r0, r1
 80108f6:	4611      	mov	r1, r2
 80108f8:	602b      	str	r3, [r5, #0]
 80108fa:	f7f4 fbd1 	bl	80050a0 <_kill>
 80108fe:	1c43      	adds	r3, r0, #1
 8010900:	d102      	bne.n	8010908 <_kill_r+0x1c>
 8010902:	682b      	ldr	r3, [r5, #0]
 8010904:	b103      	cbz	r3, 8010908 <_kill_r+0x1c>
 8010906:	6023      	str	r3, [r4, #0]
 8010908:	bd38      	pop	{r3, r4, r5, pc}
 801090a:	bf00      	nop
 801090c:	200054f0 	.word	0x200054f0

08010910 <_getpid_r>:
 8010910:	f7f4 bbbe 	b.w	8005090 <_getpid>

08010914 <__swhatbuf_r>:
 8010914:	b570      	push	{r4, r5, r6, lr}
 8010916:	460c      	mov	r4, r1
 8010918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091c:	2900      	cmp	r1, #0
 801091e:	b096      	sub	sp, #88	; 0x58
 8010920:	4615      	mov	r5, r2
 8010922:	461e      	mov	r6, r3
 8010924:	da0d      	bge.n	8010942 <__swhatbuf_r+0x2e>
 8010926:	89a3      	ldrh	r3, [r4, #12]
 8010928:	f013 0f80 	tst.w	r3, #128	; 0x80
 801092c:	f04f 0100 	mov.w	r1, #0
 8010930:	bf0c      	ite	eq
 8010932:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010936:	2340      	movne	r3, #64	; 0x40
 8010938:	2000      	movs	r0, #0
 801093a:	6031      	str	r1, [r6, #0]
 801093c:	602b      	str	r3, [r5, #0]
 801093e:	b016      	add	sp, #88	; 0x58
 8010940:	bd70      	pop	{r4, r5, r6, pc}
 8010942:	466a      	mov	r2, sp
 8010944:	f000 f848 	bl	80109d8 <_fstat_r>
 8010948:	2800      	cmp	r0, #0
 801094a:	dbec      	blt.n	8010926 <__swhatbuf_r+0x12>
 801094c:	9901      	ldr	r1, [sp, #4]
 801094e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010952:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010956:	4259      	negs	r1, r3
 8010958:	4159      	adcs	r1, r3
 801095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801095e:	e7eb      	b.n	8010938 <__swhatbuf_r+0x24>

08010960 <__smakebuf_r>:
 8010960:	898b      	ldrh	r3, [r1, #12]
 8010962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010964:	079d      	lsls	r5, r3, #30
 8010966:	4606      	mov	r6, r0
 8010968:	460c      	mov	r4, r1
 801096a:	d507      	bpl.n	801097c <__smakebuf_r+0x1c>
 801096c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	6123      	str	r3, [r4, #16]
 8010974:	2301      	movs	r3, #1
 8010976:	6163      	str	r3, [r4, #20]
 8010978:	b002      	add	sp, #8
 801097a:	bd70      	pop	{r4, r5, r6, pc}
 801097c:	ab01      	add	r3, sp, #4
 801097e:	466a      	mov	r2, sp
 8010980:	f7ff ffc8 	bl	8010914 <__swhatbuf_r>
 8010984:	9900      	ldr	r1, [sp, #0]
 8010986:	4605      	mov	r5, r0
 8010988:	4630      	mov	r0, r6
 801098a:	f7fe fecb 	bl	800f724 <_malloc_r>
 801098e:	b948      	cbnz	r0, 80109a4 <__smakebuf_r+0x44>
 8010990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010994:	059a      	lsls	r2, r3, #22
 8010996:	d4ef      	bmi.n	8010978 <__smakebuf_r+0x18>
 8010998:	f023 0303 	bic.w	r3, r3, #3
 801099c:	f043 0302 	orr.w	r3, r3, #2
 80109a0:	81a3      	strh	r3, [r4, #12]
 80109a2:	e7e3      	b.n	801096c <__smakebuf_r+0xc>
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	6020      	str	r0, [r4, #0]
 80109a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109ac:	81a3      	strh	r3, [r4, #12]
 80109ae:	9b00      	ldr	r3, [sp, #0]
 80109b0:	6163      	str	r3, [r4, #20]
 80109b2:	9b01      	ldr	r3, [sp, #4]
 80109b4:	6120      	str	r0, [r4, #16]
 80109b6:	b15b      	cbz	r3, 80109d0 <__smakebuf_r+0x70>
 80109b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109bc:	4630      	mov	r0, r6
 80109be:	f000 f81d 	bl	80109fc <_isatty_r>
 80109c2:	b128      	cbz	r0, 80109d0 <__smakebuf_r+0x70>
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	f023 0303 	bic.w	r3, r3, #3
 80109ca:	f043 0301 	orr.w	r3, r3, #1
 80109ce:	81a3      	strh	r3, [r4, #12]
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	431d      	orrs	r5, r3
 80109d4:	81a5      	strh	r5, [r4, #12]
 80109d6:	e7cf      	b.n	8010978 <__smakebuf_r+0x18>

080109d8 <_fstat_r>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4d07      	ldr	r5, [pc, #28]	; (80109f8 <_fstat_r+0x20>)
 80109dc:	2300      	movs	r3, #0
 80109de:	4604      	mov	r4, r0
 80109e0:	4608      	mov	r0, r1
 80109e2:	4611      	mov	r1, r2
 80109e4:	602b      	str	r3, [r5, #0]
 80109e6:	f7f4 fbba 	bl	800515e <_fstat>
 80109ea:	1c43      	adds	r3, r0, #1
 80109ec:	d102      	bne.n	80109f4 <_fstat_r+0x1c>
 80109ee:	682b      	ldr	r3, [r5, #0]
 80109f0:	b103      	cbz	r3, 80109f4 <_fstat_r+0x1c>
 80109f2:	6023      	str	r3, [r4, #0]
 80109f4:	bd38      	pop	{r3, r4, r5, pc}
 80109f6:	bf00      	nop
 80109f8:	200054f0 	.word	0x200054f0

080109fc <_isatty_r>:
 80109fc:	b538      	push	{r3, r4, r5, lr}
 80109fe:	4d06      	ldr	r5, [pc, #24]	; (8010a18 <_isatty_r+0x1c>)
 8010a00:	2300      	movs	r3, #0
 8010a02:	4604      	mov	r4, r0
 8010a04:	4608      	mov	r0, r1
 8010a06:	602b      	str	r3, [r5, #0]
 8010a08:	f7f4 fbb9 	bl	800517e <_isatty>
 8010a0c:	1c43      	adds	r3, r0, #1
 8010a0e:	d102      	bne.n	8010a16 <_isatty_r+0x1a>
 8010a10:	682b      	ldr	r3, [r5, #0]
 8010a12:	b103      	cbz	r3, 8010a16 <_isatty_r+0x1a>
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
 8010a18:	200054f0 	.word	0x200054f0

08010a1c <pow>:
 8010a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a1e:	ed2d 8b02 	vpush	{d8}
 8010a22:	eeb0 8a40 	vmov.f32	s16, s0
 8010a26:	eef0 8a60 	vmov.f32	s17, s1
 8010a2a:	ec55 4b11 	vmov	r4, r5, d1
 8010a2e:	f000 f873 	bl	8010b18 <__ieee754_pow>
 8010a32:	4622      	mov	r2, r4
 8010a34:	462b      	mov	r3, r5
 8010a36:	4620      	mov	r0, r4
 8010a38:	4629      	mov	r1, r5
 8010a3a:	ec57 6b10 	vmov	r6, r7, d0
 8010a3e:	f7f0 f875 	bl	8000b2c <__aeabi_dcmpun>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	d13b      	bne.n	8010abe <pow+0xa2>
 8010a46:	ec51 0b18 	vmov	r0, r1, d8
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f7f0 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a52:	b1b8      	cbz	r0, 8010a84 <pow+0x68>
 8010a54:	2200      	movs	r2, #0
 8010a56:	2300      	movs	r3, #0
 8010a58:	4620      	mov	r0, r4
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	f7f0 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d146      	bne.n	8010af2 <pow+0xd6>
 8010a64:	ec45 4b10 	vmov	d0, r4, r5
 8010a68:	f000 f848 	bl	8010afc <finite>
 8010a6c:	b338      	cbz	r0, 8010abe <pow+0xa2>
 8010a6e:	2200      	movs	r2, #0
 8010a70:	2300      	movs	r3, #0
 8010a72:	4620      	mov	r0, r4
 8010a74:	4629      	mov	r1, r5
 8010a76:	f7f0 f831 	bl	8000adc <__aeabi_dcmplt>
 8010a7a:	b300      	cbz	r0, 8010abe <pow+0xa2>
 8010a7c:	f7fd ff28 	bl	800e8d0 <__errno>
 8010a80:	2322      	movs	r3, #34	; 0x22
 8010a82:	e01b      	b.n	8010abc <pow+0xa0>
 8010a84:	ec47 6b10 	vmov	d0, r6, r7
 8010a88:	f000 f838 	bl	8010afc <finite>
 8010a8c:	b9e0      	cbnz	r0, 8010ac8 <pow+0xac>
 8010a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8010a92:	eef0 0a68 	vmov.f32	s1, s17
 8010a96:	f000 f831 	bl	8010afc <finite>
 8010a9a:	b1a8      	cbz	r0, 8010ac8 <pow+0xac>
 8010a9c:	ec45 4b10 	vmov	d0, r4, r5
 8010aa0:	f000 f82c 	bl	8010afc <finite>
 8010aa4:	b180      	cbz	r0, 8010ac8 <pow+0xac>
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	463b      	mov	r3, r7
 8010aaa:	4630      	mov	r0, r6
 8010aac:	4639      	mov	r1, r7
 8010aae:	f7f0 f83d 	bl	8000b2c <__aeabi_dcmpun>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d0e2      	beq.n	8010a7c <pow+0x60>
 8010ab6:	f7fd ff0b 	bl	800e8d0 <__errno>
 8010aba:	2321      	movs	r3, #33	; 0x21
 8010abc:	6003      	str	r3, [r0, #0]
 8010abe:	ecbd 8b02 	vpop	{d8}
 8010ac2:	ec47 6b10 	vmov	d0, r6, r7
 8010ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ac8:	2200      	movs	r2, #0
 8010aca:	2300      	movs	r3, #0
 8010acc:	4630      	mov	r0, r6
 8010ace:	4639      	mov	r1, r7
 8010ad0:	f7ef fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d0f2      	beq.n	8010abe <pow+0xa2>
 8010ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8010adc:	eef0 0a68 	vmov.f32	s1, s17
 8010ae0:	f000 f80c 	bl	8010afc <finite>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d0ea      	beq.n	8010abe <pow+0xa2>
 8010ae8:	ec45 4b10 	vmov	d0, r4, r5
 8010aec:	f000 f806 	bl	8010afc <finite>
 8010af0:	e7c3      	b.n	8010a7a <pow+0x5e>
 8010af2:	4f01      	ldr	r7, [pc, #4]	; (8010af8 <pow+0xdc>)
 8010af4:	2600      	movs	r6, #0
 8010af6:	e7e2      	b.n	8010abe <pow+0xa2>
 8010af8:	3ff00000 	.word	0x3ff00000

08010afc <finite>:
 8010afc:	b082      	sub	sp, #8
 8010afe:	ed8d 0b00 	vstr	d0, [sp]
 8010b02:	9801      	ldr	r0, [sp, #4]
 8010b04:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010b08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010b0c:	0fc0      	lsrs	r0, r0, #31
 8010b0e:	b002      	add	sp, #8
 8010b10:	4770      	bx	lr
 8010b12:	0000      	movs	r0, r0
 8010b14:	0000      	movs	r0, r0
	...

08010b18 <__ieee754_pow>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	ed2d 8b06 	vpush	{d8-d10}
 8010b20:	b089      	sub	sp, #36	; 0x24
 8010b22:	ed8d 1b00 	vstr	d1, [sp]
 8010b26:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010b2a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010b2e:	ea58 0102 	orrs.w	r1, r8, r2
 8010b32:	ec57 6b10 	vmov	r6, r7, d0
 8010b36:	d115      	bne.n	8010b64 <__ieee754_pow+0x4c>
 8010b38:	19b3      	adds	r3, r6, r6
 8010b3a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010b3e:	4152      	adcs	r2, r2
 8010b40:	4299      	cmp	r1, r3
 8010b42:	4b89      	ldr	r3, [pc, #548]	; (8010d68 <__ieee754_pow+0x250>)
 8010b44:	4193      	sbcs	r3, r2
 8010b46:	f080 84d1 	bcs.w	80114ec <__ieee754_pow+0x9d4>
 8010b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b4e:	4630      	mov	r0, r6
 8010b50:	4639      	mov	r1, r7
 8010b52:	f7ef fb9b 	bl	800028c <__adddf3>
 8010b56:	ec41 0b10 	vmov	d0, r0, r1
 8010b5a:	b009      	add	sp, #36	; 0x24
 8010b5c:	ecbd 8b06 	vpop	{d8-d10}
 8010b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b64:	4b81      	ldr	r3, [pc, #516]	; (8010d6c <__ieee754_pow+0x254>)
 8010b66:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010b6a:	429c      	cmp	r4, r3
 8010b6c:	ee10 aa10 	vmov	sl, s0
 8010b70:	463d      	mov	r5, r7
 8010b72:	dc06      	bgt.n	8010b82 <__ieee754_pow+0x6a>
 8010b74:	d101      	bne.n	8010b7a <__ieee754_pow+0x62>
 8010b76:	2e00      	cmp	r6, #0
 8010b78:	d1e7      	bne.n	8010b4a <__ieee754_pow+0x32>
 8010b7a:	4598      	cmp	r8, r3
 8010b7c:	dc01      	bgt.n	8010b82 <__ieee754_pow+0x6a>
 8010b7e:	d10f      	bne.n	8010ba0 <__ieee754_pow+0x88>
 8010b80:	b172      	cbz	r2, 8010ba0 <__ieee754_pow+0x88>
 8010b82:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010b86:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010b8a:	ea55 050a 	orrs.w	r5, r5, sl
 8010b8e:	d1dc      	bne.n	8010b4a <__ieee754_pow+0x32>
 8010b90:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010b94:	18db      	adds	r3, r3, r3
 8010b96:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010b9a:	4152      	adcs	r2, r2
 8010b9c:	429d      	cmp	r5, r3
 8010b9e:	e7d0      	b.n	8010b42 <__ieee754_pow+0x2a>
 8010ba0:	2d00      	cmp	r5, #0
 8010ba2:	da3b      	bge.n	8010c1c <__ieee754_pow+0x104>
 8010ba4:	4b72      	ldr	r3, [pc, #456]	; (8010d70 <__ieee754_pow+0x258>)
 8010ba6:	4598      	cmp	r8, r3
 8010ba8:	dc51      	bgt.n	8010c4e <__ieee754_pow+0x136>
 8010baa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010bae:	4598      	cmp	r8, r3
 8010bb0:	f340 84ab 	ble.w	801150a <__ieee754_pow+0x9f2>
 8010bb4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010bb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010bbc:	2b14      	cmp	r3, #20
 8010bbe:	dd0f      	ble.n	8010be0 <__ieee754_pow+0xc8>
 8010bc0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010bc4:	fa22 f103 	lsr.w	r1, r2, r3
 8010bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	f040 849c 	bne.w	801150a <__ieee754_pow+0x9f2>
 8010bd2:	f001 0101 	and.w	r1, r1, #1
 8010bd6:	f1c1 0302 	rsb	r3, r1, #2
 8010bda:	9304      	str	r3, [sp, #16]
 8010bdc:	b182      	cbz	r2, 8010c00 <__ieee754_pow+0xe8>
 8010bde:	e05f      	b.n	8010ca0 <__ieee754_pow+0x188>
 8010be0:	2a00      	cmp	r2, #0
 8010be2:	d15b      	bne.n	8010c9c <__ieee754_pow+0x184>
 8010be4:	f1c3 0314 	rsb	r3, r3, #20
 8010be8:	fa48 f103 	asr.w	r1, r8, r3
 8010bec:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf0:	4543      	cmp	r3, r8
 8010bf2:	f040 8487 	bne.w	8011504 <__ieee754_pow+0x9ec>
 8010bf6:	f001 0101 	and.w	r1, r1, #1
 8010bfa:	f1c1 0302 	rsb	r3, r1, #2
 8010bfe:	9304      	str	r3, [sp, #16]
 8010c00:	4b5c      	ldr	r3, [pc, #368]	; (8010d74 <__ieee754_pow+0x25c>)
 8010c02:	4598      	cmp	r8, r3
 8010c04:	d132      	bne.n	8010c6c <__ieee754_pow+0x154>
 8010c06:	f1b9 0f00 	cmp.w	r9, #0
 8010c0a:	f280 8477 	bge.w	80114fc <__ieee754_pow+0x9e4>
 8010c0e:	4959      	ldr	r1, [pc, #356]	; (8010d74 <__ieee754_pow+0x25c>)
 8010c10:	4632      	mov	r2, r6
 8010c12:	463b      	mov	r3, r7
 8010c14:	2000      	movs	r0, #0
 8010c16:	f7ef fe19 	bl	800084c <__aeabi_ddiv>
 8010c1a:	e79c      	b.n	8010b56 <__ieee754_pow+0x3e>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	9304      	str	r3, [sp, #16]
 8010c20:	2a00      	cmp	r2, #0
 8010c22:	d13d      	bne.n	8010ca0 <__ieee754_pow+0x188>
 8010c24:	4b51      	ldr	r3, [pc, #324]	; (8010d6c <__ieee754_pow+0x254>)
 8010c26:	4598      	cmp	r8, r3
 8010c28:	d1ea      	bne.n	8010c00 <__ieee754_pow+0xe8>
 8010c2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010c2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010c32:	ea53 030a 	orrs.w	r3, r3, sl
 8010c36:	f000 8459 	beq.w	80114ec <__ieee754_pow+0x9d4>
 8010c3a:	4b4f      	ldr	r3, [pc, #316]	; (8010d78 <__ieee754_pow+0x260>)
 8010c3c:	429c      	cmp	r4, r3
 8010c3e:	dd08      	ble.n	8010c52 <__ieee754_pow+0x13a>
 8010c40:	f1b9 0f00 	cmp.w	r9, #0
 8010c44:	f2c0 8456 	blt.w	80114f4 <__ieee754_pow+0x9dc>
 8010c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c4c:	e783      	b.n	8010b56 <__ieee754_pow+0x3e>
 8010c4e:	2302      	movs	r3, #2
 8010c50:	e7e5      	b.n	8010c1e <__ieee754_pow+0x106>
 8010c52:	f1b9 0f00 	cmp.w	r9, #0
 8010c56:	f04f 0000 	mov.w	r0, #0
 8010c5a:	f04f 0100 	mov.w	r1, #0
 8010c5e:	f6bf af7a 	bge.w	8010b56 <__ieee754_pow+0x3e>
 8010c62:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010c66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010c6a:	e774      	b.n	8010b56 <__ieee754_pow+0x3e>
 8010c6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010c70:	d106      	bne.n	8010c80 <__ieee754_pow+0x168>
 8010c72:	4632      	mov	r2, r6
 8010c74:	463b      	mov	r3, r7
 8010c76:	4630      	mov	r0, r6
 8010c78:	4639      	mov	r1, r7
 8010c7a:	f7ef fcbd 	bl	80005f8 <__aeabi_dmul>
 8010c7e:	e76a      	b.n	8010b56 <__ieee754_pow+0x3e>
 8010c80:	4b3e      	ldr	r3, [pc, #248]	; (8010d7c <__ieee754_pow+0x264>)
 8010c82:	4599      	cmp	r9, r3
 8010c84:	d10c      	bne.n	8010ca0 <__ieee754_pow+0x188>
 8010c86:	2d00      	cmp	r5, #0
 8010c88:	db0a      	blt.n	8010ca0 <__ieee754_pow+0x188>
 8010c8a:	ec47 6b10 	vmov	d0, r6, r7
 8010c8e:	b009      	add	sp, #36	; 0x24
 8010c90:	ecbd 8b06 	vpop	{d8-d10}
 8010c94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	f000 bd20 	b.w	80116dc <__ieee754_sqrt>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	9304      	str	r3, [sp, #16]
 8010ca0:	ec47 6b10 	vmov	d0, r6, r7
 8010ca4:	f000 fc62 	bl	801156c <fabs>
 8010ca8:	ec51 0b10 	vmov	r0, r1, d0
 8010cac:	f1ba 0f00 	cmp.w	sl, #0
 8010cb0:	d129      	bne.n	8010d06 <__ieee754_pow+0x1ee>
 8010cb2:	b124      	cbz	r4, 8010cbe <__ieee754_pow+0x1a6>
 8010cb4:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <__ieee754_pow+0x25c>)
 8010cb6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d123      	bne.n	8010d06 <__ieee754_pow+0x1ee>
 8010cbe:	f1b9 0f00 	cmp.w	r9, #0
 8010cc2:	da05      	bge.n	8010cd0 <__ieee754_pow+0x1b8>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	2000      	movs	r0, #0
 8010cca:	492a      	ldr	r1, [pc, #168]	; (8010d74 <__ieee754_pow+0x25c>)
 8010ccc:	f7ef fdbe 	bl	800084c <__aeabi_ddiv>
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	f6bf af40 	bge.w	8010b56 <__ieee754_pow+0x3e>
 8010cd6:	9b04      	ldr	r3, [sp, #16]
 8010cd8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010cdc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010ce0:	431c      	orrs	r4, r3
 8010ce2:	d108      	bne.n	8010cf6 <__ieee754_pow+0x1de>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4610      	mov	r0, r2
 8010cea:	4619      	mov	r1, r3
 8010cec:	f7ef facc 	bl	8000288 <__aeabi_dsub>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	e78f      	b.n	8010c16 <__ieee754_pow+0xfe>
 8010cf6:	9b04      	ldr	r3, [sp, #16]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	f47f af2c 	bne.w	8010b56 <__ieee754_pow+0x3e>
 8010cfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d02:	4619      	mov	r1, r3
 8010d04:	e727      	b.n	8010b56 <__ieee754_pow+0x3e>
 8010d06:	0feb      	lsrs	r3, r5, #31
 8010d08:	3b01      	subs	r3, #1
 8010d0a:	9306      	str	r3, [sp, #24]
 8010d0c:	9a06      	ldr	r2, [sp, #24]
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	d102      	bne.n	8010d1a <__ieee754_pow+0x202>
 8010d14:	4632      	mov	r2, r6
 8010d16:	463b      	mov	r3, r7
 8010d18:	e7e6      	b.n	8010ce8 <__ieee754_pow+0x1d0>
 8010d1a:	4b19      	ldr	r3, [pc, #100]	; (8010d80 <__ieee754_pow+0x268>)
 8010d1c:	4598      	cmp	r8, r3
 8010d1e:	f340 80fb 	ble.w	8010f18 <__ieee754_pow+0x400>
 8010d22:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010d26:	4598      	cmp	r8, r3
 8010d28:	4b13      	ldr	r3, [pc, #76]	; (8010d78 <__ieee754_pow+0x260>)
 8010d2a:	dd0c      	ble.n	8010d46 <__ieee754_pow+0x22e>
 8010d2c:	429c      	cmp	r4, r3
 8010d2e:	dc0f      	bgt.n	8010d50 <__ieee754_pow+0x238>
 8010d30:	f1b9 0f00 	cmp.w	r9, #0
 8010d34:	da0f      	bge.n	8010d56 <__ieee754_pow+0x23e>
 8010d36:	2000      	movs	r0, #0
 8010d38:	b009      	add	sp, #36	; 0x24
 8010d3a:	ecbd 8b06 	vpop	{d8-d10}
 8010d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d42:	f000 bcc2 	b.w	80116ca <__math_oflow>
 8010d46:	429c      	cmp	r4, r3
 8010d48:	dbf2      	blt.n	8010d30 <__ieee754_pow+0x218>
 8010d4a:	4b0a      	ldr	r3, [pc, #40]	; (8010d74 <__ieee754_pow+0x25c>)
 8010d4c:	429c      	cmp	r4, r3
 8010d4e:	dd19      	ble.n	8010d84 <__ieee754_pow+0x26c>
 8010d50:	f1b9 0f00 	cmp.w	r9, #0
 8010d54:	dcef      	bgt.n	8010d36 <__ieee754_pow+0x21e>
 8010d56:	2000      	movs	r0, #0
 8010d58:	b009      	add	sp, #36	; 0x24
 8010d5a:	ecbd 8b06 	vpop	{d8-d10}
 8010d5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d62:	f000 bca9 	b.w	80116b8 <__math_uflow>
 8010d66:	bf00      	nop
 8010d68:	fff00000 	.word	0xfff00000
 8010d6c:	7ff00000 	.word	0x7ff00000
 8010d70:	433fffff 	.word	0x433fffff
 8010d74:	3ff00000 	.word	0x3ff00000
 8010d78:	3fefffff 	.word	0x3fefffff
 8010d7c:	3fe00000 	.word	0x3fe00000
 8010d80:	41e00000 	.word	0x41e00000
 8010d84:	4b60      	ldr	r3, [pc, #384]	; (8010f08 <__ieee754_pow+0x3f0>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	f7ef fa7e 	bl	8000288 <__aeabi_dsub>
 8010d8c:	a354      	add	r3, pc, #336	; (adr r3, 8010ee0 <__ieee754_pow+0x3c8>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	4604      	mov	r4, r0
 8010d94:	460d      	mov	r5, r1
 8010d96:	f7ef fc2f 	bl	80005f8 <__aeabi_dmul>
 8010d9a:	a353      	add	r3, pc, #332	; (adr r3, 8010ee8 <__ieee754_pow+0x3d0>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	4606      	mov	r6, r0
 8010da2:	460f      	mov	r7, r1
 8010da4:	4620      	mov	r0, r4
 8010da6:	4629      	mov	r1, r5
 8010da8:	f7ef fc26 	bl	80005f8 <__aeabi_dmul>
 8010dac:	4b57      	ldr	r3, [pc, #348]	; (8010f0c <__ieee754_pow+0x3f4>)
 8010dae:	4682      	mov	sl, r0
 8010db0:	468b      	mov	fp, r1
 8010db2:	2200      	movs	r2, #0
 8010db4:	4620      	mov	r0, r4
 8010db6:	4629      	mov	r1, r5
 8010db8:	f7ef fc1e 	bl	80005f8 <__aeabi_dmul>
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	a14b      	add	r1, pc, #300	; (adr r1, 8010ef0 <__ieee754_pow+0x3d8>)
 8010dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dc6:	f7ef fa5f 	bl	8000288 <__aeabi_dsub>
 8010dca:	4622      	mov	r2, r4
 8010dcc:	462b      	mov	r3, r5
 8010dce:	f7ef fc13 	bl	80005f8 <__aeabi_dmul>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	494d      	ldr	r1, [pc, #308]	; (8010f10 <__ieee754_pow+0x3f8>)
 8010dda:	f7ef fa55 	bl	8000288 <__aeabi_dsub>
 8010dde:	4622      	mov	r2, r4
 8010de0:	4680      	mov	r8, r0
 8010de2:	4689      	mov	r9, r1
 8010de4:	462b      	mov	r3, r5
 8010de6:	4620      	mov	r0, r4
 8010de8:	4629      	mov	r1, r5
 8010dea:	f7ef fc05 	bl	80005f8 <__aeabi_dmul>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4640      	mov	r0, r8
 8010df4:	4649      	mov	r1, r9
 8010df6:	f7ef fbff 	bl	80005f8 <__aeabi_dmul>
 8010dfa:	a33f      	add	r3, pc, #252	; (adr r3, 8010ef8 <__ieee754_pow+0x3e0>)
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	f7ef fbfa 	bl	80005f8 <__aeabi_dmul>
 8010e04:	4602      	mov	r2, r0
 8010e06:	460b      	mov	r3, r1
 8010e08:	4650      	mov	r0, sl
 8010e0a:	4659      	mov	r1, fp
 8010e0c:	f7ef fa3c 	bl	8000288 <__aeabi_dsub>
 8010e10:	4602      	mov	r2, r0
 8010e12:	460b      	mov	r3, r1
 8010e14:	4680      	mov	r8, r0
 8010e16:	4689      	mov	r9, r1
 8010e18:	4630      	mov	r0, r6
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	f7ef fa36 	bl	800028c <__adddf3>
 8010e20:	2000      	movs	r0, #0
 8010e22:	4632      	mov	r2, r6
 8010e24:	463b      	mov	r3, r7
 8010e26:	4604      	mov	r4, r0
 8010e28:	460d      	mov	r5, r1
 8010e2a:	f7ef fa2d 	bl	8000288 <__aeabi_dsub>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	460b      	mov	r3, r1
 8010e32:	4640      	mov	r0, r8
 8010e34:	4649      	mov	r1, r9
 8010e36:	f7ef fa27 	bl	8000288 <__aeabi_dsub>
 8010e3a:	9b04      	ldr	r3, [sp, #16]
 8010e3c:	9a06      	ldr	r2, [sp, #24]
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	4313      	orrs	r3, r2
 8010e42:	4682      	mov	sl, r0
 8010e44:	468b      	mov	fp, r1
 8010e46:	f040 81e7 	bne.w	8011218 <__ieee754_pow+0x700>
 8010e4a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010f00 <__ieee754_pow+0x3e8>
 8010e4e:	eeb0 8a47 	vmov.f32	s16, s14
 8010e52:	eef0 8a67 	vmov.f32	s17, s15
 8010e56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010e5a:	2600      	movs	r6, #0
 8010e5c:	4632      	mov	r2, r6
 8010e5e:	463b      	mov	r3, r7
 8010e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e64:	f7ef fa10 	bl	8000288 <__aeabi_dsub>
 8010e68:	4622      	mov	r2, r4
 8010e6a:	462b      	mov	r3, r5
 8010e6c:	f7ef fbc4 	bl	80005f8 <__aeabi_dmul>
 8010e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e74:	4680      	mov	r8, r0
 8010e76:	4689      	mov	r9, r1
 8010e78:	4650      	mov	r0, sl
 8010e7a:	4659      	mov	r1, fp
 8010e7c:	f7ef fbbc 	bl	80005f8 <__aeabi_dmul>
 8010e80:	4602      	mov	r2, r0
 8010e82:	460b      	mov	r3, r1
 8010e84:	4640      	mov	r0, r8
 8010e86:	4649      	mov	r1, r9
 8010e88:	f7ef fa00 	bl	800028c <__adddf3>
 8010e8c:	4632      	mov	r2, r6
 8010e8e:	463b      	mov	r3, r7
 8010e90:	4680      	mov	r8, r0
 8010e92:	4689      	mov	r9, r1
 8010e94:	4620      	mov	r0, r4
 8010e96:	4629      	mov	r1, r5
 8010e98:	f7ef fbae 	bl	80005f8 <__aeabi_dmul>
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	4649      	mov	r1, r9
 8010ea6:	4640      	mov	r0, r8
 8010ea8:	f7ef f9f0 	bl	800028c <__adddf3>
 8010eac:	4b19      	ldr	r3, [pc, #100]	; (8010f14 <__ieee754_pow+0x3fc>)
 8010eae:	4299      	cmp	r1, r3
 8010eb0:	ec45 4b19 	vmov	d9, r4, r5
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	460f      	mov	r7, r1
 8010eb8:	468b      	mov	fp, r1
 8010eba:	f340 82f0 	ble.w	801149e <__ieee754_pow+0x986>
 8010ebe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010ec2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010ec6:	4303      	orrs	r3, r0
 8010ec8:	f000 81e4 	beq.w	8011294 <__ieee754_pow+0x77c>
 8010ecc:	ec51 0b18 	vmov	r0, r1, d8
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f7ef fe02 	bl	8000adc <__aeabi_dcmplt>
 8010ed8:	3800      	subs	r0, #0
 8010eda:	bf18      	it	ne
 8010edc:	2001      	movne	r0, #1
 8010ede:	e72b      	b.n	8010d38 <__ieee754_pow+0x220>
 8010ee0:	60000000 	.word	0x60000000
 8010ee4:	3ff71547 	.word	0x3ff71547
 8010ee8:	f85ddf44 	.word	0xf85ddf44
 8010eec:	3e54ae0b 	.word	0x3e54ae0b
 8010ef0:	55555555 	.word	0x55555555
 8010ef4:	3fd55555 	.word	0x3fd55555
 8010ef8:	652b82fe 	.word	0x652b82fe
 8010efc:	3ff71547 	.word	0x3ff71547
 8010f00:	00000000 	.word	0x00000000
 8010f04:	bff00000 	.word	0xbff00000
 8010f08:	3ff00000 	.word	0x3ff00000
 8010f0c:	3fd00000 	.word	0x3fd00000
 8010f10:	3fe00000 	.word	0x3fe00000
 8010f14:	408fffff 	.word	0x408fffff
 8010f18:	4bd5      	ldr	r3, [pc, #852]	; (8011270 <__ieee754_pow+0x758>)
 8010f1a:	402b      	ands	r3, r5
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	b92b      	cbnz	r3, 8010f2c <__ieee754_pow+0x414>
 8010f20:	4bd4      	ldr	r3, [pc, #848]	; (8011274 <__ieee754_pow+0x75c>)
 8010f22:	f7ef fb69 	bl	80005f8 <__aeabi_dmul>
 8010f26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	1523      	asrs	r3, r4, #20
 8010f2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010f32:	4413      	add	r3, r2
 8010f34:	9305      	str	r3, [sp, #20]
 8010f36:	4bd0      	ldr	r3, [pc, #832]	; (8011278 <__ieee754_pow+0x760>)
 8010f38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010f3c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010f40:	429c      	cmp	r4, r3
 8010f42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010f46:	dd08      	ble.n	8010f5a <__ieee754_pow+0x442>
 8010f48:	4bcc      	ldr	r3, [pc, #816]	; (801127c <__ieee754_pow+0x764>)
 8010f4a:	429c      	cmp	r4, r3
 8010f4c:	f340 8162 	ble.w	8011214 <__ieee754_pow+0x6fc>
 8010f50:	9b05      	ldr	r3, [sp, #20]
 8010f52:	3301      	adds	r3, #1
 8010f54:	9305      	str	r3, [sp, #20]
 8010f56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010f5a:	2400      	movs	r4, #0
 8010f5c:	00e3      	lsls	r3, r4, #3
 8010f5e:	9307      	str	r3, [sp, #28]
 8010f60:	4bc7      	ldr	r3, [pc, #796]	; (8011280 <__ieee754_pow+0x768>)
 8010f62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f66:	ed93 7b00 	vldr	d7, [r3]
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	ec53 2b17 	vmov	r2, r3, d7
 8010f70:	eeb0 9a47 	vmov.f32	s18, s14
 8010f74:	eef0 9a67 	vmov.f32	s19, s15
 8010f78:	4682      	mov	sl, r0
 8010f7a:	f7ef f985 	bl	8000288 <__aeabi_dsub>
 8010f7e:	4652      	mov	r2, sl
 8010f80:	4606      	mov	r6, r0
 8010f82:	460f      	mov	r7, r1
 8010f84:	462b      	mov	r3, r5
 8010f86:	ec51 0b19 	vmov	r0, r1, d9
 8010f8a:	f7ef f97f 	bl	800028c <__adddf3>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	460b      	mov	r3, r1
 8010f92:	2000      	movs	r0, #0
 8010f94:	49bb      	ldr	r1, [pc, #748]	; (8011284 <__ieee754_pow+0x76c>)
 8010f96:	f7ef fc59 	bl	800084c <__aeabi_ddiv>
 8010f9a:	ec41 0b1a 	vmov	d10, r0, r1
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	f7ef fb27 	bl	80005f8 <__aeabi_dmul>
 8010faa:	2300      	movs	r3, #0
 8010fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fb0:	9302      	str	r3, [sp, #8]
 8010fb2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010fb6:	46ab      	mov	fp, r5
 8010fb8:	106d      	asrs	r5, r5, #1
 8010fba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010fbe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010fc2:	ec41 0b18 	vmov	d8, r0, r1
 8010fc6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010fca:	2200      	movs	r2, #0
 8010fcc:	4640      	mov	r0, r8
 8010fce:	4649      	mov	r1, r9
 8010fd0:	4614      	mov	r4, r2
 8010fd2:	461d      	mov	r5, r3
 8010fd4:	f7ef fb10 	bl	80005f8 <__aeabi_dmul>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	460b      	mov	r3, r1
 8010fdc:	4630      	mov	r0, r6
 8010fde:	4639      	mov	r1, r7
 8010fe0:	f7ef f952 	bl	8000288 <__aeabi_dsub>
 8010fe4:	ec53 2b19 	vmov	r2, r3, d9
 8010fe8:	4606      	mov	r6, r0
 8010fea:	460f      	mov	r7, r1
 8010fec:	4620      	mov	r0, r4
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef f94a 	bl	8000288 <__aeabi_dsub>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	460b      	mov	r3, r1
 8010ff8:	4650      	mov	r0, sl
 8010ffa:	4659      	mov	r1, fp
 8010ffc:	f7ef f944 	bl	8000288 <__aeabi_dsub>
 8011000:	4642      	mov	r2, r8
 8011002:	464b      	mov	r3, r9
 8011004:	f7ef faf8 	bl	80005f8 <__aeabi_dmul>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	4630      	mov	r0, r6
 801100e:	4639      	mov	r1, r7
 8011010:	f7ef f93a 	bl	8000288 <__aeabi_dsub>
 8011014:	ec53 2b1a 	vmov	r2, r3, d10
 8011018:	f7ef faee 	bl	80005f8 <__aeabi_dmul>
 801101c:	ec53 2b18 	vmov	r2, r3, d8
 8011020:	ec41 0b19 	vmov	d9, r0, r1
 8011024:	ec51 0b18 	vmov	r0, r1, d8
 8011028:	f7ef fae6 	bl	80005f8 <__aeabi_dmul>
 801102c:	a37c      	add	r3, pc, #496	; (adr r3, 8011220 <__ieee754_pow+0x708>)
 801102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011032:	4604      	mov	r4, r0
 8011034:	460d      	mov	r5, r1
 8011036:	f7ef fadf 	bl	80005f8 <__aeabi_dmul>
 801103a:	a37b      	add	r3, pc, #492	; (adr r3, 8011228 <__ieee754_pow+0x710>)
 801103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011040:	f7ef f924 	bl	800028c <__adddf3>
 8011044:	4622      	mov	r2, r4
 8011046:	462b      	mov	r3, r5
 8011048:	f7ef fad6 	bl	80005f8 <__aeabi_dmul>
 801104c:	a378      	add	r3, pc, #480	; (adr r3, 8011230 <__ieee754_pow+0x718>)
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	f7ef f91b 	bl	800028c <__adddf3>
 8011056:	4622      	mov	r2, r4
 8011058:	462b      	mov	r3, r5
 801105a:	f7ef facd 	bl	80005f8 <__aeabi_dmul>
 801105e:	a376      	add	r3, pc, #472	; (adr r3, 8011238 <__ieee754_pow+0x720>)
 8011060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011064:	f7ef f912 	bl	800028c <__adddf3>
 8011068:	4622      	mov	r2, r4
 801106a:	462b      	mov	r3, r5
 801106c:	f7ef fac4 	bl	80005f8 <__aeabi_dmul>
 8011070:	a373      	add	r3, pc, #460	; (adr r3, 8011240 <__ieee754_pow+0x728>)
 8011072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011076:	f7ef f909 	bl	800028c <__adddf3>
 801107a:	4622      	mov	r2, r4
 801107c:	462b      	mov	r3, r5
 801107e:	f7ef fabb 	bl	80005f8 <__aeabi_dmul>
 8011082:	a371      	add	r3, pc, #452	; (adr r3, 8011248 <__ieee754_pow+0x730>)
 8011084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011088:	f7ef f900 	bl	800028c <__adddf3>
 801108c:	4622      	mov	r2, r4
 801108e:	4606      	mov	r6, r0
 8011090:	460f      	mov	r7, r1
 8011092:	462b      	mov	r3, r5
 8011094:	4620      	mov	r0, r4
 8011096:	4629      	mov	r1, r5
 8011098:	f7ef faae 	bl	80005f8 <__aeabi_dmul>
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	4630      	mov	r0, r6
 80110a2:	4639      	mov	r1, r7
 80110a4:	f7ef faa8 	bl	80005f8 <__aeabi_dmul>
 80110a8:	4642      	mov	r2, r8
 80110aa:	4604      	mov	r4, r0
 80110ac:	460d      	mov	r5, r1
 80110ae:	464b      	mov	r3, r9
 80110b0:	ec51 0b18 	vmov	r0, r1, d8
 80110b4:	f7ef f8ea 	bl	800028c <__adddf3>
 80110b8:	ec53 2b19 	vmov	r2, r3, d9
 80110bc:	f7ef fa9c 	bl	80005f8 <__aeabi_dmul>
 80110c0:	4622      	mov	r2, r4
 80110c2:	462b      	mov	r3, r5
 80110c4:	f7ef f8e2 	bl	800028c <__adddf3>
 80110c8:	4642      	mov	r2, r8
 80110ca:	4682      	mov	sl, r0
 80110cc:	468b      	mov	fp, r1
 80110ce:	464b      	mov	r3, r9
 80110d0:	4640      	mov	r0, r8
 80110d2:	4649      	mov	r1, r9
 80110d4:	f7ef fa90 	bl	80005f8 <__aeabi_dmul>
 80110d8:	4b6b      	ldr	r3, [pc, #428]	; (8011288 <__ieee754_pow+0x770>)
 80110da:	2200      	movs	r2, #0
 80110dc:	4606      	mov	r6, r0
 80110de:	460f      	mov	r7, r1
 80110e0:	f7ef f8d4 	bl	800028c <__adddf3>
 80110e4:	4652      	mov	r2, sl
 80110e6:	465b      	mov	r3, fp
 80110e8:	f7ef f8d0 	bl	800028c <__adddf3>
 80110ec:	2000      	movs	r0, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	460d      	mov	r5, r1
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	4640      	mov	r0, r8
 80110f8:	4649      	mov	r1, r9
 80110fa:	f7ef fa7d 	bl	80005f8 <__aeabi_dmul>
 80110fe:	4b62      	ldr	r3, [pc, #392]	; (8011288 <__ieee754_pow+0x770>)
 8011100:	4680      	mov	r8, r0
 8011102:	4689      	mov	r9, r1
 8011104:	2200      	movs	r2, #0
 8011106:	4620      	mov	r0, r4
 8011108:	4629      	mov	r1, r5
 801110a:	f7ef f8bd 	bl	8000288 <__aeabi_dsub>
 801110e:	4632      	mov	r2, r6
 8011110:	463b      	mov	r3, r7
 8011112:	f7ef f8b9 	bl	8000288 <__aeabi_dsub>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4650      	mov	r0, sl
 801111c:	4659      	mov	r1, fp
 801111e:	f7ef f8b3 	bl	8000288 <__aeabi_dsub>
 8011122:	ec53 2b18 	vmov	r2, r3, d8
 8011126:	f7ef fa67 	bl	80005f8 <__aeabi_dmul>
 801112a:	4622      	mov	r2, r4
 801112c:	4606      	mov	r6, r0
 801112e:	460f      	mov	r7, r1
 8011130:	462b      	mov	r3, r5
 8011132:	ec51 0b19 	vmov	r0, r1, d9
 8011136:	f7ef fa5f 	bl	80005f8 <__aeabi_dmul>
 801113a:	4602      	mov	r2, r0
 801113c:	460b      	mov	r3, r1
 801113e:	4630      	mov	r0, r6
 8011140:	4639      	mov	r1, r7
 8011142:	f7ef f8a3 	bl	800028c <__adddf3>
 8011146:	4606      	mov	r6, r0
 8011148:	460f      	mov	r7, r1
 801114a:	4602      	mov	r2, r0
 801114c:	460b      	mov	r3, r1
 801114e:	4640      	mov	r0, r8
 8011150:	4649      	mov	r1, r9
 8011152:	f7ef f89b 	bl	800028c <__adddf3>
 8011156:	a33e      	add	r3, pc, #248	; (adr r3, 8011250 <__ieee754_pow+0x738>)
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	2000      	movs	r0, #0
 801115e:	4604      	mov	r4, r0
 8011160:	460d      	mov	r5, r1
 8011162:	f7ef fa49 	bl	80005f8 <__aeabi_dmul>
 8011166:	4642      	mov	r2, r8
 8011168:	ec41 0b18 	vmov	d8, r0, r1
 801116c:	464b      	mov	r3, r9
 801116e:	4620      	mov	r0, r4
 8011170:	4629      	mov	r1, r5
 8011172:	f7ef f889 	bl	8000288 <__aeabi_dsub>
 8011176:	4602      	mov	r2, r0
 8011178:	460b      	mov	r3, r1
 801117a:	4630      	mov	r0, r6
 801117c:	4639      	mov	r1, r7
 801117e:	f7ef f883 	bl	8000288 <__aeabi_dsub>
 8011182:	a335      	add	r3, pc, #212	; (adr r3, 8011258 <__ieee754_pow+0x740>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7ef fa36 	bl	80005f8 <__aeabi_dmul>
 801118c:	a334      	add	r3, pc, #208	; (adr r3, 8011260 <__ieee754_pow+0x748>)
 801118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011192:	4606      	mov	r6, r0
 8011194:	460f      	mov	r7, r1
 8011196:	4620      	mov	r0, r4
 8011198:	4629      	mov	r1, r5
 801119a:	f7ef fa2d 	bl	80005f8 <__aeabi_dmul>
 801119e:	4602      	mov	r2, r0
 80111a0:	460b      	mov	r3, r1
 80111a2:	4630      	mov	r0, r6
 80111a4:	4639      	mov	r1, r7
 80111a6:	f7ef f871 	bl	800028c <__adddf3>
 80111aa:	9a07      	ldr	r2, [sp, #28]
 80111ac:	4b37      	ldr	r3, [pc, #220]	; (801128c <__ieee754_pow+0x774>)
 80111ae:	4413      	add	r3, r2
 80111b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b4:	f7ef f86a 	bl	800028c <__adddf3>
 80111b8:	4682      	mov	sl, r0
 80111ba:	9805      	ldr	r0, [sp, #20]
 80111bc:	468b      	mov	fp, r1
 80111be:	f7ef f9b1 	bl	8000524 <__aeabi_i2d>
 80111c2:	9a07      	ldr	r2, [sp, #28]
 80111c4:	4b32      	ldr	r3, [pc, #200]	; (8011290 <__ieee754_pow+0x778>)
 80111c6:	4413      	add	r3, r2
 80111c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80111cc:	4606      	mov	r6, r0
 80111ce:	460f      	mov	r7, r1
 80111d0:	4652      	mov	r2, sl
 80111d2:	465b      	mov	r3, fp
 80111d4:	ec51 0b18 	vmov	r0, r1, d8
 80111d8:	f7ef f858 	bl	800028c <__adddf3>
 80111dc:	4642      	mov	r2, r8
 80111de:	464b      	mov	r3, r9
 80111e0:	f7ef f854 	bl	800028c <__adddf3>
 80111e4:	4632      	mov	r2, r6
 80111e6:	463b      	mov	r3, r7
 80111e8:	f7ef f850 	bl	800028c <__adddf3>
 80111ec:	2000      	movs	r0, #0
 80111ee:	4632      	mov	r2, r6
 80111f0:	463b      	mov	r3, r7
 80111f2:	4604      	mov	r4, r0
 80111f4:	460d      	mov	r5, r1
 80111f6:	f7ef f847 	bl	8000288 <__aeabi_dsub>
 80111fa:	4642      	mov	r2, r8
 80111fc:	464b      	mov	r3, r9
 80111fe:	f7ef f843 	bl	8000288 <__aeabi_dsub>
 8011202:	ec53 2b18 	vmov	r2, r3, d8
 8011206:	f7ef f83f 	bl	8000288 <__aeabi_dsub>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	4650      	mov	r0, sl
 8011210:	4659      	mov	r1, fp
 8011212:	e610      	b.n	8010e36 <__ieee754_pow+0x31e>
 8011214:	2401      	movs	r4, #1
 8011216:	e6a1      	b.n	8010f5c <__ieee754_pow+0x444>
 8011218:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011268 <__ieee754_pow+0x750>
 801121c:	e617      	b.n	8010e4e <__ieee754_pow+0x336>
 801121e:	bf00      	nop
 8011220:	4a454eef 	.word	0x4a454eef
 8011224:	3fca7e28 	.word	0x3fca7e28
 8011228:	93c9db65 	.word	0x93c9db65
 801122c:	3fcd864a 	.word	0x3fcd864a
 8011230:	a91d4101 	.word	0xa91d4101
 8011234:	3fd17460 	.word	0x3fd17460
 8011238:	518f264d 	.word	0x518f264d
 801123c:	3fd55555 	.word	0x3fd55555
 8011240:	db6fabff 	.word	0xdb6fabff
 8011244:	3fdb6db6 	.word	0x3fdb6db6
 8011248:	33333303 	.word	0x33333303
 801124c:	3fe33333 	.word	0x3fe33333
 8011250:	e0000000 	.word	0xe0000000
 8011254:	3feec709 	.word	0x3feec709
 8011258:	dc3a03fd 	.word	0xdc3a03fd
 801125c:	3feec709 	.word	0x3feec709
 8011260:	145b01f5 	.word	0x145b01f5
 8011264:	be3e2fe0 	.word	0xbe3e2fe0
 8011268:	00000000 	.word	0x00000000
 801126c:	3ff00000 	.word	0x3ff00000
 8011270:	7ff00000 	.word	0x7ff00000
 8011274:	43400000 	.word	0x43400000
 8011278:	0003988e 	.word	0x0003988e
 801127c:	000bb679 	.word	0x000bb679
 8011280:	08012808 	.word	0x08012808
 8011284:	3ff00000 	.word	0x3ff00000
 8011288:	40080000 	.word	0x40080000
 801128c:	08012828 	.word	0x08012828
 8011290:	08012818 	.word	0x08012818
 8011294:	a3b3      	add	r3, pc, #716	; (adr r3, 8011564 <__ieee754_pow+0xa4c>)
 8011296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129a:	4640      	mov	r0, r8
 801129c:	4649      	mov	r1, r9
 801129e:	f7ee fff5 	bl	800028c <__adddf3>
 80112a2:	4622      	mov	r2, r4
 80112a4:	ec41 0b1a 	vmov	d10, r0, r1
 80112a8:	462b      	mov	r3, r5
 80112aa:	4630      	mov	r0, r6
 80112ac:	4639      	mov	r1, r7
 80112ae:	f7ee ffeb 	bl	8000288 <__aeabi_dsub>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	ec51 0b1a 	vmov	r0, r1, d10
 80112ba:	f7ef fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80112be:	2800      	cmp	r0, #0
 80112c0:	f47f ae04 	bne.w	8010ecc <__ieee754_pow+0x3b4>
 80112c4:	4aa2      	ldr	r2, [pc, #648]	; (8011550 <__ieee754_pow+0xa38>)
 80112c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80112ca:	4293      	cmp	r3, r2
 80112cc:	f340 8107 	ble.w	80114de <__ieee754_pow+0x9c6>
 80112d0:	151b      	asrs	r3, r3, #20
 80112d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80112d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80112da:	fa4a fa03 	asr.w	sl, sl, r3
 80112de:	44da      	add	sl, fp
 80112e0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80112e4:	489b      	ldr	r0, [pc, #620]	; (8011554 <__ieee754_pow+0xa3c>)
 80112e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80112ea:	4108      	asrs	r0, r1
 80112ec:	ea00 030a 	and.w	r3, r0, sl
 80112f0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80112f4:	f1c1 0114 	rsb	r1, r1, #20
 80112f8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80112fc:	fa4a fa01 	asr.w	sl, sl, r1
 8011300:	f1bb 0f00 	cmp.w	fp, #0
 8011304:	f04f 0200 	mov.w	r2, #0
 8011308:	4620      	mov	r0, r4
 801130a:	4629      	mov	r1, r5
 801130c:	bfb8      	it	lt
 801130e:	f1ca 0a00 	rsblt	sl, sl, #0
 8011312:	f7ee ffb9 	bl	8000288 <__aeabi_dsub>
 8011316:	ec41 0b19 	vmov	d9, r0, r1
 801131a:	4642      	mov	r2, r8
 801131c:	464b      	mov	r3, r9
 801131e:	ec51 0b19 	vmov	r0, r1, d9
 8011322:	f7ee ffb3 	bl	800028c <__adddf3>
 8011326:	a37a      	add	r3, pc, #488	; (adr r3, 8011510 <__ieee754_pow+0x9f8>)
 8011328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132c:	2000      	movs	r0, #0
 801132e:	4604      	mov	r4, r0
 8011330:	460d      	mov	r5, r1
 8011332:	f7ef f961 	bl	80005f8 <__aeabi_dmul>
 8011336:	ec53 2b19 	vmov	r2, r3, d9
 801133a:	4606      	mov	r6, r0
 801133c:	460f      	mov	r7, r1
 801133e:	4620      	mov	r0, r4
 8011340:	4629      	mov	r1, r5
 8011342:	f7ee ffa1 	bl	8000288 <__aeabi_dsub>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	4640      	mov	r0, r8
 801134c:	4649      	mov	r1, r9
 801134e:	f7ee ff9b 	bl	8000288 <__aeabi_dsub>
 8011352:	a371      	add	r3, pc, #452	; (adr r3, 8011518 <__ieee754_pow+0xa00>)
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f7ef f94e 	bl	80005f8 <__aeabi_dmul>
 801135c:	a370      	add	r3, pc, #448	; (adr r3, 8011520 <__ieee754_pow+0xa08>)
 801135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011362:	4680      	mov	r8, r0
 8011364:	4689      	mov	r9, r1
 8011366:	4620      	mov	r0, r4
 8011368:	4629      	mov	r1, r5
 801136a:	f7ef f945 	bl	80005f8 <__aeabi_dmul>
 801136e:	4602      	mov	r2, r0
 8011370:	460b      	mov	r3, r1
 8011372:	4640      	mov	r0, r8
 8011374:	4649      	mov	r1, r9
 8011376:	f7ee ff89 	bl	800028c <__adddf3>
 801137a:	4604      	mov	r4, r0
 801137c:	460d      	mov	r5, r1
 801137e:	4602      	mov	r2, r0
 8011380:	460b      	mov	r3, r1
 8011382:	4630      	mov	r0, r6
 8011384:	4639      	mov	r1, r7
 8011386:	f7ee ff81 	bl	800028c <__adddf3>
 801138a:	4632      	mov	r2, r6
 801138c:	463b      	mov	r3, r7
 801138e:	4680      	mov	r8, r0
 8011390:	4689      	mov	r9, r1
 8011392:	f7ee ff79 	bl	8000288 <__aeabi_dsub>
 8011396:	4602      	mov	r2, r0
 8011398:	460b      	mov	r3, r1
 801139a:	4620      	mov	r0, r4
 801139c:	4629      	mov	r1, r5
 801139e:	f7ee ff73 	bl	8000288 <__aeabi_dsub>
 80113a2:	4642      	mov	r2, r8
 80113a4:	4606      	mov	r6, r0
 80113a6:	460f      	mov	r7, r1
 80113a8:	464b      	mov	r3, r9
 80113aa:	4640      	mov	r0, r8
 80113ac:	4649      	mov	r1, r9
 80113ae:	f7ef f923 	bl	80005f8 <__aeabi_dmul>
 80113b2:	a35d      	add	r3, pc, #372	; (adr r3, 8011528 <__ieee754_pow+0xa10>)
 80113b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b8:	4604      	mov	r4, r0
 80113ba:	460d      	mov	r5, r1
 80113bc:	f7ef f91c 	bl	80005f8 <__aeabi_dmul>
 80113c0:	a35b      	add	r3, pc, #364	; (adr r3, 8011530 <__ieee754_pow+0xa18>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	f7ee ff5f 	bl	8000288 <__aeabi_dsub>
 80113ca:	4622      	mov	r2, r4
 80113cc:	462b      	mov	r3, r5
 80113ce:	f7ef f913 	bl	80005f8 <__aeabi_dmul>
 80113d2:	a359      	add	r3, pc, #356	; (adr r3, 8011538 <__ieee754_pow+0xa20>)
 80113d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d8:	f7ee ff58 	bl	800028c <__adddf3>
 80113dc:	4622      	mov	r2, r4
 80113de:	462b      	mov	r3, r5
 80113e0:	f7ef f90a 	bl	80005f8 <__aeabi_dmul>
 80113e4:	a356      	add	r3, pc, #344	; (adr r3, 8011540 <__ieee754_pow+0xa28>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	f7ee ff4d 	bl	8000288 <__aeabi_dsub>
 80113ee:	4622      	mov	r2, r4
 80113f0:	462b      	mov	r3, r5
 80113f2:	f7ef f901 	bl	80005f8 <__aeabi_dmul>
 80113f6:	a354      	add	r3, pc, #336	; (adr r3, 8011548 <__ieee754_pow+0xa30>)
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	f7ee ff46 	bl	800028c <__adddf3>
 8011400:	4622      	mov	r2, r4
 8011402:	462b      	mov	r3, r5
 8011404:	f7ef f8f8 	bl	80005f8 <__aeabi_dmul>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	4640      	mov	r0, r8
 801140e:	4649      	mov	r1, r9
 8011410:	f7ee ff3a 	bl	8000288 <__aeabi_dsub>
 8011414:	4604      	mov	r4, r0
 8011416:	460d      	mov	r5, r1
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4640      	mov	r0, r8
 801141e:	4649      	mov	r1, r9
 8011420:	f7ef f8ea 	bl	80005f8 <__aeabi_dmul>
 8011424:	2200      	movs	r2, #0
 8011426:	ec41 0b19 	vmov	d9, r0, r1
 801142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801142e:	4620      	mov	r0, r4
 8011430:	4629      	mov	r1, r5
 8011432:	f7ee ff29 	bl	8000288 <__aeabi_dsub>
 8011436:	4602      	mov	r2, r0
 8011438:	460b      	mov	r3, r1
 801143a:	ec51 0b19 	vmov	r0, r1, d9
 801143e:	f7ef fa05 	bl	800084c <__aeabi_ddiv>
 8011442:	4632      	mov	r2, r6
 8011444:	4604      	mov	r4, r0
 8011446:	460d      	mov	r5, r1
 8011448:	463b      	mov	r3, r7
 801144a:	4640      	mov	r0, r8
 801144c:	4649      	mov	r1, r9
 801144e:	f7ef f8d3 	bl	80005f8 <__aeabi_dmul>
 8011452:	4632      	mov	r2, r6
 8011454:	463b      	mov	r3, r7
 8011456:	f7ee ff19 	bl	800028c <__adddf3>
 801145a:	4602      	mov	r2, r0
 801145c:	460b      	mov	r3, r1
 801145e:	4620      	mov	r0, r4
 8011460:	4629      	mov	r1, r5
 8011462:	f7ee ff11 	bl	8000288 <__aeabi_dsub>
 8011466:	4642      	mov	r2, r8
 8011468:	464b      	mov	r3, r9
 801146a:	f7ee ff0d 	bl	8000288 <__aeabi_dsub>
 801146e:	460b      	mov	r3, r1
 8011470:	4602      	mov	r2, r0
 8011472:	4939      	ldr	r1, [pc, #228]	; (8011558 <__ieee754_pow+0xa40>)
 8011474:	2000      	movs	r0, #0
 8011476:	f7ee ff07 	bl	8000288 <__aeabi_dsub>
 801147a:	ec41 0b10 	vmov	d0, r0, r1
 801147e:	ee10 3a90 	vmov	r3, s1
 8011482:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801148a:	da2b      	bge.n	80114e4 <__ieee754_pow+0x9cc>
 801148c:	4650      	mov	r0, sl
 801148e:	f000 f877 	bl	8011580 <scalbn>
 8011492:	ec51 0b10 	vmov	r0, r1, d0
 8011496:	ec53 2b18 	vmov	r2, r3, d8
 801149a:	f7ff bbee 	b.w	8010c7a <__ieee754_pow+0x162>
 801149e:	4b2f      	ldr	r3, [pc, #188]	; (801155c <__ieee754_pow+0xa44>)
 80114a0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80114a4:	429e      	cmp	r6, r3
 80114a6:	f77f af0d 	ble.w	80112c4 <__ieee754_pow+0x7ac>
 80114aa:	4b2d      	ldr	r3, [pc, #180]	; (8011560 <__ieee754_pow+0xa48>)
 80114ac:	440b      	add	r3, r1
 80114ae:	4303      	orrs	r3, r0
 80114b0:	d009      	beq.n	80114c6 <__ieee754_pow+0x9ae>
 80114b2:	ec51 0b18 	vmov	r0, r1, d8
 80114b6:	2200      	movs	r2, #0
 80114b8:	2300      	movs	r3, #0
 80114ba:	f7ef fb0f 	bl	8000adc <__aeabi_dcmplt>
 80114be:	3800      	subs	r0, #0
 80114c0:	bf18      	it	ne
 80114c2:	2001      	movne	r0, #1
 80114c4:	e448      	b.n	8010d58 <__ieee754_pow+0x240>
 80114c6:	4622      	mov	r2, r4
 80114c8:	462b      	mov	r3, r5
 80114ca:	f7ee fedd 	bl	8000288 <__aeabi_dsub>
 80114ce:	4642      	mov	r2, r8
 80114d0:	464b      	mov	r3, r9
 80114d2:	f7ef fb17 	bl	8000b04 <__aeabi_dcmpge>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f43f aef4 	beq.w	80112c4 <__ieee754_pow+0x7ac>
 80114dc:	e7e9      	b.n	80114b2 <__ieee754_pow+0x99a>
 80114de:	f04f 0a00 	mov.w	sl, #0
 80114e2:	e71a      	b.n	801131a <__ieee754_pow+0x802>
 80114e4:	ec51 0b10 	vmov	r0, r1, d0
 80114e8:	4619      	mov	r1, r3
 80114ea:	e7d4      	b.n	8011496 <__ieee754_pow+0x97e>
 80114ec:	491a      	ldr	r1, [pc, #104]	; (8011558 <__ieee754_pow+0xa40>)
 80114ee:	2000      	movs	r0, #0
 80114f0:	f7ff bb31 	b.w	8010b56 <__ieee754_pow+0x3e>
 80114f4:	2000      	movs	r0, #0
 80114f6:	2100      	movs	r1, #0
 80114f8:	f7ff bb2d 	b.w	8010b56 <__ieee754_pow+0x3e>
 80114fc:	4630      	mov	r0, r6
 80114fe:	4639      	mov	r1, r7
 8011500:	f7ff bb29 	b.w	8010b56 <__ieee754_pow+0x3e>
 8011504:	9204      	str	r2, [sp, #16]
 8011506:	f7ff bb7b 	b.w	8010c00 <__ieee754_pow+0xe8>
 801150a:	2300      	movs	r3, #0
 801150c:	f7ff bb65 	b.w	8010bda <__ieee754_pow+0xc2>
 8011510:	00000000 	.word	0x00000000
 8011514:	3fe62e43 	.word	0x3fe62e43
 8011518:	fefa39ef 	.word	0xfefa39ef
 801151c:	3fe62e42 	.word	0x3fe62e42
 8011520:	0ca86c39 	.word	0x0ca86c39
 8011524:	be205c61 	.word	0xbe205c61
 8011528:	72bea4d0 	.word	0x72bea4d0
 801152c:	3e663769 	.word	0x3e663769
 8011530:	c5d26bf1 	.word	0xc5d26bf1
 8011534:	3ebbbd41 	.word	0x3ebbbd41
 8011538:	af25de2c 	.word	0xaf25de2c
 801153c:	3f11566a 	.word	0x3f11566a
 8011540:	16bebd93 	.word	0x16bebd93
 8011544:	3f66c16c 	.word	0x3f66c16c
 8011548:	5555553e 	.word	0x5555553e
 801154c:	3fc55555 	.word	0x3fc55555
 8011550:	3fe00000 	.word	0x3fe00000
 8011554:	fff00000 	.word	0xfff00000
 8011558:	3ff00000 	.word	0x3ff00000
 801155c:	4090cbff 	.word	0x4090cbff
 8011560:	3f6f3400 	.word	0x3f6f3400
 8011564:	652b82fe 	.word	0x652b82fe
 8011568:	3c971547 	.word	0x3c971547

0801156c <fabs>:
 801156c:	ec51 0b10 	vmov	r0, r1, d0
 8011570:	ee10 2a10 	vmov	r2, s0
 8011574:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011578:	ec43 2b10 	vmov	d0, r2, r3
 801157c:	4770      	bx	lr
	...

08011580 <scalbn>:
 8011580:	b570      	push	{r4, r5, r6, lr}
 8011582:	ec55 4b10 	vmov	r4, r5, d0
 8011586:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801158a:	4606      	mov	r6, r0
 801158c:	462b      	mov	r3, r5
 801158e:	b999      	cbnz	r1, 80115b8 <scalbn+0x38>
 8011590:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011594:	4323      	orrs	r3, r4
 8011596:	d03f      	beq.n	8011618 <scalbn+0x98>
 8011598:	4b35      	ldr	r3, [pc, #212]	; (8011670 <scalbn+0xf0>)
 801159a:	4629      	mov	r1, r5
 801159c:	ee10 0a10 	vmov	r0, s0
 80115a0:	2200      	movs	r2, #0
 80115a2:	f7ef f829 	bl	80005f8 <__aeabi_dmul>
 80115a6:	4b33      	ldr	r3, [pc, #204]	; (8011674 <scalbn+0xf4>)
 80115a8:	429e      	cmp	r6, r3
 80115aa:	4604      	mov	r4, r0
 80115ac:	460d      	mov	r5, r1
 80115ae:	da10      	bge.n	80115d2 <scalbn+0x52>
 80115b0:	a327      	add	r3, pc, #156	; (adr r3, 8011650 <scalbn+0xd0>)
 80115b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b6:	e01f      	b.n	80115f8 <scalbn+0x78>
 80115b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80115bc:	4291      	cmp	r1, r2
 80115be:	d10c      	bne.n	80115da <scalbn+0x5a>
 80115c0:	ee10 2a10 	vmov	r2, s0
 80115c4:	4620      	mov	r0, r4
 80115c6:	4629      	mov	r1, r5
 80115c8:	f7ee fe60 	bl	800028c <__adddf3>
 80115cc:	4604      	mov	r4, r0
 80115ce:	460d      	mov	r5, r1
 80115d0:	e022      	b.n	8011618 <scalbn+0x98>
 80115d2:	460b      	mov	r3, r1
 80115d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80115d8:	3936      	subs	r1, #54	; 0x36
 80115da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80115de:	4296      	cmp	r6, r2
 80115e0:	dd0d      	ble.n	80115fe <scalbn+0x7e>
 80115e2:	2d00      	cmp	r5, #0
 80115e4:	a11c      	add	r1, pc, #112	; (adr r1, 8011658 <scalbn+0xd8>)
 80115e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115ea:	da02      	bge.n	80115f2 <scalbn+0x72>
 80115ec:	a11c      	add	r1, pc, #112	; (adr r1, 8011660 <scalbn+0xe0>)
 80115ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115f2:	a319      	add	r3, pc, #100	; (adr r3, 8011658 <scalbn+0xd8>)
 80115f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f8:	f7ee fffe 	bl	80005f8 <__aeabi_dmul>
 80115fc:	e7e6      	b.n	80115cc <scalbn+0x4c>
 80115fe:	1872      	adds	r2, r6, r1
 8011600:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011604:	428a      	cmp	r2, r1
 8011606:	dcec      	bgt.n	80115e2 <scalbn+0x62>
 8011608:	2a00      	cmp	r2, #0
 801160a:	dd08      	ble.n	801161e <scalbn+0x9e>
 801160c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011610:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011614:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011618:	ec45 4b10 	vmov	d0, r4, r5
 801161c:	bd70      	pop	{r4, r5, r6, pc}
 801161e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011622:	da08      	bge.n	8011636 <scalbn+0xb6>
 8011624:	2d00      	cmp	r5, #0
 8011626:	a10a      	add	r1, pc, #40	; (adr r1, 8011650 <scalbn+0xd0>)
 8011628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801162c:	dac0      	bge.n	80115b0 <scalbn+0x30>
 801162e:	a10e      	add	r1, pc, #56	; (adr r1, 8011668 <scalbn+0xe8>)
 8011630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011634:	e7bc      	b.n	80115b0 <scalbn+0x30>
 8011636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801163a:	3236      	adds	r2, #54	; 0x36
 801163c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011640:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011644:	4620      	mov	r0, r4
 8011646:	4b0c      	ldr	r3, [pc, #48]	; (8011678 <scalbn+0xf8>)
 8011648:	2200      	movs	r2, #0
 801164a:	e7d5      	b.n	80115f8 <scalbn+0x78>
 801164c:	f3af 8000 	nop.w
 8011650:	c2f8f359 	.word	0xc2f8f359
 8011654:	01a56e1f 	.word	0x01a56e1f
 8011658:	8800759c 	.word	0x8800759c
 801165c:	7e37e43c 	.word	0x7e37e43c
 8011660:	8800759c 	.word	0x8800759c
 8011664:	fe37e43c 	.word	0xfe37e43c
 8011668:	c2f8f359 	.word	0xc2f8f359
 801166c:	81a56e1f 	.word	0x81a56e1f
 8011670:	43500000 	.word	0x43500000
 8011674:	ffff3cb0 	.word	0xffff3cb0
 8011678:	3c900000 	.word	0x3c900000

0801167c <with_errno>:
 801167c:	b570      	push	{r4, r5, r6, lr}
 801167e:	4604      	mov	r4, r0
 8011680:	460d      	mov	r5, r1
 8011682:	4616      	mov	r6, r2
 8011684:	f7fd f924 	bl	800e8d0 <__errno>
 8011688:	4629      	mov	r1, r5
 801168a:	6006      	str	r6, [r0, #0]
 801168c:	4620      	mov	r0, r4
 801168e:	bd70      	pop	{r4, r5, r6, pc}

08011690 <xflow>:
 8011690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011692:	4614      	mov	r4, r2
 8011694:	461d      	mov	r5, r3
 8011696:	b108      	cbz	r0, 801169c <xflow+0xc>
 8011698:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801169c:	e9cd 2300 	strd	r2, r3, [sp]
 80116a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116a4:	4620      	mov	r0, r4
 80116a6:	4629      	mov	r1, r5
 80116a8:	f7ee ffa6 	bl	80005f8 <__aeabi_dmul>
 80116ac:	2222      	movs	r2, #34	; 0x22
 80116ae:	b003      	add	sp, #12
 80116b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116b4:	f7ff bfe2 	b.w	801167c <with_errno>

080116b8 <__math_uflow>:
 80116b8:	b508      	push	{r3, lr}
 80116ba:	2200      	movs	r2, #0
 80116bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80116c0:	f7ff ffe6 	bl	8011690 <xflow>
 80116c4:	ec41 0b10 	vmov	d0, r0, r1
 80116c8:	bd08      	pop	{r3, pc}

080116ca <__math_oflow>:
 80116ca:	b508      	push	{r3, lr}
 80116cc:	2200      	movs	r2, #0
 80116ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80116d2:	f7ff ffdd 	bl	8011690 <xflow>
 80116d6:	ec41 0b10 	vmov	d0, r0, r1
 80116da:	bd08      	pop	{r3, pc}

080116dc <__ieee754_sqrt>:
 80116dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e0:	ec55 4b10 	vmov	r4, r5, d0
 80116e4:	4e67      	ldr	r6, [pc, #412]	; (8011884 <__ieee754_sqrt+0x1a8>)
 80116e6:	43ae      	bics	r6, r5
 80116e8:	ee10 0a10 	vmov	r0, s0
 80116ec:	ee10 2a10 	vmov	r2, s0
 80116f0:	4629      	mov	r1, r5
 80116f2:	462b      	mov	r3, r5
 80116f4:	d10d      	bne.n	8011712 <__ieee754_sqrt+0x36>
 80116f6:	f7ee ff7f 	bl	80005f8 <__aeabi_dmul>
 80116fa:	4602      	mov	r2, r0
 80116fc:	460b      	mov	r3, r1
 80116fe:	4620      	mov	r0, r4
 8011700:	4629      	mov	r1, r5
 8011702:	f7ee fdc3 	bl	800028c <__adddf3>
 8011706:	4604      	mov	r4, r0
 8011708:	460d      	mov	r5, r1
 801170a:	ec45 4b10 	vmov	d0, r4, r5
 801170e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011712:	2d00      	cmp	r5, #0
 8011714:	dc0b      	bgt.n	801172e <__ieee754_sqrt+0x52>
 8011716:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801171a:	4326      	orrs	r6, r4
 801171c:	d0f5      	beq.n	801170a <__ieee754_sqrt+0x2e>
 801171e:	b135      	cbz	r5, 801172e <__ieee754_sqrt+0x52>
 8011720:	f7ee fdb2 	bl	8000288 <__aeabi_dsub>
 8011724:	4602      	mov	r2, r0
 8011726:	460b      	mov	r3, r1
 8011728:	f7ef f890 	bl	800084c <__aeabi_ddiv>
 801172c:	e7eb      	b.n	8011706 <__ieee754_sqrt+0x2a>
 801172e:	1509      	asrs	r1, r1, #20
 8011730:	f000 808d 	beq.w	801184e <__ieee754_sqrt+0x172>
 8011734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011738:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801173c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011740:	07c9      	lsls	r1, r1, #31
 8011742:	bf5c      	itt	pl
 8011744:	005b      	lslpl	r3, r3, #1
 8011746:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801174a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801174e:	bf58      	it	pl
 8011750:	0052      	lslpl	r2, r2, #1
 8011752:	2500      	movs	r5, #0
 8011754:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011758:	1076      	asrs	r6, r6, #1
 801175a:	0052      	lsls	r2, r2, #1
 801175c:	f04f 0e16 	mov.w	lr, #22
 8011760:	46ac      	mov	ip, r5
 8011762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011766:	eb0c 0001 	add.w	r0, ip, r1
 801176a:	4298      	cmp	r0, r3
 801176c:	bfde      	ittt	le
 801176e:	1a1b      	suble	r3, r3, r0
 8011770:	eb00 0c01 	addle.w	ip, r0, r1
 8011774:	186d      	addle	r5, r5, r1
 8011776:	005b      	lsls	r3, r3, #1
 8011778:	f1be 0e01 	subs.w	lr, lr, #1
 801177c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011780:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011784:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011788:	d1ed      	bne.n	8011766 <__ieee754_sqrt+0x8a>
 801178a:	4674      	mov	r4, lr
 801178c:	2720      	movs	r7, #32
 801178e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011792:	4563      	cmp	r3, ip
 8011794:	eb01 000e 	add.w	r0, r1, lr
 8011798:	dc02      	bgt.n	80117a0 <__ieee754_sqrt+0xc4>
 801179a:	d113      	bne.n	80117c4 <__ieee754_sqrt+0xe8>
 801179c:	4290      	cmp	r0, r2
 801179e:	d811      	bhi.n	80117c4 <__ieee754_sqrt+0xe8>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	eb00 0e01 	add.w	lr, r0, r1
 80117a6:	da57      	bge.n	8011858 <__ieee754_sqrt+0x17c>
 80117a8:	f1be 0f00 	cmp.w	lr, #0
 80117ac:	db54      	blt.n	8011858 <__ieee754_sqrt+0x17c>
 80117ae:	f10c 0801 	add.w	r8, ip, #1
 80117b2:	eba3 030c 	sub.w	r3, r3, ip
 80117b6:	4290      	cmp	r0, r2
 80117b8:	bf88      	it	hi
 80117ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80117be:	1a12      	subs	r2, r2, r0
 80117c0:	440c      	add	r4, r1
 80117c2:	46c4      	mov	ip, r8
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	3f01      	subs	r7, #1
 80117c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80117cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80117d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80117d4:	d1dd      	bne.n	8011792 <__ieee754_sqrt+0xb6>
 80117d6:	4313      	orrs	r3, r2
 80117d8:	d01b      	beq.n	8011812 <__ieee754_sqrt+0x136>
 80117da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011888 <__ieee754_sqrt+0x1ac>
 80117de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801188c <__ieee754_sqrt+0x1b0>
 80117e2:	e9da 0100 	ldrd	r0, r1, [sl]
 80117e6:	e9db 2300 	ldrd	r2, r3, [fp]
 80117ea:	f7ee fd4d 	bl	8000288 <__aeabi_dsub>
 80117ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80117f2:	4602      	mov	r2, r0
 80117f4:	460b      	mov	r3, r1
 80117f6:	4640      	mov	r0, r8
 80117f8:	4649      	mov	r1, r9
 80117fa:	f7ef f979 	bl	8000af0 <__aeabi_dcmple>
 80117fe:	b140      	cbz	r0, 8011812 <__ieee754_sqrt+0x136>
 8011800:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011804:	e9da 0100 	ldrd	r0, r1, [sl]
 8011808:	e9db 2300 	ldrd	r2, r3, [fp]
 801180c:	d126      	bne.n	801185c <__ieee754_sqrt+0x180>
 801180e:	3501      	adds	r5, #1
 8011810:	463c      	mov	r4, r7
 8011812:	106a      	asrs	r2, r5, #1
 8011814:	0863      	lsrs	r3, r4, #1
 8011816:	07e9      	lsls	r1, r5, #31
 8011818:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801181c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011820:	bf48      	it	mi
 8011822:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011826:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801182a:	461c      	mov	r4, r3
 801182c:	e76d      	b.n	801170a <__ieee754_sqrt+0x2e>
 801182e:	0ad3      	lsrs	r3, r2, #11
 8011830:	3815      	subs	r0, #21
 8011832:	0552      	lsls	r2, r2, #21
 8011834:	2b00      	cmp	r3, #0
 8011836:	d0fa      	beq.n	801182e <__ieee754_sqrt+0x152>
 8011838:	02dc      	lsls	r4, r3, #11
 801183a:	d50a      	bpl.n	8011852 <__ieee754_sqrt+0x176>
 801183c:	f1c1 0420 	rsb	r4, r1, #32
 8011840:	fa22 f404 	lsr.w	r4, r2, r4
 8011844:	1e4d      	subs	r5, r1, #1
 8011846:	408a      	lsls	r2, r1
 8011848:	4323      	orrs	r3, r4
 801184a:	1b41      	subs	r1, r0, r5
 801184c:	e772      	b.n	8011734 <__ieee754_sqrt+0x58>
 801184e:	4608      	mov	r0, r1
 8011850:	e7f0      	b.n	8011834 <__ieee754_sqrt+0x158>
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	3101      	adds	r1, #1
 8011856:	e7ef      	b.n	8011838 <__ieee754_sqrt+0x15c>
 8011858:	46e0      	mov	r8, ip
 801185a:	e7aa      	b.n	80117b2 <__ieee754_sqrt+0xd6>
 801185c:	f7ee fd16 	bl	800028c <__adddf3>
 8011860:	e9da 8900 	ldrd	r8, r9, [sl]
 8011864:	4602      	mov	r2, r0
 8011866:	460b      	mov	r3, r1
 8011868:	4640      	mov	r0, r8
 801186a:	4649      	mov	r1, r9
 801186c:	f7ef f936 	bl	8000adc <__aeabi_dcmplt>
 8011870:	b120      	cbz	r0, 801187c <__ieee754_sqrt+0x1a0>
 8011872:	1ca0      	adds	r0, r4, #2
 8011874:	bf08      	it	eq
 8011876:	3501      	addeq	r5, #1
 8011878:	3402      	adds	r4, #2
 801187a:	e7ca      	b.n	8011812 <__ieee754_sqrt+0x136>
 801187c:	3401      	adds	r4, #1
 801187e:	f024 0401 	bic.w	r4, r4, #1
 8011882:	e7c6      	b.n	8011812 <__ieee754_sqrt+0x136>
 8011884:	7ff00000 	.word	0x7ff00000
 8011888:	200001d8 	.word	0x200001d8
 801188c:	200001e0 	.word	0x200001e0

08011890 <_init>:
 8011890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011892:	bf00      	nop
 8011894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011896:	bc08      	pop	{r3}
 8011898:	469e      	mov	lr, r3
 801189a:	4770      	bx	lr

0801189c <_fini>:
 801189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189e:	bf00      	nop
 80118a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118a2:	bc08      	pop	{r3}
 80118a4:	469e      	mov	lr, r3
 80118a6:	4770      	bx	lr
