
SC2079_MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e96c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800eb00  0800eb00  0001eb00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eff4  0800eff4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800eff4  0800eff4  0001eff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800effc  0800effc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800effc  0800effc  0001effc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f000  0800f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000052d4  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200054b0  200054b0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d0ff  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ceb  00000000  00000000  0003d34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab8  00000000  00000000  00041040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001510  00000000  00000000  00042af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000057cd  00000000  00000000  00044008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e871  00000000  00000000  000497d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e76df  00000000  00000000  00068046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008244  00000000  00000000  0014f728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0015796c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eae4 	.word	0x0800eae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800eae4 	.word	0x0800eae4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f002 fd50 	bl	8003a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f874 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 fc4a 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f94:	f000 fc12 	bl	80017bc <MX_DMA_Init>
  MX_TIM8_Init();
 8000f98:	f000 fb3c 	bl	8001614 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f9c:	f000 fa08 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fa5a 	bl	8001458 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f982 	bl	80012ac <MX_TIM1_Init>
  MX_TIM6_Init();
 8000fa8:	f000 fafe 	bl	80015a8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000fac:	f000 fbdc 	bl	8001768 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fb0:	f000 f920 	bl	80011f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fb4:	f000 f94c 	bl	8001250 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000fb8:	f000 faa2 	bl	8001500 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000fbc:	f000 f8ba 	bl	8001134 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000fc0:	f002 f806 	bl	8002fd0 <OLED_Init>
  // Receive message from RPI
  //HAL_UART_Receive_IT(&huart3, (uint8_t *)rpiBuffer, 10);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc4:	f008 fb82 	bl	80096cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <main+0xac>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <main+0xb0>)
 8000fce:	f008 fbc7 	bl	8009760 <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <main+0xb4>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <main+0xb8>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <main+0xbc>)
 8000fde:	f008 fbbf 	bl	8009760 <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <main+0xc0>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder, NULL, &EncoderTask_attributes);
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <main+0xc4>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4817      	ldr	r0, [pc, #92]	; (800104c <main+0xc8>)
 8000fee:	f008 fbb7 	bl	8009760 <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a16      	ldr	r2, [pc, #88]	; (8001050 <main+0xcc>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(Gyro, NULL, &GyroTask_attributes);
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <main+0xd0>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <main+0xd4>)
 8000ffe:	f008 fbaf 	bl	8009760 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <main+0xd8>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of Ultrasonic */
  UltrasonicHandle = osThreadNew(start_ultrasonic, NULL, &Ultrasonic_attributes);
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <main+0xdc>)
 800100a:	2100      	movs	r1, #0
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <main+0xe0>)
 800100e:	f008 fba7 	bl	8009760 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <main+0xe4>)
 8001016:	6013      	str	r3, [r2, #0]

  /* creation of IR_Task */
  IR_TaskHandle = osThreadNew(ir_task, NULL, &IR_Task_attributes);
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <main+0xe8>)
 800101a:	2100      	movs	r1, #0
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <main+0xec>)
 800101e:	f008 fb9f 	bl	8009760 <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <main+0xf0>)
 8001026:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001028:	f008 fb74 	bl	8009714 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800102c:	e7fe      	b.n	800102c <main+0xa8>
 800102e:	bf00      	nop
 8001030:	0800eb88 	.word	0x0800eb88
 8001034:	080027a1 	.word	0x080027a1
 8001038:	200005b0 	.word	0x200005b0
 800103c:	0800ebac 	.word	0x0800ebac
 8001040:	080027b1 	.word	0x080027b1
 8001044:	200005b4 	.word	0x200005b4
 8001048:	0800ebd0 	.word	0x0800ebd0
 800104c:	08002b7d 	.word	0x08002b7d
 8001050:	200005b8 	.word	0x200005b8
 8001054:	0800ebf4 	.word	0x0800ebf4
 8001058:	08002cb1 	.word	0x08002cb1
 800105c:	200005bc 	.word	0x200005bc
 8001060:	0800ec18 	.word	0x0800ec18
 8001064:	08002e51 	.word	0x08002e51
 8001068:	200005c0 	.word	0x200005c0
 800106c:	0800ec3c 	.word	0x0800ec3c
 8001070:	08002e6d 	.word	0x08002e6d
 8001074:	200005c4 	.word	0x200005c4

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f00b fddb 	bl	800cc42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <SystemClock_Config+0xb4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0xb4>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <SystemClock_Config+0xb4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <SystemClock_Config+0xb8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <SystemClock_Config+0xb8>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <SystemClock_Config+0xb8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 f923 	bl	8006334 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010f4:	f001 febf 	bl	8002e76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f005 fb86 	bl	8006824 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800111e:	f001 feaa 	bl	8002e76 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <MX_ADC1_Init+0xb8>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800115a:	2201      	movs	r2, #1
 800115c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001160:	2201      	movs	r2, #1
 8001162:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <MX_ADC1_Init+0xbc>)
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001180:	2202      	movs	r2, #2
 8001182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800118e:	2201      	movs	r2, #1
 8001190:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001194:	f002 fce0 	bl	8003b58 <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800119e:	f001 fe6a 	bl	8002e76 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011a2:	230b      	movs	r3, #11
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011b4:	f002 fd14 	bl	8003be0 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011be:	f001 fe5a 	bl	8002e76 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011c2:	230c      	movs	r3, #12
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011d0:	f002 fd06 	bl	8003be0 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011da:	f001 fe4c 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000260 	.word	0x20000260
 80011ec:	40012000 	.word	0x40012000
 80011f0:	0f000001 	.word	0x0f000001

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x50>)
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x50>)
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_I2C1_Init+0x58>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_I2C1_Init+0x50>)
 8001212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C1_Init+0x50>)
 8001232:	f003 fdc9 	bl	8004dc8 <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f001 fe1b 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000020c 	.word	0x2000020c
 8001248:	40005400 	.word	0x40005400
 800124c:	00061a80 	.word	0x00061a80

08001250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C2_Init+0x50>)
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_I2C2_Init+0x58>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_I2C2_Init+0x50>)
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_I2C2_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_I2C2_Init+0x50>)
 800128e:	f003 fd9b 	bl	8004dc8 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001298:	f001 fded 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000308 	.word	0x20000308
 80012a4:	40005800 	.word	0x40005800
 80012a8:	000186a0 	.word	0x000186a0

080012ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b092      	sub	sp, #72	; 0x48
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2220      	movs	r2, #32
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00b fcb3 	bl	800cc42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <MX_TIM1_Init+0x100>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012e4:	22a0      	movs	r2, #160	; 0xa0
 80012e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_TIM1_Init+0xfc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <MX_TIM1_Init+0xfc>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001308:	4827      	ldr	r0, [pc, #156]	; (80013a8 <MX_TIM1_Init+0xfc>)
 800130a:	f005 fcba 	bl	8006c82 <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001314:	f001 fdaf 	bl	8002e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001324:	4619      	mov	r1, r3
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xfc>)
 8001328:	f007 f842 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001332:	f001 fda0 	bl	8002e76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	220c      	movs	r2, #12
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_TIM1_Init+0xfc>)
 8001358:	f006 f9fa 	bl	8007750 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001362:	f001 fd88 	bl	8002e76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM1_Init+0xfc>)
 800138a:	f007 f88d 	bl	80084a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001394:	f001 fd6f 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM1_Init+0xfc>)
 800139a:	f002 f969 	bl	8003670 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3748      	adds	r7, #72	; 0x48
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200003bc 	.word	0x200003bc
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b fc3f 	bl	800cc42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM2_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001404:	230a      	movs	r3, #10
 8001406:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140c:	2301      	movs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001414:	230a      	movs	r3, #10
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM2_Init+0xa4>)
 8001420:	f005 febe 	bl	80071a0 <HAL_TIM_Encoder_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800142a:	f001 fd24 	bl	8002e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM2_Init+0xa4>)
 800143c:	f006 ffb8 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001446:	f001 fd16 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000404 	.word	0x20000404

08001458 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2224      	movs	r2, #36	; 0x24
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f00b fbeb 	bl	800cc42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_TIM3_Init+0xa4>)
 8001478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_TIM3_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM3_Init+0xa0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800149a:	2303      	movs	r3, #3
 800149c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014aa:	230a      	movs	r3, #10
 80014ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b2:	2301      	movs	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014ba:	230a      	movs	r3, #10
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_TIM3_Init+0xa0>)
 80014c6:	f005 fe6b 	bl	80071a0 <HAL_TIM_Encoder_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f001 fcd1 	bl	8002e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_TIM3_Init+0xa0>)
 80014e2:	f006 ff65 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014ec:	f001 fcc3 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	; 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000044c 	.word	0x2000044c
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <MX_TIM4_Init+0xa0>)
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001520:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001524:	2247      	movs	r2, #71	; 0x47
 8001526:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_TIM4_Init+0xa0>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_TIM4_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001544:	f005 fcb4 	bl	8006eb0 <HAL_TIM_IC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800154e:	f001 fc92 	bl	8002e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001562:	f006 ff25 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800156c:	f001 fc83 	bl	8002e76 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM4_Init+0xa0>)
 8001588:	f006 f846 	bl	8007618 <HAL_TIM_IC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001592:	f001 fc70 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000494 	.word	0x20000494
 80015a4:	40000800 	.word	0x40000800

080015a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM6_Init+0x64>)
 80015b8:	4a15      	ldr	r2, [pc, #84]	; (8001610 <MX_TIM6_Init+0x68>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_TIM6_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_TIM6_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_TIM6_Init+0x64>)
 80015ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_TIM6_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM6_Init+0x64>)
 80015d8:	f005 fb04 	bl	8006be4 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015e2:	f001 fc48 	bl	8002e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM6_Init+0x64>)
 80015f4:	f006 fedc 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015fe:	f001 fc3a 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200004dc 	.word	0x200004dc
 8001610:	40001000 	.word	0x40001000

08001614 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b096      	sub	sp, #88	; 0x58
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2220      	movs	r2, #32
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b faf8 	bl	800cc42 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001654:	4a43      	ldr	r2, [pc, #268]	; (8001764 <MX_TIM8_Init+0x150>)
 8001656:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <MX_TIM8_Init+0x14c>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001664:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001666:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800166a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <MX_TIM8_Init+0x14c>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <MX_TIM8_Init+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800167e:	4838      	ldr	r0, [pc, #224]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001680:	f005 fab0 	bl	8006be4 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800168a:	f001 fbf4 	bl	8002e76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001694:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001698:	4619      	mov	r1, r3
 800169a:	4831      	ldr	r0, [pc, #196]	; (8001760 <MX_TIM8_Init+0x14c>)
 800169c:	f006 f91a 	bl	80078d4 <HAL_TIM_ConfigClockSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016a6:	f001 fbe6 	bl	8002e76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016aa:	482d      	ldr	r0, [pc, #180]	; (8001760 <MX_TIM8_Init+0x14c>)
 80016ac:	f005 fae9 	bl	8006c82 <HAL_TIM_PWM_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016b6:	f001 fbde 	bl	8002e76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c6:	4619      	mov	r1, r3
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_TIM8_Init+0x14c>)
 80016ca:	f006 fe71 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016d4:	f001 fbcf 	bl	8002e76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d8:	2360      	movs	r3, #96	; 0x60
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4818      	ldr	r0, [pc, #96]	; (8001760 <MX_TIM8_Init+0x14c>)
 80016fe:	f006 f827 	bl	8007750 <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001708:	f001 fbb5 	bl	8002e76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	2204      	movs	r2, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4812      	ldr	r0, [pc, #72]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001716:	f006 f81b 	bl	8007750 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001720:	f001 fba9 	bl	8002e76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_TIM8_Init+0x14c>)
 8001748:	f006 feae 	bl	80084a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001752:	f001 fb90 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3758      	adds	r7, #88	; 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000524 	.word	0x20000524
 8001764:	40010400 	.word	0x40010400

08001768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART3_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 80017a0:	f006 fee8 	bl	8008574 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f001 fb64 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000056c 	.word	0x2000056c
 80017b8:	40004800 	.word	0x40004800

080017bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_DMA_Init+0x68>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a16      	ldr	r2, [pc, #88]	; (8001824 <MX_DMA_Init+0x68>)
 80017cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_DMA_Init+0x68>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_DMA_Init+0x68>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <MX_DMA_Init+0x68>)
 80017e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MX_DMA_Init+0x68>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	200b      	movs	r0, #11
 8001800:	f002 fce7 	bl	80041d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001804:	200b      	movs	r0, #11
 8001806:	f002 fd00 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2038      	movs	r0, #56	; 0x38
 8001810:	f002 fcdf 	bl	80041d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001814:	2038      	movs	r0, #56	; 0x38
 8001816:	f002 fcf8 	bl	800420a <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <MX_GPIO_Init+0x184>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a59      	ldr	r2, [pc, #356]	; (80019ac <MX_GPIO_Init+0x184>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <MX_GPIO_Init+0x184>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b53      	ldr	r3, [pc, #332]	; (80019ac <MX_GPIO_Init+0x184>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a52      	ldr	r2, [pc, #328]	; (80019ac <MX_GPIO_Init+0x184>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <MX_GPIO_Init+0x184>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <MX_GPIO_Init+0x184>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <MX_GPIO_Init+0x184>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <MX_GPIO_Init+0x184>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b45      	ldr	r3, [pc, #276]	; (80019ac <MX_GPIO_Init+0x184>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a44      	ldr	r2, [pc, #272]	; (80019ac <MX_GPIO_Init+0x184>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b42      	ldr	r3, [pc, #264]	; (80019ac <MX_GPIO_Init+0x184>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <MX_GPIO_Init+0x184>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <MX_GPIO_Init+0x184>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <MX_GPIO_Init+0x184>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <MX_GPIO_Init+0x184>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <MX_GPIO_Init+0x184>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_GPIO_Init+0x184>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80018ec:	4830      	ldr	r0, [pc, #192]	; (80019b0 <MX_GPIO_Init+0x188>)
 80018ee:	f003 fa51 	bl	8004d94 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	213c      	movs	r1, #60	; 0x3c
 80018f6:	482f      	ldr	r0, [pc, #188]	; (80019b4 <MX_GPIO_Init+0x18c>)
 80018f8:	f003 fa4c 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001902:	482d      	ldr	r0, [pc, #180]	; (80019b8 <MX_GPIO_Init+0x190>)
 8001904:	f003 fa46 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TriggerB4_GPIO_Port, TriggerB4_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	482b      	ldr	r0, [pc, #172]	; (80019bc <MX_GPIO_Init+0x194>)
 800190e:	f003 fa41 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001912:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001916:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4821      	ldr	r0, [pc, #132]	; (80019b0 <MX_GPIO_Init+0x188>)
 800192c:	f003 f896 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001930:	233c      	movs	r3, #60	; 0x3c
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2302      	movs	r3, #2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <MX_GPIO_Init+0x18c>)
 8001948:	f003 f888 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_GPIO_Init+0x188>)
 8001964:	f003 f87a 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8001968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_GPIO_Init+0x190>)
 8001982:	f003 f86b 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TriggerB4_Pin */
  GPIO_InitStruct.Pin = TriggerB4_Pin;
 8001986:	2310      	movs	r3, #16
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TriggerB4_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_GPIO_Init+0x194>)
 800199e:	f003 f85d 	bl	8004a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a2:	bf00      	nop
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40020400 	.word	0x40020400

080019c0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
// Ultrasonic Sensor
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
//			}
//			Is_First_Captured = 0;
//		}
//	}
	//if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	// Interrupt due to Timer TIM1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d177      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7f1b      	ldrb	r3, [r3, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d173      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80019d8:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11a      	bne.n	8001a16 <HAL_TIM_IC_CaptureCallback+0x56>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f006 f83e 	bl	8007a64 <HAL_TIM_ReadCapturedValue>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a3b      	ldr	r2, [pc, #236]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80019ec:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a1a      	ldr	r2, [r3, #32]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020a 	bic.w	r2, r2, #10
 8001a02:	621a      	str	r2, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0202 	orr.w	r2, r2, #2
 8001a12:	621a      	str	r2, [r3, #32]
				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
			}
		}
}
 8001a14:	e054      	b.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
			else if (Is_First_Captured==1)   // if the first is already captured
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d150      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x100>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f006 f81f 	bl	8007a64 <HAL_TIM_ReadCapturedValue>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a2a:	6013      	str	r3, [r2, #0]
				if (IC_Val2 > IC_Val1)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d907      	bls.n	8001a48 <HAL_TIM_IC_CaptureCallback+0x88>
					echo = IC_Val2-IC_Val1;
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00f      	b.n	8001a68 <HAL_TIM_IC_CaptureCallback+0xa8>
				else if (IC_Val1 > IC_Val2)
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d909      	bls.n	8001a68 <HAL_TIM_IC_CaptureCallback+0xa8>
					echo = (0xffff - IC_Val1) + IC_Val2;
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a62:	33ff      	adds	r3, #255	; 0xff
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a66:	6013      	str	r3, [r2, #0]
				Distance = echo/13.3;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd49 	bl	8000504 <__aeabi_ui2d>
 8001a72:	a315      	add	r3, pc, #84	; (adr r3, 8001ac8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fee8 	bl	800084c <__aeabi_ddiv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f890 	bl	8000ba8 <__aeabi_d2uiz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001a8c:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 0; // set it back to false
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020a 	bic.w	r2, r2, #10
 8001aa2:	621a      	str	r2, [r3, #32]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a12      	ldr	r2, [r2, #32]
 8001aae:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0202 	bic.w	r2, r2, #2
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	402a9999 	.word	0x402a9999
 8001ad0:	20000494 	.word	0x20000494
 8001ad4:	200005e8 	.word	0x200005e8
 8001ad8:	200005dc 	.word	0x200005dc
 8001adc:	200005e0 	.word	0x200005e0
 8001ae0:	200005e4 	.word	0x200005e4
 8001ae4:	200005ec 	.word	0x200005ec

08001ae8 <HAL_UART_RxCpltCallback>:
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
}

// Callback Function where the interrupt will go to
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_UART_RxCpltCallback+0x74>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12c      	bne.n	8001b54 <HAL_UART_RxCpltCallback+0x6c>
	        motionCommand = uartRxBuffer[0]; // Store the motion (forward/backward/stop; set rotation mode)
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_UART_RxCpltCallback+0x78>)
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_RxCpltCallback+0x7c>)
 8001b00:	701a      	strb	r2, [r3, #0]
	        dirCommand = uartRxBuffer[1]; // Store the direction (left/center/right)
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_UART_RxCpltCallback+0x78>)
 8001b04:	785a      	ldrb	r2, [r3, #1]
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_UART_RxCpltCallback+0x80>)
 8001b08:	701a      	strb	r2, [r3, #0]
	        distCommand = ((int) (uartRxBuffer[2]) - 48) * 100
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_UART_RxCpltCallback+0x78>)
 8001b0c:	789b      	ldrb	r3, [r3, #2]
					+ ((int) (uartRxBuffer[3]) - 48) * 10
 8001b0e:	461a      	mov	r2, r3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	0091      	lsls	r1, r2, #2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_UART_RxCpltCallback+0x78>)
 8001b24:	78db      	ldrb	r3, [r3, #3]
 8001b26:	4619      	mov	r1, r3
 8001b28:	0089      	lsls	r1, r1, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	b2da      	uxtb	r2, r3
					+ ((int) (uartRxBuffer[4]) - 48);// Store the distance (cm) / angle (degree) (format: 000)
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_UART_RxCpltCallback+0x78>)
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3330      	adds	r3, #48	; 0x30
 8001b3e:	b2da      	uxtb	r2, r3
	        distCommand = ((int) (uartRxBuffer[2]) - 48) * 100
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_UART_RxCpltCallback+0x84>)
 8001b42:	701a      	strb	r2, [r3, #0]
	        commandReceivedFlag = 1;           // Set the flag to indicate a new command has been received
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_UART_RxCpltCallback+0x88>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]

	        // Re-enable UART receive interrupt for the next command
	        HAL_UART_Receive_IT(&huart3, uartRxBuffer, 5);
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	4904      	ldr	r1, [pc, #16]	; (8001b60 <HAL_UART_RxCpltCallback+0x78>)
 8001b4e:	4809      	ldr	r0, [pc, #36]	; (8001b74 <HAL_UART_RxCpltCallback+0x8c>)
 8001b50:	f006 fdef 	bl	8008732 <HAL_UART_Receive_IT>
	    }

}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40004800 	.word	0x40004800
 8001b60:	200005c8 	.word	0x200005c8
 8001b64:	200001f8 	.word	0x200001f8
 8001b68:	200001f9 	.word	0x200001f9
 8001b6c:	200001fa 	.word	0x200001fa
 8001b70:	200001fb 	.word	0x200001fb
 8001b74:	2000056c 	.word	0x2000056c

08001b78 <IMU_Initialise>:
	return (uint16_t)(29.988 * pow(volt, -1.173));

}

// Gyro
uint8_t * IMU_Initialise(IMU_Data *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart){
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b08d      	sub	sp, #52	; 0x34
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	char hex[2];
	uint8_t uartbuf[20] = "  IMU ID =    "; //buffer for data
 8001b84:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <IMU_Initialise+0x144>)
 8001b86:	f107 0418 	add.w	r4, r7, #24
 8001b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b8e:	8023      	strh	r3, [r4, #0]
 8001b90:	3402      	adds	r4, #2
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	7023      	strb	r3, [r4, #0]
 8001b96:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	711a      	strb	r2, [r3, #4]
	uint8_t regData;
	dev->i2cHandle = i2cHandle;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	601a      	str	r2, [r3, #0]
	dev->uart = uart;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8001bac:	f107 0317 	add.w	r3, r7, #23
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f885 	bl	8001cc4 <IMU_ReadOneByte>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <IMU_Initialise+0x148>)
 8001bc0:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_BANK_SEL, 0x00);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	217f      	movs	r1, #127	; 0x7f
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f89e 	bl	8001d08 <IMU_WriteOneByte>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <IMU_Initialise+0x148>)
 8001bd2:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, USER_CTRL, 0x20);
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f895 	bl	8001d08 <IMU_WriteOneByte>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <IMU_Initialise+0x148>)
 8001be4:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, PWR_MGMT_1, 0x09);
 8001be6:	2209      	movs	r2, #9
 8001be8:	2106      	movs	r1, #6
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f88c 	bl	8001d08 <IMU_WriteOneByte>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <IMU_Initialise+0x148>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, PWR_MGMT_2, 0x3E);
 8001bf8:	223e      	movs	r2, #62	; 0x3e
 8001bfa:	2107      	movs	r1, #7
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f883 	bl	8001d08 <IMU_WriteOneByte>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c08:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, LP_CONFIG, 0x40);
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f87a 	bl	8001d08 <IMU_WriteOneByte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c1a:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, USER_CTRL, 0x00);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2103      	movs	r1, #3
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f871 	bl	8001d08 <IMU_WriteOneByte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c2c:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_BANK_SEL, 0x20);
 8001c2e:	2220      	movs	r2, #32
 8001c30:	217f      	movs	r1, #127	; 0x7f
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f868 	bl	8001d08 <IMU_WriteOneByte>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c3e:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, GYRO_CONFIG_1, 0x39);
 8001c40:	2239      	movs	r2, #57	; 0x39
 8001c42:	2101      	movs	r1, #1
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f85f 	bl	8001d08 <IMU_WriteOneByte>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c50:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, GYRO_CONFIG_2, 0x00);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2102      	movs	r1, #2
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f856 	bl	8001d08 <IMU_WriteOneByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c62:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, ACCEL_CONFIG, 0x39);
 8001c64:	2239      	movs	r2, #57	; 0x39
 8001c66:	2114      	movs	r1, #20
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f84d 	bl	8001d08 <IMU_WriteOneByte>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c74:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, ACCEL_CONFIG_2, 0x00);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2115      	movs	r1, #21
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f844 	bl	8001d08 <IMU_WriteOneByte>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c86:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, GYRO_SMPLRT_DIV, 0x08); // this
 8001c88:	2208      	movs	r2, #8
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f83b 	bl	8001d08 <IMU_WriteOneByte>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <IMU_Initialise+0x148>)
 8001c98:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_BANK_SEL, 0x00); 	//go back to bank 0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	217f      	movs	r1, #127	; 0x7f
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f832 	bl	8001d08 <IMU_WriteOneByte>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <IMU_Initialise+0x148>)
 8001caa:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001cac:	200a      	movs	r0, #10
 8001cae:	f001 ff2f 	bl	8003b10 <HAL_Delay>
	return 0;
 8001cb2:	2300      	movs	r3, #0

}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3734      	adds	r7, #52	; 0x34
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	0800eb58 	.word	0x0800eb58
 8001cc0:	200005cd 	.word	0x200005cd

08001cc4 <IMU_ReadOneByte>:
HAL_StatusTypeDef IMU_ReadOneByte(IMU_Data *dev, uint8_t reg, uint8_t *data)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af04      	add	r7, sp, #16
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	21d0      	movs	r1, #208	; 0xd0
 8001cec:	f003 faaa 	bl	8005244 <HAL_I2C_Mem_Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <IMU_ReadOneByte+0x40>)
 8001cf6:	701a      	strb	r2, [r3, #0]
	return ret;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <IMU_ReadOneByte+0x40>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200005cd 	.word	0x200005cd

08001d08 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(IMU_Data *dev, uint8_t reg, uint8_t data)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af04      	add	r7, sp, #16
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
 8001d14:	4613      	mov	r3, r2
 8001d16:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001d18:	78bb      	ldrb	r3, [r7, #2]
 8001d1a:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	f107 030f 	add.w	r3, r7, #15
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2301      	movs	r3, #1
 8001d36:	21d0      	movs	r1, #208	; 0xd0
 8001d38:	f003 f98a 	bl	8005050 <HAL_I2C_Mem_Write>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

    if (hi2c->Instance == I2C1) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_I2C_MemRxCpltCallback+0x24>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d102      	bne.n	8001d60 <HAL_I2C_MemRxCpltCallback+0x18>
        // DMA transfer completed
    	dma_transfer_complete = 2;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	701a      	strb	r2, [r3, #0]
    	//ret = HAL_I2C_Mem_Read_DMA(imu.i2cHandle, IMU_ADDR,GYRO_ZOUT_H,I2C_MEMADD_SIZE_8BIT,rawData,2);
        // Process the IMU data stored in imu_data[] array
    }
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	200005d4 	.word	0x200005d4
 8001d74:	00000000 	.word	0x00000000

08001d78 <turnLeft>:

void turnLeft(float targetAngle, int dirBack){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d82:	6038      	str	r0, [r7, #0]
//	yawAngle = 0.0;
	float finalAngle = targetAngle;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60fb      	str	r3, [r7, #12]
  htim1.Instance->CCR4 = 90;
 8001d88:	4b77      	ldr	r3, [pc, #476]	; (8001f68 <turnLeft+0x1f0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	225a      	movs	r2, #90	; 0x5a
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
	encoderL = 0;
 8001d90:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <turnLeft+0x1f4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
	encoderR = 0;
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <turnLeft+0x1f8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
	int left=0, right=0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  //int count_left = 0;
  //float changed = 0.0;
  HAL_Delay(800); osDelay(800);
 8001da4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001da8:	f001 feb2 	bl	8003b10 <HAL_Delay>
 8001dac:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001db0:	f007 fd68 	bl	8009884 <osDelay>
  //forward
  if (dirBack==0){
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d159      	bne.n	8001e6e <turnLeft+0xf6>
//	  finalAngle = targetAngle;
	  right=2800;left=300;
 8001dba:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001dc4:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2108      	movs	r1, #8
 8001dca:	486a      	ldr	r0, [pc, #424]	; (8001f74 <turnLeft+0x1fc>)
 8001dcc:	f002 ffe2 	bl	8004d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	4867      	ldr	r0, [pc, #412]	; (8001f74 <turnLeft+0x1fc>)
 8001dd6:	f002 ffdd 	bl	8004d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2110      	movs	r1, #16
 8001dde:	4865      	ldr	r0, [pc, #404]	; (8001f74 <turnLeft+0x1fc>)
 8001de0:	f002 ffd8 	bl	8004d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8001de4:	2201      	movs	r2, #1
 8001de6:	2120      	movs	r1, #32
 8001de8:	4862      	ldr	r0, [pc, #392]	; (8001f74 <turnLeft+0x1fc>)
 8001dea:	f002 ffd3 	bl	8004d94 <HAL_GPIO_WritePin>
	  while(1){
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8001dee:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <turnLeft+0x200>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 8001df6:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <turnLeft+0x200>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f007 fd40 	bl	8009884 <osDelay>
  		  if (encoderR>=(int)(finalAngle*23.22*0.9)){
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_f2d>
 8001e0a:	a351      	add	r3, pc, #324	; (adr r3, 8001f50 <turnLeft+0x1d8>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fbf2 	bl	80005f8 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	a34e      	add	r3, pc, #312	; (adr r3, 8001f58 <turnLeft+0x1e0>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fbe9 	bl	80005f8 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe93 	bl	8000b58 <__aeabi_d2iz>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <turnLeft+0x1f8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dc04      	bgt.n	8001e46 <turnLeft+0xce>
  			  right=1000;left=0;
 8001e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  		  }
  		  if (encoderR>=(int)(finalAngle*23.22))break;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7fe fb7e 	bl	8000548 <__aeabi_f2d>
 8001e4c:	a340      	add	r3, pc, #256	; (adr r3, 8001f50 <turnLeft+0x1d8>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fe7b 	bl	8000b58 <__aeabi_d2iz>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b42      	ldr	r3, [pc, #264]	; (8001f70 <turnLeft+0x1f8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dd5d      	ble.n	8001f28 <turnLeft+0x1b0>
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8001e6c:	e7bf      	b.n	8001dee <turnLeft+0x76>
  	  }
  }
  //backward
  else if (dirBack==1){
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d15c      	bne.n	8001f2e <turnLeft+0x1b6>
//	  finalAngle = -targetAngle;
	  right=2600;left=300;
 8001e74:	f640 2328 	movw	r3, #2600	; 0xa28
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e7e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 8001e80:	2201      	movs	r2, #1
 8001e82:	2108      	movs	r1, #8
 8001e84:	483b      	ldr	r0, [pc, #236]	; (8001f74 <turnLeft+0x1fc>)
 8001e86:	f002 ff85 	bl	8004d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	4839      	ldr	r0, [pc, #228]	; (8001f74 <turnLeft+0x1fc>)
 8001e90:	f002 ff80 	bl	8004d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 8001e94:	2201      	movs	r2, #1
 8001e96:	2110      	movs	r1, #16
 8001e98:	4836      	ldr	r0, [pc, #216]	; (8001f74 <turnLeft+0x1fc>)
 8001e9a:	f002 ff7b 	bl	8004d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	4834      	ldr	r0, [pc, #208]	; (8001f74 <turnLeft+0x1fc>)
 8001ea4:	f002 ff76 	bl	8004d94 <HAL_GPIO_WritePin>
  	  while(1){
  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <turnLeft+0x200>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	635a      	str	r2, [r3, #52]	; 0x34
  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <turnLeft+0x200>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
  		  osDelay(10);
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f007 fce3 	bl	8009884 <osDelay>
  		  if (encoderR>=(int)(finalAngle*20.57*0.9)){
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7fe fb42 	bl	8000548 <__aeabi_f2d>
 8001ec4:	a326      	add	r3, pc, #152	; (adr r3, 8001f60 <turnLeft+0x1e8>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb95 	bl	80005f8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	a320      	add	r3, pc, #128	; (adr r3, 8001f58 <turnLeft+0x1e0>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb8c 	bl	80005f8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe fe36 	bl	8000b58 <__aeabi_d2iz>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <turnLeft+0x1f8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dc04      	bgt.n	8001f00 <turnLeft+0x188>
  			  right=1000;left=0;
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  		  }
  		  if (encoderR>=(int)(finalAngle*20.57)) break;
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_f2d>
 8001f06:	a316      	add	r3, pc, #88	; (adr r3, 8001f60 <turnLeft+0x1e8>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe1e 	bl	8000b58 <__aeabi_d2iz>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <turnLeft+0x1f8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	dd02      	ble.n	8001f2c <turnLeft+0x1b4>
  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8001f26:	e7bf      	b.n	8001ea8 <turnLeft+0x130>
  		  if (encoderR>=(int)(finalAngle*23.22))break;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <turnLeft+0x1b6>
  		  if (encoderR>=(int)(finalAngle*20.57)) break;
 8001f2c:	bf00      	nop
  	  }
  }
        htim1.Instance->CCR4 = 143;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <turnLeft+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	228f      	movs	r2, #143	; 0x8f
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <turnLeft+0x200>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <turnLeft+0x200>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
//        yawAngle = (dirBack==0)?initialyaw-targetAngle:initialyaw+targetAngle;
//		yawAngle = yawAngle<0?(yawAngle+360):yawAngle;
//		yawAngle = yawAngle>=360?(yawAngle-360):yawAngle;
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	eb851eb8 	.word	0xeb851eb8
 8001f54:	40373851 	.word	0x40373851
 8001f58:	cccccccd 	.word	0xcccccccd
 8001f5c:	3feccccc 	.word	0x3feccccc
 8001f60:	851eb852 	.word	0x851eb852
 8001f64:	403491eb 	.word	0x403491eb
 8001f68:	200003bc 	.word	0x200003bc
 8001f6c:	200005f0 	.word	0x200005f0
 8001f70:	200005f4 	.word	0x200005f4
 8001f74:	40020000 	.word	0x40020000
 8001f78:	20000524 	.word	0x20000524
 8001f7c:	00000000 	.word	0x00000000

08001f80 <turnRight>:
void turnRight(float targetAngle, int dirBack){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f8a:	6038      	str	r0, [r7, #0]
//	yawAngle = 0.0;
	float finalAngle = targetAngle;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	617b      	str	r3, [r7, #20]
//	int count_right = 0;
	encoderL = 0;
 8001f90:	4b75      	ldr	r3, [pc, #468]	; (8002168 <turnRight+0x1e8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
	encoderR = 0;
 8001f96:	4b75      	ldr	r3, [pc, #468]	; (800216c <turnRight+0x1ec>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
	int left=0, right=0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  htim1.Instance->CCR4 = 210;
 8001fa4:	4b72      	ldr	r3, [pc, #456]	; (8002170 <turnRight+0x1f0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	22d2      	movs	r2, #210	; 0xd2
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(800); osDelay(800);
 8001fac:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fb0:	f001 fdae 	bl	8003b10 <HAL_Delay>
 8001fb4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fb8:	f007 fc64 	bl	8009884 <osDelay>
  //forward
    if (dirBack==0){
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d159      	bne.n	8002076 <turnRight+0xf6>
//    	finalAngle = -targetAngle;
    	int left=2800, right=300;
 8001fc2:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001fcc:	623b      	str	r3, [r7, #32]
      HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4868      	ldr	r0, [pc, #416]	; (8002174 <turnRight+0x1f4>)
 8001fd4:	f002 fede 	bl	8004d94 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2104      	movs	r1, #4
 8001fdc:	4865      	ldr	r0, [pc, #404]	; (8002174 <turnRight+0x1f4>)
 8001fde:	f002 fed9 	bl	8004d94 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	4863      	ldr	r0, [pc, #396]	; (8002174 <turnRight+0x1f4>)
 8001fe8:	f002 fed4 	bl	8004d94 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8001fec:	2201      	movs	r2, #1
 8001fee:	2120      	movs	r1, #32
 8001ff0:	4860      	ldr	r0, [pc, #384]	; (8002174 <turnRight+0x1f4>)
 8001ff2:	f002 fecf 	bl	8004d94 <HAL_GPIO_WritePin>
	  while(1){
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <turnRight+0x1f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 8001ffe:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <turnRight+0x1f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8002006:	200a      	movs	r0, #10
 8002008:	f007 fc3c 	bl	8009884 <osDelay>
  		  if (encoderL>=(int)(finalAngle*22.25*0.9)){
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	f7fe fa9b 	bl	8000548 <__aeabi_f2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b59      	ldr	r3, [pc, #356]	; (800217c <turnRight+0x1fc>)
 8002018:	f7fe faee 	bl	80005f8 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	a34c      	add	r3, pc, #304	; (adr r3, 8002158 <turnRight+0x1d8>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fae5 	bl	80005f8 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fd8f 	bl	8000b58 <__aeabi_d2iz>
 800203a:	4602      	mov	r2, r0
 800203c:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <turnRight+0x1e8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	dc04      	bgt.n	800204e <turnRight+0xce>
  			  right=0;left=900;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	f44f 7361 	mov.w	r3, #900	; 0x384
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  		  }
  		  if (encoderL>=(int)(finalAngle*22.25))break;
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7fe fa7a 	bl	8000548 <__aeabi_f2d>
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b48      	ldr	r3, [pc, #288]	; (800217c <turnRight+0x1fc>)
 800205a:	f7fe facd 	bl	80005f8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd77 	bl	8000b58 <__aeabi_d2iz>
 800206a:	4602      	mov	r2, r0
 800206c:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <turnRight+0x1e8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	dd5d      	ble.n	8002130 <turnRight+0x1b0>
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 8002074:	e7bf      	b.n	8001ff6 <turnRight+0x76>
  	  }
    }
    //backward
    else if (dirBack==1){
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d15c      	bne.n	8002136 <turnRight+0x1b6>
//    	finalAngle = targetAngle;
    	int left=2600, right=300;
 800207c:	f640 2328 	movw	r3, #2600	; 0xa28
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002086:	61bb      	str	r3, [r7, #24]
      HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 8002088:	2201      	movs	r2, #1
 800208a:	2108      	movs	r1, #8
 800208c:	4839      	ldr	r0, [pc, #228]	; (8002174 <turnRight+0x1f4>)
 800208e:	f002 fe81 	bl	8004d94 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 8002092:	2200      	movs	r2, #0
 8002094:	2104      	movs	r1, #4
 8002096:	4837      	ldr	r0, [pc, #220]	; (8002174 <turnRight+0x1f4>)
 8002098:	f002 fe7c 	bl	8004d94 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 800209c:	2201      	movs	r2, #1
 800209e:	2110      	movs	r1, #16
 80020a0:	4834      	ldr	r0, [pc, #208]	; (8002174 <turnRight+0x1f4>)
 80020a2:	f002 fe77 	bl	8004d94 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 80020a6:	2200      	movs	r2, #0
 80020a8:	2120      	movs	r1, #32
 80020aa:	4832      	ldr	r0, [pc, #200]	; (8002174 <turnRight+0x1f4>)
 80020ac:	f002 fe72 	bl	8004d94 <HAL_GPIO_WritePin>
 	  while(1){
 	  	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <turnRight+0x1f8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
 	  	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, left);
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <turnRight+0x1f8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
 		  osDelay(10);
 80020c0:	200a      	movs	r0, #10
 80020c2:	f007 fbdf 	bl	8009884 <osDelay>
  		  if (encoderL>=(int)(finalAngle*21.88*0.9)){
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7fe fa3e 	bl	8000548 <__aeabi_f2d>
 80020cc:	a324      	add	r3, pc, #144	; (adr r3, 8002160 <turnRight+0x1e0>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fa91 	bl	80005f8 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	a31e      	add	r3, pc, #120	; (adr r3, 8002158 <turnRight+0x1d8>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fa88 	bl	80005f8 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7fe fd32 	bl	8000b58 <__aeabi_d2iz>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <turnRight+0x1e8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dc04      	bgt.n	8002108 <turnRight+0x188>
  			  right=0;left=900;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002106:	61fb      	str	r3, [r7, #28]
  		  }
 		  if (encoderL>=(int)(targetAngle*21.88))break;
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe fa1d 	bl	8000548 <__aeabi_f2d>
 800210e:	a314      	add	r3, pc, #80	; (adr r3, 8002160 <turnRight+0x1e0>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe fa70 	bl	80005f8 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fd1a 	bl	8000b58 <__aeabi_d2iz>
 8002124:	4602      	mov	r2, r0
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <turnRight+0x1e8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	dd02      	ble.n	8002134 <turnRight+0x1b4>
 	  	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, right);
 800212e:	e7bf      	b.n	80020b0 <turnRight+0x130>
  		  if (encoderL>=(int)(finalAngle*22.25))break;
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <turnRight+0x1b6>
 		  if (encoderL>=(int)(targetAngle*21.88))break;
 8002134:	bf00      	nop
 	  }
    }
	        htim1.Instance->CCR4 = 130;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <turnRight+0x1f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2282      	movs	r2, #130	; 0x82
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <turnRight+0x1f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
	        __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <turnRight+0x1f8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
//	        yawAngle = (dirBack==0)?initialyaw+targetAngle:initialyaw-targetAngle;
//			yawAngle = yawAngle<0?(yawAngle+360):yawAngle;
//			yawAngle = yawAngle>=360?(yawAngle-360):yawAngle;
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	cccccccd 	.word	0xcccccccd
 800215c:	3feccccc 	.word	0x3feccccc
 8002160:	ae147ae1 	.word	0xae147ae1
 8002164:	4035e147 	.word	0x4035e147
 8002168:	200005f0 	.word	0x200005f0
 800216c:	200005f4 	.word	0x200005f4
 8002170:	200003bc 	.word	0x200003bc
 8002174:	40020000 	.word	0x40020000
 8002178:	20000524 	.word	0x20000524
 800217c:	40364000 	.word	0x40364000

08002180 <maintainStraightPath>:

void maintainStraightPath(int dista){
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    // Initialize variables
	htim1.Instance->CCR4 = 139;
 8002188:	4ba3      	ldr	r3, [pc, #652]	; (8002418 <maintainStraightPath+0x298>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	228b      	movs	r2, #139	; 0x8b
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    uint8_t uart_buf[20];
    int16_t Data;
    int tempval = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
    float ratio = 0.1;
 8002194:	4ba1      	ldr	r3, [pc, #644]	; (800241c <maintainStraightPath+0x29c>)
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
	encoderL = 0; encoderR = 0;
 8002198:	4ba1      	ldr	r3, [pc, #644]	; (8002420 <maintainStraightPath+0x2a0>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	4ba1      	ldr	r3, [pc, #644]	; (8002424 <maintainStraightPath+0x2a4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    int setpoint = yawAngle;
 80021a4:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <maintainStraightPath+0x2a8>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ae:	ee17 3a90 	vmov	r3, s15
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    int delta = encoderL - encoderR;
 80021b4:	4b9a      	ldr	r3, [pc, #616]	; (8002420 <maintainStraightPath+0x2a0>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b9a      	ldr	r3, [pc, #616]	; (8002424 <maintainStraightPath+0x2a4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
	int totravel = dista/21.0*1550.0;
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe f9af 	bl	8000524 <__aeabi_i2d>
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b98      	ldr	r3, [pc, #608]	; (800242c <maintainStraightPath+0x2ac>)
 80021cc:	f7fe fb3e 	bl	800084c <__aeabi_ddiv>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	a383      	add	r3, pc, #524	; (adr r3, 80023e8 <maintainStraightPath+0x268>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe fa0b 	bl	80005f8 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fcb5 	bl	8000b58 <__aeabi_d2iz>
 80021ee:	4603      	mov	r3, r0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24

	//special case for dista <= 10
	if (dista<=10 && motionCommand=='s'){
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0a      	cmp	r3, #10
 80021f6:	dc22      	bgt.n	800223e <maintainStraightPath+0xbe>
 80021f8:	4b8d      	ldr	r3, [pc, #564]	; (8002430 <maintainStraightPath+0x2b0>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b73      	cmp	r3, #115	; 0x73
 8002200:	d11d      	bne.n	800223e <maintainStraightPath+0xbe>
		while(1){
			pwmValL = 1330; pwmValR = 1275;
 8002202:	4b8c      	ldr	r3, [pc, #560]	; (8002434 <maintainStraightPath+0x2b4>)
 8002204:	f240 5232 	movw	r2, #1330	; 0x532
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <maintainStraightPath+0x2b8>)
 800220c:	f240 42fb 	movw	r2, #1275	; 0x4fb
 8002210:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1275); // Set PWM for motor 1 (adjust value as needed)
 8002212:	4b8a      	ldr	r3, [pc, #552]	; (800243c <maintainStraightPath+0x2bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800221a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 1330); // Set PWM for motor 2 (adjust value as needed)
 800221c:	4b87      	ldr	r3, [pc, #540]	; (800243c <maintainStraightPath+0x2bc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f240 5232 	movw	r2, #1330	; 0x532
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
			if (2*encoderR>totravel)break;
 8002226:	4b7f      	ldr	r3, [pc, #508]	; (8002424 <maintainStraightPath+0x2a4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	429a      	cmp	r2, r3
 8002230:	db00      	blt.n	8002234 <maintainStraightPath+0xb4>
			pwmValL = 1330; pwmValR = 1275;
 8002232:	e7e6      	b.n	8002202 <maintainStraightPath+0x82>
			if (2*encoderR>totravel)break;
 8002234:	bf00      	nop
		}
	    pwmVal_servo = 139;
 8002236:	4b82      	ldr	r3, [pc, #520]	; (8002440 <maintainStraightPath+0x2c0>)
 8002238:	228b      	movs	r2, #139	; 0x8b
 800223a:	801a      	strh	r2, [r3, #0]
	    return;
 800223c:	e258      	b.n	80026f0 <maintainStraightPath+0x570>
	}
	else if (dista<=10 && motionCommand=='w'){
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0a      	cmp	r3, #10
 8002242:	dc22      	bgt.n	800228a <maintainStraightPath+0x10a>
 8002244:	4b7a      	ldr	r3, [pc, #488]	; (8002430 <maintainStraightPath+0x2b0>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b77      	cmp	r3, #119	; 0x77
 800224c:	d11d      	bne.n	800228a <maintainStraightPath+0x10a>
		while(1){
			pwmValL = 1260; pwmValR = 1260;
 800224e:	4b79      	ldr	r3, [pc, #484]	; (8002434 <maintainStraightPath+0x2b4>)
 8002250:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	4b78      	ldr	r3, [pc, #480]	; (8002438 <maintainStraightPath+0x2b8>)
 8002258:	f240 42ec 	movw	r2, #1260	; 0x4ec
 800225c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1260); // Set PWM for motor 1 (adjust value as needed)
 800225e:	4b77      	ldr	r3, [pc, #476]	; (800243c <maintainStraightPath+0x2bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 1260); // Set PWM for motor 2 (adjust value as needed)
 8002268:	4b74      	ldr	r3, [pc, #464]	; (800243c <maintainStraightPath+0x2bc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
			if (2*encoderR>totravel)break;
 8002272:	4b6c      	ldr	r3, [pc, #432]	; (8002424 <maintainStraightPath+0x2a4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227a:	429a      	cmp	r2, r3
 800227c:	db00      	blt.n	8002280 <maintainStraightPath+0x100>
			pwmValL = 1260; pwmValR = 1260;
 800227e:	e7e6      	b.n	800224e <maintainStraightPath+0xce>
			if (2*encoderR>totravel)break;
 8002280:	bf00      	nop
		}
	    pwmVal_servo = 139;
 8002282:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <maintainStraightPath+0x2c0>)
 8002284:	228b      	movs	r2, #139	; 0x8b
 8002286:	801a      	strh	r2, [r3, #0]
	    return;
 8002288:	e232      	b.n	80026f0 <maintainStraightPath+0x570>
	else{
	    // Main loop to maintain straight path
	    while (1) { // Use an appropriate condition to break out of the loop when needed

	    	//maintain straight line
	    	float correction = adjustServoToCenter(yawAngle, setpoint);
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <maintainStraightPath+0x2a8>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	ee07 3a10 	vmov	s14, r3
 8002296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800229a:	eef0 0a47 	vmov.f32	s1, s14
 800229e:	eeb0 0a67 	vmov.f32	s0, s15
 80022a2:	f000 fa4d 	bl	8002740 <adjustServoToCenter>
 80022a6:	ed87 0a08 	vstr	s0, [r7, #32]
	    	htim1.Instance->CCR4 = (motionCommand=='w') ? 139+1.005*correction : 139-1.005*correction;
 80022aa:	4b61      	ldr	r3, [pc, #388]	; (8002430 <maintainStraightPath+0x2b0>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b77      	cmp	r3, #119	; 0x77
 80022b2:	d118      	bne.n	80022e6 <maintainStraightPath+0x166>
 80022b4:	6a38      	ldr	r0, [r7, #32]
 80022b6:	f7fe f947 	bl	8000548 <__aeabi_f2d>
 80022ba:	a34d      	add	r3, pc, #308	; (adr r3, 80023f0 <maintainStraightPath+0x270>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe f99a 	bl	80005f8 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	a34a      	add	r3, pc, #296	; (adr r3, 80023f8 <maintainStraightPath+0x278>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fd ffdb 	bl	800028c <__adddf3>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc63 	bl	8000ba8 <__aeabi_d2uiz>
 80022e2:	4603      	mov	r3, r0
 80022e4:	e015      	b.n	8002312 <maintainStraightPath+0x192>
 80022e6:	6a38      	ldr	r0, [r7, #32]
 80022e8:	f7fe f92e 	bl	8000548 <__aeabi_f2d>
 80022ec:	a340      	add	r3, pc, #256	; (adr r3, 80023f0 <maintainStraightPath+0x270>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f981 	bl	80005f8 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	a13f      	add	r1, pc, #252	; (adr r1, 80023f8 <maintainStraightPath+0x278>)
 80022fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002300:	f7fd ffc2 	bl	8000288 <__aeabi_dsub>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc4c 	bl	8000ba8 <__aeabi_d2uiz>
 8002310:	4603      	mov	r3, r0
 8002312:	4a41      	ldr	r2, [pc, #260]	; (8002418 <maintainStraightPath+0x298>)
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
//				delta = encoderL - encoderR;
//			}


	    	//accel (nnnneeeeoooowwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww)
	    	if ((motionCommand=='w') && totravel - 2*encoderR > (int)((float)totravel*0.3)){
 8002318:	4b45      	ldr	r3, [pc, #276]	; (8002430 <maintainStraightPath+0x2b0>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b77      	cmp	r3, #119	; 0x77
 8002320:	d159      	bne.n	80023d6 <maintainStraightPath+0x256>
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <maintainStraightPath+0x2a4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	1ad4      	subs	r4, r2, r3
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002336:	ee17 0a90 	vmov	r0, s15
 800233a:	f7fe f905 	bl	8000548 <__aeabi_f2d>
 800233e:	a330      	add	r3, pc, #192	; (adr r3, 8002400 <maintainStraightPath+0x280>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f958 	bl	80005f8 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fc02 	bl	8000b58 <__aeabi_d2iz>
 8002354:	4603      	mov	r3, r0
 8002356:	429c      	cmp	r4, r3
 8002358:	dd3d      	ble.n	80023d6 <maintainStraightPath+0x256>
	    		if (ratio<1.55)ratio+=0.0003;
 800235a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800235c:	f7fe f8f4 	bl	8000548 <__aeabi_f2d>
 8002360:	a329      	add	r3, pc, #164	; (adr r3, 8002408 <maintainStraightPath+0x288>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe fbb9 	bl	8000adc <__aeabi_dcmplt>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00f      	beq.n	8002390 <maintainStraightPath+0x210>
 8002370:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002372:	f7fe f8e9 	bl	8000548 <__aeabi_f2d>
 8002376:	a326      	add	r3, pc, #152	; (adr r3, 8002410 <maintainStraightPath+0x290>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f7fd ff86 	bl	800028c <__adddf3>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fc2e 	bl	8000be8 <__aeabi_d2f>
 800238c:	4603      	mov	r3, r0
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
	            // Apply PWM to both motors to start moving forward
	    		pwmValL = (int)((float)(RPM_LEFT+20)*ratio); pwmValR = (int)((float)(RPM_RIGHT+55)*ratio);
 8002390:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002394:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002444 <maintainStraightPath+0x2c4>
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a0:	ee17 2a90 	vmov	r2, s15
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <maintainStraightPath+0x2b4>)
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002448 <maintainStraightPath+0x2c8>
 80023b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b8:	ee17 2a90 	vmov	r2, s15
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <maintainStraightPath+0x2b8>)
 80023be:	601a      	str	r2, [r3, #0]
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <maintainStraightPath+0x2b8>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <maintainStraightPath+0x2bc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <maintainStraightPath+0x2b4>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <maintainStraightPath+0x2bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
 80023d4:	e0ac      	b.n	8002530 <maintainStraightPath+0x3b0>
	    	}
	    	else if (motionCommand=='w'){
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <maintainStraightPath+0x2b0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b77      	cmp	r3, #119	; 0x77
 80023de:	f040 80a7 	bne.w	8002530 <maintainStraightPath+0x3b0>
		    	while(2*encoderR<totravel-222){
 80023e2:	e09d      	b.n	8002520 <maintainStraightPath+0x3a0>
 80023e4:	f3af 8000 	nop.w
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40983800 	.word	0x40983800
 80023f0:	e147ae14 	.word	0xe147ae14
 80023f4:	3ff0147a 	.word	0x3ff0147a
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40616000 	.word	0x40616000
 8002400:	33333333 	.word	0x33333333
 8002404:	3fd33333 	.word	0x3fd33333
 8002408:	cccccccd 	.word	0xcccccccd
 800240c:	3ff8cccc 	.word	0x3ff8cccc
 8002410:	30553261 	.word	0x30553261
 8002414:	3f33a92a 	.word	0x3f33a92a
 8002418:	200003bc 	.word	0x200003bc
 800241c:	3dcccccd 	.word	0x3dcccccd
 8002420:	200005f0 	.word	0x200005f0
 8002424:	200005f4 	.word	0x200005f4
 8002428:	200005d0 	.word	0x200005d0
 800242c:	40350000 	.word	0x40350000
 8002430:	200001f8 	.word	0x200001f8
 8002434:	200005f8 	.word	0x200005f8
 8002438:	200005fc 	.word	0x200005fc
 800243c:	20000524 	.word	0x20000524
 8002440:	20000000 	.word	0x20000000
 8002444:	455c0000 	.word	0x455c0000
 8002448:	455e3000 	.word	0x455e3000
	            	ratio=0.8*(float)(totravel - 2*encoderR)/(float)totravel;
 800244c:	4bb2      	ldr	r3, [pc, #712]	; (8002718 <maintainStraightPath+0x598>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	ee17 0a90 	vmov	r0, s15
 8002462:	f7fe f871 	bl	8000548 <__aeabi_f2d>
 8002466:	a3a4      	add	r3, pc, #656	; (adr r3, 80026f8 <maintainStraightPath+0x578>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f7fe f8c4 	bl	80005f8 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4614      	mov	r4, r2
 8002476:	461d      	mov	r5, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002482:	ee17 0a90 	vmov	r0, s15
 8002486:	f7fe f85f 	bl	8000548 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fe f9db 	bl	800084c <__aeabi_ddiv>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fba3 	bl	8000be8 <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
	    			// Apply PWM to both motors to start moving forward
	            	pwmValL = (int)((float)(RPM_LEFT+20)*ratio+900.0); pwmValR = (int)((float)(RPM_RIGHT+55)*ratio+900.0);
 80024a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024aa:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800271c <maintainStraightPath+0x59c>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	ee17 0a90 	vmov	r0, s15
 80024b6:	f7fe f847 	bl	8000548 <__aeabi_f2d>
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b98      	ldr	r3, [pc, #608]	; (8002720 <maintainStraightPath+0x5a0>)
 80024c0:	f7fd fee4 	bl	800028c <__adddf3>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fb44 	bl	8000b58 <__aeabi_d2iz>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a94      	ldr	r2, [pc, #592]	; (8002724 <maintainStraightPath+0x5a4>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024da:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002728 <maintainStraightPath+0x5a8>
 80024de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e2:	ee17 0a90 	vmov	r0, s15
 80024e6:	f7fe f82f 	bl	8000548 <__aeabi_f2d>
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	4b8c      	ldr	r3, [pc, #560]	; (8002720 <maintainStraightPath+0x5a0>)
 80024f0:	f7fd fecc 	bl	800028c <__adddf3>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb2c 	bl	8000b58 <__aeabi_d2iz>
 8002500:	4603      	mov	r3, r0
 8002502:	4a8a      	ldr	r2, [pc, #552]	; (800272c <maintainStraightPath+0x5ac>)
 8002504:	6013      	str	r3, [r2, #0]
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 8002506:	4b89      	ldr	r3, [pc, #548]	; (800272c <maintainStraightPath+0x5ac>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <maintainStraightPath+0x5b0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	635a      	str	r2, [r3, #52]	; 0x34
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8002510:	4b84      	ldr	r3, [pc, #528]	; (8002724 <maintainStraightPath+0x5a4>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <maintainStraightPath+0x5b0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
	    			osDelay(50);
 800251a:	2032      	movs	r0, #50	; 0x32
 800251c:	f007 f9b2 	bl	8009884 <osDelay>
		    	while(2*encoderR<totravel-222){
 8002520:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <maintainStraightPath+0x598>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	005a      	lsls	r2, r3, #1
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3bde      	subs	r3, #222	; 0xde
 800252a:	429a      	cmp	r2, r3
 800252c:	db8e      	blt.n	800244c <maintainStraightPath+0x2cc>
	    		}
	    		break;
 800252e:	e0db      	b.n	80026e8 <maintainStraightPath+0x568>
	    	}

	    	if ((motionCommand=='s') && totravel - 2*encoderR > (int)((float)totravel*0.3)){
 8002530:	4b80      	ldr	r3, [pc, #512]	; (8002734 <maintainStraightPath+0x5b4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b73      	cmp	r3, #115	; 0x73
 8002538:	d159      	bne.n	80025ee <maintainStraightPath+0x46e>
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <maintainStraightPath+0x598>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	1ad4      	subs	r4, r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	ee17 0a90 	vmov	r0, s15
 8002552:	f7fd fff9 	bl	8000548 <__aeabi_f2d>
 8002556:	a36a      	add	r3, pc, #424	; (adr r3, 8002700 <maintainStraightPath+0x580>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f7fe f84c 	bl	80005f8 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe faf6 	bl	8000b58 <__aeabi_d2iz>
 800256c:	4603      	mov	r3, r0
 800256e:	429c      	cmp	r4, r3
 8002570:	dd3d      	ble.n	80025ee <maintainStraightPath+0x46e>
	    		if (ratio<1.55)ratio+=0.0003;
 8002572:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002574:	f7fd ffe8 	bl	8000548 <__aeabi_f2d>
 8002578:	a363      	add	r3, pc, #396	; (adr r3, 8002708 <maintainStraightPath+0x588>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fe faad 	bl	8000adc <__aeabi_dcmplt>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00f      	beq.n	80025a8 <maintainStraightPath+0x428>
 8002588:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800258a:	f7fd ffdd 	bl	8000548 <__aeabi_f2d>
 800258e:	a360      	add	r3, pc, #384	; (adr r3, 8002710 <maintainStraightPath+0x590>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fd fe7a 	bl	800028c <__adddf3>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fb22 	bl	8000be8 <__aeabi_d2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
	            // Apply PWM to both motors to start moving forward
	    		pwmValL = (int)((float)(RPM_LEFT+20)*ratio); pwmValR = (int)((float)(RPM_RIGHT+50)*ratio);
 80025a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ac:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800271c <maintainStraightPath+0x59c>
 80025b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b8:	ee17 2a90 	vmov	r2, s15
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <maintainStraightPath+0x5a4>)
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025c4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002738 <maintainStraightPath+0x5b8>
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d0:	ee17 2a90 	vmov	r2, s15
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <maintainStraightPath+0x5ac>)
 80025d6:	601a      	str	r2, [r3, #0]
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80025d8:	4b54      	ldr	r3, [pc, #336]	; (800272c <maintainStraightPath+0x5ac>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b54      	ldr	r3, [pc, #336]	; (8002730 <maintainStraightPath+0x5b0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <maintainStraightPath+0x5a4>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b52      	ldr	r3, [pc, #328]	; (8002730 <maintainStraightPath+0x5b0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
 80025ec:	e07b      	b.n	80026e6 <maintainStraightPath+0x566>
	    	}
	    	else if (motionCommand=='s'){
 80025ee:	4b51      	ldr	r3, [pc, #324]	; (8002734 <maintainStraightPath+0x5b4>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b73      	cmp	r3, #115	; 0x73
 80025f6:	f47f ae48 	bne.w	800228a <maintainStraightPath+0x10a>
	            while(2*encoderR<totravel-222){
 80025fa:	e06c      	b.n	80026d6 <maintainStraightPath+0x556>
	            	ratio=0.8*(float)(totravel - 2*encoderR)/(float)totravel;
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <maintainStraightPath+0x598>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260e:	ee17 0a90 	vmov	r0, s15
 8002612:	f7fd ff99 	bl	8000548 <__aeabi_f2d>
 8002616:	a338      	add	r3, pc, #224	; (adr r3, 80026f8 <maintainStraightPath+0x578>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f7fd ffec 	bl	80005f8 <__aeabi_dmul>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4614      	mov	r4, r2
 8002626:	461d      	mov	r5, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002632:	ee17 0a90 	vmov	r0, s15
 8002636:	f7fd ff87 	bl	8000548 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4620      	mov	r0, r4
 8002640:	4629      	mov	r1, r5
 8002642:	f7fe f903 	bl	800084c <__aeabi_ddiv>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe facb 	bl	8000be8 <__aeabi_d2f>
 8002652:	4603      	mov	r3, r0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
	    			// Apply PWM to both motors to start moving forward
		    		pwmValL = (int)((float)(RPM_LEFT+20)*ratio+900.0); pwmValR = (int)((float)(RPM_RIGHT+50)*ratio+900.0);
 8002656:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800265a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800271c <maintainStraightPath+0x59c>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	ee17 0a90 	vmov	r0, s15
 8002666:	f7fd ff6f 	bl	8000548 <__aeabi_f2d>
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <maintainStraightPath+0x5a0>)
 8002670:	f7fd fe0c 	bl	800028c <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fa6c 	bl	8000b58 <__aeabi_d2iz>
 8002680:	4603      	mov	r3, r0
 8002682:	4a28      	ldr	r2, [pc, #160]	; (8002724 <maintainStraightPath+0x5a4>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800268a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002738 <maintainStraightPath+0x5b8>
 800268e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002692:	ee17 0a90 	vmov	r0, s15
 8002696:	f7fd ff57 	bl	8000548 <__aeabi_f2d>
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <maintainStraightPath+0x5a0>)
 80026a0:	f7fd fdf4 	bl	800028c <__adddf3>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe fa54 	bl	8000b58 <__aeabi_d2iz>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <maintainStraightPath+0x5ac>)
 80026b4:	6013      	str	r3, [r2, #0]
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <maintainStraightPath+0x5ac>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <maintainStraightPath+0x5b0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
	    			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <maintainStraightPath+0x5a4>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <maintainStraightPath+0x5b0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
	    			osDelay(50);
 80026ca:	2032      	movs	r0, #50	; 0x32
 80026cc:	f007 f8da 	bl	8009884 <osDelay>
	    	    	tempval = encoderR;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <maintainStraightPath+0x598>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
	            while(2*encoderR<totravel-222){
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <maintainStraightPath+0x598>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	005a      	lsls	r2, r3, #1
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3bde      	subs	r3, #222	; 0xde
 80026e0:	429a      	cmp	r2, r3
 80026e2:	db8b      	blt.n	80025fc <maintainStraightPath+0x47c>
	    		}
	    		break;
 80026e4:	e000      	b.n	80026e8 <maintainStraightPath+0x568>
	    while (1) { // Use an appropriate condition to break out of the loop when needed
 80026e6:	e5d0      	b.n	800228a <maintainStraightPath+0x10a>
	    	}
	    }
	}


    pwmVal_servo = 139;
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <maintainStraightPath+0x5bc>)
 80026ea:	228b      	movs	r2, #139	; 0x8b
 80026ec:	801a      	strh	r2, [r3, #0]
    return;
 80026ee:	bf00      	nop
}
 80026f0:	3738      	adds	r7, #56	; 0x38
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	9999999a 	.word	0x9999999a
 80026fc:	3fe99999 	.word	0x3fe99999
 8002700:	33333333 	.word	0x33333333
 8002704:	3fd33333 	.word	0x3fd33333
 8002708:	cccccccd 	.word	0xcccccccd
 800270c:	3ff8cccc 	.word	0x3ff8cccc
 8002710:	30553261 	.word	0x30553261
 8002714:	3f33a92a 	.word	0x3f33a92a
 8002718:	200005f4 	.word	0x200005f4
 800271c:	455c0000 	.word	0x455c0000
 8002720:	408c2000 	.word	0x408c2000
 8002724:	200005f8 	.word	0x200005f8
 8002728:	455e3000 	.word	0x455e3000
 800272c:	200005fc 	.word	0x200005fc
 8002730:	20000524 	.word	0x20000524
 8002734:	200001f8 	.word	0x200001f8
 8002738:	455de000 	.word	0x455de000
 800273c:	20000000 	.word	0x20000000

08002740 <adjustServoToCenter>:

float adjustServoToCenter(float currentAngle, float targetAngle) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	ed87 0a01 	vstr	s0, [r7, #4]
 800274a:	edc7 0a00 	vstr	s1, [r7]
	uint8_t uart_buf[20];
    float error = currentAngle - targetAngle; // Calculate error
 800274e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002752:	edd7 7a00 	vldr	s15, [r7]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (fabs(error)<0.05){
 800275e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002762:	eef0 7ae7 	vabs.f32	s15, s15
 8002766:	ee17 0a90 	vmov	r0, s15
 800276a:	f7fd feed 	bl	8000548 <__aeabi_f2d>
 800276e:	a30a      	add	r3, pc, #40	; (adr r3, 8002798 <adjustServoToCenter+0x58>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fe f9b2 	bl	8000adc <__aeabi_dcmplt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <adjustServoToCenter+0x44>
    	error=0;
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    }

	return error;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	ee07 3a90 	vmov	s15, r3
}
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	f3af 8000 	nop.w
 8002798:	9999999a 	.word	0x9999999a
 800279c:	3fa99999 	.word	0x3fa99999

080027a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f007 f86b 	bl	8009884 <osDelay>
 80027ae:	e7fb      	b.n	80027a8 <StartDefaultTask+0x8>

080027b0 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint8_t print2[20];
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // servo motor
 80027b8:	210c      	movs	r1, #12
 80027ba:	48b3      	ldr	r0, [pc, #716]	; (8002a88 <motor+0x2d8>)
 80027bc:	f004 fab0 	bl	8006d20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // start up motor 1
 80027c0:	2100      	movs	r1, #0
 80027c2:	48b2      	ldr	r0, [pc, #712]	; (8002a8c <motor+0x2dc>)
 80027c4:	f004 faac 	bl	8006d20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // start up motor 2
 80027c8:	2104      	movs	r1, #4
 80027ca:	48b0      	ldr	r0, [pc, #704]	; (8002a8c <motor+0x2dc>)
 80027cc:	f004 faa8 	bl	8006d20 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = 139;
 80027d0:	4bad      	ldr	r3, [pc, #692]	; (8002a88 <motor+0x2d8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	228b      	movs	r2, #139	; 0x8b
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40

	int initialPwmValue = 500;  // Example initial PWM value, adjust as needed
 80027d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, 5);
 80027de:	2205      	movs	r2, #5
 80027e0:	49ab      	ldr	r1, [pc, #684]	; (8002a90 <motor+0x2e0>)
 80027e2:	48ac      	ldr	r0, [pc, #688]	; (8002a94 <motor+0x2e4>)
 80027e4:	f005 ffa5 	bl	8008732 <HAL_UART_Receive_IT>
	 // Set initial PWM value for a smooth start
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, initialPwmValue);  // Apply to Motor 1
 80027e8:	4ba8      	ldr	r3, [pc, #672]	; (8002a8c <motor+0x2dc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, initialPwmValue);  // Apply to Motor 2
 80027f0:	4ba6      	ldr	r3, [pc, #664]	; (8002a8c <motor+0x2dc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t *status = IMU_Initialise(&imu,&hi2c1,&huart3);
 80027f8:	4aa6      	ldr	r2, [pc, #664]	; (8002a94 <motor+0x2e4>)
 80027fa:	49a7      	ldr	r1, [pc, #668]	; (8002a98 <motor+0x2e8>)
 80027fc:	48a7      	ldr	r0, [pc, #668]	; (8002a9c <motor+0x2ec>)
 80027fe:	f7ff f9bb 	bl	8001b78 <IMU_Initialise>
 8002802:	6338      	str	r0, [r7, #48]	; 0x30
	uint8_t uartbuf [20];

	//  /* Infinite loop */
	 for (;;) {
				  if (commandReceivedFlag) {
 8002804:	4ba6      	ldr	r3, [pc, #664]	; (8002aa0 <motor+0x2f0>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 81a6 	beq.w	8002b5c <motor+0x3ac>
				  //if(uartRxBuffer != NULL) {
				  //uartRxBuffer[0] = 's';
					  encoderL = 0;
 8002810:	4ba4      	ldr	r3, [pc, #656]	; (8002aa4 <motor+0x2f4>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
					  encoderR = 0;
 8002816:	4ba4      	ldr	r3, [pc, #656]	; (8002aa8 <motor+0x2f8>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
					commandReceivedFlag = 0; // Clear the flag
 800281c:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <motor+0x2f0>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
					//uint8_t message[50];
		            switch (motionCommand) {
 8002822:	4ba2      	ldr	r3, [pc, #648]	; (8002aac <motor+0x2fc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3b62      	subs	r3, #98	; 0x62
 800282a:	2b15      	cmp	r3, #21
 800282c:	f200 8184 	bhi.w	8002b38 <motor+0x388>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <motor+0x88>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002ac9 	.word	0x08002ac9
 800283c:	08002b39 	.word	0x08002b39
 8002840:	08002b39 	.word	0x08002b39
 8002844:	08002b39 	.word	0x08002b39
 8002848:	08002a17 	.word	0x08002a17
 800284c:	08002b39 	.word	0x08002b39
 8002850:	08002b39 	.word	0x08002b39
 8002854:	08002b39 	.word	0x08002b39
 8002858:	08002b39 	.word	0x08002b39
 800285c:	08002b39 	.word	0x08002b39
 8002860:	08002b39 	.word	0x08002b39
 8002864:	08002b39 	.word	0x08002b39
 8002868:	08002b39 	.word	0x08002b39
 800286c:	08002b39 	.word	0x08002b39
 8002870:	08002b39 	.word	0x08002b39
 8002874:	08002b39 	.word	0x08002b39
 8002878:	08002b39 	.word	0x08002b39
 800287c:	08002891 	.word	0x08002891
 8002880:	080029dd 	.word	0x080029dd
 8002884:	08002b39 	.word	0x08002b39
 8002888:	08002b39 	.word	0x08002b39
 800288c:	08002937 	.word	0x08002937
		            	case 's':
		                	// check dirCommand
		                	if (dirCommand!='x')break;
 8002890:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <motor+0x300>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b78      	cmp	r3, #120	; 0x78
 8002898:	f040 8157 	bne.w	8002b4a <motor+0x39a>
		                	htim1.Instance->CCR4 = 139; // Center
 800289c:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <motor+0x2d8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	228b      	movs	r2, #139	; 0x8b
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
		                	osDelay(500);
 80028a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028a8:	f006 ffec 	bl	8009884 <osDelay>

		            		// Set motor direction to backward
							// Setting GPIO Pins
		            		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Assuming AIN1 is forward for motor 1
 80028ac:	2201      	movs	r2, #1
 80028ae:	2108      	movs	r1, #8
 80028b0:	4880      	ldr	r0, [pc, #512]	; (8002ab4 <motor+0x304>)
 80028b2:	f002 fa6f 	bl	8004d94 <HAL_GPIO_WritePin>
		            		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);   // Assuming AIN2 is backward for motor 1
 80028b6:	2200      	movs	r2, #0
 80028b8:	2104      	movs	r1, #4
 80028ba:	487e      	ldr	r0, [pc, #504]	; (8002ab4 <motor+0x304>)
 80028bc:	f002 fa6a 	bl	8004d94 <HAL_GPIO_WritePin>
		            		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Assuming BIN1 is forward for motor 2
 80028c0:	2201      	movs	r2, #1
 80028c2:	2110      	movs	r1, #16
 80028c4:	487b      	ldr	r0, [pc, #492]	; (8002ab4 <motor+0x304>)
 80028c6:	f002 fa65 	bl	8004d94 <HAL_GPIO_WritePin>
		            		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);   // Assuming BIN2 is backward for motor 2
 80028ca:	2200      	movs	r2, #0
 80028cc:	2120      	movs	r1, #32
 80028ce:	4879      	ldr	r0, [pc, #484]	; (8002ab4 <motor+0x304>)
 80028d0:	f002 fa60 	bl	8004d94 <HAL_GPIO_WritePin>

		            		// Apply PWM to both motors to start moving backward
		            		pwmValL = (RPM_LEFT+295)*0.1; pwmValR = (RPM_RIGHT+35)*0.1;
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <motor+0x308>)
 80028d6:	f240 127b 	movw	r2, #379	; 0x17b
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	4b77      	ldr	r3, [pc, #476]	; (8002abc <motor+0x30c>)
 80028de:	f240 1261 	movw	r2, #353	; 0x161
 80028e2:	601a      	str	r2, [r3, #0]
		            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (RPM_RIGHT+35)*0.1); // Set PWM for motor 1 (adjust value as needed)
 80028e4:	4b69      	ldr	r3, [pc, #420]	; (8002a8c <motor+0x2dc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f240 1261 	movw	r2, #353	; 0x161
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34
		            		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (RPM_LEFT+295)*0.1); // Set PWM for motor 2 (adjust value as needed)
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <motor+0x2dc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f240 127b 	movw	r2, #379	; 0x17b
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38

		            		maintainStraightPath(distCommand);
 80028f8:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <motor+0x310>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc3e 	bl	8002180 <maintainStraightPath>

		                	// Motor Stop
		                	// Apply PWM to both motors to stop moving
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8002904:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <motor+0x2dc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 800290c:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <motor+0x2dc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
		                    pwmValL = 0; pwmValR = 0;
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <motor+0x308>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	4b68      	ldr	r3, [pc, #416]	; (8002abc <motor+0x30c>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
		                    HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	2203      	movs	r2, #3
 8002926:	4967      	ldr	r1, [pc, #412]	; (8002ac4 <motor+0x314>)
 8002928:	485a      	ldr	r0, [pc, #360]	; (8002a94 <motor+0x2e4>)
 800292a:	f005 fe70 	bl	800860e <HAL_UART_Transmit>
			                    HAL_Delay(100);
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	f001 f8ee 	bl	8003b10 <HAL_Delay>
							break;
 8002934:	e112      	b.n	8002b5c <motor+0x3ac>
		                case 'w':
		                	// check dirCommand
		                	if (dirCommand!='x')break;
 8002936:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <motor+0x300>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b78      	cmp	r3, #120	; 0x78
 800293e:	f040 8106 	bne.w	8002b4e <motor+0x39e>
		                	htim1.Instance->CCR4 = 139; // Center
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <motor+0x2d8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	228b      	movs	r2, #139	; 0x8b
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
		                	osDelay(500);
 800294a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800294e:	f006 ff99 	bl	8009884 <osDelay>

		                	// Set motor direction to forward
							// Setting GPIO Pins
		                    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);   // Assuming AIN1 is forward for motor 1
 8002952:	2200      	movs	r2, #0
 8002954:	2108      	movs	r1, #8
 8002956:	4857      	ldr	r0, [pc, #348]	; (8002ab4 <motor+0x304>)
 8002958:	f002 fa1c 	bl	8004d94 <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET); // Assuming AIN2 is backward for motor 1
 800295c:	2201      	movs	r2, #1
 800295e:	2104      	movs	r1, #4
 8002960:	4854      	ldr	r0, [pc, #336]	; (8002ab4 <motor+0x304>)
 8002962:	f002 fa17 	bl	8004d94 <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);   // Assuming BIN1 is forward for motor 2
 8002966:	2200      	movs	r2, #0
 8002968:	2110      	movs	r1, #16
 800296a:	4852      	ldr	r0, [pc, #328]	; (8002ab4 <motor+0x304>)
 800296c:	f002 fa12 	bl	8004d94 <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET); // Assuming BIN2 is backward for motor 2
 8002970:	2201      	movs	r2, #1
 8002972:	2120      	movs	r1, #32
 8002974:	484f      	ldr	r0, [pc, #316]	; (8002ab4 <motor+0x304>)
 8002976:	f002 fa0d 	bl	8004d94 <HAL_GPIO_WritePin>

		                    // Apply PWM to both motors to start moving forward
		                    pwmValL = (RPM_LEFT)*0.1; pwmValR = (RPM_RIGHT+77)*0.1;
 800297a:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <motor+0x308>)
 800297c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <motor+0x30c>)
 8002984:	f240 1265 	movw	r2, #357	; 0x165
 8002988:	601a      	str	r2, [r3, #0]
		                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValR); // Set PWM for motor 1 (adjust value as needed)
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <motor+0x30c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <motor+0x2dc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
		                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValL); // Set PWM for motor 2 (adjust value as needed)
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <motor+0x308>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <motor+0x2dc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	639a      	str	r2, [r3, #56]	; 0x38

		                    maintainStraightPath(distCommand);
 800299e:	4b48      	ldr	r3, [pc, #288]	; (8002ac0 <motor+0x310>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fbeb 	bl	8002180 <maintainStraightPath>
		                	// Motor Stop
		                	// Apply PWM to both motors to stop moving
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 80029aa:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <motor+0x2dc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <motor+0x2dc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
							pwmValL = 0; pwmValR = 0;
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <motor+0x308>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <motor+0x30c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

		                    HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	2203      	movs	r2, #3
 80029cc:	493d      	ldr	r1, [pc, #244]	; (8002ac4 <motor+0x314>)
 80029ce:	4831      	ldr	r0, [pc, #196]	; (8002a94 <motor+0x2e4>)
 80029d0:	f005 fe1d 	bl	800860e <HAL_UART_Transmit>

		                    HAL_Delay(100);
 80029d4:	2064      	movs	r0, #100	; 0x64
 80029d6:	f001 f89b 	bl	8003b10 <HAL_Delay>
		                    break;
 80029da:	e0bf      	b.n	8002b5c <motor+0x3ac>

		                case 't':
		                	htim1.Instance->CCR4 = 139;
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <motor+0x2d8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	228b      	movs	r2, #139	; 0x8b
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
		                	osDelay(500);
 80029e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029e8:	f006 ff4c 	bl	8009884 <osDelay>
		                	if (dirCommand=='a'){
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <motor+0x300>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b61      	cmp	r3, #97	; 0x61
 80029f4:	d104      	bne.n	8002a00 <motor+0x250>
		                		htim1.Instance->CCR4 = 90;
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <motor+0x2d8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	225a      	movs	r2, #90	; 0x5a
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
		                	}
		                	else if (dirCommand=='d'){
		                		  htim1.Instance->CCR4 = 210;
		                	}
		                	break;
 80029fe:	e0a8      	b.n	8002b52 <motor+0x3a2>
		                	else if (dirCommand=='d'){
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <motor+0x300>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	f040 80a3 	bne.w	8002b52 <motor+0x3a2>
		                		  htim1.Instance->CCR4 = 210;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <motor+0x2d8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	22d2      	movs	r2, #210	; 0xd2
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
		                	break;
 8002a14:	e09d      	b.n	8002b52 <motor+0x3a2>


		                case 'f': // forward angle rotation
		                	// check left/right
		                	if (dirCommand=='a'){
 8002a16:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <motor+0x300>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b61      	cmp	r3, #97	; 0x61
 8002a1e:	d116      	bne.n	8002a4e <motor+0x29e>
		                		turnLeft(distCommand,0);
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <motor+0x310>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	2000      	movs	r0, #0
 8002a30:	eeb0 0a67 	vmov.f32	s0, s15
 8002a34:	f7ff f9a0 	bl	8001d78 <turnLeft>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	4921      	ldr	r1, [pc, #132]	; (8002ac4 <motor+0x314>)
 8002a40:	4814      	ldr	r0, [pc, #80]	; (8002a94 <motor+0x2e4>)
 8002a42:	f005 fde4 	bl	800860e <HAL_UART_Transmit>
		                		HAL_Delay(100);
 8002a46:	2064      	movs	r0, #100	; 0x64
 8002a48:	f001 f862 	bl	8003b10 <HAL_Delay>
		                		turnRight(distCommand,0);

		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
		                		HAL_Delay(100);
		                	}
							break;
 8002a4c:	e083      	b.n	8002b56 <motor+0x3a6>
		                	else if (dirCommand=='d'){
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <motor+0x300>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b64      	cmp	r3, #100	; 0x64
 8002a56:	d17e      	bne.n	8002b56 <motor+0x3a6>
		                		turnRight(distCommand,0);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <motor+0x310>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	2000      	movs	r0, #0
 8002a68:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6c:	f7ff fa88 	bl	8001f80 <turnRight>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	2203      	movs	r2, #3
 8002a76:	4913      	ldr	r1, [pc, #76]	; (8002ac4 <motor+0x314>)
 8002a78:	4806      	ldr	r0, [pc, #24]	; (8002a94 <motor+0x2e4>)
 8002a7a:	f005 fdc8 	bl	800860e <HAL_UART_Transmit>
		                		HAL_Delay(100);
 8002a7e:	2064      	movs	r0, #100	; 0x64
 8002a80:	f001 f846 	bl	8003b10 <HAL_Delay>
							break;
 8002a84:	e067      	b.n	8002b56 <motor+0x3a6>
 8002a86:	bf00      	nop
 8002a88:	200003bc 	.word	0x200003bc
 8002a8c:	20000524 	.word	0x20000524
 8002a90:	200005c8 	.word	0x200005c8
 8002a94:	2000056c 	.word	0x2000056c
 8002a98:	2000020c 	.word	0x2000020c
 8002a9c:	200001fc 	.word	0x200001fc
 8002aa0:	200001fb 	.word	0x200001fb
 8002aa4:	200005f0 	.word	0x200005f0
 8002aa8:	200005f4 	.word	0x200005f4
 8002aac:	200001f8 	.word	0x200001f8
 8002ab0:	200001f9 	.word	0x200001f9
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	200005f8 	.word	0x200005f8
 8002abc:	200005fc 	.word	0x200005fc
 8002ac0:	200001fa 	.word	0x200001fa
 8002ac4:	0800eb6c 	.word	0x0800eb6c

		                case 'b': // backward angle rotation
		                	// check left/right
		                	if (dirCommand=='a'){
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <motor+0x3b8>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b61      	cmp	r3, #97	; 0x61
 8002ad0:	d116      	bne.n	8002b00 <motor+0x350>
		                		turnLeft(distCommand,1);
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <motor+0x3bc>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	f7ff f947 	bl	8001d78 <turnLeft>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	2203      	movs	r2, #3
 8002af0:	491f      	ldr	r1, [pc, #124]	; (8002b70 <motor+0x3c0>)
 8002af2:	4820      	ldr	r0, [pc, #128]	; (8002b74 <motor+0x3c4>)
 8002af4:	f005 fd8b 	bl	800860e <HAL_UART_Transmit>
		                		HAL_Delay(100);
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	f001 f809 	bl	8003b10 <HAL_Delay>
		                	else if (dirCommand=='d'){
		                		turnRight(distCommand,1);
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
		                		HAL_Delay(100);
		                	}
							break;
 8002afe:	e02c      	b.n	8002b5a <motor+0x3aa>
		                	else if (dirCommand=='d'){
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <motor+0x3b8>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d127      	bne.n	8002b5a <motor+0x3aa>
		                		turnRight(distCommand,1);
 8002b0a:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <motor+0x3bc>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b18:	2001      	movs	r0, #1
 8002b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1e:	f7ff fa2f 	bl	8001f80 <turnRight>
		                		HAL_UART_Transmit(&huart3, "ACK", 3, HAL_MAX_DELAY);
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	2203      	movs	r2, #3
 8002b28:	4911      	ldr	r1, [pc, #68]	; (8002b70 <motor+0x3c0>)
 8002b2a:	4812      	ldr	r0, [pc, #72]	; (8002b74 <motor+0x3c4>)
 8002b2c:	f005 fd6f 	bl	800860e <HAL_UART_Transmit>
		                		HAL_Delay(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f000 ffed 	bl	8003b10 <HAL_Delay>
							break;
 8002b36:	e010      	b.n	8002b5a <motor+0x3aa>

		                default:
		                	// Motor Stop
		                	// Apply PWM to both motors to stop moving
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // Set PWM for motor 1 (adjust value as needed)
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <motor+0x3c8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0); // Set PWM for motor 2 (adjust value as needed)
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <motor+0x3c8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38

//							OLED_ShowString(10, 20, "Stp");
//							OLED_Refresh_Gram();
		                    break;
 8002b48:	e008      	b.n	8002b5c <motor+0x3ac>
		                	if (dirCommand!='x')break;
 8002b4a:	bf00      	nop
 8002b4c:	e006      	b.n	8002b5c <motor+0x3ac>
		                	if (dirCommand!='x')break;
 8002b4e:	bf00      	nop
 8002b50:	e004      	b.n	8002b5c <motor+0x3ac>
		                	break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <motor+0x3ac>
							break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <motor+0x3ac>
							break;
 8002b5a:	bf00      	nop

		        }
		    }
			osDelay(1000);
 8002b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b60:	f006 fe90 	bl	8009884 <osDelay>
				  if (commandReceivedFlag) {
 8002b64:	e64e      	b.n	8002804 <motor+0x54>
 8002b66:	bf00      	nop
 8002b68:	200001f9 	.word	0x200001f9
 8002b6c:	200001fa 	.word	0x200001fa
 8002b70:	0800eb6c 	.word	0x0800eb6c
 8002b74:	2000056c 	.word	0x2000056c
 8002b78:	20000524 	.word	0x20000524

08002b7c <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Start encoder for Motor 1
 8002b84:	213c      	movs	r1, #60	; 0x3c
 8002b86:	4844      	ldr	r0, [pc, #272]	; (8002c98 <encoder+0x11c>)
 8002b88:	f004 fbb0 	bl	80072ec <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start encoder for Motor 2
 8002b8c:	213c      	movs	r1, #60	; 0x3c
 8002b8e:	4843      	ldr	r0, [pc, #268]	; (8002c9c <encoder+0x120>)
 8002b90:	f004 fbac 	bl	80072ec <HAL_TIM_Encoder_Start>

    int cnt_motor1=0,cnt_motor2=0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]


    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter for Motor 1
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <encoder+0x11c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 0); // Reset counter for Motor 2
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <encoder+0x120>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    uint32_t tick = HAL_GetTick();
 8002bac:	f000 ffa4 	bl	8003af8 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

    /* Infinite loop */
    for (;;)
    {
        if (HAL_GetTick() - tick > 5L) // Update every 10 milliseconds
 8002bb2:	f000 ffa1 	bl	8003af8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d9f8      	bls.n	8002bb2 <encoder+0x36>
        {
            //motor 1 (R)
        	cnt_motor1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <encoder+0x11c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	613b      	str	r3, [r7, #16]
        	__HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter for Motor 1
 8002bc8:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <encoder+0x11c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
            if (cnt_motor1>32000){
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002bd6:	dd21      	ble.n	8002c1c <encoder+0xa0>
            	//backwards (overflow)
            	encoderR += 0.5*(65536 - cnt_motor1);
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <encoder+0x124>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fca1 	bl	8000524 <__aeabi_i2d>
 8002be2:	4604      	mov	r4, r0
 8002be4:	460d      	mov	r5, r1
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fc99 	bl	8000524 <__aeabi_i2d>
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <encoder+0x128>)
 8002bf8:	f7fd fcfe 	bl	80005f8 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4620      	mov	r0, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	f7fd fb42 	bl	800028c <__adddf3>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fd ffa2 	bl	8000b58 <__aeabi_d2iz>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <encoder+0x124>)
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <encoder+0xdc>
            }
            else{
            	//forwards
            	encoderR += 0.5*cnt_motor1;
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <encoder+0x124>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fc7f 	bl	8000524 <__aeabi_i2d>
 8002c26:	4604      	mov	r4, r0
 8002c28:	460d      	mov	r5, r1
 8002c2a:	6938      	ldr	r0, [r7, #16]
 8002c2c:	f7fd fc7a 	bl	8000524 <__aeabi_i2d>
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <encoder+0x128>)
 8002c36:	f7fd fcdf 	bl	80005f8 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd fb23 	bl	800028c <__adddf3>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fd ff83 	bl	8000b58 <__aeabi_d2iz>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <encoder+0x124>)
 8002c56:	6013      	str	r3, [r2, #0]
            }

            //motor 2 (L)
        	cnt_motor2 = __HAL_TIM_GET_COUNTER(&htim3);
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <encoder+0x120>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	60fb      	str	r3, [r7, #12]
        	__HAL_TIM_SET_COUNTER(&htim3, 0); // Reset counter for Motor 2
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <encoder+0x120>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
            if (cnt_motor2>32000){
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002c6e:	dd08      	ble.n	8002c82 <encoder+0x106>
            	//backwards (overflow)
            	encoderL += 65536 - cnt_motor2;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <encoder+0x12c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <encoder+0x12c>)
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e005      	b.n	8002c8e <encoder+0x112>
            }
            else{
            	//forwards
            	encoderL += cnt_motor2;
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <encoder+0x12c>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <encoder+0x12c>)
 8002c8c:	6013      	str	r3, [r2, #0]
            }

            tick = HAL_GetTick();
 8002c8e:	f000 ff33 	bl	8003af8 <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]
        if (HAL_GetTick() - tick > 5L) // Update every 10 milliseconds
 8002c94:	e78d      	b.n	8002bb2 <encoder+0x36>
 8002c96:	bf00      	nop
 8002c98:	20000404 	.word	0x20000404
 8002c9c:	2000044c 	.word	0x2000044c
 8002ca0:	200005f4 	.word	0x200005f4
 8002ca4:	3fe00000 	.word	0x3fe00000
 8002ca8:	200005f0 	.word	0x200005f0
 8002cac:	00000000 	.word	0x00000000

08002cb0 <Gyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Gyro */
void Gyro(void *argument)
{
 8002cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb4:	ed2d 8b02 	vpush	{d8}
 8002cb8:	b08a      	sub	sp, #40	; 0x28
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Gyro */
	  uint8_t uart_buf[20];
	  prev_time_elapsed = HAL_GetTick();
 8002cbe:	f000 ff1b 	bl	8003af8 <HAL_GetTick>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <Gyro+0x170>)
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
    	  if(dma_transfer_complete==0){
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <Gyro+0x174>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <Gyro+0x4e>
              ret = HAL_I2C_Mem_Read_DMA(imu.i2cHandle, IMU_ADDR,GYRO_ZOUT_H,I2C_MEMADD_SIZE_8BIT,rawData,2);
 8002cd2:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <Gyro+0x178>)
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <Gyro+0x17c>)
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2301      	movs	r3, #1
 8002ce0:	2237      	movs	r2, #55	; 0x37
 8002ce2:	21d0      	movs	r1, #208	; 0xd0
 8002ce4:	f002 fcd4 	bl	8005690 <HAL_I2C_Mem_Read_DMA>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <Gyro+0x180>)
 8002cee:	701a      	strb	r2, [r3, #0]
              if(ret == HAL_OK)
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <Gyro+0x180>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <Gyro+0x4e>
              dma_transfer_complete = 2;
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <Gyro+0x174>)
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
            }
          if (dma_transfer_complete == 2) {
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <Gyro+0x174>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d1df      	bne.n	8002cc8 <Gyro+0x18>
    			time_elapsed = HAL_GetTick();
 8002d08:	f000 fef6 	bl	8003af8 <HAL_GetTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4a49      	ldr	r2, [pc, #292]	; (8002e34 <Gyro+0x184>)
 8002d10:	6013      	str	r3, [r2, #0]
    			time_difference = time_elapsed - prev_time_elapsed; // Calculate time difference between readings
 8002d12:	4b48      	ldr	r3, [pc, #288]	; (8002e34 <Gyro+0x184>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <Gyro+0x170>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <Gyro+0x188>)
 8002d1e:	6013      	str	r3, [r2, #0]
    			Data = (int16_t)(rawData[0] << 8 | rawData[1]); // Combine high and low bytes
 8002d20:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <Gyro+0x17c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <Gyro+0x17c>)
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	b21b      	sxth	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <Gyro+0x18c>)
 8002d34:	801a      	strh	r2, [r3, #0]

    			// Calculate new yaw angle based on gyro data
    			yawAngle += (float)((time_difference * (Data - 240.0) / 131.0)) / 1000.0;
 8002d36:	4b42      	ldr	r3, [pc, #264]	; (8002e40 <Gyro+0x190>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fc04 	bl	8000548 <__aeabi_f2d>
 8002d40:	4604      	mov	r4, r0
 8002d42:	460d      	mov	r5, r1
 8002d44:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <Gyro+0x188>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fbdb 	bl	8000504 <__aeabi_ui2d>
 8002d4e:	4680      	mov	r8, r0
 8002d50:	4689      	mov	r9, r1
 8002d52:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <Gyro+0x18c>)
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fbe3 	bl	8000524 <__aeabi_i2d>
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <Gyro+0x194>)
 8002d64:	f7fd fa90 	bl	8000288 <__aeabi_dsub>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4640      	mov	r0, r8
 8002d6e:	4649      	mov	r1, r9
 8002d70:	f7fd fc42 	bl	80005f8 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	a326      	add	r3, pc, #152	; (adr r3, 8002e18 <Gyro+0x168>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fd63 	bl	800084c <__aeabi_ddiv>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd ff2b 	bl	8000be8 <__aeabi_d2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbd7 	bl	8000548 <__aeabi_f2d>
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <Gyro+0x198>)
 8002da0:	f7fd fd54 	bl	800084c <__aeabi_ddiv>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4620      	mov	r0, r4
 8002daa:	4629      	mov	r1, r5
 8002dac:	f7fd fa6e 	bl	800028c <__adddf3>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd ff16 	bl	8000be8 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <Gyro+0x190>)
 8002dc0:	6013      	str	r3, [r2, #0]

    			// Offsetting the drift (derived empirically)
    			yawAngle -= (float)(time_difference*0.075/1000.0);
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <Gyro+0x190>)
 8002dc4:	ed93 8a00 	vldr	s16, [r3]
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <Gyro+0x188>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb99 	bl	8000504 <__aeabi_ui2d>
 8002dd2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <Gyro+0x19c>)
 8002dd8:	f7fd fc0e 	bl	80005f8 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <Gyro+0x198>)
 8002dea:	f7fd fd2f 	bl	800084c <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd fef7 	bl	8000be8 <__aeabi_d2f>
 8002dfa:	ee07 0a90 	vmov	s15, r0
 8002dfe:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <Gyro+0x190>)
 8002e04:	edc3 7a00 	vstr	s15, [r3]

           dma_transfer_complete = 0;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <Gyro+0x174>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
           prev_time_elapsed = time_elapsed;
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <Gyro+0x184>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <Gyro+0x170>)
 8002e14:	6013      	str	r3, [r2, #0]
    	  if(dma_transfer_complete==0){
 8002e16:	e757      	b.n	8002cc8 <Gyro+0x18>
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	40606000 	.word	0x40606000
 8002e20:	20000604 	.word	0x20000604
 8002e24:	200005d4 	.word	0x200005d4
 8002e28:	200001fc 	.word	0x200001fc
 8002e2c:	200005d8 	.word	0x200005d8
 8002e30:	200005cd 	.word	0x200005cd
 8002e34:	20000600 	.word	0x20000600
 8002e38:	20000608 	.word	0x20000608
 8002e3c:	200005d6 	.word	0x200005d6
 8002e40:	200005d0 	.word	0x200005d0
 8002e44:	406e0000 	.word	0x406e0000
 8002e48:	408f4000 	.word	0x408f4000
 8002e4c:	3fb33333 	.word	0x3fb33333

08002e50 <start_ultrasonic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_ultrasonic */
void start_ultrasonic(void *argument)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_ultrasonic */
	uint8_t print[20];
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4803      	ldr	r0, [pc, #12]	; (8002e68 <start_ultrasonic+0x18>)
 8002e5c:	f004 f878 	bl	8006f50 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f006 fd0f 	bl	8009884 <osDelay>
 8002e66:	e7fb      	b.n	8002e60 <start_ultrasonic+0x10>
 8002e68:	20000494 	.word	0x20000494

08002e6c <ir_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ir_task */
void ir_task(void *argument)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b08d      	sub	sp, #52	; 0x34
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ir_task */
	uint16_t irBuffer[20];
  /* Infinite loop */
  for(;;)
 8002e74:	e7fe      	b.n	8002e74 <ir_task+0x8>

08002e76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7a:	b672      	cpsid	i
}
 8002e7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <Error_Handler+0x8>

08002e80 <OLED_Refresh_Gram>:
#include "oledfont.h"


uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8002e86:	2300      	movs	r3, #0
 8002e88:	71fb      	strb	r3, [r7, #7]
 8002e8a:	e026      	b.n	8002eda <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	3b50      	subs	r3, #80	; 0x50
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f82b 	bl	8002ef0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f000 f827 	bl	8002ef0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2010      	movs	r0, #16
 8002ea6:	f000 f823 	bl	8002ef0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71bb      	strb	r3, [r7, #6]
 8002eae:	e00d      	b.n	8002ecc <OLED_Refresh_Gram+0x4c>
 8002eb0:	79ba      	ldrb	r2, [r7, #6]
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	490d      	ldr	r1, [pc, #52]	; (8002eec <OLED_Refresh_Gram+0x6c>)
 8002eb6:	00d2      	lsls	r2, r2, #3
 8002eb8:	440a      	add	r2, r1
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f815 	bl	8002ef0 <OLED_WR_Byte>
 8002ec6:	79bb      	ldrb	r3, [r7, #6]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	71bb      	strb	r3, [r7, #6]
 8002ecc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	daed      	bge.n	8002eb0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d9d5      	bls.n	8002e8c <OLED_Refresh_Gram+0xc>
	}   
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000060c 	.word	0x2000060c

08002ef0 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8002f06:	2201      	movs	r2, #1
 8002f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f0c:	481c      	ldr	r0, [pc, #112]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f0e:	f001 ff41 	bl	8004d94 <HAL_GPIO_WritePin>
 8002f12:	e005      	b.n	8002f20 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1a:	4819      	ldr	r0, [pc, #100]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f1c:	f001 ff3a 	bl	8004d94 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
 8002f24:	e01e      	b.n	8002f64 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8002f26:	2200      	movs	r2, #0
 8002f28:	2120      	movs	r1, #32
 8002f2a:	4815      	ldr	r0, [pc, #84]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f2c:	f001 ff32 	bl	8004d94 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da05      	bge.n	8002f44 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	4810      	ldr	r0, [pc, #64]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f3e:	f001 ff29 	bl	8004d94 <HAL_GPIO_WritePin>
 8002f42:	e004      	b.n	8002f4e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8002f44:	2200      	movs	r2, #0
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f4a:	f001 ff23 	bl	8004d94 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2120      	movs	r1, #32
 8002f52:	480b      	ldr	r0, [pc, #44]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f54:	f001 ff1e 	bl	8004d94 <HAL_GPIO_WritePin>
		dat<<=1;   
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	3301      	adds	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b07      	cmp	r3, #7
 8002f68:	d9dd      	bls.n	8002f26 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <OLED_WR_Byte+0x90>)
 8002f72:	f001 ff0f 	bl	8004d94 <HAL_GPIO_WritePin>
} 
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000

08002f84 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	e014      	b.n	8002fba <OLED_Clear+0x36>
 8002f90:	2300      	movs	r3, #0
 8002f92:	71bb      	strb	r3, [r7, #6]
 8002f94:	e00a      	b.n	8002fac <OLED_Clear+0x28>
 8002f96:	79ba      	ldrb	r2, [r7, #6]
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	490c      	ldr	r1, [pc, #48]	; (8002fcc <OLED_Clear+0x48>)
 8002f9c:	00d2      	lsls	r2, r2, #3
 8002f9e:	440a      	add	r2, r1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	79bb      	ldrb	r3, [r7, #6]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	71bb      	strb	r3, [r7, #6]
 8002fac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	daf0      	bge.n	8002f96 <OLED_Clear+0x12>
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	71fb      	strb	r3, [r7, #7]
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b07      	cmp	r3, #7
 8002fbe:	d9e7      	bls.n	8002f90 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002fc0:	f7ff ff5e 	bl	8002e80 <OLED_Refresh_Gram>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	2000060c 	.word	0x2000060c

08002fd0 <OLED_Init>:
        p++;
    }  
}	 

void OLED_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8002fd4:	f003 f986 	bl	80062e4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8002fd8:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <OLED_Init+0x110>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a40      	ldr	r2, [pc, #256]	; (80030e0 <OLED_Init+0x110>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <OLED_Init+0x110>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a3d      	ldr	r2, [pc, #244]	; (80030e0 <OLED_Init+0x110>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8002ff0:	f003 f98c 	bl	800630c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	483a      	ldr	r0, [pc, #232]	; (80030e4 <OLED_Init+0x114>)
 8002ffa:	f001 fecb 	bl	8004d94 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ffe:	2064      	movs	r0, #100	; 0x64
 8003000:	f000 fd86 	bl	8003b10 <HAL_Delay>
	OLED_RST_Set();
 8003004:	2201      	movs	r2, #1
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	4836      	ldr	r0, [pc, #216]	; (80030e4 <OLED_Init+0x114>)
 800300a:	f001 fec3 	bl	8004d94 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800300e:	2100      	movs	r1, #0
 8003010:	20ae      	movs	r0, #174	; 0xae
 8003012:	f7ff ff6d 	bl	8002ef0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003016:	2100      	movs	r1, #0
 8003018:	20d5      	movs	r0, #213	; 0xd5
 800301a:	f7ff ff69 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800301e:	2100      	movs	r1, #0
 8003020:	2050      	movs	r0, #80	; 0x50
 8003022:	f7ff ff65 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003026:	2100      	movs	r1, #0
 8003028:	20a8      	movs	r0, #168	; 0xa8
 800302a:	f7ff ff61 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800302e:	2100      	movs	r1, #0
 8003030:	203f      	movs	r0, #63	; 0x3f
 8003032:	f7ff ff5d 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003036:	2100      	movs	r1, #0
 8003038:	20d3      	movs	r0, #211	; 0xd3
 800303a:	f7ff ff59 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800303e:	2100      	movs	r1, #0
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff ff55 	bl	8002ef0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003046:	2100      	movs	r1, #0
 8003048:	2040      	movs	r0, #64	; 0x40
 800304a:	f7ff ff51 	bl	8002ef0 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800304e:	2100      	movs	r1, #0
 8003050:	208d      	movs	r0, #141	; 0x8d
 8003052:	f7ff ff4d 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003056:	2100      	movs	r1, #0
 8003058:	2014      	movs	r0, #20
 800305a:	f7ff ff49 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800305e:	2100      	movs	r1, #0
 8003060:	2020      	movs	r0, #32
 8003062:	f7ff ff45 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003066:	2100      	movs	r1, #0
 8003068:	2002      	movs	r0, #2
 800306a:	f7ff ff41 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800306e:	2100      	movs	r1, #0
 8003070:	20a1      	movs	r0, #161	; 0xa1
 8003072:	f7ff ff3d 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003076:	2100      	movs	r1, #0
 8003078:	20c0      	movs	r0, #192	; 0xc0
 800307a:	f7ff ff39 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800307e:	2100      	movs	r1, #0
 8003080:	20da      	movs	r0, #218	; 0xda
 8003082:	f7ff ff35 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003086:	2100      	movs	r1, #0
 8003088:	2012      	movs	r0, #18
 800308a:	f7ff ff31 	bl	8002ef0 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800308e:	2100      	movs	r1, #0
 8003090:	2081      	movs	r0, #129	; 0x81
 8003092:	f7ff ff2d 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003096:	2100      	movs	r1, #0
 8003098:	20ef      	movs	r0, #239	; 0xef
 800309a:	f7ff ff29 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800309e:	2100      	movs	r1, #0
 80030a0:	20d9      	movs	r0, #217	; 0xd9
 80030a2:	f7ff ff25 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80030a6:	2100      	movs	r1, #0
 80030a8:	20f1      	movs	r0, #241	; 0xf1
 80030aa:	f7ff ff21 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80030ae:	2100      	movs	r1, #0
 80030b0:	20db      	movs	r0, #219	; 0xdb
 80030b2:	f7ff ff1d 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80030b6:	2100      	movs	r1, #0
 80030b8:	2030      	movs	r0, #48	; 0x30
 80030ba:	f7ff ff19 	bl	8002ef0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80030be:	2100      	movs	r1, #0
 80030c0:	20a4      	movs	r0, #164	; 0xa4
 80030c2:	f7ff ff15 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80030c6:	2100      	movs	r1, #0
 80030c8:	20a6      	movs	r0, #166	; 0xa6
 80030ca:	f7ff ff11 	bl	8002ef0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80030ce:	2100      	movs	r1, #0
 80030d0:	20af      	movs	r0, #175	; 0xaf
 80030d2:	f7ff ff0d 	bl	8002ef0 <OLED_WR_Byte>
	OLED_Clear(); 
 80030d6:	f7ff ff55 	bl	8002f84 <OLED_Clear>
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_MspInit+0x64>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_MspInit+0x64>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_MspInit+0x64>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_MspInit+0x64>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_MspInit+0x64>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_MspInit+0x64>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	210f      	movs	r1, #15
 800312a:	f06f 0001 	mvn.w	r0, #1
 800312e:	f001 f850 	bl	80041d2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2105      	movs	r1, #5
 8003136:	2005      	movs	r0, #5
 8003138:	f001 f84b 	bl	80041d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800313c:	2005      	movs	r0, #5
 800313e:	f001 f864 	bl	800420a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2e      	ldr	r2, [pc, #184]	; (8003228 <HAL_ADC_MspInit+0xd8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d156      	bne.n	8003220 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_ADC_MspInit+0xdc>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a2c      	ldr	r2, [pc, #176]	; (800322c <HAL_ADC_MspInit+0xdc>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_ADC_MspInit+0xdc>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_ADC_MspInit+0xdc>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_ADC_MspInit+0xdc>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_ADC_MspInit+0xdc>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80031aa:	2306      	movs	r3, #6
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ae:	2303      	movs	r3, #3
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	481c      	ldr	r0, [pc, #112]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 80031be:	f001 fc4d 	bl	8004a5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031c4:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 8003200:	2200      	movs	r2, #0
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003204:	480b      	ldr	r0, [pc, #44]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 8003206:	f001 f81b 	bl	8004240 <HAL_DMA_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003210:	f7ff fe31 	bl	8002e76 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003220:	bf00      	nop
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40012000 	.word	0x40012000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020800 	.word	0x40020800
 8003234:	200002a8 	.word	0x200002a8
 8003238:	40026410 	.word	0x40026410

0800323c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a4a      	ldr	r2, [pc, #296]	; (8003384 <HAL_I2C_MspInit+0x148>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d15b      	bne.n	8003316 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a48      	ldr	r2, [pc, #288]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800327a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800327e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003280:	2312      	movs	r3, #18
 8003282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003284:	2301      	movs	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800328c:	2304      	movs	r3, #4
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003290:	f107 031c 	add.w	r3, r7, #28
 8003294:	4619      	mov	r1, r3
 8003296:	483d      	ldr	r0, [pc, #244]	; (800338c <HAL_I2C_MspInit+0x150>)
 8003298:	f001 fbe0 	bl	8004a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4a38      	ldr	r2, [pc, #224]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 80032a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032aa:	6413      	str	r3, [r2, #64]	; 0x40
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032ba:	4a36      	ldr	r2, [pc, #216]	; (8003394 <HAL_I2C_MspInit+0x158>)
 80032bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80032be:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c6:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032dc:	2200      	movs	r2, #0
 80032de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80032f8:	4825      	ldr	r0, [pc, #148]	; (8003390 <HAL_I2C_MspInit+0x154>)
 80032fa:	f000 ffa1 	bl	8004240 <HAL_DMA_Init>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003304:	f7ff fdb7 	bl	8002e76 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a21      	ldr	r2, [pc, #132]	; (8003390 <HAL_I2C_MspInit+0x154>)
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_I2C_MspInit+0x154>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003314:	e031      	b.n	800337a <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_I2C_MspInit+0x15c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d12c      	bne.n	800337a <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	6313      	str	r3, [r2, #48]	; 0x30
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800333c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003342:	2312      	movs	r3, #18
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800334e:	2304      	movs	r3, #4
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <HAL_I2C_MspInit+0x150>)
 800335a:	f001 fb7f 	bl	8004a5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_I2C_MspInit+0x14c>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
}
 800337a:	bf00      	nop
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40005400 	.word	0x40005400
 8003388:	40023800 	.word	0x40023800
 800338c:	40020400 	.word	0x40020400
 8003390:	2000035c 	.word	0x2000035c
 8003394:	40026010 	.word	0x40026010
 8003398:	40005800 	.word	0x40005800

0800339c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10d      	bne.n	80033ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_TIM_PWM_MspInit+0x40>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_TIM_PWM_MspInit+0x40>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_TIM_PWM_MspInit+0x40>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d14b      	bne.n	800349a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a3e      	ldr	r2, [pc, #248]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a37      	ldr	r2, [pc, #220]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b35      	ldr	r3, [pc, #212]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a30      	ldr	r2, [pc, #192]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003468:	2301      	movs	r3, #1
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 031c 	add.w	r3, r7, #28
 8003470:	4619      	mov	r1, r3
 8003472:	4825      	ldr	r0, [pc, #148]	; (8003508 <HAL_TIM_Encoder_MspInit+0x128>)
 8003474:	f001 faf2 	bl	8004a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003478:	2308      	movs	r3, #8
 800347a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	f107 031c 	add.w	r3, r7, #28
 8003490:	4619      	mov	r1, r3
 8003492:	481e      	ldr	r0, [pc, #120]	; (800350c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003494:	f001 fae2 	bl	8004a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003498:	e030      	b.n	80034fc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_TIM_Encoder_MspInit+0x130>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d12b      	bne.n	80034fc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	4b16      	ldr	r3, [pc, #88]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a15      	ldr	r2, [pc, #84]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6313      	str	r3, [r2, #48]	; 0x30
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_TIM_Encoder_MspInit+0x124>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034dc:	23c0      	movs	r3, #192	; 0xc0
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034ec:	2302      	movs	r3, #2
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f0:	f107 031c 	add.w	r3, r7, #28
 80034f4:	4619      	mov	r1, r3
 80034f6:	4804      	ldr	r0, [pc, #16]	; (8003508 <HAL_TIM_Encoder_MspInit+0x128>)
 80034f8:	f001 fab0 	bl	8004a5c <HAL_GPIO_Init>
}
 80034fc:	bf00      	nop
 80034fe:	3730      	adds	r7, #48	; 0x30
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40000400 	.word	0x40000400

08003514 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <HAL_TIM_IC_MspInit+0x94>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d134      	bne.n	80035a0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_TIM_IC_MspInit+0x98>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_TIM_IC_MspInit+0x98>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_TIM_IC_MspInit+0x98>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_TIM_IC_MspInit+0x98>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <HAL_TIM_IC_MspInit+0x98>)
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_TIM_IC_MspInit+0x98>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = EchoD12_Pin;
 800356e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003580:	2302      	movs	r3, #2
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EchoD12_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	4809      	ldr	r0, [pc, #36]	; (80035b0 <HAL_TIM_IC_MspInit+0x9c>)
 800358c:	f001 fa66 	bl	8004a5c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2105      	movs	r1, #5
 8003594:	201e      	movs	r0, #30
 8003596:	f000 fe1c 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800359a:	201e      	movs	r0, #30
 800359c:	f000 fe35 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020c00 	.word	0x40020c00

080035b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM6)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <HAL_TIM_Base_MspInit+0xac>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10e      	bne.n	80035f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 80035e0:	f043 0310 	orr.w	r3, r3, #16
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
 80035e6:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80035f2:	e030      	b.n	8003656 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <HAL_TIM_Base_MspInit+0xb4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d12b      	bne.n	8003656 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	6453      	str	r3, [r2, #68]	; 0x44
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_TIM_Base_MspInit+0xb0>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003636:	23c0      	movs	r3, #192	; 0xc0
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003646:	2303      	movs	r3, #3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <HAL_TIM_Base_MspInit+0xb8>)
 8003652:	f001 fa03 	bl	8004a5c <HAL_GPIO_Init>
}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40001000 	.word	0x40001000
 8003664:	40023800 	.word	0x40023800
 8003668:	40010400 	.word	0x40010400
 800366c:	40020800 	.word	0x40020800

08003670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <HAL_TIM_MspPostInit+0x68>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d11e      	bne.n	80036d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_TIM_MspPostInit+0x6c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <HAL_TIM_MspPostInit+0x6c>)
 800369c:	f043 0310 	orr.w	r3, r3, #16
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_TIM_MspPostInit+0x6c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	4619      	mov	r1, r3
 80036ca:	4805      	ldr	r0, [pc, #20]	; (80036e0 <HAL_TIM_MspPostInit+0x70>)
 80036cc:	f001 f9c6 	bl	8004a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036d0:	bf00      	nop
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_UART_MspInit+0x94>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d134      	bne.n	8003770 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_UART_MspInit+0x98>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_UART_MspInit+0x98>)
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_UART_MspInit+0x98>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_UART_MspInit+0x98>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_UART_MspInit+0x98>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_UART_MspInit+0x98>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800373e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003750:	2307      	movs	r3, #7
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <HAL_UART_MspInit+0x9c>)
 800375c:	f001 f97e 	bl	8004a5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2105      	movs	r1, #5
 8003764:	2027      	movs	r0, #39	; 0x27
 8003766:	f000 fd34 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800376a:	2027      	movs	r0, #39	; 0x27
 800376c:	f000 fd4d 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003770:	bf00      	nop
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40004800 	.word	0x40004800
 800377c:	40023800 	.word	0x40023800
 8003780:	40020800 	.word	0x40020800

08003784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <NMI_Handler+0x4>

0800378a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800378e:	e7fe      	b.n	800378e <HardFault_Handler+0x4>

08003790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003794:	e7fe      	b.n	8003794 <MemManage_Handler+0x4>

08003796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379a:	e7fe      	b.n	800379a <BusFault_Handler+0x4>

0800379c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <UsageFault_Handler+0x4>

080037a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b4:	f000 f98c 	bl	8003ad0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80037b8:	f007 fc72 	bl	800b0a0 <xTaskGetSchedulerState>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80037c2:	f008 fa59 	bl	800bc78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}

080037ca <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <DMA1_Stream0_IRQHandler+0x10>)
 80037de:	f000 fec7 	bl	8004570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000035c 	.word	0x2000035c

080037ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <TIM4_IRQHandler+0x10>)
 80037f2:	f003 fe09 	bl	8007408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000494 	.word	0x20000494

08003800 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003804:	4802      	ldr	r0, [pc, #8]	; (8003810 <USART3_IRQHandler+0x10>)
 8003806:	f004 ffc5 	bl	8008794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000056c 	.word	0x2000056c

08003814 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003818:	4802      	ldr	r0, [pc, #8]	; (8003824 <DMA2_Stream0_IRQHandler+0x10>)
 800381a:	f000 fea9 	bl	8004570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200002a8 	.word	0x200002a8

08003828 <_getpid>:
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
 800382c:	2301      	movs	r3, #1
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_kill>:
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	f009 fa51 	bl	800cce8 <__errno>
 8003846:	4603      	mov	r3, r0
 8003848:	2216      	movs	r2, #22
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_exit>:
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ffe7 	bl	8003838 <_kill>
 800386a:	e7fe      	b.n	800386a <_exit+0x12>

0800386c <_read>:
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e00a      	b.n	8003894 <_read+0x28>
 800387e:	f3af 8000 	nop.w
 8003882:	4601      	mov	r1, r0
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	60ba      	str	r2, [r7, #8]
 800388a:	b2ca      	uxtb	r2, r1
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	dbf0      	blt.n	800387e <_read+0x12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_write>:
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e009      	b.n	80038cc <_write+0x26>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	60ba      	str	r2, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f3af 8000 	nop.w
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	dbf1      	blt.n	80038b8 <_write+0x12>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <_close>:
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <_fstat>:
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	2300      	movs	r3, #0
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <_isatty>:
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	2301      	movs	r3, #1
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_lseek>:
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	2300      	movs	r3, #0
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <_sbrk>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <_sbrk+0x5c>)
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <_sbrk+0x60>)
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <_sbrk+0x64>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <_sbrk+0x22>
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <_sbrk+0x64>)
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <_sbrk+0x68>)
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <_sbrk+0x64>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	429a      	cmp	r2, r3
 8003976:	d207      	bcs.n	8003988 <_sbrk+0x40>
 8003978:	f009 f9b6 	bl	800cce8 <__errno>
 800397c:	4603      	mov	r3, r0
 800397e:	220c      	movs	r2, #12
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e009      	b.n	800399c <_sbrk+0x54>
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <_sbrk+0x64>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <_sbrk+0x64>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	4a05      	ldr	r2, [pc, #20]	; (80039ac <_sbrk+0x64>)
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20020000 	.word	0x20020000
 80039a8:	00000400 	.word	0x00000400
 80039ac:	20000a0c 	.word	0x20000a0c
 80039b0:	200054b0 	.word	0x200054b0

080039b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <SystemInit+0x20>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <SystemInit+0x20>)
 80039c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <Reset_Handler>:
 80039d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a10 <LoopFillZerobss+0x12>
 80039dc:	480d      	ldr	r0, [pc, #52]	; (8003a14 <LoopFillZerobss+0x16>)
 80039de:	490e      	ldr	r1, [pc, #56]	; (8003a18 <LoopFillZerobss+0x1a>)
 80039e0:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <LoopFillZerobss+0x1e>)
 80039e2:	2300      	movs	r3, #0
 80039e4:	e002      	b.n	80039ec <LoopCopyDataInit>

080039e6 <CopyDataInit>:
 80039e6:	58d4      	ldr	r4, [r2, r3]
 80039e8:	50c4      	str	r4, [r0, r3]
 80039ea:	3304      	adds	r3, #4

080039ec <LoopCopyDataInit>:
 80039ec:	18c4      	adds	r4, r0, r3
 80039ee:	428c      	cmp	r4, r1
 80039f0:	d3f9      	bcc.n	80039e6 <CopyDataInit>
 80039f2:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <LoopFillZerobss+0x22>)
 80039f4:	4c0b      	ldr	r4, [pc, #44]	; (8003a24 <LoopFillZerobss+0x26>)
 80039f6:	2300      	movs	r3, #0
 80039f8:	e001      	b.n	80039fe <LoopFillZerobss>

080039fa <FillZerobss>:
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	3204      	adds	r2, #4

080039fe <LoopFillZerobss>:
 80039fe:	42a2      	cmp	r2, r4
 8003a00:	d3fb      	bcc.n	80039fa <FillZerobss>
 8003a02:	f7ff ffd7 	bl	80039b4 <SystemInit>
 8003a06:	f009 f975 	bl	800ccf4 <__libc_init_array>
 8003a0a:	f7fd fabb 	bl	8000f84 <main>
 8003a0e:	4770      	bx	lr
 8003a10:	20020000 	.word	0x20020000
 8003a14:	20000000 	.word	0x20000000
 8003a18:	200001dc 	.word	0x200001dc
 8003a1c:	0800f004 	.word	0x0800f004
 8003a20:	200001dc 	.word	0x200001dc
 8003a24:	200054b0 	.word	0x200054b0

08003a28 <ADC_IRQHandler>:
 8003a28:	e7fe      	b.n	8003a28 <ADC_IRQHandler>
	...

08003a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_Init+0x40>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <HAL_Init+0x40>)
 8003a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_Init+0x40>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_Init+0x40>)
 8003a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_Init+0x40>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <HAL_Init+0x40>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a54:	2003      	movs	r0, #3
 8003a56:	f000 fbb1 	bl	80041bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a5a:	200f      	movs	r0, #15
 8003a5c:	f000 f808 	bl	8003a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a60:	f7ff fb42 	bl	80030e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023c00 	.word	0x40023c00

08003a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_InitTick+0x54>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_InitTick+0x58>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fbc9 	bl	8004226 <HAL_SYSTICK_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00e      	b.n	8003abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d80a      	bhi.n	8003aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	f000 fb91 	bl	80041d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ab0:	4a06      	ldr	r2, [pc, #24]	; (8003acc <HAL_InitTick+0x5c>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	20000008 	.word	0x20000008

08003ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_IncTick+0x20>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_IncTick+0x24>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <HAL_IncTick+0x24>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	20000a10 	.word	0x20000a10

08003af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return uwTick;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_GetTick+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000a10 	.word	0x20000a10

08003b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff ffee 	bl	8003af8 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d005      	beq.n	8003b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_Delay+0x44>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b36:	bf00      	nop
 8003b38:	f7ff ffde 	bl	8003af8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d8f7      	bhi.n	8003b38 <HAL_Delay+0x28>
  {
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000000c 	.word	0x2000000c

08003b58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e033      	b.n	8003bd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff faea 	bl	8003150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b9e:	f023 0302 	bic.w	r3, r3, #2
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f93a 	bl	8003e24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8003bc6:	e001      	b.n	8003bcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x1c>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e105      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x228>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b09      	cmp	r3, #9
 8003c0a:	d925      	bls.n	8003c58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68d9      	ldr	r1, [r3, #12]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	3b1e      	subs	r3, #30
 8003c22:	2207      	movs	r2, #7
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	400a      	ands	r2, r1
 8003c30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68d9      	ldr	r1, [r3, #12]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4618      	mov	r0, r3
 8003c44:	4603      	mov	r3, r0
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4403      	add	r3, r0
 8003c4a:	3b1e      	subs	r3, #30
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	e022      	b.n	8003c9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6919      	ldr	r1, [r3, #16]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43da      	mvns	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	400a      	ands	r2, r1
 8003c7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6919      	ldr	r1, [r3, #16]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4403      	add	r3, r0
 8003c94:	409a      	lsls	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d824      	bhi.n	8003cf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3b05      	subs	r3, #5
 8003cb8:	221f      	movs	r2, #31
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	3b05      	subs	r3, #5
 8003ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
 8003cee:	e04c      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b0c      	cmp	r3, #12
 8003cf6:	d824      	bhi.n	8003d42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	3b23      	subs	r3, #35	; 0x23
 8003d0a:	221f      	movs	r2, #31
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43da      	mvns	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	400a      	ands	r2, r1
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4618      	mov	r0, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	3b23      	subs	r3, #35	; 0x23
 8003d34:	fa00 f203 	lsl.w	r2, r0, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d40:	e023      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	3b41      	subs	r3, #65	; 0x41
 8003d54:	221f      	movs	r2, #31
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	400a      	ands	r2, r1
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	4618      	mov	r0, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3b41      	subs	r3, #65	; 0x41
 8003d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_ADC_ConfigChannel+0x234>)
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_ADC_ConfigChannel+0x238>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d109      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x1cc>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b12      	cmp	r3, #18
 8003d9e:	d105      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_ADC_ConfigChannel+0x238>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d123      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x21e>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d003      	beq.n	8003dc6 <HAL_ADC_ConfigChannel+0x1e6>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b11      	cmp	r3, #17
 8003dc4:	d11b      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d111      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_ADC_ConfigChannel+0x23c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a10      	ldr	r2, [pc, #64]	; (8003e20 <HAL_ADC_ConfigChannel+0x240>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0c9a      	lsrs	r2, r3, #18
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003df0:	e002      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f9      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40012300 	.word	0x40012300
 8003e18:	40012000 	.word	0x40012000
 8003e1c:	20000004 	.word	0x20000004
 8003e20:	431bde83 	.word	0x431bde83

08003e24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e2c:	4b79      	ldr	r3, [pc, #484]	; (8004014 <ADC_Init+0x1f0>)
 8003e2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	4a58      	ldr	r2, [pc, #352]	; (8004018 <ADC_Init+0x1f4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6899      	ldr	r1, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e00f      	b.n	8003f22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0202 	bic.w	r2, r2, #2
 8003f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7e1b      	ldrb	r3, [r3, #24]
 8003f3c:	005a      	lsls	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	035a      	lsls	r2, r3, #13
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e007      	b.n	8003f98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	051a      	lsls	r2, r3, #20
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6899      	ldr	r1, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fda:	025a      	lsls	r2, r3, #9
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6899      	ldr	r1, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	029a      	lsls	r2, r3, #10
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40012300 	.word	0x40012300
 8004018:	0f000001 	.word	0x0f000001

0800401c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800404e:	4a04      	ldr	r2, [pc, #16]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	60d3      	str	r3, [r2, #12]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__NVIC_GetPriorityGrouping+0x18>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 0307 	and.w	r3, r3, #7
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db0b      	blt.n	80040aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <__NVIC_EnableIRQ+0x38>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	e000e100 	.word	0xe000e100

080040bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	db0a      	blt.n	80040e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	490c      	ldr	r1, [pc, #48]	; (8004108 <__NVIC_SetPriority+0x4c>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	440b      	add	r3, r1
 80040e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e4:	e00a      	b.n	80040fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4908      	ldr	r1, [pc, #32]	; (800410c <__NVIC_SetPriority+0x50>)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3b04      	subs	r3, #4
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	440b      	add	r3, r1
 80040fa:	761a      	strb	r2, [r3, #24]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000e100 	.word	0xe000e100
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f1c3 0307 	rsb	r3, r3, #7
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf28      	it	cs
 800412e:	2304      	movcs	r3, #4
 8004130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3304      	adds	r3, #4
 8004136:	2b06      	cmp	r3, #6
 8004138:	d902      	bls.n	8004140 <NVIC_EncodePriority+0x30>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3b03      	subs	r3, #3
 800413e:	e000      	b.n	8004142 <NVIC_EncodePriority+0x32>
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004158:	f04f 31ff 	mov.w	r1, #4294967295
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43d9      	mvns	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	4313      	orrs	r3, r2
         );
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004188:	d301      	bcc.n	800418e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800418a:	2301      	movs	r3, #1
 800418c:	e00f      	b.n	80041ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <SysTick_Config+0x40>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004196:	210f      	movs	r1, #15
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	f7ff ff8e 	bl	80040bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <SysTick_Config+0x40>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <SysTick_Config+0x40>)
 80041a8:	2207      	movs	r2, #7
 80041aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	e000e010 	.word	0xe000e010

080041bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff29 	bl	800401c <__NVIC_SetPriorityGrouping>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041e4:	f7ff ff3e 	bl	8004064 <__NVIC_GetPriorityGrouping>
 80041e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7ff ff8e 	bl	8004110 <NVIC_EncodePriority>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff5d 	bl	80040bc <__NVIC_SetPriority>
}
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	4603      	mov	r3, r0
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff31 	bl	8004080 <__NVIC_EnableIRQ>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffa2 	bl	8004178 <SysTick_Config>
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7ff fc54 	bl	8003af8 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e099      	b.n	8004390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427c:	e00f      	b.n	800429e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800427e:	f7ff fc3b 	bl	8003af8 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b05      	cmp	r3, #5
 800428a:	d908      	bls.n	800429e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e078      	b.n	8004390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e8      	bne.n	800427e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4b38      	ldr	r3, [pc, #224]	; (8004398 <HAL_DMA_Init+0x158>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d107      	bne.n	8004308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	4313      	orrs	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0307 	bic.w	r3, r3, #7
 800431e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b04      	cmp	r3, #4
 8004330:	d117      	bne.n	8004362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb0d 	bl	8004964 <DMA_CheckFifoParam>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800435e:	2301      	movs	r3, #1
 8004360:	e016      	b.n	8004390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fac4 	bl	80048f8 <DMA_CalcBaseAndBitshift>
 8004370:	4603      	mov	r3, r0
 8004372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	223f      	movs	r2, #63	; 0x3f
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	f010803f 	.word	0xf010803f

0800439c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_DMA_Start_IT+0x26>
 80043be:	2302      	movs	r3, #2
 80043c0:	e040      	b.n	8004444 <HAL_DMA_Start_IT+0xa8>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d12f      	bne.n	8004436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa56 	bl	800489c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	223f      	movs	r2, #63	; 0x3f
 80043f6:	409a      	lsls	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0216 	orr.w	r2, r2, #22
 800440a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e005      	b.n	8004442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800443e:	2302      	movs	r3, #2
 8004440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7ff fb4d 	bl	8003af8 <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d008      	beq.n	800447e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e052      	b.n	8004524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0216 	bic.w	r2, r2, #22
 800448c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800449c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_DMA_Abort+0x62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0208 	bic.w	r2, r2, #8
 80044bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ce:	e013      	b.n	80044f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044d0:	f7ff fb12 	bl	8003af8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d90c      	bls.n	80044f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2203      	movs	r2, #3
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e015      	b.n	8004524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e4      	bne.n	80044d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	223f      	movs	r2, #63	; 0x3f
 800450c:	409a      	lsls	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d004      	beq.n	800454a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00c      	b.n	8004564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2205      	movs	r2, #5
 800454e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800457c:	4b8e      	ldr	r3, [pc, #568]	; (80047b8 <HAL_DMA_IRQHandler+0x248>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a8e      	ldr	r2, [pc, #568]	; (80047bc <HAL_DMA_IRQHandler+0x24c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2208      	movs	r2, #8
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01a      	beq.n	80045dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	2208      	movs	r2, #8
 80045ca:	409a      	lsls	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	2201      	movs	r2, #1
 8004600:	409a      	lsls	r2, r3
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	2204      	movs	r2, #4
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00b      	beq.n	8004648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	2204      	movs	r2, #4
 8004636:	409a      	lsls	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	2210      	movs	r2, #16
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d043      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d03c      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2210      	movs	r2, #16
 800466c:	409a      	lsls	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d024      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
 800469e:	e01f      	b.n	80046e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
 80046b0:	e016      	b.n	80046e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0208 	bic.w	r2, r2, #8
 80046ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	2220      	movs	r2, #32
 80046e6:	409a      	lsls	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 808f 	beq.w	8004810 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8087 	beq.w	8004810 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	2220      	movs	r2, #32
 8004708:	409a      	lsls	r2, r3
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b05      	cmp	r3, #5
 8004718:	d136      	bne.n	8004788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0216 	bic.w	r2, r2, #22
 8004728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <HAL_DMA_IRQHandler+0x1da>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0208 	bic.w	r2, r2, #8
 8004758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	223f      	movs	r2, #63	; 0x3f
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	2b00      	cmp	r3, #0
 800477c:	d07e      	beq.n	800487c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
        }
        return;
 8004786:	e079      	b.n	800487c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01d      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10d      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
 80047b4:	e02c      	b.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
 80047b6:	bf00      	nop
 80047b8:	20000004 	.word	0x20000004
 80047bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d023      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
 80047d0:	e01e      	b.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10f      	bne.n	8004800 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0210 	bic.w	r2, r2, #16
 80047ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	2b00      	cmp	r3, #0
 8004816:	d032      	beq.n	800487e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d022      	beq.n	800486a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2205      	movs	r2, #5
 8004828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3301      	adds	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	d307      	bcc.n	8004858 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f2      	bne.n	800483c <HAL_DMA_IRQHandler+0x2cc>
 8004856:	e000      	b.n	800485a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004858:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
 800487a:	e000      	b.n	800487e <HAL_DMA_IRQHandler+0x30e>
        return;
 800487c:	bf00      	nop
    }
  }
}
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d108      	bne.n	80048dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048da:	e007      	b.n	80048ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	3b10      	subs	r3, #16
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <DMA_CalcBaseAndBitshift+0x64>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <DMA_CalcBaseAndBitshift+0x68>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d909      	bls.n	800493a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	1d1a      	adds	r2, r3, #4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
 8004938:	e007      	b.n	800494a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	aaaaaaab 	.word	0xaaaaaaab
 8004960:	0800ec78 	.word	0x0800ec78

08004964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11f      	bne.n	80049be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d856      	bhi.n	8004a32 <DMA_CheckFifoParam+0xce>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <DMA_CheckFifoParam+0x28>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049af 	.word	0x080049af
 8004994:	0800499d 	.word	0x0800499d
 8004998:	08004a33 	.word	0x08004a33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d046      	beq.n	8004a36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ac:	e043      	b.n	8004a36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049b6:	d140      	bne.n	8004a3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049bc:	e03d      	b.n	8004a3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c6:	d121      	bne.n	8004a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d837      	bhi.n	8004a3e <DMA_CheckFifoParam+0xda>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <DMA_CheckFifoParam+0x70>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049eb 	.word	0x080049eb
 80049dc:	080049e5 	.word	0x080049e5
 80049e0:	080049fd 	.word	0x080049fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
      break;
 80049e8:	e030      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d025      	beq.n	8004a42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fa:	e022      	b.n	8004a42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a04:	d11f      	bne.n	8004a46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a0a:	e01c      	b.n	8004a46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d903      	bls.n	8004a1a <DMA_CheckFifoParam+0xb6>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d003      	beq.n	8004a20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a18:	e018      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1e:	e015      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a30:	e00b      	b.n	8004a4a <DMA_CheckFifoParam+0xe6>
      break;
 8004a32:	bf00      	nop
 8004a34:	e00a      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      break;
 8004a36:	bf00      	nop
 8004a38:	e008      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e006      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      break;   
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
      break;
 8004a4a:	bf00      	nop
    }
  } 
  
  return status; 
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	e16b      	b.n	8004d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a78:	2201      	movs	r2, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	f040 815a 	bne.w	8004d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d005      	beq.n	8004aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d130      	bne.n	8004b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	2203      	movs	r2, #3
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 0201 	and.w	r2, r3, #1
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d017      	beq.n	8004b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	2203      	movs	r2, #3
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d123      	bne.n	8004ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	08da      	lsrs	r2, r3, #3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3208      	adds	r2, #8
 8004b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	220f      	movs	r2, #15
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	08da      	lsrs	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3208      	adds	r2, #8
 8004b9a:	69b9      	ldr	r1, [r7, #24]
 8004b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	2203      	movs	r2, #3
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0203 	and.w	r2, r3, #3
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80b4 	beq.w	8004d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b60      	ldr	r3, [pc, #384]	; (8004d68 <HAL_GPIO_Init+0x30c>)
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	4a5f      	ldr	r2, [pc, #380]	; (8004d68 <HAL_GPIO_Init+0x30c>)
 8004bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf2:	4b5d      	ldr	r3, [pc, #372]	; (8004d68 <HAL_GPIO_Init+0x30c>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bfe:	4a5b      	ldr	r2, [pc, #364]	; (8004d6c <HAL_GPIO_Init+0x310>)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	3302      	adds	r3, #2
 8004c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	220f      	movs	r2, #15
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <HAL_GPIO_Init+0x314>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02b      	beq.n	8004c82 <HAL_GPIO_Init+0x226>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a51      	ldr	r2, [pc, #324]	; (8004d74 <HAL_GPIO_Init+0x318>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d025      	beq.n	8004c7e <HAL_GPIO_Init+0x222>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a50      	ldr	r2, [pc, #320]	; (8004d78 <HAL_GPIO_Init+0x31c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01f      	beq.n	8004c7a <HAL_GPIO_Init+0x21e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a4f      	ldr	r2, [pc, #316]	; (8004d7c <HAL_GPIO_Init+0x320>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d019      	beq.n	8004c76 <HAL_GPIO_Init+0x21a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a4e      	ldr	r2, [pc, #312]	; (8004d80 <HAL_GPIO_Init+0x324>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_GPIO_Init+0x216>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a4d      	ldr	r2, [pc, #308]	; (8004d84 <HAL_GPIO_Init+0x328>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00d      	beq.n	8004c6e <HAL_GPIO_Init+0x212>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4c      	ldr	r2, [pc, #304]	; (8004d88 <HAL_GPIO_Init+0x32c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <HAL_GPIO_Init+0x20e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4b      	ldr	r2, [pc, #300]	; (8004d8c <HAL_GPIO_Init+0x330>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_GPIO_Init+0x20a>
 8004c62:	2307      	movs	r3, #7
 8004c64:	e00e      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c66:	2308      	movs	r3, #8
 8004c68:	e00c      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c6a:	2306      	movs	r3, #6
 8004c6c:	e00a      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c6e:	2305      	movs	r3, #5
 8004c70:	e008      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c72:	2304      	movs	r3, #4
 8004c74:	e006      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c76:	2303      	movs	r3, #3
 8004c78:	e004      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e002      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_GPIO_Init+0x228>
 8004c82:	2300      	movs	r3, #0
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	f002 0203 	and.w	r2, r2, #3
 8004c8a:	0092      	lsls	r2, r2, #2
 8004c8c:	4093      	lsls	r3, r2
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c94:	4935      	ldr	r1, [pc, #212]	; (8004d6c <HAL_GPIO_Init+0x310>)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	089b      	lsrs	r3, r3, #2
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cc6:	4a32      	ldr	r2, [pc, #200]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ccc:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf0:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d1a:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d44:	4a12      	ldr	r2, [pc, #72]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b0f      	cmp	r3, #15
 8004d54:	f67f ae90 	bls.w	8004a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3724      	adds	r7, #36	; 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40013800 	.word	0x40013800
 8004d70:	40020000 	.word	0x40020000
 8004d74:	40020400 	.word	0x40020400
 8004d78:	40020800 	.word	0x40020800
 8004d7c:	40020c00 	.word	0x40020c00
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40021400 	.word	0x40021400
 8004d88:	40021800 	.word	0x40021800
 8004d8c:	40021c00 	.word	0x40021c00
 8004d90:	40013c00 	.word	0x40013c00

08004d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
 8004da0:	4613      	mov	r3, r2
 8004da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004da4:	787b      	ldrb	r3, [r7, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004db0:	e003      	b.n	8004dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	041a      	lsls	r2, r3, #16
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	619a      	str	r2, [r3, #24]
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e12b      	b.n	8005032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fe fa24 	bl	800323c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	; 0x24
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f001 feb2 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 8004e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4a81      	ldr	r2, [pc, #516]	; (800503c <HAL_I2C_Init+0x274>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d807      	bhi.n	8004e4c <HAL_I2C_Init+0x84>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a80      	ldr	r2, [pc, #512]	; (8005040 <HAL_I2C_Init+0x278>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	bf94      	ite	ls
 8004e44:	2301      	movls	r3, #1
 8004e46:	2300      	movhi	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e006      	b.n	8004e5a <HAL_I2C_Init+0x92>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a7d      	ldr	r2, [pc, #500]	; (8005044 <HAL_I2C_Init+0x27c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	bf94      	ite	ls
 8004e54:	2301      	movls	r3, #1
 8004e56:	2300      	movhi	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e0e7      	b.n	8005032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a78      	ldr	r2, [pc, #480]	; (8005048 <HAL_I2C_Init+0x280>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0c9b      	lsrs	r3, r3, #18
 8004e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a6a      	ldr	r2, [pc, #424]	; (800503c <HAL_I2C_Init+0x274>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d802      	bhi.n	8004e9c <HAL_I2C_Init+0xd4>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	e009      	b.n	8004eb0 <HAL_I2C_Init+0xe8>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	4a69      	ldr	r2, [pc, #420]	; (800504c <HAL_I2C_Init+0x284>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	3301      	adds	r3, #1
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ec2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	495c      	ldr	r1, [pc, #368]	; (800503c <HAL_I2C_Init+0x274>)
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	d819      	bhi.n	8004f04 <HAL_I2C_Init+0x13c>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1e59      	subs	r1, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_I2C_Init+0x138>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1e59      	subs	r1, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004efe:	e051      	b.n	8004fa4 <HAL_I2C_Init+0x1dc>
 8004f00:	2304      	movs	r3, #4
 8004f02:	e04f      	b.n	8004fa4 <HAL_I2C_Init+0x1dc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d111      	bne.n	8004f30 <HAL_I2C_Init+0x168>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1e58      	subs	r0, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	440b      	add	r3, r1
 8004f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e012      	b.n	8004f56 <HAL_I2C_Init+0x18e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1e58      	subs	r0, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	0099      	lsls	r1, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f46:	3301      	adds	r3, #1
 8004f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Init+0x196>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e022      	b.n	8004fa4 <HAL_I2C_Init+0x1dc>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10e      	bne.n	8004f84 <HAL_I2C_Init+0x1bc>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1e58      	subs	r0, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6859      	ldr	r1, [r3, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	440b      	add	r3, r1
 8004f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	e00f      	b.n	8004fa4 <HAL_I2C_Init+0x1dc>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e58      	subs	r0, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	0099      	lsls	r1, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	6809      	ldr	r1, [r1, #0]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6911      	ldr	r1, [r2, #16]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68d2      	ldr	r2, [r2, #12]
 8004fde:	4311      	orrs	r1, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	000186a0 	.word	0x000186a0
 8005040:	001e847f 	.word	0x001e847f
 8005044:	003d08ff 	.word	0x003d08ff
 8005048:	431bde83 	.word	0x431bde83
 800504c:	10624dd3 	.word	0x10624dd3

08005050 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	4608      	mov	r0, r1
 800505a:	4611      	mov	r1, r2
 800505c:	461a      	mov	r2, r3
 800505e:	4603      	mov	r3, r0
 8005060:	817b      	strh	r3, [r7, #10]
 8005062:	460b      	mov	r3, r1
 8005064:	813b      	strh	r3, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800506a:	f7fe fd45 	bl	8003af8 <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	f040 80d9 	bne.w	8005230 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2319      	movs	r3, #25
 8005084:	2201      	movs	r2, #1
 8005086:	496d      	ldr	r1, [pc, #436]	; (800523c <HAL_I2C_Mem_Write+0x1ec>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 ff4d 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005094:	2302      	movs	r3, #2
 8005096:	e0cc      	b.n	8005232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Mem_Write+0x56>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0c5      	b.n	8005232 <HAL_I2C_Mem_Write+0x1e2>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d007      	beq.n	80050cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2221      	movs	r2, #33	; 0x21
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a4d      	ldr	r2, [pc, #308]	; (8005240 <HAL_I2C_Mem_Write+0x1f0>)
 800510c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800510e:	88f8      	ldrh	r0, [r7, #6]
 8005110:	893a      	ldrh	r2, [r7, #8]
 8005112:	8979      	ldrh	r1, [r7, #10]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4603      	mov	r3, r0
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fc72 	bl	8005a08 <I2C_RequestMemoryWrite>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d052      	beq.n	80051d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e081      	b.n	8005232 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 ffce 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b04      	cmp	r3, #4
 8005144:	d107      	bne.n	8005156 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e06b      	b.n	8005232 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	781a      	ldrb	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b04      	cmp	r3, #4
 8005196:	d11b      	bne.n	80051d0 <HAL_I2C_Mem_Write+0x180>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	2b00      	cmp	r3, #0
 800519e:	d017      	beq.n	80051d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1aa      	bne.n	800512e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 ffba 	bl	8006156 <I2C_WaitOnBTFFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00d      	beq.n	8005204 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d107      	bne.n	8005200 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e016      	b.n	8005232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	00100002 	.word	0x00100002
 8005240:	ffff0000 	.word	0xffff0000

08005244 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	; 0x30
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	4608      	mov	r0, r1
 800524e:	4611      	mov	r1, r2
 8005250:	461a      	mov	r2, r3
 8005252:	4603      	mov	r3, r0
 8005254:	817b      	strh	r3, [r7, #10]
 8005256:	460b      	mov	r3, r1
 8005258:	813b      	strh	r3, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800525e:	f7fe fc4b 	bl	8003af8 <HAL_GetTick>
 8005262:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b20      	cmp	r3, #32
 800526e:	f040 8208 	bne.w	8005682 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2319      	movs	r3, #25
 8005278:	2201      	movs	r2, #1
 800527a:	497b      	ldr	r1, [pc, #492]	; (8005468 <HAL_I2C_Mem_Read+0x224>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fe53 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
 800528a:	e1fb      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_I2C_Mem_Read+0x56>
 8005296:	2302      	movs	r3, #2
 8005298:	e1f4      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d007      	beq.n	80052c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2222      	movs	r2, #34	; 0x22
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2240      	movs	r2, #64	; 0x40
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a5b      	ldr	r2, [pc, #364]	; (800546c <HAL_I2C_Mem_Read+0x228>)
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005302:	88f8      	ldrh	r0, [r7, #6]
 8005304:	893a      	ldrh	r2, [r7, #8]
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4603      	mov	r3, r0
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fc0e 	bl	8005b34 <I2C_RequestMemoryRead>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e1b0      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d113      	bne.n	8005352 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532a:	2300      	movs	r3, #0
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e184      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005356:	2b01      	cmp	r3, #1
 8005358:	d11b      	bne.n	8005392 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e164      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	2b02      	cmp	r3, #2
 8005398:	d11b      	bne.n	80053d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	e144      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053e8:	e138      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	f200 80f1 	bhi.w	80055d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d123      	bne.n	8005444 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fee9 	bl	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e139      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005442:	e10b      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	2b02      	cmp	r3, #2
 800544a:	d14e      	bne.n	80054ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	2200      	movs	r2, #0
 8005454:	4906      	ldr	r1, [pc, #24]	; (8005470 <HAL_I2C_Mem_Read+0x22c>)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fd66 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e10e      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
 8005466:	bf00      	nop
 8005468:	00100002 	.word	0x00100002
 800546c:	ffff0000 	.word	0xffff0000
 8005470:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e8:	e0b8      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2200      	movs	r2, #0
 80054f2:	4966      	ldr	r1, [pc, #408]	; (800568c <HAL_I2C_Mem_Read+0x448>)
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fd17 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0bf      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2200      	movs	r2, #0
 800554e:	494f      	ldr	r1, [pc, #316]	; (800568c <HAL_I2C_Mem_Read+0x448>)
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fce9 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e091      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055d4:	e042      	b.n	800565c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fdfc 	bl	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e04c      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b04      	cmp	r3, #4
 8005628:	d118      	bne.n	800565c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	f47f aec2 	bne.w	80053ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e000      	b.n	8005684 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3728      	adds	r7, #40	; 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	00010004 	.word	0x00010004

08005690 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	; 0x30
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056aa:	f7fe fa25 	bl	8003af8 <HAL_GetTick>
 80056ae:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b20      	cmp	r3, #32
 80056be:	f040 8176 	bne.w	80059ae <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056c2:	4b95      	ldr	r3, [pc, #596]	; (8005918 <HAL_I2C_Mem_Read_DMA+0x288>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	4a94      	ldr	r2, [pc, #592]	; (800591c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0a1a      	lsrs	r2, r3, #8
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009a      	lsls	r2, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3b01      	subs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e14c      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b02      	cmp	r3, #2
 8005722:	d0db      	beq.n	80056dc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_I2C_Mem_Read_DMA+0xa2>
 800572e:	2302      	movs	r3, #2
 8005730:	e13e      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d007      	beq.n	8005758 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2222      	movs	r2, #34	; 0x22
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2240      	movs	r2, #64	; 0x40
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a62      	ldr	r2, [pc, #392]	; (8005920 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800579a:	897a      	ldrh	r2, [r7, #10]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80057a0:	893a      	ldrh	r2, [r7, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80cc 	beq.w	8005954 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02d      	beq.n	8005820 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	4a56      	ldr	r2, [pc, #344]	; (8005924 <HAL_I2C_Mem_Read_DMA+0x294>)
 80057ca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	4a55      	ldr	r2, [pc, #340]	; (8005928 <HAL_I2C_Mem_Read_DMA+0x298>)
 80057d2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	2200      	movs	r2, #0
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2200      	movs	r2, #0
 80057ea:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3310      	adds	r3, #16
 80057fe:	4619      	mov	r1, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	461a      	mov	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	f7fe fdc7 	bl	800439c <HAL_DMA_Start_IT>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 8087 	bne.w	800592c <HAL_I2C_Mem_Read_DMA+0x29c>
 800581e:	e013      	b.n	8005848 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0b3      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005848:	88f8      	ldrh	r0, [r7, #6]
 800584a:	893a      	ldrh	r2, [r7, #8]
 800584c:	8979      	ldrh	r1, [r7, #10]
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	2323      	movs	r3, #35	; 0x23
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	4603      	mov	r3, r0
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f96b 	bl	8005b34 <I2C_RequestMemoryRead>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d023      	beq.n	80058ac <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fe5f 	bl	800452c <HAL_DMA_Abort_IT>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	2200      	movs	r2, #0
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e081      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d108      	bne.n	80058c6 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e007      	b.n	80058d6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005902:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	e049      	b.n	80059aa <HAL_I2C_Mem_Read_DMA+0x31a>
 8005916:	bf00      	nop
 8005918:	20000004 	.word	0x20000004
 800591c:	14f8b589 	.word	0x14f8b589
 8005920:	ffff0000 	.word	0xffff0000
 8005924:	08005d05 	.word	0x08005d05
 8005928:	08005eaf 	.word	0x08005eaf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e02d      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005954:	88f8      	ldrh	r0, [r7, #6]
 8005956:	893a      	ldrh	r2, [r7, #8]
 8005958:	8979      	ldrh	r1, [r7, #10]
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	2323      	movs	r3, #35	; 0x23
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	4603      	mov	r3, r0
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8e5 	bl	8005b34 <I2C_RequestMemoryRead>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e01d      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005998:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e000      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3728      	adds	r7, #40	; 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	4608      	mov	r0, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	461a      	mov	r2, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	813b      	strh	r3, [r7, #8]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa72 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d103      	bne.n	8005a62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e05f      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a66:	897b      	ldrh	r3, [r7, #10]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	492d      	ldr	r1, [pc, #180]	; (8005b30 <I2C_RequestMemoryWrite+0x128>)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 faaa 	bl	8005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e04c      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	6a39      	ldr	r1, [r7, #32]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fb14 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d107      	bne.n	8005aca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e02b      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad4:	893b      	ldrh	r3, [r7, #8]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	e021      	b.n	8005b24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 faee 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00d      	beq.n	8005b1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d107      	bne.n	8005b16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e005      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b1a:	893b      	ldrh	r3, [r7, #8]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	00010002 	.word	0x00010002

08005b34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	817b      	strh	r3, [r7, #10]
 8005b46:	460b      	mov	r3, r1
 8005b48:	813b      	strh	r3, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f9d4 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b94:	d103      	bne.n	8005b9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0aa      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	4952      	ldr	r1, [pc, #328]	; (8005d00 <I2C_RequestMemoryRead+0x1cc>)
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fa0c 	bl	8005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e097      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	6a39      	ldr	r1, [r7, #32]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fa76 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00d      	beq.n	8005c0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d107      	bne.n	8005c06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e076      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d105      	bne.n	8005c1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c10:	893b      	ldrh	r3, [r7, #8]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	e021      	b.n	8005c60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	6a39      	ldr	r1, [r7, #32]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fa50 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d107      	bne.n	8005c52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e050      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c56:	893b      	ldrh	r3, [r7, #8]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	6a39      	ldr	r1, [r7, #32]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fa35 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00d      	beq.n	8005c8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d107      	bne.n	8005c88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e035      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f93d 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d103      	bne.n	8005ccc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e013      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cd0:	897b      	ldrh	r3, [r7, #10]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	4906      	ldr	r1, [pc, #24]	; (8005d00 <I2C_RequestMemoryRead+0x1cc>)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f975 	bl	8005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	00010002 	.word	0x00010002

08005d04 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d20:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d36:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	2200      	movs	r2, #0
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005d5e:	2b21      	cmp	r3, #33	; 0x21
 8005d60:	d007      	beq.n	8005d72 <I2C_DMAXferCplt+0x6e>
 8005d62:	7cfb      	ldrb	r3, [r7, #19]
 8005d64:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005d68:	2b22      	cmp	r3, #34	; 0x22
 8005d6a:	d131      	bne.n	8005dd0 <I2C_DMAXferCplt+0xcc>
 8005d6c:	7cbb      	ldrb	r3, [r7, #18]
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d12e      	bne.n	8005dd0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d80:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d88:	7cfb      	ldrb	r3, [r7, #19]
 8005d8a:	2b29      	cmp	r3, #41	; 0x29
 8005d8c:	d10a      	bne.n	8005da4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2221      	movs	r2, #33	; 0x21
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2228      	movs	r2, #40	; 0x28
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f7ff fe15 	bl	80059cc <HAL_I2C_SlaveTxCpltCallback>
 8005da2:	e00c      	b.n	8005dbe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	2b2a      	cmp	r3, #42	; 0x2a
 8005da8:	d109      	bne.n	8005dbe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2222      	movs	r2, #34	; 0x22
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2228      	movs	r2, #40	; 0x28
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005db8:	6978      	ldr	r0, [r7, #20]
 8005dba:	f7ff fe11 	bl	80059e0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005dcc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005dce:	e06a      	b.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d064      	beq.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e0c:	d009      	beq.n	8005e22 <I2C_DMAXferCplt+0x11e>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d006      	beq.n	8005e22 <I2C_DMAXferCplt+0x11e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005e1a:	d002      	beq.n	8005e22 <I2C_DMAXferCplt+0x11e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d107      	bne.n	8005e32 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e30:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e40:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e50:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005e60:	6978      	ldr	r0, [r7, #20]
 8005e62:	f7ff fdc7 	bl	80059f4 <HAL_I2C_ErrorCallback>
}
 8005e66:	e01e      	b.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d10a      	bne.n	8005e92 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7fb ff5c 	bl	8001d48 <HAL_I2C_MemRxCpltCallback>
}
 8005e90:	e009      	b.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2212      	movs	r2, #18
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ea0:	6978      	ldr	r0, [r7, #20]
 8005ea2:	f7ff fd89 	bl	80059b8 <HAL_I2C_MasterRxCpltCallback>
}
 8005ea6:	bf00      	nop
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	2200      	movs	r2, #0
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	2200      	movs	r2, #0
 8005eda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fe fcd1 	bl	8004884 <HAL_DMA_GetError>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d01b      	beq.n	8005f20 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f043 0210 	orr.w	r2, r3, #16
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff fd6a 	bl	80059f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f38:	e025      	b.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d021      	beq.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fd fdd9 	bl	8003af8 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d116      	bne.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e023      	b.n	8005fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10d      	bne.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	43da      	mvns	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	e00c      	b.n	8005fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf0c      	ite	eq
 8005fbe:	2301      	moveq	r3, #1
 8005fc0:	2300      	movne	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d0b6      	beq.n	8005f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe4:	e051      	b.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d123      	bne.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800600e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f043 0204 	orr.w	r2, r3, #4
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e046      	b.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d021      	beq.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006046:	f7fd fd57 	bl	8003af8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d116      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e020      	b.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10c      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	43da      	mvns	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e00b      	b.n	80060c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	43da      	mvns	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d18d      	bne.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e0:	e02d      	b.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f8ce 	bl	8006284 <I2C_IsAcknowledgeFailed>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e02d      	b.n	800614e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d021      	beq.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fd fcfd 	bl	8003af8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e007      	b.n	800614e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d1ca      	bne.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006162:	e02d      	b.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f88d 	bl	8006284 <I2C_IsAcknowledgeFailed>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e02d      	b.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d021      	beq.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617c:	f7fd fcbc 	bl	8003af8 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d116      	bne.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	f043 0220 	orr.w	r2, r3, #32
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e007      	b.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d1ca      	bne.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061e4:	e042      	b.n	800626c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d119      	bne.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0210 	mvn.w	r2, #16
 80061fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e029      	b.n	800627c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fd fc66 	bl	8003af8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d116      	bne.n	800626c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e007      	b.n	800627c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d1b5      	bne.n	80061e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d11b      	bne.n	80062d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_PWR_EnableBkUpAccess+0x20>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <HAL_PWR_EnableBkUpAccess+0x24>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80062f6:	687b      	ldr	r3, [r7, #4]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	420e0020 	.word	0x420e0020
 8006308:	40007000 	.word	0x40007000

0800630c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_PWR_DisableBkUpAccess+0x20>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <HAL_PWR_DisableBkUpAccess+0x24>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800631e:	687b      	ldr	r3, [r7, #4]
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	420e0020 	.word	0x420e0020
 8006330:	40007000 	.word	0x40007000

08006334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e267      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d075      	beq.n	800643e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006352:	4b88      	ldr	r3, [pc, #544]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b04      	cmp	r3, #4
 800635c:	d00c      	beq.n	8006378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800635e:	4b85      	ldr	r3, [pc, #532]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006366:	2b08      	cmp	r3, #8
 8006368:	d112      	bne.n	8006390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800636a:	4b82      	ldr	r3, [pc, #520]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006376:	d10b      	bne.n	8006390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006378:	4b7e      	ldr	r3, [pc, #504]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d05b      	beq.n	800643c <HAL_RCC_OscConfig+0x108>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d157      	bne.n	800643c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e242      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d106      	bne.n	80063a8 <HAL_RCC_OscConfig+0x74>
 800639a:	4b76      	ldr	r3, [pc, #472]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e01d      	b.n	80063e4 <HAL_RCC_OscConfig+0xb0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b0:	d10c      	bne.n	80063cc <HAL_RCC_OscConfig+0x98>
 80063b2:	4b70      	ldr	r3, [pc, #448]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a6f      	ldr	r2, [pc, #444]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b6d      	ldr	r3, [pc, #436]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a6c      	ldr	r2, [pc, #432]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e00b      	b.n	80063e4 <HAL_RCC_OscConfig+0xb0>
 80063cc:	4b69      	ldr	r3, [pc, #420]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a68      	ldr	r2, [pc, #416]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	4b66      	ldr	r3, [pc, #408]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a65      	ldr	r2, [pc, #404]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80063de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d013      	beq.n	8006414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ec:	f7fd fb84 	bl	8003af8 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f4:	f7fd fb80 	bl	8003af8 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b64      	cmp	r3, #100	; 0x64
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e207      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b5b      	ldr	r3, [pc, #364]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0xc0>
 8006412:	e014      	b.n	800643e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006414:	f7fd fb70 	bl	8003af8 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800641c:	f7fd fb6c 	bl	8003af8 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	; 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e1f3      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642e:	4b51      	ldr	r3, [pc, #324]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0xe8>
 800643a:	e000      	b.n	800643e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d063      	beq.n	8006512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800644a:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006456:	4b47      	ldr	r3, [pc, #284]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800645e:	2b08      	cmp	r3, #8
 8006460:	d11c      	bne.n	800649c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006462:	4b44      	ldr	r3, [pc, #272]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d116      	bne.n	800649c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	4b41      	ldr	r3, [pc, #260]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x152>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e1c7      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006486:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4937      	ldr	r1, [pc, #220]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649a:	e03a      	b.n	8006512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d020      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a4:	4b34      	ldr	r3, [pc, #208]	; (8006578 <HAL_RCC_OscConfig+0x244>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064aa:	f7fd fb25 	bl	8003af8 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b2:	f7fd fb21 	bl	8003af8 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1a8      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4925      	ldr	r1, [pc, #148]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]
 80064e4:	e015      	b.n	8006512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_RCC_OscConfig+0x244>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fd fb04 	bl	8003af8 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f4:	f7fd fb00 	bl	8003af8 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e187      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d036      	beq.n	800658c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006526:	4b15      	ldr	r3, [pc, #84]	; (800657c <HAL_RCC_OscConfig+0x248>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fd fae4 	bl	8003af8 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006534:	f7fd fae0 	bl	8003af8 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e167      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x240>)
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x200>
 8006552:	e01b      	b.n	800658c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_OscConfig+0x248>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655a:	f7fd facd 	bl	8003af8 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006560:	e00e      	b.n	8006580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006562:	f7fd fac9 	bl	8003af8 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d907      	bls.n	8006580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e150      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
 8006574:	40023800 	.word	0x40023800
 8006578:	42470000 	.word	0x42470000
 800657c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006580:	4b88      	ldr	r3, [pc, #544]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ea      	bne.n	8006562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8097 	beq.w	80066c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800659e:	4b81      	ldr	r3, [pc, #516]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	4b7d      	ldr	r3, [pc, #500]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	4a7c      	ldr	r2, [pc, #496]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ba:	4b7a      	ldr	r3, [pc, #488]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	4b77      	ldr	r3, [pc, #476]	; (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d6:	4b74      	ldr	r3, [pc, #464]	; (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a73      	ldr	r2, [pc, #460]	; (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e2:	f7fd fa89 	bl	8003af8 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fd fa85 	bl	8003af8 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e10c      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b6a      	ldr	r3, [pc, #424]	; (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x2ea>
 8006610:	4b64      	ldr	r3, [pc, #400]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a63      	ldr	r2, [pc, #396]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
 800661c:	e01c      	b.n	8006658 <HAL_RCC_OscConfig+0x324>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b05      	cmp	r3, #5
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x30c>
 8006626:	4b5f      	ldr	r3, [pc, #380]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a5e      	ldr	r2, [pc, #376]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 800662c:	f043 0304 	orr.w	r3, r3, #4
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	4b5c      	ldr	r3, [pc, #368]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a5b      	ldr	r2, [pc, #364]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
 800663e:	e00b      	b.n	8006658 <HAL_RCC_OscConfig+0x324>
 8006640:	4b58      	ldr	r3, [pc, #352]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	4a57      	ldr	r2, [pc, #348]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6713      	str	r3, [r2, #112]	; 0x70
 800664c:	4b55      	ldr	r3, [pc, #340]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	4a54      	ldr	r2, [pc, #336]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006652:	f023 0304 	bic.w	r3, r3, #4
 8006656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fd fa4a 	bl	8003af8 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fd fa46 	bl	8003af8 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e0cb      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	4b49      	ldr	r3, [pc, #292]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0ee      	beq.n	8006668 <HAL_RCC_OscConfig+0x334>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668c:	f7fd fa34 	bl	8003af8 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006692:	e00a      	b.n	80066aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006694:	f7fd fa30 	bl	8003af8 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e0b5      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066aa:	4b3e      	ldr	r3, [pc, #248]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ee      	bne.n	8006694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066bc:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	4a38      	ldr	r2, [pc, #224]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80a1 	beq.w	8006814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d2:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d05c      	beq.n	8006798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d141      	bne.n	800676a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e6:	4b31      	ldr	r3, [pc, #196]	; (80067ac <HAL_RCC_OscConfig+0x478>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ec:	f7fd fa04 	bl	8003af8 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f4:	f7fd fa00 	bl	8003af8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e087      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f0      	bne.n	80066f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	3b01      	subs	r3, #1
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	061b      	lsls	r3, r3, #24
 8006736:	491b      	ldr	r1, [pc, #108]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <HAL_RCC_OscConfig+0x478>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006742:	f7fd f9d9 	bl	8003af8 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674a:	f7fd f9d5 	bl	8003af8 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e05c      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x416>
 8006768:	e054      	b.n	8006814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676a:	4b10      	ldr	r3, [pc, #64]	; (80067ac <HAL_RCC_OscConfig+0x478>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7fd f9c2 	bl	8003af8 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006778:	f7fd f9be 	bl	8003af8 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e045      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_OscConfig+0x470>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x444>
 8006796:	e03d      	b.n	8006814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e038      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40007000 	.word	0x40007000
 80067ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <HAL_RCC_OscConfig+0x4ec>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d028      	beq.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d121      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d11a      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d111      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	3b01      	subs	r3, #1
 80067fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d107      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40023800 	.word	0x40023800

08006824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0cc      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006838:	4b68      	ldr	r3, [pc, #416]	; (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d90c      	bls.n	8006860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006846:	4b65      	ldr	r3, [pc, #404]	; (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800684e:	4b63      	ldr	r3, [pc, #396]	; (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0b8      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d020      	beq.n	80068ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006878:	4b59      	ldr	r3, [pc, #356]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	4a58      	ldr	r2, [pc, #352]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006890:	4b53      	ldr	r3, [pc, #332]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4a52      	ldr	r2, [pc, #328]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800689a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800689c:	4b50      	ldr	r3, [pc, #320]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	494d      	ldr	r1, [pc, #308]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d044      	beq.n	8006944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d107      	bne.n	80068d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c2:	4b47      	ldr	r3, [pc, #284]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d119      	bne.n	8006902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e07f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d003      	beq.n	80068e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d107      	bne.n	80068f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e2:	4b3f      	ldr	r3, [pc, #252]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e06f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f2:	4b3b      	ldr	r3, [pc, #236]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e067      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006902:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f023 0203 	bic.w	r2, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4934      	ldr	r1, [pc, #208]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	4313      	orrs	r3, r2
 8006912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006914:	f7fd f8f0 	bl	8003af8 <HAL_GetTick>
 8006918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691a:	e00a      	b.n	8006932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800691c:	f7fd f8ec 	bl	8003af8 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	f241 3288 	movw	r2, #5000	; 0x1388
 800692a:	4293      	cmp	r3, r2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e04f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006932:	4b2b      	ldr	r3, [pc, #172]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 020c 	and.w	r2, r3, #12
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	429a      	cmp	r2, r3
 8006942:	d1eb      	bne.n	800691c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d20c      	bcs.n	800696c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006952:	4b22      	ldr	r3, [pc, #136]	; (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800695a:	4b20      	ldr	r3, [pc, #128]	; (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e032      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4916      	ldr	r1, [pc, #88]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	4313      	orrs	r3, r2
 8006988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	490e      	ldr	r1, [pc, #56]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069aa:	f000 f821 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	490a      	ldr	r1, [pc, #40]	; (80069e4 <HAL_RCC_ClockConfig+0x1c0>)
 80069bc:	5ccb      	ldrb	r3, [r1, r3]
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <HAL_RCC_ClockConfig+0x1c4>)
 80069c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCC_ClockConfig+0x1c8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd f850 	bl	8003a70 <HAL_InitTick>

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40023c00 	.word	0x40023c00
 80069e0:	40023800 	.word	0x40023800
 80069e4:	0800ec60 	.word	0x0800ec60
 80069e8:	20000004 	.word	0x20000004
 80069ec:	20000008 	.word	0x20000008

080069f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f4:	b090      	sub	sp, #64	; 0x40
 80069f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	637b      	str	r3, [r7, #52]	; 0x34
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	2300      	movs	r3, #0
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a08:	4b59      	ldr	r3, [pc, #356]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d00d      	beq.n	8006a30 <HAL_RCC_GetSysClockFreq+0x40>
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	f200 80a1 	bhi.w	8006b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_GetSysClockFreq+0x34>
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d003      	beq.n	8006a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a22:	e09b      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a24:	4b53      	ldr	r3, [pc, #332]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006a28:	e09b      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a2a:	4b53      	ldr	r3, [pc, #332]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a2e:	e098      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a30:	4b4f      	ldr	r3, [pc, #316]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a3a:	4b4d      	ldr	r3, [pc, #308]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d028      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a46:	4b4a      	ldr	r3, [pc, #296]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	099b      	lsrs	r3, r3, #6
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	627a      	str	r2, [r7, #36]	; 0x24
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4b47      	ldr	r3, [pc, #284]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a5c:	fb03 f201 	mul.w	r2, r3, r1
 8006a60:	2300      	movs	r3, #0
 8006a62:	fb00 f303 	mul.w	r3, r0, r3
 8006a66:	4413      	add	r3, r2
 8006a68:	4a43      	ldr	r2, [pc, #268]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8006a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a70:	460a      	mov	r2, r1
 8006a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a76:	4413      	add	r3, r2
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	61fa      	str	r2, [r7, #28]
 8006a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a8a:	f7fa f8fd 	bl	8000c88 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4613      	mov	r3, r2
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a96:	e053      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a98:	4b35      	ldr	r3, [pc, #212]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	099b      	lsrs	r3, r3, #6
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	617a      	str	r2, [r7, #20]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006aaa:	f04f 0b00 	mov.w	fp, #0
 8006aae:	4652      	mov	r2, sl
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f04f 0100 	mov.w	r1, #0
 8006aba:	0159      	lsls	r1, r3, #5
 8006abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac0:	0150      	lsls	r0, r2, #5
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8006aca:	eb63 090b 	sbc.w	r9, r3, fp
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8006ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	00eb      	lsls	r3, r5, #3
 8006af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006af8:	00e2      	lsls	r2, r4, #3
 8006afa:	4614      	mov	r4, r2
 8006afc:	461d      	mov	r5, r3
 8006afe:	eb14 030a 	adds.w	r3, r4, sl
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	eb45 030b 	adc.w	r3, r5, fp
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b16:	4629      	mov	r1, r5
 8006b18:	028b      	lsls	r3, r1, #10
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b20:	4621      	mov	r1, r4
 8006b22:	028a      	lsls	r2, r1, #10
 8006b24:	4610      	mov	r0, r2
 8006b26:	4619      	mov	r1, r3
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	60fa      	str	r2, [r7, #12]
 8006b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b34:	f7fa f8a8 	bl	8000c88 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b5a:	e002      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3740      	adds	r7, #64	; 0x40
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	00f42400 	.word	0x00f42400
 8006b78:	017d7840 	.word	0x017d7840

08006b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b80:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b82:	681b      	ldr	r3, [r3, #0]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000004 	.word	0x20000004

08006b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b98:	f7ff fff0 	bl	8006b7c <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	0a9b      	lsrs	r3, r3, #10
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4903      	ldr	r1, [pc, #12]	; (8006bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	0800ec70 	.word	0x0800ec70

08006bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bc0:	f7ff ffdc 	bl	8006b7c <HAL_RCC_GetHCLKFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	0b5b      	lsrs	r3, r3, #13
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	4903      	ldr	r1, [pc, #12]	; (8006be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	0800ec70 	.word	0x0800ec70

08006be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e041      	b.n	8006c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fc fcd2 	bl	80035b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f000 ff8a 	bl	8007b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e041      	b.n	8006d18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fc fb77 	bl	800339c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f000 ff3b 	bl	8007b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <HAL_TIM_PWM_Start+0x24>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e022      	b.n	8006d8a <HAL_TIM_PWM_Start+0x6a>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d109      	bne.n	8006d5e <HAL_TIM_PWM_Start+0x3e>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	bf14      	ite	ne
 8006d56:	2301      	movne	r3, #1
 8006d58:	2300      	moveq	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	e015      	b.n	8006d8a <HAL_TIM_PWM_Start+0x6a>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d109      	bne.n	8006d78 <HAL_TIM_PWM_Start+0x58>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	e008      	b.n	8006d8a <HAL_TIM_PWM_Start+0x6a>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	bf14      	ite	ne
 8006d84:	2301      	movne	r3, #1
 8006d86:	2300      	moveq	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e07c      	b.n	8006e8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_PWM_Start+0x82>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da0:	e013      	b.n	8006dca <HAL_TIM_PWM_Start+0xaa>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_PWM_Start+0x92>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db0:	e00b      	b.n	8006dca <HAL_TIM_PWM_Start+0xaa>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0xa2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc0:	e003      	b.n	8006dca <HAL_TIM_PWM_Start+0xaa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fac6 	bl	8008364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <HAL_TIM_PWM_Start+0x174>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIM_PWM_Start+0xcc>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2c      	ldr	r2, [pc, #176]	; (8006e98 <HAL_TIM_PWM_Start+0x178>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d101      	bne.n	8006df0 <HAL_TIM_PWM_Start+0xd0>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <HAL_TIM_PWM_Start+0xd2>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <HAL_TIM_PWM_Start+0x174>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d01d      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <HAL_TIM_PWM_Start+0x17c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_TIM_PWM_Start+0x180>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_TIM_PWM_Start+0x184>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <HAL_TIM_PWM_Start+0x178>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_TIM_PWM_Start+0x188>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x136>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_TIM_PWM_Start+0x18c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d111      	bne.n	8006e7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b06      	cmp	r3, #6
 8006e66:	d010      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e78:	e007      	b.n	8006e8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40010400 	.word	0x40010400
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40001800 	.word	0x40001800

08006eb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e041      	b.n	8006f46 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fc fb1c 	bl	8003514 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f000 fe24 	bl	8007b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_TIM_IC_Start_IT+0x1e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	e013      	b.n	8006f96 <HAL_TIM_IC_Start_IT+0x46>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_IC_Start_IT+0x2e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	e00b      	b.n	8006f96 <HAL_TIM_IC_Start_IT+0x46>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_IC_Start_IT+0x3e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	e003      	b.n	8006f96 <HAL_TIM_IC_Start_IT+0x46>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <HAL_TIM_IC_Start_IT+0x58>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	e013      	b.n	8006fd0 <HAL_TIM_IC_Start_IT+0x80>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d104      	bne.n	8006fb8 <HAL_TIM_IC_Start_IT+0x68>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e00b      	b.n	8006fd0 <HAL_TIM_IC_Start_IT+0x80>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d104      	bne.n	8006fc8 <HAL_TIM_IC_Start_IT+0x78>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	e003      	b.n	8006fd0 <HAL_TIM_IC_Start_IT+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d102      	bne.n	8006fde <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd8:	7b7b      	ldrb	r3, [r7, #13]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e0cc      	b.n	800717c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_IC_Start_IT+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff0:	e013      	b.n	800701a <HAL_TIM_IC_Start_IT+0xca>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_IC_Start_IT+0xb2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007000:	e00b      	b.n	800701a <HAL_TIM_IC_Start_IT+0xca>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d104      	bne.n	8007012 <HAL_TIM_IC_Start_IT+0xc2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007010:	e003      	b.n	800701a <HAL_TIM_IC_Start_IT+0xca>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <HAL_TIM_IC_Start_IT+0xda>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007028:	e013      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x102>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d104      	bne.n	800703a <HAL_TIM_IC_Start_IT+0xea>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007038:	e00b      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x102>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d104      	bne.n	800704a <HAL_TIM_IC_Start_IT+0xfa>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007048:	e003      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x102>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b0c      	cmp	r3, #12
 8007056:	d841      	bhi.n	80070dc <HAL_TIM_IC_Start_IT+0x18c>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <HAL_TIM_IC_Start_IT+0x110>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007095 	.word	0x08007095
 8007064:	080070dd 	.word	0x080070dd
 8007068:	080070dd 	.word	0x080070dd
 800706c:	080070dd 	.word	0x080070dd
 8007070:	080070a7 	.word	0x080070a7
 8007074:	080070dd 	.word	0x080070dd
 8007078:	080070dd 	.word	0x080070dd
 800707c:	080070dd 	.word	0x080070dd
 8007080:	080070b9 	.word	0x080070b9
 8007084:	080070dd 	.word	0x080070dd
 8007088:	080070dd 	.word	0x080070dd
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080070cb 	.word	0x080070cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0202 	orr.w	r2, r2, #2
 80070a2:	60da      	str	r2, [r3, #12]
      break;
 80070a4:	e01d      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0204 	orr.w	r2, r2, #4
 80070b4:	60da      	str	r2, [r3, #12]
      break;
 80070b6:	e014      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0208 	orr.w	r2, r2, #8
 80070c6:	60da      	str	r2, [r3, #12]
      break;
 80070c8:	e00b      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0210 	orr.w	r2, r2, #16
 80070d8:	60da      	str	r2, [r3, #12]
      break;
 80070da:	e002      	b.n	80070e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d148      	bne.n	800717a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2201      	movs	r2, #1
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 f937 	bl	8008364 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a22      	ldr	r2, [pc, #136]	; (8007184 <HAL_TIM_IC_Start_IT+0x234>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007108:	d01d      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <HAL_TIM_IC_Start_IT+0x238>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d018      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_IC_Start_IT+0x23c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_TIM_IC_Start_IT+0x240>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_TIM_IC_Start_IT+0x244>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d009      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_TIM_IC_Start_IT+0x248>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d004      	beq.n	8007146 <HAL_TIM_IC_Start_IT+0x1f6>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <HAL_TIM_IC_Start_IT+0x24c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d111      	bne.n	800716a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b06      	cmp	r3, #6
 8007156:	d010      	beq.n	800717a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007168:	e007      	b.n	800717a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40010400 	.word	0x40010400
 8007198:	40014000 	.word	0x40014000
 800719c:	40001800 	.word	0x40001800

080071a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e097      	b.n	80072e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fc f909 	bl	80033e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e4:	f023 0307 	bic.w	r3, r3, #7
 80071e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f000 fca1 	bl	8007b3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	4313      	orrs	r3, r2
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007240:	f023 030c 	bic.w	r3, r3, #12
 8007244:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800724c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	4313      	orrs	r3, r2
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	011a      	lsls	r2, r3, #4
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	031b      	lsls	r3, r3, #12
 8007270:	4313      	orrs	r3, r2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	4313      	orrs	r3, r2
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007304:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800730c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007314:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d110      	bne.n	800733e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d102      	bne.n	8007328 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007322:	7b7b      	ldrb	r3, [r7, #13]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d001      	beq.n	800732c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e069      	b.n	8007400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800733c:	e031      	b.n	80073a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b04      	cmp	r3, #4
 8007342:	d110      	bne.n	8007366 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d102      	bne.n	8007350 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800734a:	7b3b      	ldrb	r3, [r7, #12]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d001      	beq.n	8007354 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e055      	b.n	8007400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007364:	e01d      	b.n	80073a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d108      	bne.n	800737e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d105      	bne.n	800737e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007372:	7b7b      	ldrb	r3, [r7, #13]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d102      	bne.n	800737e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007378:	7b3b      	ldrb	r3, [r7, #12]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d001      	beq.n	8007382 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e03e      	b.n	8007400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_TIM_Encoder_Start+0xc4>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d008      	beq.n	80073c0 <HAL_TIM_Encoder_Start+0xd4>
 80073ae:	e00f      	b.n	80073d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2201      	movs	r2, #1
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 ffd3 	bl	8008364 <TIM_CCxChannelCmd>
      break;
 80073be:	e016      	b.n	80073ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2201      	movs	r2, #1
 80073c6:	2104      	movs	r1, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 ffcb 	bl	8008364 <TIM_CCxChannelCmd>
      break;
 80073ce:	e00e      	b.n	80073ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2201      	movs	r2, #1
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 ffc3 	bl	8008364 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	2104      	movs	r1, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 ffbc 	bl	8008364 <TIM_CCxChannelCmd>
      break;
 80073ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0201 	orr.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d122      	bne.n	8007464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11b      	bne.n	8007464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0202 	mvn.w	r2, #2
 8007434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa fab8 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fb54 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb5b 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b04      	cmp	r3, #4
 8007470:	d122      	bne.n	80074b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b04      	cmp	r3, #4
 800747e:	d11b      	bne.n	80074b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0204 	mvn.w	r2, #4
 8007488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fa fa8e 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fb2a 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fb31 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d122      	bne.n	800750c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d11b      	bne.n	800750c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0208 	mvn.w	r2, #8
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2204      	movs	r2, #4
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fa fa64 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb00 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb07 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b10      	cmp	r3, #16
 8007518:	d122      	bne.n	8007560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b10      	cmp	r3, #16
 8007526:	d11b      	bne.n	8007560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0210 	mvn.w	r2, #16
 8007530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2208      	movs	r2, #8
 8007536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fa fa3a 	bl	80019c0 <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fad6 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fadd 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b01      	cmp	r3, #1
 800756c:	d10e      	bne.n	800758c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b01      	cmp	r3, #1
 800757a:	d107      	bne.n	800758c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0201 	mvn.w	r2, #1
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fab0 	bl	8007aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a4:	2b80      	cmp	r3, #128	; 0x80
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 ffd4 	bl	8008560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 faa2 	bl	8007b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d107      	bne.n	8007610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0220 	mvn.w	r2, #32
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 ff9e 	bl	800854c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007632:	2302      	movs	r3, #2
 8007634:	e088      	b.n	8007748 <HAL_TIM_IC_ConfigChannel+0x130>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11b      	bne.n	800767c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6819      	ldr	r1, [r3, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f000 fcc2 	bl	8007fdc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 020c 	bic.w	r2, r2, #12
 8007666:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	619a      	str	r2, [r3, #24]
 800767a:	e060      	b.n	800773e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d11c      	bne.n	80076bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6819      	ldr	r1, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f000 fd46 	bl	8008122 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6999      	ldr	r1, [r3, #24]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	021a      	lsls	r2, r3, #8
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	619a      	str	r2, [r3, #24]
 80076ba:	e040      	b.n	800773e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d11b      	bne.n	80076fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6819      	ldr	r1, [r3, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f000 fd93 	bl	80081fc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 020c 	bic.w	r2, r2, #12
 80076e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69d9      	ldr	r1, [r3, #28]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	61da      	str	r2, [r3, #28]
 80076f8:	e021      	b.n	800773e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	d11c      	bne.n	800773a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6819      	ldr	r1, [r3, #0]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f000 fdb0 	bl	8008274 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69da      	ldr	r2, [r3, #28]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007722:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69d9      	ldr	r1, [r3, #28]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	021a      	lsls	r2, r3, #8
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	61da      	str	r2, [r3, #28]
 8007738:	e001      	b.n	800773e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800776a:	2302      	movs	r3, #2
 800776c:	e0ae      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b0c      	cmp	r3, #12
 800777a:	f200 809f 	bhi.w	80078bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077b9 	.word	0x080077b9
 8007788:	080078bd 	.word	0x080078bd
 800778c:	080078bd 	.word	0x080078bd
 8007790:	080078bd 	.word	0x080078bd
 8007794:	080077f9 	.word	0x080077f9
 8007798:	080078bd 	.word	0x080078bd
 800779c:	080078bd 	.word	0x080078bd
 80077a0:	080078bd 	.word	0x080078bd
 80077a4:	0800783b 	.word	0x0800783b
 80077a8:	080078bd 	.word	0x080078bd
 80077ac:	080078bd 	.word	0x080078bd
 80077b0:	080078bd 	.word	0x080078bd
 80077b4:	0800787b 	.word	0x0800787b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fa5c 	bl	8007c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0208 	orr.w	r2, r2, #8
 80077d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0204 	bic.w	r2, r2, #4
 80077e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6999      	ldr	r1, [r3, #24]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	619a      	str	r2, [r3, #24]
      break;
 80077f6:	e064      	b.n	80078c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 faac 	bl	8007d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6999      	ldr	r1, [r3, #24]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	021a      	lsls	r2, r3, #8
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	619a      	str	r2, [r3, #24]
      break;
 8007838:	e043      	b.n	80078c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fb01 	bl	8007e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0208 	orr.w	r2, r2, #8
 8007854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0204 	bic.w	r2, r2, #4
 8007864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	61da      	str	r2, [r3, #28]
      break;
 8007878:	e023      	b.n	80078c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fb55 	bl	8007f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69da      	ldr	r2, [r3, #28]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69d9      	ldr	r1, [r3, #28]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	021a      	lsls	r2, r3, #8
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	61da      	str	r2, [r3, #28]
      break;
 80078ba:	e002      	b.n	80078c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	75fb      	strb	r3, [r7, #23]
      break;
 80078c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d101      	bne.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e0b4      	b.n	8007a5a <HAL_TIM_ConfigClockSource+0x186>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800790e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007928:	d03e      	beq.n	80079a8 <HAL_TIM_ConfigClockSource+0xd4>
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792e:	f200 8087 	bhi.w	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007936:	f000 8086 	beq.w	8007a46 <HAL_TIM_ConfigClockSource+0x172>
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793e:	d87f      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007940:	2b70      	cmp	r3, #112	; 0x70
 8007942:	d01a      	beq.n	800797a <HAL_TIM_ConfigClockSource+0xa6>
 8007944:	2b70      	cmp	r3, #112	; 0x70
 8007946:	d87b      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007948:	2b60      	cmp	r3, #96	; 0x60
 800794a:	d050      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x11a>
 800794c:	2b60      	cmp	r3, #96	; 0x60
 800794e:	d877      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007950:	2b50      	cmp	r3, #80	; 0x50
 8007952:	d03c      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0xfa>
 8007954:	2b50      	cmp	r3, #80	; 0x50
 8007956:	d873      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d058      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x13a>
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d86f      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b30      	cmp	r3, #48	; 0x30
 8007962:	d064      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x15a>
 8007964:	2b30      	cmp	r3, #48	; 0x30
 8007966:	d86b      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b20      	cmp	r3, #32
 800796a:	d060      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x15a>
 800796c:	2b20      	cmp	r3, #32
 800796e:	d867      	bhi.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d05c      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x15a>
 8007974:	2b10      	cmp	r3, #16
 8007976:	d05a      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x15a>
 8007978:	e062      	b.n	8007a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6899      	ldr	r1, [r3, #8]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f000 fccb 	bl	8008324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800799c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	609a      	str	r2, [r3, #8]
      break;
 80079a6:	e04f      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f000 fcb4 	bl	8008324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ca:	609a      	str	r2, [r3, #8]
      break;
 80079cc:	e03c      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	461a      	mov	r2, r3
 80079dc:	f000 fb72 	bl	80080c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2150      	movs	r1, #80	; 0x50
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fc81 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 80079ec:	e02c      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 fbce 	bl	800819c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2160      	movs	r1, #96	; 0x60
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fc71 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e01c      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6859      	ldr	r1, [r3, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f000 fb52 	bl	80080c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2140      	movs	r1, #64	; 0x40
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fc61 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007a2c:	e00c      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f000 fc58 	bl	80082ee <TIM_ITRx_SetConfig>
      break;
 8007a3e:	e003      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	e000      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b0c      	cmp	r3, #12
 8007a76:	d831      	bhi.n	8007adc <HAL_TIM_ReadCapturedValue+0x78>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007add 	.word	0x08007add
 8007a8c:	08007add 	.word	0x08007add
 8007a90:	08007abf 	.word	0x08007abf
 8007a94:	08007add 	.word	0x08007add
 8007a98:	08007add 	.word	0x08007add
 8007a9c:	08007add 	.word	0x08007add
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007add 	.word	0x08007add
 8007aa8:	08007add 	.word	0x08007add
 8007aac:	08007add 	.word	0x08007add
 8007ab0:	08007ad3 	.word	0x08007ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	60fb      	str	r3, [r7, #12]

      break;
 8007abc:	e00f      	b.n	8007ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	60fb      	str	r3, [r7, #12]

      break;
 8007ac6:	e00a      	b.n	8007ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	60fb      	str	r3, [r7, #12]

      break;
 8007ad0:	e005      	b.n	8007ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	60fb      	str	r3, [r7, #12]

      break;
 8007ada:	e000      	b.n	8007ade <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007adc:	bf00      	nop
  }

  return tmpreg;
 8007ade:	68fb      	ldr	r3, [r7, #12]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a40      	ldr	r2, [pc, #256]	; (8007c50 <TIM_Base_SetConfig+0x114>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d013      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d00f      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a3d      	ldr	r2, [pc, #244]	; (8007c54 <TIM_Base_SetConfig+0x118>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a3c      	ldr	r2, [pc, #240]	; (8007c58 <TIM_Base_SetConfig+0x11c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d007      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a3b      	ldr	r2, [pc, #236]	; (8007c5c <TIM_Base_SetConfig+0x120>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a3a      	ldr	r2, [pc, #232]	; (8007c60 <TIM_Base_SetConfig+0x124>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d108      	bne.n	8007b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a2f      	ldr	r2, [pc, #188]	; (8007c50 <TIM_Base_SetConfig+0x114>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d02b      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9c:	d027      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2c      	ldr	r2, [pc, #176]	; (8007c54 <TIM_Base_SetConfig+0x118>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d023      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a2b      	ldr	r2, [pc, #172]	; (8007c58 <TIM_Base_SetConfig+0x11c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d01f      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2a      	ldr	r2, [pc, #168]	; (8007c5c <TIM_Base_SetConfig+0x120>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d01b      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a29      	ldr	r2, [pc, #164]	; (8007c60 <TIM_Base_SetConfig+0x124>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d017      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <TIM_Base_SetConfig+0x128>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <TIM_Base_SetConfig+0x12c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00f      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <TIM_Base_SetConfig+0x130>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00b      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <TIM_Base_SetConfig+0x134>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <TIM_Base_SetConfig+0x138>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <TIM_Base_SetConfig+0x13c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d108      	bne.n	8007c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a0a      	ldr	r2, [pc, #40]	; (8007c50 <TIM_Base_SetConfig+0x114>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_Base_SetConfig+0xf8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a0c      	ldr	r2, [pc, #48]	; (8007c60 <TIM_Base_SetConfig+0x124>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d103      	bne.n	8007c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	615a      	str	r2, [r3, #20]
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40010400 	.word	0x40010400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40014400 	.word	0x40014400
 8007c6c:	40014800 	.word	0x40014800
 8007c70:	40001800 	.word	0x40001800
 8007c74:	40001c00 	.word	0x40001c00
 8007c78:	40002000 	.word	0x40002000

08007c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0303 	bic.w	r3, r3, #3
 8007cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f023 0302 	bic.w	r3, r3, #2
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <TIM_OC1_SetConfig+0xd8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC1_SetConfig+0x64>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1f      	ldr	r2, [pc, #124]	; (8007d58 <TIM_OC1_SetConfig+0xdc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10c      	bne.n	8007cfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0308 	bic.w	r3, r3, #8
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f023 0304 	bic.w	r3, r3, #4
 8007cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <TIM_OC1_SetConfig+0xd8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d003      	beq.n	8007d0a <TIM_OC1_SetConfig+0x8e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <TIM_OC1_SetConfig+0xdc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d111      	bne.n	8007d2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40010400 	.word	0x40010400

08007d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	f023 0210 	bic.w	r2, r3, #16
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0320 	bic.w	r3, r3, #32
 8007da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <TIM_OC2_SetConfig+0xe4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC2_SetConfig+0x68>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <TIM_OC2_SetConfig+0xe8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d10d      	bne.n	8007de0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a17      	ldr	r2, [pc, #92]	; (8007e40 <TIM_OC2_SetConfig+0xe4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC2_SetConfig+0x94>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a16      	ldr	r2, [pc, #88]	; (8007e44 <TIM_OC2_SetConfig+0xe8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d113      	bne.n	8007e18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40010400 	.word	0x40010400

08007e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a21      	ldr	r2, [pc, #132]	; (8007f28 <TIM_OC3_SetConfig+0xe0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d003      	beq.n	8007eae <TIM_OC3_SetConfig+0x66>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a20      	ldr	r2, [pc, #128]	; (8007f2c <TIM_OC3_SetConfig+0xe4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d10d      	bne.n	8007eca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <TIM_OC3_SetConfig+0xe0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_OC3_SetConfig+0x92>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <TIM_OC3_SetConfig+0xe4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d113      	bne.n	8007f02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	621a      	str	r2, [r3, #32]
}
 8007f1c:	bf00      	nop
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	40010000 	.word	0x40010000
 8007f2c:	40010400 	.word	0x40010400

08007f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	031b      	lsls	r3, r3, #12
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a12      	ldr	r2, [pc, #72]	; (8007fd4 <TIM_OC4_SetConfig+0xa4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_OC4_SetConfig+0x68>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a11      	ldr	r2, [pc, #68]	; (8007fd8 <TIM_OC4_SetConfig+0xa8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d109      	bne.n	8007fac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	019b      	lsls	r3, r3, #6
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40010400 	.word	0x40010400

08007fdc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4a28      	ldr	r2, [pc, #160]	; (80080a8 <TIM_TI1_SetConfig+0xcc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d01b      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008010:	d017      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a25      	ldr	r2, [pc, #148]	; (80080ac <TIM_TI1_SetConfig+0xd0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a24      	ldr	r2, [pc, #144]	; (80080b0 <TIM_TI1_SetConfig+0xd4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00f      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4a23      	ldr	r2, [pc, #140]	; (80080b4 <TIM_TI1_SetConfig+0xd8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00b      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4a22      	ldr	r2, [pc, #136]	; (80080b8 <TIM_TI1_SetConfig+0xdc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d007      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <TIM_TI1_SetConfig+0xe0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d003      	beq.n	8008042 <TIM_TI1_SetConfig+0x66>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4a20      	ldr	r2, [pc, #128]	; (80080c0 <TIM_TI1_SetConfig+0xe4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d101      	bne.n	8008046 <TIM_TI1_SetConfig+0x6a>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <TIM_TI1_SetConfig+0x6c>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d008      	beq.n	800805e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4313      	orrs	r3, r2
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e003      	b.n	8008066 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800806c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	b2db      	uxtb	r3, r3
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f023 030a 	bic.w	r3, r3, #10
 8008080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f003 030a 	and.w	r3, r3, #10
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40010400 	.word	0x40010400
 80080bc:	40014000 	.word	0x40014000
 80080c0:	40001800 	.word	0x40001800

080080c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	f023 0201 	bic.w	r2, r3, #1
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f023 030a 	bic.w	r3, r3, #10
 8008100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008122:	b480      	push	{r7}
 8008124:	b087      	sub	sp, #28
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	f023 0210 	bic.w	r2, r3, #16
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	031b      	lsls	r3, r3, #12
 8008166:	b29b      	uxth	r3, r3
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008174:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	011b      	lsls	r3, r3, #4
 800817a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	621a      	str	r2, [r3, #32]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	f023 0210 	bic.w	r2, r3, #16
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	031b      	lsls	r3, r3, #12
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	621a      	str	r2, [r3, #32]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008238:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	b2db      	uxtb	r3, r3
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800824c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	621a      	str	r2, [r3, #32]
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	031b      	lsls	r3, r3, #12
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	031b      	lsls	r3, r3, #12
 80082cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	621a      	str	r2, [r3, #32]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	f043 0307 	orr.w	r3, r3, #7
 8008310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	609a      	str	r2, [r3, #8]
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800833e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	021a      	lsls	r2, r3, #8
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	431a      	orrs	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4313      	orrs	r3, r2
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	609a      	str	r2, [r3, #8]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2201      	movs	r2, #1
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1a      	ldr	r2, [r3, #32]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	43db      	mvns	r3, r3
 8008386:	401a      	ands	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a1a      	ldr	r2, [r3, #32]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	fa01 f303 	lsl.w	r3, r1, r3
 800839c:	431a      	orrs	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e05a      	b.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a21      	ldr	r2, [pc, #132]	; (800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d022      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008414:	d01d      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d018      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00e      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a18      	ldr	r2, [pc, #96]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d009      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a17      	ldr	r2, [pc, #92]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d004      	beq.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d10c      	bne.n	800846c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4313      	orrs	r3, r2
 8008462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40010000 	.word	0x40010000
 8008490:	40000400 	.word	0x40000400
 8008494:	40000800 	.word	0x40000800
 8008498:	40000c00 	.word	0x40000c00
 800849c:	40010400 	.word	0x40010400
 80084a0:	40014000 	.word	0x40014000
 80084a4:	40001800 	.word	0x40001800

080084a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d101      	bne.n	80084c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e03d      	b.n	8008540 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4313      	orrs	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e03f      	b.n	8008606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fb f8a2 	bl	80036e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2224      	movs	r2, #36	; 0x24
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fddf 	bl	800917c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695a      	ldr	r2, [r3, #20]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b08a      	sub	sp, #40	; 0x28
 8008612:	af02      	add	r7, sp, #8
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	603b      	str	r3, [r7, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b20      	cmp	r3, #32
 800862c:	d17c      	bne.n	8008728 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <HAL_UART_Transmit+0x2c>
 8008634:	88fb      	ldrh	r3, [r7, #6]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e075      	b.n	800872a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UART_Transmit+0x3e>
 8008648:	2302      	movs	r3, #2
 800864a:	e06e      	b.n	800872a <HAL_UART_Transmit+0x11c>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2221      	movs	r2, #33	; 0x21
 800865e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008662:	f7fb fa49 	bl	8003af8 <HAL_GetTick>
 8008666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	88fa      	ldrh	r2, [r7, #6]
 800866c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	88fa      	ldrh	r2, [r7, #6]
 8008672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867c:	d108      	bne.n	8008690 <HAL_UART_Transmit+0x82>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d104      	bne.n	8008690 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	e003      	b.n	8008698 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80086a0:	e02a      	b.n	80086f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fb1f 	bl	8008cf0 <UART_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e036      	b.n	800872a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	3302      	adds	r3, #2
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	e007      	b.n	80086ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	781a      	ldrb	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	3301      	adds	r3, #1
 80086e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1cf      	bne.n	80086a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2200      	movs	r2, #0
 800870a:	2140      	movs	r1, #64	; 0x40
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 faef 	bl	8008cf0 <UART_WaitOnFlagUntilTimeout>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e006      	b.n	800872a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	e000      	b.n	800872a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008728:	2302      	movs	r3, #2
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	4613      	mov	r3, r2
 800873e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b20      	cmp	r3, #32
 800874a:	d11d      	bne.n	8008788 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <HAL_UART_Receive_IT+0x26>
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e016      	b.n	800878a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_UART_Receive_IT+0x38>
 8008766:	2302      	movs	r3, #2
 8008768:	e00f      	b.n	800878a <HAL_UART_Receive_IT+0x58>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	461a      	mov	r2, r3
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fb24 	bl	8008dcc <UART_Start_Receive_IT>
 8008784:	4603      	mov	r3, r0
 8008786:	e000      	b.n	800878a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008788:	2302      	movs	r3, #2
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b0ba      	sub	sp, #232	; 0xe8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	f003 030f 	and.w	r3, r3, #15
 80087ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10f      	bne.n	80087fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <HAL_UART_IRQHandler+0x66>
 80087e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fc07 	bl	8009006 <UART_Receive_IT>
      return;
 80087f8:	e256      	b.n	8008ca8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80de 	beq.w	80089c0 <HAL_UART_IRQHandler+0x22c>
 8008804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80d1 	beq.w	80089c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <HAL_UART_IRQHandler+0xae>
 800882a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0201 	orr.w	r2, r3, #1
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00b      	beq.n	8008866 <HAL_UART_IRQHandler+0xd2>
 800884e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <HAL_UART_IRQHandler+0xf6>
 8008872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	f043 0204 	orr.w	r2, r3, #4
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800888a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d011      	beq.n	80088ba <HAL_UART_IRQHandler+0x126>
 8008896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d105      	bne.n	80088ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	f043 0208 	orr.w	r2, r3, #8
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 81ed 	beq.w	8008c9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_UART_IRQHandler+0x14e>
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d4:	f003 0320 	and.w	r3, r3, #32
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fb92 	bl	8009006 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	bf0c      	ite	eq
 80088f0:	2301      	moveq	r3, #1
 80088f2:	2300      	movne	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <HAL_UART_IRQHandler+0x17a>
 8008906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800890a:	2b00      	cmp	r3, #0
 800890c:	d04f      	beq.n	80089ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa9a 	bl	8008e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d141      	bne.n	80089a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3314      	adds	r3, #20
 8008928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800893c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3314      	adds	r3, #20
 800894a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800894e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800895a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1d9      	bne.n	8008922 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	2b00      	cmp	r3, #0
 8008974:	d013      	beq.n	800899e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	4a7d      	ldr	r2, [pc, #500]	; (8008b70 <HAL_UART_IRQHandler+0x3dc>)
 800897c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	4618      	mov	r0, r3
 8008984:	f7fb fdd2 	bl	800452c <HAL_DMA_Abort_IT>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d016      	beq.n	80089bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899c:	e00e      	b.n	80089bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f990 	bl	8008cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a4:	e00a      	b.n	80089bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f98c 	bl	8008cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ac:	e006      	b.n	80089bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f988 	bl	8008cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089ba:	e170      	b.n	8008c9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089bc:	bf00      	nop
    return;
 80089be:	e16e      	b.n	8008c9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	f040 814a 	bne.w	8008c5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ce:	f003 0310 	and.w	r3, r3, #16
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 8143 	beq.w	8008c5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 813c 	beq.w	8008c5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60bb      	str	r3, [r7, #8]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	60bb      	str	r3, [r7, #8]
 80089fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a06:	2b40      	cmp	r3, #64	; 0x40
 8008a08:	f040 80b4 	bne.w	8008b74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8140 	beq.w	8008ca2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	f080 8139 	bcs.w	8008ca2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a42:	f000 8088 	beq.w	8008b56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	330c      	adds	r3, #12
 8008a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	330c      	adds	r3, #12
 8008a6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1d9      	bne.n	8008a46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3314      	adds	r3, #20
 8008a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aa4:	f023 0301 	bic.w	r3, r3, #1
 8008aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3314      	adds	r3, #20
 8008ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008aba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e1      	bne.n	8008a92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3314      	adds	r3, #20
 8008ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3314      	adds	r3, #20
 8008aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e3      	bne.n	8008ace <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b38:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e3      	bne.n	8008b14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fb fc7b 	bl	800444c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f8b6 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b6c:	e099      	b.n	8008ca2 <HAL_UART_IRQHandler+0x50e>
 8008b6e:	bf00      	nop
 8008b70:	08008f0f 	.word	0x08008f0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 808b 	beq.w	8008ca6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8086 	beq.w	8008ca6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8008bc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e3      	bne.n	8008b9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3314      	adds	r3, #20
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	623b      	str	r3, [r7, #32]
   return(result);
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e3      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0310 	bic.w	r3, r3, #16
 8008c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c3c:	61fa      	str	r2, [r7, #28]
 8008c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	69b9      	ldr	r1, [r7, #24]
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e3      	bne.n	8008c18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f83e 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c5c:	e023      	b.n	8008ca6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <HAL_UART_IRQHandler+0x4ea>
 8008c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f95d 	bl	8008f36 <UART_Transmit_IT>
    return;
 8008c7c:	e014      	b.n	8008ca8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x514>
 8008c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d008      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f99d 	bl	8008fd6 <UART_EndTransmit_IT>
    return;
 8008c9c:	e004      	b.n	8008ca8 <HAL_UART_IRQHandler+0x514>
    return;
 8008c9e:	bf00      	nop
 8008ca0:	e002      	b.n	8008ca8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ca2:	bf00      	nop
 8008ca4:	e000      	b.n	8008ca8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ca6:	bf00      	nop
  }
}
 8008ca8:	37e8      	adds	r7, #232	; 0xe8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop

08008cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b090      	sub	sp, #64	; 0x40
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d00:	e050      	b.n	8008da4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d04c      	beq.n	8008da4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d10:	f7fa fef2 	bl	8003af8 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d241      	bcs.n	8008da4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d40:	637a      	str	r2, [r7, #52]	; 0x34
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e5      	bne.n	8008d20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3314      	adds	r3, #20
 8008d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	613b      	str	r3, [r7, #16]
   return(result);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f023 0301 	bic.w	r3, r3, #1
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3314      	adds	r3, #20
 8008d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d74:	623a      	str	r2, [r7, #32]
 8008d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	69f9      	ldr	r1, [r7, #28]
 8008d7a:	6a3a      	ldr	r2, [r7, #32]
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e5      	bne.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e00f      	b.n	8008dc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	4013      	ands	r3, r2
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	bf0c      	ite	eq
 8008db4:	2301      	moveq	r3, #1
 8008db6:	2300      	movne	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	461a      	mov	r2, r3
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d09f      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3740      	adds	r7, #64	; 0x40
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	88fa      	ldrh	r2, [r7, #6]
 8008de4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	88fa      	ldrh	r2, [r7, #6]
 8008dea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2222      	movs	r2, #34	; 0x22
 8008df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d007      	beq.n	8008e1a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695a      	ldr	r2, [r3, #20]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0201 	orr.w	r2, r2, #1
 8008e28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0220 	orr.w	r2, r2, #32
 8008e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b095      	sub	sp, #84	; 0x54
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	330c      	adds	r3, #12
 8008e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e70:	643a      	str	r2, [r7, #64]	; 0x40
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e5      	bne.n	8008e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f023 0301 	bic.w	r3, r3, #1
 8008e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3314      	adds	r3, #20
 8008ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e5      	bne.n	8008e84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d119      	bne.n	8008ef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	330c      	adds	r3, #12
 8008ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f023 0310 	bic.w	r3, r3, #16
 8008ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	330c      	adds	r3, #12
 8008ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee0:	61ba      	str	r2, [r7, #24]
 8008ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6979      	ldr	r1, [r7, #20]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	613b      	str	r3, [r7, #16]
   return(result);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e5      	bne.n	8008ec0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f02:	bf00      	nop
 8008f04:	3754      	adds	r7, #84	; 0x54
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff fecb 	bl	8008cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b21      	cmp	r3, #33	; 0x21
 8008f48:	d13e      	bne.n	8008fc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f52:	d114      	bne.n	8008f7e <UART_Transmit_IT+0x48>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d110      	bne.n	8008f7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	1c9a      	adds	r2, r3, #2
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	621a      	str	r2, [r3, #32]
 8008f7c:	e008      	b.n	8008f90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	1c59      	adds	r1, r3, #1
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6211      	str	r1, [r2, #32]
 8008f88:	781a      	ldrb	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10f      	bne.n	8008fc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e000      	b.n	8008fca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fc8:	2302      	movs	r3, #2
  }
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff fe5a 	bl	8008cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b08c      	sub	sp, #48	; 0x30
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b22      	cmp	r3, #34	; 0x22
 8009018:	f040 80ab 	bne.w	8009172 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009024:	d117      	bne.n	8009056 <UART_Receive_IT+0x50>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d113      	bne.n	8009056 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	b29b      	uxth	r3, r3
 8009040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009044:	b29a      	uxth	r2, r3
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904e:	1c9a      	adds	r2, r3, #2
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	629a      	str	r2, [r3, #40]	; 0x28
 8009054:	e026      	b.n	80090a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009068:	d007      	beq.n	800907a <UART_Receive_IT+0x74>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <UART_Receive_IT+0x82>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	e008      	b.n	800909a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009094:	b2da      	uxtb	r2, r3
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	4619      	mov	r1, r3
 80090b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d15a      	bne.n	800916e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0220 	bic.w	r2, r2, #32
 80090c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695a      	ldr	r2, [r3, #20]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0201 	bic.w	r2, r2, #1
 80090e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d135      	bne.n	8009164 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	330c      	adds	r3, #12
 8009104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	613b      	str	r3, [r7, #16]
   return(result);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f023 0310 	bic.w	r3, r3, #16
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	330c      	adds	r3, #12
 800911c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911e:	623a      	str	r2, [r7, #32]
 8009120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	69f9      	ldr	r1, [r7, #28]
 8009124:	6a3a      	ldr	r2, [r7, #32]
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	61bb      	str	r3, [r7, #24]
   return(result);
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e5      	bne.n	80090fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b10      	cmp	r3, #16
 800913e:	d10a      	bne.n	8009156 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fdbb 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
 8009162:	e002      	b.n	800916a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f8 fcbf 	bl	8001ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e002      	b.n	8009174 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e000      	b.n	8009174 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009172:	2302      	movs	r3, #2
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3730      	adds	r7, #48	; 0x30
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800917c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009180:	b0c0      	sub	sp, #256	; 0x100
 8009182:	af00      	add	r7, sp, #0
 8009184:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009198:	68d9      	ldr	r1, [r3, #12]
 800919a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	ea40 0301 	orr.w	r3, r0, r1
 80091a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	431a      	orrs	r2, r3
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091d4:	f021 010c 	bic.w	r1, r1, #12
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091e2:	430b      	orrs	r3, r1
 80091e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f6:	6999      	ldr	r1, [r3, #24]
 80091f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	ea40 0301 	orr.w	r3, r0, r1
 8009202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	4b8f      	ldr	r3, [pc, #572]	; (8009448 <UART_SetConfig+0x2cc>)
 800920c:	429a      	cmp	r2, r3
 800920e:	d005      	beq.n	800921c <UART_SetConfig+0xa0>
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b8d      	ldr	r3, [pc, #564]	; (800944c <UART_SetConfig+0x2d0>)
 8009218:	429a      	cmp	r2, r3
 800921a:	d104      	bne.n	8009226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800921c:	f7fd fcce 	bl	8006bbc <HAL_RCC_GetPCLK2Freq>
 8009220:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009224:	e003      	b.n	800922e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009226:	f7fd fcb5 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800922a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800922e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009238:	f040 810c 	bne.w	8009454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800923c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009240:	2200      	movs	r2, #0
 8009242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009246:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800924a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800924e:	4622      	mov	r2, r4
 8009250:	462b      	mov	r3, r5
 8009252:	1891      	adds	r1, r2, r2
 8009254:	65b9      	str	r1, [r7, #88]	; 0x58
 8009256:	415b      	adcs	r3, r3
 8009258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800925a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800925e:	4621      	mov	r1, r4
 8009260:	eb12 0801 	adds.w	r8, r2, r1
 8009264:	4629      	mov	r1, r5
 8009266:	eb43 0901 	adc.w	r9, r3, r1
 800926a:	f04f 0200 	mov.w	r2, #0
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800927a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800927e:	4690      	mov	r8, r2
 8009280:	4699      	mov	r9, r3
 8009282:	4623      	mov	r3, r4
 8009284:	eb18 0303 	adds.w	r3, r8, r3
 8009288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800928c:	462b      	mov	r3, r5
 800928e:	eb49 0303 	adc.w	r3, r9, r3
 8009292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092aa:	460b      	mov	r3, r1
 80092ac:	18db      	adds	r3, r3, r3
 80092ae:	653b      	str	r3, [r7, #80]	; 0x50
 80092b0:	4613      	mov	r3, r2
 80092b2:	eb42 0303 	adc.w	r3, r2, r3
 80092b6:	657b      	str	r3, [r7, #84]	; 0x54
 80092b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092c0:	f7f7 fce2 	bl	8000c88 <__aeabi_uldivmod>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4b61      	ldr	r3, [pc, #388]	; (8009450 <UART_SetConfig+0x2d4>)
 80092ca:	fba3 2302 	umull	r2, r3, r3, r2
 80092ce:	095b      	lsrs	r3, r3, #5
 80092d0:	011c      	lsls	r4, r3, #4
 80092d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092e4:	4642      	mov	r2, r8
 80092e6:	464b      	mov	r3, r9
 80092e8:	1891      	adds	r1, r2, r2
 80092ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80092ec:	415b      	adcs	r3, r3
 80092ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092f4:	4641      	mov	r1, r8
 80092f6:	eb12 0a01 	adds.w	sl, r2, r1
 80092fa:	4649      	mov	r1, r9
 80092fc:	eb43 0b01 	adc.w	fp, r3, r1
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800930c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009314:	4692      	mov	sl, r2
 8009316:	469b      	mov	fp, r3
 8009318:	4643      	mov	r3, r8
 800931a:	eb1a 0303 	adds.w	r3, sl, r3
 800931e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009322:	464b      	mov	r3, r9
 8009324:	eb4b 0303 	adc.w	r3, fp, r3
 8009328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009338:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800933c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009340:	460b      	mov	r3, r1
 8009342:	18db      	adds	r3, r3, r3
 8009344:	643b      	str	r3, [r7, #64]	; 0x40
 8009346:	4613      	mov	r3, r2
 8009348:	eb42 0303 	adc.w	r3, r2, r3
 800934c:	647b      	str	r3, [r7, #68]	; 0x44
 800934e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009356:	f7f7 fc97 	bl	8000c88 <__aeabi_uldivmod>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4611      	mov	r1, r2
 8009360:	4b3b      	ldr	r3, [pc, #236]	; (8009450 <UART_SetConfig+0x2d4>)
 8009362:	fba3 2301 	umull	r2, r3, r3, r1
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	2264      	movs	r2, #100	; 0x64
 800936a:	fb02 f303 	mul.w	r3, r2, r3
 800936e:	1acb      	subs	r3, r1, r3
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009376:	4b36      	ldr	r3, [pc, #216]	; (8009450 <UART_SetConfig+0x2d4>)
 8009378:	fba3 2302 	umull	r2, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009384:	441c      	add	r4, r3
 8009386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938a:	2200      	movs	r2, #0
 800938c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009390:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009398:	4642      	mov	r2, r8
 800939a:	464b      	mov	r3, r9
 800939c:	1891      	adds	r1, r2, r2
 800939e:	63b9      	str	r1, [r7, #56]	; 0x38
 80093a0:	415b      	adcs	r3, r3
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093a8:	4641      	mov	r1, r8
 80093aa:	1851      	adds	r1, r2, r1
 80093ac:	6339      	str	r1, [r7, #48]	; 0x30
 80093ae:	4649      	mov	r1, r9
 80093b0:	414b      	adcs	r3, r1
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093c0:	4659      	mov	r1, fp
 80093c2:	00cb      	lsls	r3, r1, #3
 80093c4:	4651      	mov	r1, sl
 80093c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ca:	4651      	mov	r1, sl
 80093cc:	00ca      	lsls	r2, r1, #3
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	4642      	mov	r2, r8
 80093d6:	189b      	adds	r3, r3, r2
 80093d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093dc:	464b      	mov	r3, r9
 80093de:	460a      	mov	r2, r1
 80093e0:	eb42 0303 	adc.w	r3, r2, r3
 80093e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093fc:	460b      	mov	r3, r1
 80093fe:	18db      	adds	r3, r3, r3
 8009400:	62bb      	str	r3, [r7, #40]	; 0x28
 8009402:	4613      	mov	r3, r2
 8009404:	eb42 0303 	adc.w	r3, r2, r3
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800940a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800940e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009412:	f7f7 fc39 	bl	8000c88 <__aeabi_uldivmod>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <UART_SetConfig+0x2d4>)
 800941c:	fba3 1302 	umull	r1, r3, r3, r2
 8009420:	095b      	lsrs	r3, r3, #5
 8009422:	2164      	movs	r1, #100	; 0x64
 8009424:	fb01 f303 	mul.w	r3, r1, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	3332      	adds	r3, #50	; 0x32
 800942e:	4a08      	ldr	r2, [pc, #32]	; (8009450 <UART_SetConfig+0x2d4>)
 8009430:	fba2 2303 	umull	r2, r3, r2, r3
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	f003 0207 	and.w	r2, r3, #7
 800943a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4422      	add	r2, r4
 8009442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009444:	e106      	b.n	8009654 <UART_SetConfig+0x4d8>
 8009446:	bf00      	nop
 8009448:	40011000 	.word	0x40011000
 800944c:	40011400 	.word	0x40011400
 8009450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009458:	2200      	movs	r2, #0
 800945a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800945e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009466:	4642      	mov	r2, r8
 8009468:	464b      	mov	r3, r9
 800946a:	1891      	adds	r1, r2, r2
 800946c:	6239      	str	r1, [r7, #32]
 800946e:	415b      	adcs	r3, r3
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
 8009472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009476:	4641      	mov	r1, r8
 8009478:	1854      	adds	r4, r2, r1
 800947a:	4649      	mov	r1, r9
 800947c:	eb43 0501 	adc.w	r5, r3, r1
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	00eb      	lsls	r3, r5, #3
 800948a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800948e:	00e2      	lsls	r2, r4, #3
 8009490:	4614      	mov	r4, r2
 8009492:	461d      	mov	r5, r3
 8009494:	4643      	mov	r3, r8
 8009496:	18e3      	adds	r3, r4, r3
 8009498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800949c:	464b      	mov	r3, r9
 800949e:	eb45 0303 	adc.w	r3, r5, r3
 80094a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094c2:	4629      	mov	r1, r5
 80094c4:	008b      	lsls	r3, r1, #2
 80094c6:	4621      	mov	r1, r4
 80094c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094cc:	4621      	mov	r1, r4
 80094ce:	008a      	lsls	r2, r1, #2
 80094d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094d4:	f7f7 fbd8 	bl	8000c88 <__aeabi_uldivmod>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4b60      	ldr	r3, [pc, #384]	; (8009660 <UART_SetConfig+0x4e4>)
 80094de:	fba3 2302 	umull	r2, r3, r3, r2
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	011c      	lsls	r4, r3, #4
 80094e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	61b9      	str	r1, [r7, #24]
 8009500:	415b      	adcs	r3, r3
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009508:	4641      	mov	r1, r8
 800950a:	1851      	adds	r1, r2, r1
 800950c:	6139      	str	r1, [r7, #16]
 800950e:	4649      	mov	r1, r9
 8009510:	414b      	adcs	r3, r1
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009520:	4659      	mov	r1, fp
 8009522:	00cb      	lsls	r3, r1, #3
 8009524:	4651      	mov	r1, sl
 8009526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800952a:	4651      	mov	r1, sl
 800952c:	00ca      	lsls	r2, r1, #3
 800952e:	4610      	mov	r0, r2
 8009530:	4619      	mov	r1, r3
 8009532:	4603      	mov	r3, r0
 8009534:	4642      	mov	r2, r8
 8009536:	189b      	adds	r3, r3, r2
 8009538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800953c:	464b      	mov	r3, r9
 800953e:	460a      	mov	r2, r1
 8009540:	eb42 0303 	adc.w	r3, r2, r3
 8009544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	67bb      	str	r3, [r7, #120]	; 0x78
 8009552:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009560:	4649      	mov	r1, r9
 8009562:	008b      	lsls	r3, r1, #2
 8009564:	4641      	mov	r1, r8
 8009566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800956a:	4641      	mov	r1, r8
 800956c:	008a      	lsls	r2, r1, #2
 800956e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009572:	f7f7 fb89 	bl	8000c88 <__aeabi_uldivmod>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4611      	mov	r1, r2
 800957c:	4b38      	ldr	r3, [pc, #224]	; (8009660 <UART_SetConfig+0x4e4>)
 800957e:	fba3 2301 	umull	r2, r3, r3, r1
 8009582:	095b      	lsrs	r3, r3, #5
 8009584:	2264      	movs	r2, #100	; 0x64
 8009586:	fb02 f303 	mul.w	r3, r2, r3
 800958a:	1acb      	subs	r3, r1, r3
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	3332      	adds	r3, #50	; 0x32
 8009590:	4a33      	ldr	r2, [pc, #204]	; (8009660 <UART_SetConfig+0x4e4>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800959c:	441c      	add	r4, r3
 800959e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a2:	2200      	movs	r2, #0
 80095a4:	673b      	str	r3, [r7, #112]	; 0x70
 80095a6:	677a      	str	r2, [r7, #116]	; 0x74
 80095a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	1891      	adds	r1, r2, r2
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	415b      	adcs	r3, r3
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095bc:	4641      	mov	r1, r8
 80095be:	1851      	adds	r1, r2, r1
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	4649      	mov	r1, r9
 80095c4:	414b      	adcs	r3, r1
 80095c6:	607b      	str	r3, [r7, #4]
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095d4:	4659      	mov	r1, fp
 80095d6:	00cb      	lsls	r3, r1, #3
 80095d8:	4651      	mov	r1, sl
 80095da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095de:	4651      	mov	r1, sl
 80095e0:	00ca      	lsls	r2, r1, #3
 80095e2:	4610      	mov	r0, r2
 80095e4:	4619      	mov	r1, r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	4642      	mov	r2, r8
 80095ea:	189b      	adds	r3, r3, r2
 80095ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80095ee:	464b      	mov	r3, r9
 80095f0:	460a      	mov	r2, r1
 80095f2:	eb42 0303 	adc.w	r3, r2, r3
 80095f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	663b      	str	r3, [r7, #96]	; 0x60
 8009602:	667a      	str	r2, [r7, #100]	; 0x64
 8009604:	f04f 0200 	mov.w	r2, #0
 8009608:	f04f 0300 	mov.w	r3, #0
 800960c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009610:	4649      	mov	r1, r9
 8009612:	008b      	lsls	r3, r1, #2
 8009614:	4641      	mov	r1, r8
 8009616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800961a:	4641      	mov	r1, r8
 800961c:	008a      	lsls	r2, r1, #2
 800961e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009622:	f7f7 fb31 	bl	8000c88 <__aeabi_uldivmod>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <UART_SetConfig+0x4e4>)
 800962c:	fba3 1302 	umull	r1, r3, r3, r2
 8009630:	095b      	lsrs	r3, r3, #5
 8009632:	2164      	movs	r1, #100	; 0x64
 8009634:	fb01 f303 	mul.w	r3, r1, r3
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	011b      	lsls	r3, r3, #4
 800963c:	3332      	adds	r3, #50	; 0x32
 800963e:	4a08      	ldr	r2, [pc, #32]	; (8009660 <UART_SetConfig+0x4e4>)
 8009640:	fba2 2303 	umull	r2, r3, r2, r3
 8009644:	095b      	lsrs	r3, r3, #5
 8009646:	f003 020f 	and.w	r2, r3, #15
 800964a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4422      	add	r2, r4
 8009652:	609a      	str	r2, [r3, #8]
}
 8009654:	bf00      	nop
 8009656:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800965a:	46bd      	mov	sp, r7
 800965c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009660:	51eb851f 	.word	0x51eb851f

08009664 <__NVIC_SetPriority>:
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009674:	2b00      	cmp	r3, #0
 8009676:	db0a      	blt.n	800968e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	b2da      	uxtb	r2, r3
 800967c:	490c      	ldr	r1, [pc, #48]	; (80096b0 <__NVIC_SetPriority+0x4c>)
 800967e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009682:	0112      	lsls	r2, r2, #4
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	440b      	add	r3, r1
 8009688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800968c:	e00a      	b.n	80096a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	b2da      	uxtb	r2, r3
 8009692:	4908      	ldr	r1, [pc, #32]	; (80096b4 <__NVIC_SetPriority+0x50>)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	3b04      	subs	r3, #4
 800969c:	0112      	lsls	r2, r2, #4
 800969e:	b2d2      	uxtb	r2, r2
 80096a0:	440b      	add	r3, r1
 80096a2:	761a      	strb	r2, [r3, #24]
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	e000e100 	.word	0xe000e100
 80096b4:	e000ed00 	.word	0xe000ed00

080096b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80096bc:	2100      	movs	r1, #0
 80096be:	f06f 0004 	mvn.w	r0, #4
 80096c2:	f7ff ffcf 	bl	8009664 <__NVIC_SetPriority>
#endif
}
 80096c6:	bf00      	nop
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096d2:	f3ef 8305 	mrs	r3, IPSR
 80096d6:	603b      	str	r3, [r7, #0]
  return(result);
 80096d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096de:	f06f 0305 	mvn.w	r3, #5
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	e00c      	b.n	8009700 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096e6:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <osKernelInitialize+0x44>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096ee:	4b08      	ldr	r3, [pc, #32]	; (8009710 <osKernelInitialize+0x44>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	e002      	b.n	8009700 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096fa:	f04f 33ff 	mov.w	r3, #4294967295
 80096fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009700:	687b      	ldr	r3, [r7, #4]
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000a14 	.word	0x20000a14

08009714 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800971a:	f3ef 8305 	mrs	r3, IPSR
 800971e:	603b      	str	r3, [r7, #0]
  return(result);
 8009720:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009726:	f06f 0305 	mvn.w	r3, #5
 800972a:	607b      	str	r3, [r7, #4]
 800972c:	e010      	b.n	8009750 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800972e:	4b0b      	ldr	r3, [pc, #44]	; (800975c <osKernelStart+0x48>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d109      	bne.n	800974a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009736:	f7ff ffbf 	bl	80096b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800973a:	4b08      	ldr	r3, [pc, #32]	; (800975c <osKernelStart+0x48>)
 800973c:	2202      	movs	r2, #2
 800973e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009740:	f001 f866 	bl	800a810 <vTaskStartScheduler>
      stat = osOK;
 8009744:	2300      	movs	r3, #0
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	e002      	b.n	8009750 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009750:	687b      	ldr	r3, [r7, #4]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000a14 	.word	0x20000a14

08009760 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009760:	b580      	push	{r7, lr}
 8009762:	b08e      	sub	sp, #56	; 0x38
 8009764:	af04      	add	r7, sp, #16
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800976c:	2300      	movs	r3, #0
 800976e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009770:	f3ef 8305 	mrs	r3, IPSR
 8009774:	617b      	str	r3, [r7, #20]
  return(result);
 8009776:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009778:	2b00      	cmp	r3, #0
 800977a:	d17e      	bne.n	800987a <osThreadNew+0x11a>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d07b      	beq.n	800987a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009782:	2380      	movs	r3, #128	; 0x80
 8009784:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009786:	2318      	movs	r3, #24
 8009788:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800978e:	f04f 33ff 	mov.w	r3, #4294967295
 8009792:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d045      	beq.n	8009826 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <osThreadNew+0x48>
        name = attr->name;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d008      	beq.n	80097ce <osThreadNew+0x6e>
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2b38      	cmp	r3, #56	; 0x38
 80097c0:	d805      	bhi.n	80097ce <osThreadNew+0x6e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <osThreadNew+0x72>
        return (NULL);
 80097ce:	2300      	movs	r3, #0
 80097d0:	e054      	b.n	800987c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	089b      	lsrs	r3, r3, #2
 80097e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <osThreadNew+0xa8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	2b5b      	cmp	r3, #91	; 0x5b
 80097f0:	d90a      	bls.n	8009808 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d006      	beq.n	8009808 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <osThreadNew+0xa8>
        mem = 1;
 8009802:	2301      	movs	r3, #1
 8009804:	61bb      	str	r3, [r7, #24]
 8009806:	e010      	b.n	800982a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10c      	bne.n	800982a <osThreadNew+0xca>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d108      	bne.n	800982a <osThreadNew+0xca>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d104      	bne.n	800982a <osThreadNew+0xca>
          mem = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e001      	b.n	800982a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d110      	bne.n	8009852 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009838:	9202      	str	r2, [sp, #8]
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	6a3a      	ldr	r2, [r7, #32]
 8009844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fe0c 	bl	800a464 <xTaskCreateStatic>
 800984c:	4603      	mov	r3, r0
 800984e:	613b      	str	r3, [r7, #16]
 8009850:	e013      	b.n	800987a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d110      	bne.n	800987a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	b29a      	uxth	r2, r3
 800985c:	f107 0310 	add.w	r3, r7, #16
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fe57 	bl	800a51e <xTaskCreate>
 8009870:	4603      	mov	r3, r0
 8009872:	2b01      	cmp	r3, #1
 8009874:	d001      	beq.n	800987a <osThreadNew+0x11a>
            hTask = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800987a:	693b      	ldr	r3, [r7, #16]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	; 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988c:	f3ef 8305 	mrs	r3, IPSR
 8009890:	60bb      	str	r3, [r7, #8]
  return(result);
 8009892:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <osDelay+0x1c>
    stat = osErrorISR;
 8009898:	f06f 0305 	mvn.w	r3, #5
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	e007      	b.n	80098b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 ff7c 	bl	800a7a8 <vTaskDelay>
    }
  }

  return (stat);
 80098b0:	68fb      	ldr	r3, [r7, #12]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4a07      	ldr	r2, [pc, #28]	; (80098e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80098cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4a06      	ldr	r2, [pc, #24]	; (80098ec <vApplicationGetIdleTaskMemory+0x30>)
 80098d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2280      	movs	r2, #128	; 0x80
 80098d8:	601a      	str	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	20000a18 	.word	0x20000a18
 80098ec:	20000a74 	.word	0x20000a74

080098f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4a07      	ldr	r2, [pc, #28]	; (800991c <vApplicationGetTimerTaskMemory+0x2c>)
 8009900:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4a06      	ldr	r2, [pc, #24]	; (8009920 <vApplicationGetTimerTaskMemory+0x30>)
 8009906:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800990e:	601a      	str	r2, [r3, #0]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	20000c74 	.word	0x20000c74
 8009920:	20000cd0 	.word	0x20000cd0

08009924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f103 0208 	add.w	r2, r3, #8
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f103 0208 	add.w	r2, r3, #8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f103 0208 	add.w	r2, r3, #8
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800997e:	b480      	push	{r7}
 8009980:	b085      	sub	sp, #20
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	601a      	str	r2, [r3, #0]
}
 80099ba:	bf00      	nop
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099c6:	b480      	push	{r7}
 80099c8:	b085      	sub	sp, #20
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d103      	bne.n	80099e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e00c      	b.n	8009a00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3308      	adds	r3, #8
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e002      	b.n	80099f4 <vListInsert+0x2e>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d2f6      	bcs.n	80099ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	601a      	str	r2, [r3, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	6892      	ldr	r2, [r2, #8]
 8009a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6852      	ldr	r2, [r2, #4]
 8009a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d103      	bne.n	8009a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	1e5a      	subs	r2, r3, #1
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ab6:	f002 f84d 	bl	800bb54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ac6:	fb01 f303 	mul.w	r3, r1, r3
 8009aca:	441a      	add	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	22ff      	movs	r2, #255	; 0xff
 8009afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	22ff      	movs	r2, #255	; 0xff
 8009b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d114      	bne.n	8009b36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01a      	beq.n	8009b4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3310      	adds	r3, #16
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 f903 	bl	800ad24 <xTaskRemoveFromEventList>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d012      	beq.n	8009b4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <xQueueGenericReset+0xcc>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	e009      	b.n	8009b4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3310      	adds	r3, #16
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fef2 	bl	8009924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3324      	adds	r3, #36	; 0x24
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff feed 	bl	8009924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b4a:	f002 f833 	bl	800bbb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b4e:	2301      	movs	r3, #1
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08e      	sub	sp, #56	; 0x38
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <xQueueGenericCreateStatic+0x52>
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <xQueueGenericCreateStatic+0x56>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e000      	b.n	8009bb4 <xQueueGenericCreateStatic+0x58>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	623b      	str	r3, [r7, #32]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <xQueueGenericCreateStatic+0x7e>
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <xQueueGenericCreateStatic+0x82>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e000      	b.n	8009be0 <xQueueGenericCreateStatic+0x84>
 8009bde:	2300      	movs	r3, #0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10a      	bne.n	8009bfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	61fb      	str	r3, [r7, #28]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bfa:	2350      	movs	r3, #80	; 0x50
 8009bfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b50      	cmp	r3, #80	; 0x50
 8009c02:	d00a      	beq.n	8009c1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	61bb      	str	r3, [r7, #24]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00d      	beq.n	8009c42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	68b9      	ldr	r1, [r7, #8]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 f805 	bl	8009c4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3730      	adds	r7, #48	; 0x30
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d103      	bne.n	8009c68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	e002      	b.n	8009c6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	69b8      	ldr	r0, [r7, #24]
 8009c7e:	f7ff ff05 	bl	8009a8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08e      	sub	sp, #56	; 0x38
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericSend+0x32>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <xQueueGenericSend+0x40>
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <xQueueGenericSend+0x44>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e000      	b.n	8009cda <xQueueGenericSend+0x46>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <xQueueGenericSend+0x60>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d103      	bne.n	8009d02 <xQueueGenericSend+0x6e>
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d101      	bne.n	8009d06 <xQueueGenericSend+0x72>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <xQueueGenericSend+0x74>
 8009d06:	2300      	movs	r3, #0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	623b      	str	r3, [r7, #32]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d22:	f001 f9bd 	bl	800b0a0 <xTaskGetSchedulerState>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <xQueueGenericSend+0x9e>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <xQueueGenericSend+0xa2>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <xQueueGenericSend+0xa4>
 8009d36:	2300      	movs	r3, #0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10a      	bne.n	8009d52 <xQueueGenericSend+0xbe>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	61fb      	str	r3, [r7, #28]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d52:	f001 feff 	bl	800bb54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d302      	bcc.n	8009d68 <xQueueGenericSend+0xd4>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d129      	bne.n	8009dbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d6e:	f000 fa0b 	bl	800a188 <prvCopyDataToQueue>
 8009d72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d010      	beq.n	8009d9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	3324      	adds	r3, #36	; 0x24
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 ffcf 	bl	800ad24 <xTaskRemoveFromEventList>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d013      	beq.n	8009db4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d8c:	4b3f      	ldr	r3, [pc, #252]	; (8009e8c <xQueueGenericSend+0x1f8>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	e00a      	b.n	8009db4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009da4:	4b39      	ldr	r3, [pc, #228]	; (8009e8c <xQueueGenericSend+0x1f8>)
 8009da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009db4:	f001 fefe 	bl	800bbb4 <vPortExitCritical>
				return pdPASS;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e063      	b.n	8009e84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dc2:	f001 fef7 	bl	800bbb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e05c      	b.n	8009e84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d106      	bne.n	8009dde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dd0:	f107 0314 	add.w	r3, r7, #20
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 f809 	bl	800adec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dde:	f001 fee9 	bl	800bbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009de2:	f000 fd7b 	bl	800a8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009de6:	f001 feb5 	bl	800bb54 <vPortEnterCritical>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df6:	d103      	bne.n	8009e00 <xQueueGenericSend+0x16c>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e06:	b25b      	sxtb	r3, r3
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d103      	bne.n	8009e16 <xQueueGenericSend+0x182>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e16:	f001 fecd 	bl	800bbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e1a:	1d3a      	adds	r2, r7, #4
 8009e1c:	f107 0314 	add.w	r3, r7, #20
 8009e20:	4611      	mov	r1, r2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fff8 	bl	800ae18 <xTaskCheckForTimeOut>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d124      	bne.n	8009e78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e30:	f000 faa2 	bl	800a378 <prvIsQueueFull>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d018      	beq.n	8009e6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 ff1e 	bl	800ac84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e4a:	f000 fa2d 	bl	800a2a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e4e:	f000 fd53 	bl	800a8f8 <xTaskResumeAll>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f47f af7c 	bne.w	8009d52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <xQueueGenericSend+0x1f8>)
 8009e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	e772      	b.n	8009d52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e6e:	f000 fa1b 	bl	800a2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e72:	f000 fd41 	bl	800a8f8 <xTaskResumeAll>
 8009e76:	e76c      	b.n	8009d52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e7a:	f000 fa15 	bl	800a2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e7e:	f000 fd3b 	bl	800a8f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3738      	adds	r7, #56	; 0x38
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	e000ed04 	.word	0xe000ed04

08009e90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b090      	sub	sp, #64	; 0x40
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d103      	bne.n	8009ecc <xQueueGenericSendFromISR+0x3c>
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <xQueueGenericSendFromISR+0x40>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e000      	b.n	8009ed2 <xQueueGenericSendFromISR+0x42>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10a      	bne.n	8009eec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d103      	bne.n	8009efa <xQueueGenericSendFromISR+0x6a>
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d101      	bne.n	8009efe <xQueueGenericSendFromISR+0x6e>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <xQueueGenericSendFromISR+0x70>
 8009efe:	2300      	movs	r3, #0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	623b      	str	r3, [r7, #32]
}
 8009f16:	bf00      	nop
 8009f18:	e7fe      	b.n	8009f18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f1a:	f001 fefd 	bl	800bd18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	61fa      	str	r2, [r7, #28]
 8009f34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d302      	bcc.n	8009f4c <xQueueGenericSendFromISR+0xbc>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d12f      	bne.n	8009fac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f62:	f000 f911 	bl	800a188 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6e:	d112      	bne.n	8009f96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d016      	beq.n	8009fa6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	3324      	adds	r3, #36	; 0x24
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fed1 	bl	800ad24 <xTaskRemoveFromEventList>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00b      	beq.n	8009fa6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e007      	b.n	8009fa6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	b25a      	sxtb	r2, r3
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009faa:	e001      	b.n	8009fb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3740      	adds	r7, #64	; 0x40
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08c      	sub	sp, #48	; 0x30
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <xQueueReceive+0x30>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	623b      	str	r3, [r7, #32]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d103      	bne.n	800a006 <xQueueReceive+0x3e>
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <xQueueReceive+0x42>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueReceive+0x44>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueReceive+0x5e>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	61fb      	str	r3, [r7, #28]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a026:	f001 f83b 	bl	800b0a0 <xTaskGetSchedulerState>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <xQueueReceive+0x6e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <xQueueReceive+0x72>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <xQueueReceive+0x74>
 800a03a:	2300      	movs	r3, #0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueReceive+0x8e>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	61bb      	str	r3, [r7, #24]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a056:	f001 fd7d 	bl	800bb54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01f      	beq.n	800a0a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a06a:	f000 f8f7 	bl	800a25c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	1e5a      	subs	r2, r3, #1
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00f      	beq.n	800a09e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	3310      	adds	r3, #16
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fe4e 	bl	800ad24 <xTaskRemoveFromEventList>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a08e:	4b3d      	ldr	r3, [pc, #244]	; (800a184 <xQueueReceive+0x1bc>)
 800a090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a09e:	f001 fd89 	bl	800bbb4 <vPortExitCritical>
				return pdPASS;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e069      	b.n	800a17a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ac:	f001 fd82 	bl	800bbb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	e062      	b.n	800a17a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ba:	f107 0310 	add.w	r3, r7, #16
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fe94 	bl	800adec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0c8:	f001 fd74 	bl	800bbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0cc:	f000 fc06 	bl	800a8dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0d0:	f001 fd40 	bl	800bb54 <vPortEnterCritical>
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0da:	b25b      	sxtb	r3, r3
 800a0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e0:	d103      	bne.n	800a0ea <xQueueReceive+0x122>
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0f0:	b25b      	sxtb	r3, r3
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f6:	d103      	bne.n	800a100 <xQueueReceive+0x138>
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a100:	f001 fd58 	bl	800bbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a104:	1d3a      	adds	r2, r7, #4
 800a106:	f107 0310 	add.w	r3, r7, #16
 800a10a:	4611      	mov	r1, r2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 fe83 	bl	800ae18 <xTaskCheckForTimeOut>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d123      	bne.n	800a160 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a11a:	f000 f917 	bl	800a34c <prvIsQueueEmpty>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d017      	beq.n	800a154 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	3324      	adds	r3, #36	; 0x24
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fda9 	bl	800ac84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a134:	f000 f8b8 	bl	800a2a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a138:	f000 fbde 	bl	800a8f8 <xTaskResumeAll>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d189      	bne.n	800a056 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a142:	4b10      	ldr	r3, [pc, #64]	; (800a184 <xQueueReceive+0x1bc>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	e780      	b.n	800a056 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a156:	f000 f8a7 	bl	800a2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a15a:	f000 fbcd 	bl	800a8f8 <xTaskResumeAll>
 800a15e:	e77a      	b.n	800a056 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a162:	f000 f8a1 	bl	800a2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a166:	f000 fbc7 	bl	800a8f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a16a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16c:	f000 f8ee 	bl	800a34c <prvIsQueueEmpty>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	f43f af6f 	beq.w	800a056 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a178:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3730      	adds	r7, #48	; 0x30
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	e000ed04 	.word	0xe000ed04

0800a188 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10d      	bne.n	800a1c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d14d      	bne.n	800a24a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 ff92 	bl	800b0dc <xTaskPriorityDisinherit>
 800a1b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	609a      	str	r2, [r3, #8]
 800a1c0:	e043      	b.n	800a24a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d119      	bne.n	800a1fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6858      	ldr	r0, [r3, #4]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	68b9      	ldr	r1, [r7, #8]
 800a1d4:	f002 fdb5 	bl	800cd42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d32b      	bcc.n	800a24a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	605a      	str	r2, [r3, #4]
 800a1fa:	e026      	b.n	800a24a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68d8      	ldr	r0, [r3, #12]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	461a      	mov	r2, r3
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	f002 fd9b 	bl	800cd42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	68da      	ldr	r2, [r3, #12]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a214:	425b      	negs	r3, r3
 800a216:	441a      	add	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	429a      	cmp	r2, r3
 800a226:	d207      	bcs.n	800a238 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	425b      	negs	r3, r3
 800a232:	441a      	add	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d105      	bne.n	800a24a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	3b01      	subs	r3, #1
 800a248:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a252:	697b      	ldr	r3, [r7, #20]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d018      	beq.n	800a2a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a276:	441a      	add	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68da      	ldr	r2, [r3, #12]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	429a      	cmp	r2, r3
 800a286:	d303      	bcc.n	800a290 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68d9      	ldr	r1, [r3, #12]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a298:	461a      	mov	r2, r3
 800a29a:	6838      	ldr	r0, [r7, #0]
 800a29c:	f002 fd51 	bl	800cd42 <memcpy>
	}
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2b0:	f001 fc50 	bl	800bb54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2bc:	e011      	b.n	800a2e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d012      	beq.n	800a2ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3324      	adds	r3, #36	; 0x24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 fd2a 	bl	800ad24 <xTaskRemoveFromEventList>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2d6:	f000 fe01 	bl	800aedc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	dce9      	bgt.n	800a2be <prvUnlockQueue+0x16>
 800a2ea:	e000      	b.n	800a2ee <prvUnlockQueue+0x46>
					break;
 800a2ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	22ff      	movs	r2, #255	; 0xff
 800a2f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2f6:	f001 fc5d 	bl	800bbb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2fa:	f001 fc2b 	bl	800bb54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a304:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a306:	e011      	b.n	800a32c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d012      	beq.n	800a336 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3310      	adds	r3, #16
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fd05 	bl	800ad24 <xTaskRemoveFromEventList>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a320:	f000 fddc 	bl	800aedc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a324:	7bbb      	ldrb	r3, [r7, #14]
 800a326:	3b01      	subs	r3, #1
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a330:	2b00      	cmp	r3, #0
 800a332:	dce9      	bgt.n	800a308 <prvUnlockQueue+0x60>
 800a334:	e000      	b.n	800a338 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a336:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	22ff      	movs	r2, #255	; 0xff
 800a33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a340:	f001 fc38 	bl	800bbb4 <vPortExitCritical>
}
 800a344:	bf00      	nop
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a354:	f001 fbfe 	bl	800bb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d102      	bne.n	800a366 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e001      	b.n	800a36a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a36a:	f001 fc23 	bl	800bbb4 <vPortExitCritical>

	return xReturn;
 800a36e:	68fb      	ldr	r3, [r7, #12]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a380:	f001 fbe8 	bl	800bb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d102      	bne.n	800a396 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a390:	2301      	movs	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e001      	b.n	800a39a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a39a:	f001 fc0b 	bl	800bbb4 <vPortExitCritical>

	return xReturn;
 800a39e:	68fb      	ldr	r3, [r7, #12]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	e014      	b.n	800a3e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3b8:	4a0f      	ldr	r2, [pc, #60]	; (800a3f8 <vQueueAddToRegistry+0x50>)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10b      	bne.n	800a3dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3c4:	490c      	ldr	r1, [pc, #48]	; (800a3f8 <vQueueAddToRegistry+0x50>)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3ce:	4a0a      	ldr	r2, [pc, #40]	; (800a3f8 <vQueueAddToRegistry+0x50>)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3da:	e006      	b.n	800a3ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b07      	cmp	r3, #7
 800a3e6:	d9e7      	bls.n	800a3b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	200010d0 	.word	0x200010d0

0800a3fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a40c:	f001 fba2 	bl	800bb54 <vPortEnterCritical>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a416:	b25b      	sxtb	r3, r3
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41c:	d103      	bne.n	800a426 <vQueueWaitForMessageRestricted+0x2a>
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a432:	d103      	bne.n	800a43c <vQueueWaitForMessageRestricted+0x40>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a43c:	f001 fbba 	bl	800bbb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	2b00      	cmp	r3, #0
 800a446:	d106      	bne.n	800a456 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	3324      	adds	r3, #36	; 0x24
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 fc3b 	bl	800accc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a456:	6978      	ldr	r0, [r7, #20]
 800a458:	f7ff ff26 	bl	800a2a8 <prvUnlockQueue>
	}
 800a45c:	bf00      	nop
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08e      	sub	sp, #56	; 0x38
 800a468:	af04      	add	r7, sp, #16
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	623b      	str	r3, [r7, #32]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xTaskCreateStatic+0x46>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	61fb      	str	r3, [r7, #28]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4aa:	235c      	movs	r3, #92	; 0x5c
 800a4ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a4b2:	d00a      	beq.n	800a4ca <xTaskCreateStatic+0x66>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61bb      	str	r3, [r7, #24]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d01e      	beq.n	800a510 <xTaskCreateStatic+0xac>
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01b      	beq.n	800a510 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9303      	str	r3, [sp, #12]
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	9302      	str	r3, [sp, #8]
 800a4f2:	f107 0314 	add.w	r3, r7, #20
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f850 	bl	800a5a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a50a:	f000 f8dd 	bl	800a6c8 <prvAddNewTaskToReadyList>
 800a50e:	e001      	b.n	800a514 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a514:	697b      	ldr	r3, [r7, #20]
	}
 800a516:	4618      	mov	r0, r3
 800a518:	3728      	adds	r7, #40	; 0x28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b08c      	sub	sp, #48	; 0x30
 800a522:	af04      	add	r7, sp, #16
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	603b      	str	r3, [r7, #0]
 800a52a:	4613      	mov	r3, r2
 800a52c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4618      	mov	r0, r3
 800a534:	f001 fc30 	bl	800bd98 <pvPortMalloc>
 800a538:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00e      	beq.n	800a55e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a540:	205c      	movs	r0, #92	; 0x5c
 800a542:	f001 fc29 	bl	800bd98 <pvPortMalloc>
 800a546:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	631a      	str	r2, [r3, #48]	; 0x30
 800a554:	e005      	b.n	800a562 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f001 fcea 	bl	800bf30 <vPortFree>
 800a55c:	e001      	b.n	800a562 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d017      	beq.n	800a598 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a570:	88fa      	ldrh	r2, [r7, #6]
 800a572:	2300      	movs	r3, #0
 800a574:	9303      	str	r3, [sp, #12]
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 f80e 	bl	800a5a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a58c:	69f8      	ldr	r0, [r7, #28]
 800a58e:	f000 f89b 	bl	800a6c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a592:	2301      	movs	r3, #1
 800a594:	61bb      	str	r3, [r7, #24]
 800a596:	e002      	b.n	800a59e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a598:	f04f 33ff 	mov.w	r3, #4294967295
 800a59c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a59e:	69bb      	ldr	r3, [r7, #24]
	}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	461a      	mov	r2, r3
 800a5c0:	21a5      	movs	r1, #165	; 0xa5
 800a5c2:	f002 fb3e 	bl	800cc42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	f023 0307 	bic.w	r3, r3, #7
 800a5de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	617b      	str	r3, [r7, #20]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d01f      	beq.n	800a646 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a606:	2300      	movs	r3, #0
 800a608:	61fb      	str	r3, [r7, #28]
 800a60a:	e012      	b.n	800a632 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	4413      	add	r3, r2
 800a612:	7819      	ldrb	r1, [r3, #0]
 800a614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	4413      	add	r3, r2
 800a61a:	3334      	adds	r3, #52	; 0x34
 800a61c:	460a      	mov	r2, r1
 800a61e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	4413      	add	r3, r2
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d006      	beq.n	800a63a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	3301      	adds	r3, #1
 800a630:	61fb      	str	r3, [r7, #28]
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	2b0f      	cmp	r3, #15
 800a636:	d9e9      	bls.n	800a60c <prvInitialiseNewTask+0x64>
 800a638:	e000      	b.n	800a63c <prvInitialiseNewTask+0x94>
			{
				break;
 800a63a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a644:	e003      	b.n	800a64e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	2b37      	cmp	r3, #55	; 0x37
 800a652:	d901      	bls.n	800a658 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a654:	2337      	movs	r3, #55	; 0x37
 800a656:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a65c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a662:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	2200      	movs	r2, #0
 800a668:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	3304      	adds	r3, #4
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff f978 	bl	8009964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	3318      	adds	r3, #24
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff f973 	bl	8009964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a682:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a692:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	2200      	movs	r2, #0
 800a698:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	68f9      	ldr	r1, [r7, #12]
 800a6a6:	69b8      	ldr	r0, [r7, #24]
 800a6a8:	f001 f928 	bl	800b8fc <pxPortInitialiseStack>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6be:	bf00      	nop
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6d0:	f001 fa40 	bl	800bb54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6d4:	4b2d      	ldr	r3, [pc, #180]	; (800a78c <prvAddNewTaskToReadyList+0xc4>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	4a2c      	ldr	r2, [pc, #176]	; (800a78c <prvAddNewTaskToReadyList+0xc4>)
 800a6dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6de:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <prvAddNewTaskToReadyList+0xc8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d109      	bne.n	800a6fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <prvAddNewTaskToReadyList+0xc8>)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6ec:	4b27      	ldr	r3, [pc, #156]	; (800a78c <prvAddNewTaskToReadyList+0xc4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d110      	bne.n	800a716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6f4:	f000 fc16 	bl	800af24 <prvInitialiseTaskLists>
 800a6f8:	e00d      	b.n	800a716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6fa:	4b26      	ldr	r3, [pc, #152]	; (800a794 <prvAddNewTaskToReadyList+0xcc>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a702:	4b23      	ldr	r3, [pc, #140]	; (800a790 <prvAddNewTaskToReadyList+0xc8>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d802      	bhi.n	800a716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a710:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <prvAddNewTaskToReadyList+0xc8>)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a716:	4b20      	ldr	r3, [pc, #128]	; (800a798 <prvAddNewTaskToReadyList+0xd0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3301      	adds	r3, #1
 800a71c:	4a1e      	ldr	r2, [pc, #120]	; (800a798 <prvAddNewTaskToReadyList+0xd0>)
 800a71e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a720:	4b1d      	ldr	r3, [pc, #116]	; (800a798 <prvAddNewTaskToReadyList+0xd0>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72c:	4b1b      	ldr	r3, [pc, #108]	; (800a79c <prvAddNewTaskToReadyList+0xd4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d903      	bls.n	800a73c <prvAddNewTaskToReadyList+0x74>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	4a18      	ldr	r2, [pc, #96]	; (800a79c <prvAddNewTaskToReadyList+0xd4>)
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4a15      	ldr	r2, [pc, #84]	; (800a7a0 <prvAddNewTaskToReadyList+0xd8>)
 800a74a:	441a      	add	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3304      	adds	r3, #4
 800a750:	4619      	mov	r1, r3
 800a752:	4610      	mov	r0, r2
 800a754:	f7ff f913 	bl	800997e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a758:	f001 fa2c 	bl	800bbb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a75c:	4b0d      	ldr	r3, [pc, #52]	; (800a794 <prvAddNewTaskToReadyList+0xcc>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00e      	beq.n	800a782 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a764:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <prvAddNewTaskToReadyList+0xc8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	429a      	cmp	r2, r3
 800a770:	d207      	bcs.n	800a782 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <prvAddNewTaskToReadyList+0xdc>)
 800a774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	200015e4 	.word	0x200015e4
 800a790:	20001110 	.word	0x20001110
 800a794:	200015f0 	.word	0x200015f0
 800a798:	20001600 	.word	0x20001600
 800a79c:	200015ec 	.word	0x200015ec
 800a7a0:	20001114 	.word	0x20001114
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d017      	beq.n	800a7ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7ba:	4b13      	ldr	r3, [pc, #76]	; (800a808 <vTaskDelay+0x60>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <vTaskDelay+0x30>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	60bb      	str	r3, [r7, #8]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7d8:	f000 f880 	bl	800a8dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fcea 	bl	800b1b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7e4:	f000 f888 	bl	800a8f8 <xTaskResumeAll>
 800a7e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d107      	bne.n	800a800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <vTaskDelay+0x64>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a800:	bf00      	nop
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	2000160c 	.word	0x2000160c
 800a80c:	e000ed04 	.word	0xe000ed04

0800a810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a816:	2300      	movs	r3, #0
 800a818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a81e:	463a      	mov	r2, r7
 800a820:	1d39      	adds	r1, r7, #4
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff f848 	bl	80098bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	9202      	str	r2, [sp, #8]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	2300      	movs	r3, #0
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	460a      	mov	r2, r1
 800a83e:	4921      	ldr	r1, [pc, #132]	; (800a8c4 <vTaskStartScheduler+0xb4>)
 800a840:	4821      	ldr	r0, [pc, #132]	; (800a8c8 <vTaskStartScheduler+0xb8>)
 800a842:	f7ff fe0f 	bl	800a464 <xTaskCreateStatic>
 800a846:	4603      	mov	r3, r0
 800a848:	4a20      	ldr	r2, [pc, #128]	; (800a8cc <vTaskStartScheduler+0xbc>)
 800a84a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a84c:	4b1f      	ldr	r3, [pc, #124]	; (800a8cc <vTaskStartScheduler+0xbc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a854:	2301      	movs	r3, #1
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	e001      	b.n	800a85e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d102      	bne.n	800a86a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a864:	f000 fcfc 	bl	800b260 <xTimerCreateTimerTask>
 800a868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d116      	bne.n	800a89e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	613b      	str	r3, [r7, #16]
}
 800a882:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a884:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <vTaskStartScheduler+0xc0>)
 800a886:	f04f 32ff 	mov.w	r2, #4294967295
 800a88a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a88c:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <vTaskStartScheduler+0xc4>)
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a892:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <vTaskStartScheduler+0xc8>)
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a898:	f001 f8ba 	bl	800ba10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a89c:	e00e      	b.n	800a8bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a4:	d10a      	bne.n	800a8bc <vTaskStartScheduler+0xac>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	60fb      	str	r3, [r7, #12]
}
 800a8b8:	bf00      	nop
 800a8ba:	e7fe      	b.n	800a8ba <vTaskStartScheduler+0xaa>
}
 800a8bc:	bf00      	nop
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	0800eb70 	.word	0x0800eb70
 800a8c8:	0800aef5 	.word	0x0800aef5
 800a8cc:	20001608 	.word	0x20001608
 800a8d0:	20001604 	.word	0x20001604
 800a8d4:	200015f0 	.word	0x200015f0
 800a8d8:	200015e8 	.word	0x200015e8

0800a8dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8e0:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <vTaskSuspendAll+0x18>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	4a03      	ldr	r2, [pc, #12]	; (800a8f4 <vTaskSuspendAll+0x18>)
 800a8e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8ea:	bf00      	nop
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	2000160c 	.word	0x2000160c

0800a8f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a902:	2300      	movs	r3, #0
 800a904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a906:	4b42      	ldr	r3, [pc, #264]	; (800aa10 <xTaskResumeAll+0x118>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10a      	bne.n	800a924 <xTaskResumeAll+0x2c>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	603b      	str	r3, [r7, #0]
}
 800a920:	bf00      	nop
 800a922:	e7fe      	b.n	800a922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a924:	f001 f916 	bl	800bb54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a928:	4b39      	ldr	r3, [pc, #228]	; (800aa10 <xTaskResumeAll+0x118>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	4a38      	ldr	r2, [pc, #224]	; (800aa10 <xTaskResumeAll+0x118>)
 800a930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a932:	4b37      	ldr	r3, [pc, #220]	; (800aa10 <xTaskResumeAll+0x118>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d162      	bne.n	800aa00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a93a:	4b36      	ldr	r3, [pc, #216]	; (800aa14 <xTaskResumeAll+0x11c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d05e      	beq.n	800aa00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a942:	e02f      	b.n	800a9a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a944:	4b34      	ldr	r3, [pc, #208]	; (800aa18 <xTaskResumeAll+0x120>)
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3318      	adds	r3, #24
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff f871 	bl	8009a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3304      	adds	r3, #4
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff f86c 	bl	8009a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a964:	4b2d      	ldr	r3, [pc, #180]	; (800aa1c <xTaskResumeAll+0x124>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d903      	bls.n	800a974 <xTaskResumeAll+0x7c>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	4a2a      	ldr	r2, [pc, #168]	; (800aa1c <xTaskResumeAll+0x124>)
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a978:	4613      	mov	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4a27      	ldr	r2, [pc, #156]	; (800aa20 <xTaskResumeAll+0x128>)
 800a982:	441a      	add	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3304      	adds	r3, #4
 800a988:	4619      	mov	r1, r3
 800a98a:	4610      	mov	r0, r2
 800a98c:	f7fe fff7 	bl	800997e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	4b23      	ldr	r3, [pc, #140]	; (800aa24 <xTaskResumeAll+0x12c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d302      	bcc.n	800a9a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a99e:	4b22      	ldr	r3, [pc, #136]	; (800aa28 <xTaskResumeAll+0x130>)
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9a4:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <xTaskResumeAll+0x120>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1cb      	bne.n	800a944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9b2:	f000 fb55 	bl	800b060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9b6:	4b1d      	ldr	r3, [pc, #116]	; (800aa2c <xTaskResumeAll+0x134>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d010      	beq.n	800a9e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9c2:	f000 f847 	bl	800aa54 <xTaskIncrementTick>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9cc:	4b16      	ldr	r3, [pc, #88]	; (800aa28 <xTaskResumeAll+0x130>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1f1      	bne.n	800a9c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9de:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <xTaskResumeAll+0x134>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9e4:	4b10      	ldr	r3, [pc, #64]	; (800aa28 <xTaskResumeAll+0x130>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d009      	beq.n	800aa00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9f0:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <xTaskResumeAll+0x138>)
 800a9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa00:	f001 f8d8 	bl	800bbb4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa04:	68bb      	ldr	r3, [r7, #8]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	2000160c 	.word	0x2000160c
 800aa14:	200015e4 	.word	0x200015e4
 800aa18:	200015a4 	.word	0x200015a4
 800aa1c:	200015ec 	.word	0x200015ec
 800aa20:	20001114 	.word	0x20001114
 800aa24:	20001110 	.word	0x20001110
 800aa28:	200015f8 	.word	0x200015f8
 800aa2c:	200015f4 	.word	0x200015f4
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <xTaskGetTickCount+0x1c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa40:	687b      	ldr	r3, [r7, #4]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	200015e8 	.word	0x200015e8

0800aa54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa5e:	4b4f      	ldr	r3, [pc, #316]	; (800ab9c <xTaskIncrementTick+0x148>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f040 808f 	bne.w	800ab86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa68:	4b4d      	ldr	r3, [pc, #308]	; (800aba0 <xTaskIncrementTick+0x14c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa70:	4a4b      	ldr	r2, [pc, #300]	; (800aba0 <xTaskIncrementTick+0x14c>)
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d120      	bne.n	800aabe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa7c:	4b49      	ldr	r3, [pc, #292]	; (800aba4 <xTaskIncrementTick+0x150>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <xTaskIncrementTick+0x48>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	603b      	str	r3, [r7, #0]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <xTaskIncrementTick+0x46>
 800aa9c:	4b41      	ldr	r3, [pc, #260]	; (800aba4 <xTaskIncrementTick+0x150>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	4b41      	ldr	r3, [pc, #260]	; (800aba8 <xTaskIncrementTick+0x154>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a3f      	ldr	r2, [pc, #252]	; (800aba4 <xTaskIncrementTick+0x150>)
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	4a3f      	ldr	r2, [pc, #252]	; (800aba8 <xTaskIncrementTick+0x154>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	4b3e      	ldr	r3, [pc, #248]	; (800abac <xTaskIncrementTick+0x158>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4a3d      	ldr	r2, [pc, #244]	; (800abac <xTaskIncrementTick+0x158>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	f000 fad1 	bl	800b060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aabe:	4b3c      	ldr	r3, [pc, #240]	; (800abb0 <xTaskIncrementTick+0x15c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d349      	bcc.n	800ab5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac8:	4b36      	ldr	r3, [pc, #216]	; (800aba4 <xTaskIncrementTick+0x150>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d104      	bne.n	800aadc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad2:	4b37      	ldr	r3, [pc, #220]	; (800abb0 <xTaskIncrementTick+0x15c>)
 800aad4:	f04f 32ff 	mov.w	r2, #4294967295
 800aad8:	601a      	str	r2, [r3, #0]
					break;
 800aada:	e03f      	b.n	800ab5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aadc:	4b31      	ldr	r3, [pc, #196]	; (800aba4 <xTaskIncrementTick+0x150>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d203      	bcs.n	800aafc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aaf4:	4a2e      	ldr	r2, [pc, #184]	; (800abb0 <xTaskIncrementTick+0x15c>)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aafa:	e02f      	b.n	800ab5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	3304      	adds	r3, #4
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe ff99 	bl	8009a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3318      	adds	r3, #24
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe ff90 	bl	8009a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4b25      	ldr	r3, [pc, #148]	; (800abb4 <xTaskIncrementTick+0x160>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d903      	bls.n	800ab2c <xTaskIncrementTick+0xd8>
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a22      	ldr	r2, [pc, #136]	; (800abb4 <xTaskIncrementTick+0x160>)
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <xTaskIncrementTick+0x164>)
 800ab3a:	441a      	add	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4619      	mov	r1, r3
 800ab42:	4610      	mov	r0, r2
 800ab44:	f7fe ff1b 	bl	800997e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <xTaskIncrementTick+0x168>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d3b8      	bcc.n	800aac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab56:	2301      	movs	r3, #1
 800ab58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab5a:	e7b5      	b.n	800aac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab5c:	4b17      	ldr	r3, [pc, #92]	; (800abbc <xTaskIncrementTick+0x168>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab62:	4915      	ldr	r1, [pc, #84]	; (800abb8 <xTaskIncrementTick+0x164>)
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	440b      	add	r3, r1
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d901      	bls.n	800ab78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab78:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <xTaskIncrementTick+0x16c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d007      	beq.n	800ab90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab80:	2301      	movs	r3, #1
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e004      	b.n	800ab90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <xTaskIncrementTick+0x170>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	4a0d      	ldr	r2, [pc, #52]	; (800abc4 <xTaskIncrementTick+0x170>)
 800ab8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab90:	697b      	ldr	r3, [r7, #20]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2000160c 	.word	0x2000160c
 800aba0:	200015e8 	.word	0x200015e8
 800aba4:	2000159c 	.word	0x2000159c
 800aba8:	200015a0 	.word	0x200015a0
 800abac:	200015fc 	.word	0x200015fc
 800abb0:	20001604 	.word	0x20001604
 800abb4:	200015ec 	.word	0x200015ec
 800abb8:	20001114 	.word	0x20001114
 800abbc:	20001110 	.word	0x20001110
 800abc0:	200015f8 	.word	0x200015f8
 800abc4:	200015f4 	.word	0x200015f4

0800abc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abce:	4b28      	ldr	r3, [pc, #160]	; (800ac70 <vTaskSwitchContext+0xa8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abd6:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <vTaskSwitchContext+0xac>)
 800abd8:	2201      	movs	r2, #1
 800abda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abdc:	e041      	b.n	800ac62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800abde:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <vTaskSwitchContext+0xac>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <vTaskSwitchContext+0xb0>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e010      	b.n	800ac0e <vTaskSwitchContext+0x46>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <vTaskSwitchContext+0x40>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	607b      	str	r3, [r7, #4]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <vTaskSwitchContext+0x3e>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	491b      	ldr	r1, [pc, #108]	; (800ac7c <vTaskSwitchContext+0xb4>)
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0e4      	beq.n	800abec <vTaskSwitchContext+0x24>
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <vTaskSwitchContext+0xb4>)
 800ac2e:	4413      	add	r3, r2
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	605a      	str	r2, [r3, #4]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	3308      	adds	r3, #8
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d104      	bne.n	800ac52 <vTaskSwitchContext+0x8a>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	4a09      	ldr	r2, [pc, #36]	; (800ac80 <vTaskSwitchContext+0xb8>)
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	4a06      	ldr	r2, [pc, #24]	; (800ac78 <vTaskSwitchContext+0xb0>)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6013      	str	r3, [r2, #0]
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	2000160c 	.word	0x2000160c
 800ac74:	200015f8 	.word	0x200015f8
 800ac78:	200015ec 	.word	0x200015ec
 800ac7c:	20001114 	.word	0x20001114
 800ac80:	20001110 	.word	0x20001110

0800ac84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	60fb      	str	r3, [r7, #12]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acaa:	4b07      	ldr	r3, [pc, #28]	; (800acc8 <vTaskPlaceOnEventList+0x44>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3318      	adds	r3, #24
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7fe fe87 	bl	80099c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acb8:	2101      	movs	r1, #1
 800acba:	6838      	ldr	r0, [r7, #0]
 800acbc:	f000 fa7c 	bl	800b1b8 <prvAddCurrentTaskToDelayedList>
}
 800acc0:	bf00      	nop
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20001110 	.word	0x20001110

0800accc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10a      	bne.n	800acf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	617b      	str	r3, [r7, #20]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acf4:	4b0a      	ldr	r3, [pc, #40]	; (800ad20 <vTaskPlaceOnEventListRestricted+0x54>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3318      	adds	r3, #24
 800acfa:	4619      	mov	r1, r3
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7fe fe3e 	bl	800997e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad08:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	68b8      	ldr	r0, [r7, #8]
 800ad12:	f000 fa51 	bl	800b1b8 <prvAddCurrentTaskToDelayedList>
	}
 800ad16:	bf00      	nop
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001110 	.word	0x20001110

0800ad24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10a      	bne.n	800ad50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	60fb      	str	r3, [r7, #12]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3318      	adds	r3, #24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fe6f 	bl	8009a38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5a:	4b1e      	ldr	r3, [pc, #120]	; (800add4 <xTaskRemoveFromEventList+0xb0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d11d      	bne.n	800ad9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fe66 	bl	8009a38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad70:	4b19      	ldr	r3, [pc, #100]	; (800add8 <xTaskRemoveFromEventList+0xb4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d903      	bls.n	800ad80 <xTaskRemoveFromEventList+0x5c>
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a16      	ldr	r2, [pc, #88]	; (800add8 <xTaskRemoveFromEventList+0xb4>)
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4a13      	ldr	r2, [pc, #76]	; (800addc <xTaskRemoveFromEventList+0xb8>)
 800ad8e:	441a      	add	r2, r3
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fe fdf1 	bl	800997e <vListInsertEnd>
 800ad9c:	e005      	b.n	800adaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	3318      	adds	r3, #24
 800ada2:	4619      	mov	r1, r3
 800ada4:	480e      	ldr	r0, [pc, #56]	; (800ade0 <xTaskRemoveFromEventList+0xbc>)
 800ada6:	f7fe fdea 	bl	800997e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <xTaskRemoveFromEventList+0xc0>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d905      	bls.n	800adc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adbc:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <xTaskRemoveFromEventList+0xc4>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e001      	b.n	800adc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adc8:	697b      	ldr	r3, [r7, #20]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	2000160c 	.word	0x2000160c
 800add8:	200015ec 	.word	0x200015ec
 800addc:	20001114 	.word	0x20001114
 800ade0:	200015a4 	.word	0x200015a4
 800ade4:	20001110 	.word	0x20001110
 800ade8:	200015f8 	.word	0x200015f8

0800adec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf4:	4b06      	ldr	r3, [pc, #24]	; (800ae10 <vTaskInternalSetTimeOutState+0x24>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adfc:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <vTaskInternalSetTimeOutState+0x28>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	605a      	str	r2, [r3, #4]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	200015fc 	.word	0x200015fc
 800ae14:	200015e8 	.word	0x200015e8

0800ae18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	613b      	str	r3, [r7, #16]
}
 800ae3a:	bf00      	nop
 800ae3c:	e7fe      	b.n	800ae3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60fb      	str	r3, [r7, #12]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae5a:	f000 fe7b 	bl	800bb54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae5e:	4b1d      	ldr	r3, [pc, #116]	; (800aed4 <xTaskCheckForTimeOut+0xbc>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae76:	d102      	bne.n	800ae7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	e023      	b.n	800aec6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <xTaskCheckForTimeOut+0xc0>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d007      	beq.n	800ae9a <xTaskCheckForTimeOut+0x82>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d302      	bcc.n	800ae9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae94:	2301      	movs	r3, #1
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	e015      	b.n	800aec6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d20b      	bcs.n	800aebc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	1ad2      	subs	r2, r2, r3
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff ff9b 	bl	800adec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61fb      	str	r3, [r7, #28]
 800aeba:	e004      	b.n	800aec6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aec2:	2301      	movs	r3, #1
 800aec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aec6:	f000 fe75 	bl	800bbb4 <vPortExitCritical>

	return xReturn;
 800aeca:	69fb      	ldr	r3, [r7, #28]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	200015e8 	.word	0x200015e8
 800aed8:	200015fc 	.word	0x200015fc

0800aedc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aee0:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <vTaskMissedYield+0x14>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	601a      	str	r2, [r3, #0]
}
 800aee6:	bf00      	nop
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	200015f8 	.word	0x200015f8

0800aef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aefc:	f000 f852 	bl	800afa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af00:	4b06      	ldr	r3, [pc, #24]	; (800af1c <prvIdleTask+0x28>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d9f9      	bls.n	800aefc <prvIdleTask+0x8>
			{
				taskYIELD();
 800af08:	4b05      	ldr	r3, [pc, #20]	; (800af20 <prvIdleTask+0x2c>)
 800af0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af18:	e7f0      	b.n	800aefc <prvIdleTask+0x8>
 800af1a:	bf00      	nop
 800af1c:	20001114 	.word	0x20001114
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af2a:	2300      	movs	r3, #0
 800af2c:	607b      	str	r3, [r7, #4]
 800af2e:	e00c      	b.n	800af4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4a12      	ldr	r2, [pc, #72]	; (800af84 <prvInitialiseTaskLists+0x60>)
 800af3c:	4413      	add	r3, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fcf0 	bl	8009924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3301      	adds	r3, #1
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b37      	cmp	r3, #55	; 0x37
 800af4e:	d9ef      	bls.n	800af30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af50:	480d      	ldr	r0, [pc, #52]	; (800af88 <prvInitialiseTaskLists+0x64>)
 800af52:	f7fe fce7 	bl	8009924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af56:	480d      	ldr	r0, [pc, #52]	; (800af8c <prvInitialiseTaskLists+0x68>)
 800af58:	f7fe fce4 	bl	8009924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af5c:	480c      	ldr	r0, [pc, #48]	; (800af90 <prvInitialiseTaskLists+0x6c>)
 800af5e:	f7fe fce1 	bl	8009924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af62:	480c      	ldr	r0, [pc, #48]	; (800af94 <prvInitialiseTaskLists+0x70>)
 800af64:	f7fe fcde 	bl	8009924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af68:	480b      	ldr	r0, [pc, #44]	; (800af98 <prvInitialiseTaskLists+0x74>)
 800af6a:	f7fe fcdb 	bl	8009924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af6e:	4b0b      	ldr	r3, [pc, #44]	; (800af9c <prvInitialiseTaskLists+0x78>)
 800af70:	4a05      	ldr	r2, [pc, #20]	; (800af88 <prvInitialiseTaskLists+0x64>)
 800af72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af74:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <prvInitialiseTaskLists+0x7c>)
 800af76:	4a05      	ldr	r2, [pc, #20]	; (800af8c <prvInitialiseTaskLists+0x68>)
 800af78:	601a      	str	r2, [r3, #0]
}
 800af7a:	bf00      	nop
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20001114 	.word	0x20001114
 800af88:	20001574 	.word	0x20001574
 800af8c:	20001588 	.word	0x20001588
 800af90:	200015a4 	.word	0x200015a4
 800af94:	200015b8 	.word	0x200015b8
 800af98:	200015d0 	.word	0x200015d0
 800af9c:	2000159c 	.word	0x2000159c
 800afa0:	200015a0 	.word	0x200015a0

0800afa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afaa:	e019      	b.n	800afe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afac:	f000 fdd2 	bl	800bb54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afb0:	4b10      	ldr	r3, [pc, #64]	; (800aff4 <prvCheckTasksWaitingTermination+0x50>)
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3304      	adds	r3, #4
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fe fd3b 	bl	8009a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afc2:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <prvCheckTasksWaitingTermination+0x54>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	4a0b      	ldr	r2, [pc, #44]	; (800aff8 <prvCheckTasksWaitingTermination+0x54>)
 800afca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <prvCheckTasksWaitingTermination+0x58>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3b01      	subs	r3, #1
 800afd2:	4a0a      	ldr	r2, [pc, #40]	; (800affc <prvCheckTasksWaitingTermination+0x58>)
 800afd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afd6:	f000 fded 	bl	800bbb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f810 	bl	800b000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afe0:	4b06      	ldr	r3, [pc, #24]	; (800affc <prvCheckTasksWaitingTermination+0x58>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e1      	bne.n	800afac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	200015b8 	.word	0x200015b8
 800aff8:	200015e4 	.word	0x200015e4
 800affc:	200015cc 	.word	0x200015cc

0800b000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d108      	bne.n	800b024 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	4618      	mov	r0, r3
 800b018:	f000 ff8a 	bl	800bf30 <vPortFree>
				vPortFree( pxTCB );
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 ff87 	bl	800bf30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b022:	e018      	b.n	800b056 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d103      	bne.n	800b036 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 ff7e 	bl	800bf30 <vPortFree>
	}
 800b034:	e00f      	b.n	800b056 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d00a      	beq.n	800b056 <prvDeleteTCB+0x56>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	60fb      	str	r3, [r7, #12]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <prvDeleteTCB+0x54>
	}
 800b056:	bf00      	nop
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b066:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <prvResetNextTaskUnblockTime+0x38>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d104      	bne.n	800b07a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <prvResetNextTaskUnblockTime+0x3c>)
 800b072:	f04f 32ff 	mov.w	r2, #4294967295
 800b076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b078:	e008      	b.n	800b08c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07a:	4b07      	ldr	r3, [pc, #28]	; (800b098 <prvResetNextTaskUnblockTime+0x38>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4a04      	ldr	r2, [pc, #16]	; (800b09c <prvResetNextTaskUnblockTime+0x3c>)
 800b08a:	6013      	str	r3, [r2, #0]
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	2000159c 	.word	0x2000159c
 800b09c:	20001604 	.word	0x20001604

0800b0a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <xTaskGetSchedulerState+0x34>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	607b      	str	r3, [r7, #4]
 800b0b2:	e008      	b.n	800b0c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b4:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <xTaskGetSchedulerState+0x38>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	607b      	str	r3, [r7, #4]
 800b0c0:	e001      	b.n	800b0c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0c6:	687b      	ldr	r3, [r7, #4]
	}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	200015f0 	.word	0x200015f0
 800b0d8:	2000160c 	.word	0x2000160c

0800b0dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d056      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0f2:	4b2e      	ldr	r3, [pc, #184]	; (800b1ac <xTaskPriorityDisinherit+0xd0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d00a      	beq.n	800b112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	60bb      	str	r3, [r7, #8]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b134:	1e5a      	subs	r2, r3, #1
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b142:	429a      	cmp	r2, r3
 800b144:	d02c      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d128      	bne.n	800b1a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	3304      	adds	r3, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fc70 	bl	8009a38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b170:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <xTaskPriorityDisinherit+0xd4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d903      	bls.n	800b180 <xTaskPriorityDisinherit+0xa4>
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4a0c      	ldr	r2, [pc, #48]	; (800b1b0 <xTaskPriorityDisinherit+0xd4>)
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a09      	ldr	r2, [pc, #36]	; (800b1b4 <xTaskPriorityDisinherit+0xd8>)
 800b18e:	441a      	add	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3304      	adds	r3, #4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fe fbf1 	bl	800997e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1a0:	697b      	ldr	r3, [r7, #20]
	}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20001110 	.word	0x20001110
 800b1b0:	200015ec 	.word	0x200015ec
 800b1b4:	20001114 	.word	0x20001114

0800b1b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1c2:	4b21      	ldr	r3, [pc, #132]	; (800b248 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1c8:	4b20      	ldr	r3, [pc, #128]	; (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe fc32 	bl	8009a38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1da:	d10a      	bne.n	800b1f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1e2:	4b1a      	ldr	r3, [pc, #104]	; (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4819      	ldr	r0, [pc, #100]	; (800b250 <prvAddCurrentTaskToDelayedList+0x98>)
 800b1ec:	f7fe fbc7 	bl	800997e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1f0:	e026      	b.n	800b240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1fa:	4b14      	ldr	r3, [pc, #80]	; (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d209      	bcs.n	800b21e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b20a:	4b12      	ldr	r3, [pc, #72]	; (800b254 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4b0f      	ldr	r3, [pc, #60]	; (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3304      	adds	r3, #4
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f7fe fbd5 	bl	80099c6 <vListInsert>
}
 800b21c:	e010      	b.n	800b240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b21e:	4b0e      	ldr	r3, [pc, #56]	; (800b258 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <prvAddCurrentTaskToDelayedList+0x94>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3304      	adds	r3, #4
 800b228:	4619      	mov	r1, r3
 800b22a:	4610      	mov	r0, r2
 800b22c:	f7fe fbcb 	bl	80099c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	429a      	cmp	r2, r3
 800b238:	d202      	bcs.n	800b240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b23a:	4a08      	ldr	r2, [pc, #32]	; (800b25c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	6013      	str	r3, [r2, #0]
}
 800b240:	bf00      	nop
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	200015e8 	.word	0x200015e8
 800b24c:	20001110 	.word	0x20001110
 800b250:	200015d0 	.word	0x200015d0
 800b254:	200015a0 	.word	0x200015a0
 800b258:	2000159c 	.word	0x2000159c
 800b25c:	20001604 	.word	0x20001604

0800b260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	; 0x28
 800b264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b26a:	f000 fb07 	bl	800b87c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b26e:	4b1c      	ldr	r3, [pc, #112]	; (800b2e0 <xTimerCreateTimerTask+0x80>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d021      	beq.n	800b2ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b27e:	1d3a      	adds	r2, r7, #4
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	f107 030c 	add.w	r3, r7, #12
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe fb31 	bl	80098f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	9202      	str	r2, [sp, #8]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	2302      	movs	r3, #2
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	2300      	movs	r3, #0
 800b29e:	460a      	mov	r2, r1
 800b2a0:	4910      	ldr	r1, [pc, #64]	; (800b2e4 <xTimerCreateTimerTask+0x84>)
 800b2a2:	4811      	ldr	r0, [pc, #68]	; (800b2e8 <xTimerCreateTimerTask+0x88>)
 800b2a4:	f7ff f8de 	bl	800a464 <xTaskCreateStatic>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	4a10      	ldr	r2, [pc, #64]	; (800b2ec <xTimerCreateTimerTask+0x8c>)
 800b2ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <xTimerCreateTimerTask+0x8c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10a      	bne.n	800b2d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	613b      	str	r3, [r7, #16]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2d6:	697b      	ldr	r3, [r7, #20]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20001640 	.word	0x20001640
 800b2e4:	0800eb78 	.word	0x0800eb78
 800b2e8:	0800b425 	.word	0x0800b425
 800b2ec:	20001644 	.word	0x20001644

0800b2f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b08a      	sub	sp, #40	; 0x28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	623b      	str	r3, [r7, #32]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b31e:	4b1a      	ldr	r3, [pc, #104]	; (800b388 <xTimerGenericCommand+0x98>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d02a      	beq.n	800b37c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2b05      	cmp	r3, #5
 800b336:	dc18      	bgt.n	800b36a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b338:	f7ff feb2 	bl	800b0a0 <xTaskGetSchedulerState>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d109      	bne.n	800b356 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b342:	4b11      	ldr	r3, [pc, #68]	; (800b388 <xTimerGenericCommand+0x98>)
 800b344:	6818      	ldr	r0, [r3, #0]
 800b346:	f107 0110 	add.w	r1, r7, #16
 800b34a:	2300      	movs	r3, #0
 800b34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34e:	f7fe fca1 	bl	8009c94 <xQueueGenericSend>
 800b352:	6278      	str	r0, [r7, #36]	; 0x24
 800b354:	e012      	b.n	800b37c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <xTimerGenericCommand+0x98>)
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	f107 0110 	add.w	r1, r7, #16
 800b35e:	2300      	movs	r3, #0
 800b360:	2200      	movs	r2, #0
 800b362:	f7fe fc97 	bl	8009c94 <xQueueGenericSend>
 800b366:	6278      	str	r0, [r7, #36]	; 0x24
 800b368:	e008      	b.n	800b37c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b36a:	4b07      	ldr	r3, [pc, #28]	; (800b388 <xTimerGenericCommand+0x98>)
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	f107 0110 	add.w	r1, r7, #16
 800b372:	2300      	movs	r3, #0
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	f7fe fd8b 	bl	8009e90 <xQueueGenericSendFromISR>
 800b37a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3728      	adds	r7, #40	; 0x28
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20001640 	.word	0x20001640

0800b38c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af02      	add	r7, sp, #8
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b396:	4b22      	ldr	r3, [pc, #136]	; (800b420 <prvProcessExpiredTimer+0x94>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fb47 	bl	8009a38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d022      	beq.n	800b3fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	699a      	ldr	r2, [r3, #24]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	18d1      	adds	r1, r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	6978      	ldr	r0, [r7, #20]
 800b3c6:	f000 f8d1 	bl	800b56c <prvInsertTimerInActiveList>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d01f      	beq.n	800b410 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	2100      	movs	r1, #0
 800b3da:	6978      	ldr	r0, [r7, #20]
 800b3dc:	f7ff ff88 	bl	800b2f0 <xTimerGenericCommand>
 800b3e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d113      	bne.n	800b410 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	60fb      	str	r3, [r7, #12]
}
 800b3fa:	bf00      	nop
 800b3fc:	e7fe      	b.n	800b3fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b404:	f023 0301 	bic.w	r3, r3, #1
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	6978      	ldr	r0, [r7, #20]
 800b416:	4798      	blx	r3
}
 800b418:	bf00      	nop
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20001638 	.word	0x20001638

0800b424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b42c:	f107 0308 	add.w	r3, r7, #8
 800b430:	4618      	mov	r0, r3
 800b432:	f000 f857 	bl	800b4e4 <prvGetNextExpireTime>
 800b436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	4619      	mov	r1, r3
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 f803 	bl	800b448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b442:	f000 f8d5 	bl	800b5f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b446:	e7f1      	b.n	800b42c <prvTimerTask+0x8>

0800b448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b452:	f7ff fa43 	bl	800a8dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b456:	f107 0308 	add.w	r3, r7, #8
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f866 	bl	800b52c <prvSampleTimeNow>
 800b460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d130      	bne.n	800b4ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10a      	bne.n	800b484 <prvProcessTimerOrBlockTask+0x3c>
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	429a      	cmp	r2, r3
 800b474:	d806      	bhi.n	800b484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b476:	f7ff fa3f 	bl	800a8f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b47a:	68f9      	ldr	r1, [r7, #12]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff85 	bl	800b38c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b482:	e024      	b.n	800b4ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d008      	beq.n	800b49c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b48a:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <prvProcessTimerOrBlockTask+0x90>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <prvProcessTimerOrBlockTask+0x50>
 800b494:	2301      	movs	r3, #1
 800b496:	e000      	b.n	800b49a <prvProcessTimerOrBlockTask+0x52>
 800b498:	2300      	movs	r3, #0
 800b49a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b49c:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <prvProcessTimerOrBlockTask+0x94>)
 800b49e:	6818      	ldr	r0, [r3, #0]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f7fe ffa7 	bl	800a3fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4ae:	f7ff fa23 	bl	800a8f8 <xTaskResumeAll>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4b8:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <prvProcessTimerOrBlockTask+0x98>)
 800b4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	f3bf 8f6f 	isb	sy
}
 800b4c8:	e001      	b.n	800b4ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4ca:	f7ff fa15 	bl	800a8f8 <xTaskResumeAll>
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000163c 	.word	0x2000163c
 800b4dc:	20001640 	.word	0x20001640
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4ec:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <prvGetNextExpireTime+0x44>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <prvGetNextExpireTime+0x16>
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	e000      	b.n	800b4fc <prvGetNextExpireTime+0x18>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d105      	bne.n	800b514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b508:	4b07      	ldr	r3, [pc, #28]	; (800b528 <prvGetNextExpireTime+0x44>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60fb      	str	r3, [r7, #12]
 800b512:	e001      	b.n	800b518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b518:	68fb      	ldr	r3, [r7, #12]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	20001638 	.word	0x20001638

0800b52c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b534:	f7ff fa7e 	bl	800aa34 <xTaskGetTickCount>
 800b538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b53a:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <prvSampleTimeNow+0x3c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	429a      	cmp	r2, r3
 800b542:	d205      	bcs.n	800b550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b544:	f000 f936 	bl	800b7b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	e002      	b.n	800b556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b556:	4a04      	ldr	r2, [pc, #16]	; (800b568 <prvSampleTimeNow+0x3c>)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b55c:	68fb      	ldr	r3, [r7, #12]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20001648 	.word	0x20001648

0800b56c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d812      	bhi.n	800b5b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	1ad2      	subs	r2, r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d302      	bcc.n	800b5a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e01b      	b.n	800b5de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5a6:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <prvInsertTimerInActiveList+0x7c>)
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	f7fe fa08 	bl	80099c6 <vListInsert>
 800b5b6:	e012      	b.n	800b5de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d206      	bcs.n	800b5ce <prvInsertTimerInActiveList+0x62>
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d302      	bcc.n	800b5ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	e007      	b.n	800b5de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5ce:	4b07      	ldr	r3, [pc, #28]	; (800b5ec <prvInsertTimerInActiveList+0x80>)
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f7fe f9f4 	bl	80099c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5de:	697b      	ldr	r3, [r7, #20]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	2000163c 	.word	0x2000163c
 800b5ec:	20001638 	.word	0x20001638

0800b5f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08e      	sub	sp, #56	; 0x38
 800b5f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5f6:	e0ca      	b.n	800b78e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	da18      	bge.n	800b630 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b5fe:	1d3b      	adds	r3, r7, #4
 800b600:	3304      	adds	r3, #4
 800b602:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	61fb      	str	r3, [r7, #28]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b626:	6850      	ldr	r0, [r2, #4]
 800b628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b62a:	6892      	ldr	r2, [r2, #8]
 800b62c:	4611      	mov	r1, r2
 800b62e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f2c0 80ab 	blt.w	800b78e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	3304      	adds	r3, #4
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe f9f5 	bl	8009a38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b64e:	463b      	mov	r3, r7
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff ff6b 	bl	800b52c <prvSampleTimeNow>
 800b656:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b09      	cmp	r3, #9
 800b65c:	f200 8096 	bhi.w	800b78c <prvProcessReceivedCommands+0x19c>
 800b660:	a201      	add	r2, pc, #4	; (adr r2, 800b668 <prvProcessReceivedCommands+0x78>)
 800b662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b666:	bf00      	nop
 800b668:	0800b691 	.word	0x0800b691
 800b66c:	0800b691 	.word	0x0800b691
 800b670:	0800b691 	.word	0x0800b691
 800b674:	0800b705 	.word	0x0800b705
 800b678:	0800b719 	.word	0x0800b719
 800b67c:	0800b763 	.word	0x0800b763
 800b680:	0800b691 	.word	0x0800b691
 800b684:	0800b691 	.word	0x0800b691
 800b688:	0800b705 	.word	0x0800b705
 800b68c:	0800b719 	.word	0x0800b719
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	18d1      	adds	r1, r2, r3
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b0:	f7ff ff5c 	bl	800b56c <prvInsertTimerInActiveList>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d069      	beq.n	800b78e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d05e      	beq.n	800b78e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	441a      	add	r2, r3
 800b6d8:	2300      	movs	r3, #0
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	2100      	movs	r1, #0
 800b6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6e2:	f7ff fe05 	bl	800b2f0 <xTimerGenericCommand>
 800b6e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d14f      	bne.n	800b78e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	61bb      	str	r3, [r7, #24]
}
 800b700:	bf00      	nop
 800b702:	e7fe      	b.n	800b702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b70a:	f023 0301 	bic.w	r3, r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b716:	e03a      	b.n	800b78e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b71e:	f043 0301 	orr.w	r3, r3, #1
 800b722:	b2da      	uxtb	r2, r3
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10a      	bne.n	800b74e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	617b      	str	r3, [r7, #20]
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	699a      	ldr	r2, [r3, #24]
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	18d1      	adds	r1, r2, r3
 800b756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b75c:	f7ff ff06 	bl	800b56c <prvInsertTimerInActiveList>
					break;
 800b760:	e015      	b.n	800b78e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b768:	f003 0302 	and.w	r3, r3, #2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d103      	bne.n	800b778 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b772:	f000 fbdd 	bl	800bf30 <vPortFree>
 800b776:	e00a      	b.n	800b78e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	b2da      	uxtb	r2, r3
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b78a:	e000      	b.n	800b78e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b78c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b78e:	4b08      	ldr	r3, [pc, #32]	; (800b7b0 <prvProcessReceivedCommands+0x1c0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	1d39      	adds	r1, r7, #4
 800b794:	2200      	movs	r2, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe fc16 	bl	8009fc8 <xQueueReceive>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f47f af2a 	bne.w	800b5f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	3730      	adds	r7, #48	; 0x30
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20001640 	.word	0x20001640

0800b7b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7ba:	e048      	b.n	800b84e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7bc:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <prvSwitchTimerLists+0xc0>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c6:	4b2b      	ldr	r3, [pc, #172]	; (800b874 <prvSwitchTimerLists+0xc0>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe f92f 	bl	8009a38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d02e      	beq.n	800b84e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d90e      	bls.n	800b820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b80e:	4b19      	ldr	r3, [pc, #100]	; (800b874 <prvSwitchTimerLists+0xc0>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3304      	adds	r3, #4
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f7fe f8d4 	bl	80099c6 <vListInsert>
 800b81e:	e016      	b.n	800b84e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b820:	2300      	movs	r3, #0
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	2100      	movs	r1, #0
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7ff fd60 	bl	800b2f0 <xTimerGenericCommand>
 800b830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10a      	bne.n	800b84e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	603b      	str	r3, [r7, #0]
}
 800b84a:	bf00      	nop
 800b84c:	e7fe      	b.n	800b84c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b84e:	4b09      	ldr	r3, [pc, #36]	; (800b874 <prvSwitchTimerLists+0xc0>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1b1      	bne.n	800b7bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b858:	4b06      	ldr	r3, [pc, #24]	; (800b874 <prvSwitchTimerLists+0xc0>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b85e:	4b06      	ldr	r3, [pc, #24]	; (800b878 <prvSwitchTimerLists+0xc4>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a04      	ldr	r2, [pc, #16]	; (800b874 <prvSwitchTimerLists+0xc0>)
 800b864:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b866:	4a04      	ldr	r2, [pc, #16]	; (800b878 <prvSwitchTimerLists+0xc4>)
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	6013      	str	r3, [r2, #0]
}
 800b86c:	bf00      	nop
 800b86e:	3718      	adds	r7, #24
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	20001638 	.word	0x20001638
 800b878:	2000163c 	.word	0x2000163c

0800b87c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b882:	f000 f967 	bl	800bb54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b886:	4b15      	ldr	r3, [pc, #84]	; (800b8dc <prvCheckForValidListAndQueue+0x60>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d120      	bne.n	800b8d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b88e:	4814      	ldr	r0, [pc, #80]	; (800b8e0 <prvCheckForValidListAndQueue+0x64>)
 800b890:	f7fe f848 	bl	8009924 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b894:	4813      	ldr	r0, [pc, #76]	; (800b8e4 <prvCheckForValidListAndQueue+0x68>)
 800b896:	f7fe f845 	bl	8009924 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b89a:	4b13      	ldr	r3, [pc, #76]	; (800b8e8 <prvCheckForValidListAndQueue+0x6c>)
 800b89c:	4a10      	ldr	r2, [pc, #64]	; (800b8e0 <prvCheckForValidListAndQueue+0x64>)
 800b89e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8a0:	4b12      	ldr	r3, [pc, #72]	; (800b8ec <prvCheckForValidListAndQueue+0x70>)
 800b8a2:	4a10      	ldr	r2, [pc, #64]	; (800b8e4 <prvCheckForValidListAndQueue+0x68>)
 800b8a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	4b11      	ldr	r3, [pc, #68]	; (800b8f0 <prvCheckForValidListAndQueue+0x74>)
 800b8ac:	4a11      	ldr	r2, [pc, #68]	; (800b8f4 <prvCheckForValidListAndQueue+0x78>)
 800b8ae:	2110      	movs	r1, #16
 800b8b0:	200a      	movs	r0, #10
 800b8b2:	f7fe f953 	bl	8009b5c <xQueueGenericCreateStatic>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	4a08      	ldr	r2, [pc, #32]	; (800b8dc <prvCheckForValidListAndQueue+0x60>)
 800b8ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8bc:	4b07      	ldr	r3, [pc, #28]	; (800b8dc <prvCheckForValidListAndQueue+0x60>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d005      	beq.n	800b8d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <prvCheckForValidListAndQueue+0x60>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	490b      	ldr	r1, [pc, #44]	; (800b8f8 <prvCheckForValidListAndQueue+0x7c>)
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe fd6c 	bl	800a3a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8d0:	f000 f970 	bl	800bbb4 <vPortExitCritical>
}
 800b8d4:	bf00      	nop
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20001640 	.word	0x20001640
 800b8e0:	20001610 	.word	0x20001610
 800b8e4:	20001624 	.word	0x20001624
 800b8e8:	20001638 	.word	0x20001638
 800b8ec:	2000163c 	.word	0x2000163c
 800b8f0:	200016ec 	.word	0x200016ec
 800b8f4:	2000164c 	.word	0x2000164c
 800b8f8:	0800eb80 	.word	0x0800eb80

0800b8fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3b04      	subs	r3, #4
 800b90c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3b04      	subs	r3, #4
 800b91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	f023 0201 	bic.w	r2, r3, #1
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3b04      	subs	r3, #4
 800b92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b92c:	4a0c      	ldr	r2, [pc, #48]	; (800b960 <pxPortInitialiseStack+0x64>)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3b14      	subs	r3, #20
 800b936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b04      	subs	r3, #4
 800b942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f06f 0202 	mvn.w	r2, #2
 800b94a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3b20      	subs	r3, #32
 800b950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b952:	68fb      	ldr	r3, [r7, #12]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	0800b965 	.word	0x0800b965

0800b964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b96e:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <prvTaskExitError+0x54>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b976:	d00a      	beq.n	800b98e <prvTaskExitError+0x2a>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	60fb      	str	r3, [r7, #12]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <prvTaskExitError+0x28>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	60bb      	str	r3, [r7, #8]
}
 800b9a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9a2:	bf00      	nop
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0fc      	beq.n	800b9a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	20000010 	.word	0x20000010
 800b9bc:	00000000 	.word	0x00000000

0800b9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9c0:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <pxCurrentTCBConst2>)
 800b9c2:	6819      	ldr	r1, [r3, #0]
 800b9c4:	6808      	ldr	r0, [r1, #0]
 800b9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ca:	f380 8809 	msr	PSP, r0
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f04f 0000 	mov.w	r0, #0
 800b9d6:	f380 8811 	msr	BASEPRI, r0
 800b9da:	4770      	bx	lr
 800b9dc:	f3af 8000 	nop.w

0800b9e0 <pxCurrentTCBConst2>:
 800b9e0:	20001110 	.word	0x20001110
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop

0800b9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9e8:	4808      	ldr	r0, [pc, #32]	; (800ba0c <prvPortStartFirstTask+0x24>)
 800b9ea:	6800      	ldr	r0, [r0, #0]
 800b9ec:	6800      	ldr	r0, [r0, #0]
 800b9ee:	f380 8808 	msr	MSP, r0
 800b9f2:	f04f 0000 	mov.w	r0, #0
 800b9f6:	f380 8814 	msr	CONTROL, r0
 800b9fa:	b662      	cpsie	i
 800b9fc:	b661      	cpsie	f
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	df00      	svc	0
 800ba08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba0a:	bf00      	nop
 800ba0c:	e000ed08 	.word	0xe000ed08

0800ba10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba16:	4b46      	ldr	r3, [pc, #280]	; (800bb30 <xPortStartScheduler+0x120>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a46      	ldr	r2, [pc, #280]	; (800bb34 <xPortStartScheduler+0x124>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d10a      	bne.n	800ba36 <xPortStartScheduler+0x26>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	613b      	str	r3, [r7, #16]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba36:	4b3e      	ldr	r3, [pc, #248]	; (800bb30 <xPortStartScheduler+0x120>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a3f      	ldr	r2, [pc, #252]	; (800bb38 <xPortStartScheduler+0x128>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d10a      	bne.n	800ba56 <xPortStartScheduler+0x46>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	60fb      	str	r3, [r7, #12]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba56:	4b39      	ldr	r3, [pc, #228]	; (800bb3c <xPortStartScheduler+0x12c>)
 800ba58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	22ff      	movs	r2, #255	; 0xff
 800ba66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	4b31      	ldr	r3, [pc, #196]	; (800bb40 <xPortStartScheduler+0x130>)
 800ba7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba7e:	4b31      	ldr	r3, [pc, #196]	; (800bb44 <xPortStartScheduler+0x134>)
 800ba80:	2207      	movs	r2, #7
 800ba82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba84:	e009      	b.n	800ba9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba86:	4b2f      	ldr	r3, [pc, #188]	; (800bb44 <xPortStartScheduler+0x134>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	4a2d      	ldr	r2, [pc, #180]	; (800bb44 <xPortStartScheduler+0x134>)
 800ba8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba9a:	78fb      	ldrb	r3, [r7, #3]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa2:	2b80      	cmp	r3, #128	; 0x80
 800baa4:	d0ef      	beq.n	800ba86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800baa6:	4b27      	ldr	r3, [pc, #156]	; (800bb44 <xPortStartScheduler+0x134>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f1c3 0307 	rsb	r3, r3, #7
 800baae:	2b04      	cmp	r3, #4
 800bab0:	d00a      	beq.n	800bac8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	60bb      	str	r3, [r7, #8]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bac8:	4b1e      	ldr	r3, [pc, #120]	; (800bb44 <xPortStartScheduler+0x134>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	021b      	lsls	r3, r3, #8
 800bace:	4a1d      	ldr	r2, [pc, #116]	; (800bb44 <xPortStartScheduler+0x134>)
 800bad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bad2:	4b1c      	ldr	r3, [pc, #112]	; (800bb44 <xPortStartScheduler+0x134>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bada:	4a1a      	ldr	r2, [pc, #104]	; (800bb44 <xPortStartScheduler+0x134>)
 800badc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bae6:	4b18      	ldr	r3, [pc, #96]	; (800bb48 <xPortStartScheduler+0x138>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a17      	ldr	r2, [pc, #92]	; (800bb48 <xPortStartScheduler+0x138>)
 800baec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800baf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800baf2:	4b15      	ldr	r3, [pc, #84]	; (800bb48 <xPortStartScheduler+0x138>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a14      	ldr	r2, [pc, #80]	; (800bb48 <xPortStartScheduler+0x138>)
 800baf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bafc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bafe:	f000 f8dd 	bl	800bcbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb02:	4b12      	ldr	r3, [pc, #72]	; (800bb4c <xPortStartScheduler+0x13c>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb08:	f000 f8fc 	bl	800bd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb0c:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <xPortStartScheduler+0x140>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a0f      	ldr	r2, [pc, #60]	; (800bb50 <xPortStartScheduler+0x140>)
 800bb12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb18:	f7ff ff66 	bl	800b9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb1c:	f7ff f854 	bl	800abc8 <vTaskSwitchContext>
	prvTaskExitError();
 800bb20:	f7ff ff20 	bl	800b964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	e000ed00 	.word	0xe000ed00
 800bb34:	410fc271 	.word	0x410fc271
 800bb38:	410fc270 	.word	0x410fc270
 800bb3c:	e000e400 	.word	0xe000e400
 800bb40:	2000173c 	.word	0x2000173c
 800bb44:	20001740 	.word	0x20001740
 800bb48:	e000ed20 	.word	0xe000ed20
 800bb4c:	20000010 	.word	0x20000010
 800bb50:	e000ef34 	.word	0xe000ef34

0800bb54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	607b      	str	r3, [r7, #4]
}
 800bb6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb6e:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <vPortEnterCritical+0x58>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3301      	adds	r3, #1
 800bb74:	4a0d      	ldr	r2, [pc, #52]	; (800bbac <vPortEnterCritical+0x58>)
 800bb76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb78:	4b0c      	ldr	r3, [pc, #48]	; (800bbac <vPortEnterCritical+0x58>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d10f      	bne.n	800bba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb80:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <vPortEnterCritical+0x5c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	603b      	str	r3, [r7, #0]
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <vPortEnterCritical+0x4a>
	}
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	20000010 	.word	0x20000010
 800bbb0:	e000ed04 	.word	0xe000ed04

0800bbb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbba:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <vPortExitCritical+0x50>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10a      	bne.n	800bbd8 <vPortExitCritical+0x24>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	607b      	str	r3, [r7, #4]
}
 800bbd4:	bf00      	nop
 800bbd6:	e7fe      	b.n	800bbd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <vPortExitCritical+0x50>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <vPortExitCritical+0x50>)
 800bbe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbe2:	4b08      	ldr	r3, [pc, #32]	; (800bc04 <vPortExitCritical+0x50>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d105      	bne.n	800bbf6 <vPortExitCritical+0x42>
 800bbea:	2300      	movs	r3, #0
 800bbec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	f383 8811 	msr	BASEPRI, r3
}
 800bbf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbf6:	bf00      	nop
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	20000010 	.word	0x20000010
	...

0800bc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc10:	f3ef 8009 	mrs	r0, PSP
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	4b15      	ldr	r3, [pc, #84]	; (800bc70 <pxCurrentTCBConst>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	f01e 0f10 	tst.w	lr, #16
 800bc20:	bf08      	it	eq
 800bc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2a:	6010      	str	r0, [r2, #0]
 800bc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc34:	f380 8811 	msr	BASEPRI, r0
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f7fe ffc2 	bl	800abc8 <vTaskSwitchContext>
 800bc44:	f04f 0000 	mov.w	r0, #0
 800bc48:	f380 8811 	msr	BASEPRI, r0
 800bc4c:	bc09      	pop	{r0, r3}
 800bc4e:	6819      	ldr	r1, [r3, #0]
 800bc50:	6808      	ldr	r0, [r1, #0]
 800bc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc56:	f01e 0f10 	tst.w	lr, #16
 800bc5a:	bf08      	it	eq
 800bc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc60:	f380 8809 	msr	PSP, r0
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	f3af 8000 	nop.w

0800bc70 <pxCurrentTCBConst>:
 800bc70:	20001110 	.word	0x20001110
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop

0800bc78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	607b      	str	r3, [r7, #4]
}
 800bc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc92:	f7fe fedf 	bl	800aa54 <xTaskIncrementTick>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc9c:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <xPortSysTickHandler+0x40>)
 800bc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	2300      	movs	r3, #0
 800bca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	f383 8811 	msr	BASEPRI, r3
}
 800bcae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	e000ed04 	.word	0xe000ed04

0800bcbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <vPortSetupTimerInterrupt+0x34>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcc6:	4b0b      	ldr	r3, [pc, #44]	; (800bcf4 <vPortSetupTimerInterrupt+0x38>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bccc:	4b0a      	ldr	r3, [pc, #40]	; (800bcf8 <vPortSetupTimerInterrupt+0x3c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a0a      	ldr	r2, [pc, #40]	; (800bcfc <vPortSetupTimerInterrupt+0x40>)
 800bcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd6:	099b      	lsrs	r3, r3, #6
 800bcd8:	4a09      	ldr	r2, [pc, #36]	; (800bd00 <vPortSetupTimerInterrupt+0x44>)
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcde:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <vPortSetupTimerInterrupt+0x34>)
 800bce0:	2207      	movs	r2, #7
 800bce2:	601a      	str	r2, [r3, #0]
}
 800bce4:	bf00      	nop
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	e000e010 	.word	0xe000e010
 800bcf4:	e000e018 	.word	0xe000e018
 800bcf8:	20000004 	.word	0x20000004
 800bcfc:	10624dd3 	.word	0x10624dd3
 800bd00:	e000e014 	.word	0xe000e014

0800bd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd14 <vPortEnableVFP+0x10>
 800bd08:	6801      	ldr	r1, [r0, #0]
 800bd0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd0e:	6001      	str	r1, [r0, #0]
 800bd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd12:	bf00      	nop
 800bd14:	e000ed88 	.word	0xe000ed88

0800bd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd1e:	f3ef 8305 	mrs	r3, IPSR
 800bd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b0f      	cmp	r3, #15
 800bd28:	d914      	bls.n	800bd54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd2a:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <vPortValidateInterruptPriority+0x70>)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4413      	add	r3, r2
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd34:	4b15      	ldr	r3, [pc, #84]	; (800bd8c <vPortValidateInterruptPriority+0x74>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	7afa      	ldrb	r2, [r7, #11]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d20a      	bcs.n	800bd54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	607b      	str	r3, [r7, #4]
}
 800bd50:	bf00      	nop
 800bd52:	e7fe      	b.n	800bd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd54:	4b0e      	ldr	r3, [pc, #56]	; (800bd90 <vPortValidateInterruptPriority+0x78>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd5c:	4b0d      	ldr	r3, [pc, #52]	; (800bd94 <vPortValidateInterruptPriority+0x7c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d90a      	bls.n	800bd7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	603b      	str	r3, [r7, #0]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <vPortValidateInterruptPriority+0x60>
	}
 800bd7a:	bf00      	nop
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	e000e3f0 	.word	0xe000e3f0
 800bd8c:	2000173c 	.word	0x2000173c
 800bd90:	e000ed0c 	.word	0xe000ed0c
 800bd94:	20001740 	.word	0x20001740

0800bd98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08a      	sub	sp, #40	; 0x28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bda4:	f7fe fd9a 	bl	800a8dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bda8:	4b5b      	ldr	r3, [pc, #364]	; (800bf18 <pvPortMalloc+0x180>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdb0:	f000 f920 	bl	800bff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdb4:	4b59      	ldr	r3, [pc, #356]	; (800bf1c <pvPortMalloc+0x184>)
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f040 8093 	bne.w	800bee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01d      	beq.n	800be04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bdc8:	2208      	movs	r2, #8
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d014      	beq.n	800be04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f023 0307 	bic.w	r3, r3, #7
 800bde0:	3308      	adds	r3, #8
 800bde2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <pvPortMalloc+0x6c>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	617b      	str	r3, [r7, #20]
}
 800be00:	bf00      	nop
 800be02:	e7fe      	b.n	800be02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d06e      	beq.n	800bee8 <pvPortMalloc+0x150>
 800be0a:	4b45      	ldr	r3, [pc, #276]	; (800bf20 <pvPortMalloc+0x188>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	429a      	cmp	r2, r3
 800be12:	d869      	bhi.n	800bee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be14:	4b43      	ldr	r3, [pc, #268]	; (800bf24 <pvPortMalloc+0x18c>)
 800be16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be18:	4b42      	ldr	r3, [pc, #264]	; (800bf24 <pvPortMalloc+0x18c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be1e:	e004      	b.n	800be2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d903      	bls.n	800be3c <pvPortMalloc+0xa4>
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1f1      	bne.n	800be20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be3c:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <pvPortMalloc+0x180>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be42:	429a      	cmp	r2, r3
 800be44:	d050      	beq.n	800bee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2208      	movs	r2, #8
 800be4c:	4413      	add	r3, r2
 800be4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	1ad2      	subs	r2, r2, r3
 800be60:	2308      	movs	r3, #8
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	429a      	cmp	r2, r3
 800be66:	d91f      	bls.n	800bea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <pvPortMalloc+0xf8>
	__asm volatile
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	613b      	str	r3, [r7, #16]
}
 800be8c:	bf00      	nop
 800be8e:	e7fe      	b.n	800be8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bea2:	69b8      	ldr	r0, [r7, #24]
 800bea4:	f000 f908 	bl	800c0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bea8:	4b1d      	ldr	r3, [pc, #116]	; (800bf20 <pvPortMalloc+0x188>)
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	4a1b      	ldr	r2, [pc, #108]	; (800bf20 <pvPortMalloc+0x188>)
 800beb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800beb6:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <pvPortMalloc+0x188>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4b1b      	ldr	r3, [pc, #108]	; (800bf28 <pvPortMalloc+0x190>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d203      	bcs.n	800beca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bec2:	4b17      	ldr	r3, [pc, #92]	; (800bf20 <pvPortMalloc+0x188>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a18      	ldr	r2, [pc, #96]	; (800bf28 <pvPortMalloc+0x190>)
 800bec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <pvPortMalloc+0x184>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	431a      	orrs	r2, r3
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	2200      	movs	r2, #0
 800bedc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <pvPortMalloc+0x194>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3301      	adds	r3, #1
 800bee4:	4a11      	ldr	r2, [pc, #68]	; (800bf2c <pvPortMalloc+0x194>)
 800bee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bee8:	f7fe fd06 	bl	800a8f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	f003 0307 	and.w	r3, r3, #7
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <pvPortMalloc+0x174>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	60fb      	str	r3, [r7, #12]
}
 800bf08:	bf00      	nop
 800bf0a:	e7fe      	b.n	800bf0a <pvPortMalloc+0x172>
	return pvReturn;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3728      	adds	r7, #40	; 0x28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	2000534c 	.word	0x2000534c
 800bf1c:	20005360 	.word	0x20005360
 800bf20:	20005350 	.word	0x20005350
 800bf24:	20005344 	.word	0x20005344
 800bf28:	20005354 	.word	0x20005354
 800bf2c:	20005358 	.word	0x20005358

0800bf30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d04d      	beq.n	800bfde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf42:	2308      	movs	r3, #8
 800bf44:	425b      	negs	r3, r3
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	4413      	add	r3, r2
 800bf4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <vPortFree+0xb8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4013      	ands	r3, r2
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10a      	bne.n	800bf74 <vPortFree+0x44>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	60fb      	str	r3, [r7, #12]
}
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00a      	beq.n	800bf92 <vPortFree+0x62>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	60bb      	str	r3, [r7, #8]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <vPortFree+0xb8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d01e      	beq.n	800bfde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d11a      	bne.n	800bfde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	4b0e      	ldr	r3, [pc, #56]	; (800bfe8 <vPortFree+0xb8>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	43db      	mvns	r3, r3
 800bfb2:	401a      	ands	r2, r3
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfb8:	f7fe fc90 	bl	800a8dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <vPortFree+0xbc>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	4a09      	ldr	r2, [pc, #36]	; (800bfec <vPortFree+0xbc>)
 800bfc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfca:	6938      	ldr	r0, [r7, #16]
 800bfcc:	f000 f874 	bl	800c0b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <vPortFree+0xc0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	4a06      	ldr	r2, [pc, #24]	; (800bff0 <vPortFree+0xc0>)
 800bfd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bfda:	f7fe fc8d 	bl	800a8f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfde:	bf00      	nop
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20005360 	.word	0x20005360
 800bfec:	20005350 	.word	0x20005350
 800bff0:	2000535c 	.word	0x2000535c

0800bff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c000:	4b27      	ldr	r3, [pc, #156]	; (800c0a0 <prvHeapInit+0xac>)
 800c002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f003 0307 	and.w	r3, r3, #7
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00c      	beq.n	800c028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3307      	adds	r3, #7
 800c012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	4a1f      	ldr	r2, [pc, #124]	; (800c0a0 <prvHeapInit+0xac>)
 800c024:	4413      	add	r3, r2
 800c026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c02c:	4a1d      	ldr	r2, [pc, #116]	; (800c0a4 <prvHeapInit+0xb0>)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c032:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <prvHeapInit+0xb0>)
 800c034:	2200      	movs	r2, #0
 800c036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c040:	2208      	movs	r2, #8
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 0307 	bic.w	r3, r3, #7
 800c04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <prvHeapInit+0xb4>)
 800c054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c056:	4b14      	ldr	r3, [pc, #80]	; (800c0a8 <prvHeapInit+0xb4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2200      	movs	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c05e:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <prvHeapInit+0xb4>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c074:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvHeapInit+0xb4>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	4a0a      	ldr	r2, [pc, #40]	; (800c0ac <prvHeapInit+0xb8>)
 800c082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	4a09      	ldr	r2, [pc, #36]	; (800c0b0 <prvHeapInit+0xbc>)
 800c08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <prvHeapInit+0xc0>)
 800c08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20001744 	.word	0x20001744
 800c0a4:	20005344 	.word	0x20005344
 800c0a8:	2000534c 	.word	0x2000534c
 800c0ac:	20005354 	.word	0x20005354
 800c0b0:	20005350 	.word	0x20005350
 800c0b4:	20005360 	.word	0x20005360

0800c0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0c0:	4b28      	ldr	r3, [pc, #160]	; (800c164 <prvInsertBlockIntoFreeList+0xac>)
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e002      	b.n	800c0cc <prvInsertBlockIntoFreeList+0x14>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d8f7      	bhi.n	800c0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d108      	bne.n	800c0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	441a      	add	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	441a      	add	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d118      	bne.n	800c140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	4b15      	ldr	r3, [pc, #84]	; (800c168 <prvInsertBlockIntoFreeList+0xb0>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d00d      	beq.n	800c136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	e008      	b.n	800c148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c136:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <prvInsertBlockIntoFreeList+0xb0>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e003      	b.n	800c148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d002      	beq.n	800c156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20005344 	.word	0x20005344
 800c168:	2000534c 	.word	0x2000534c

0800c16c <__cvt>:
 800c16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c170:	ec55 4b10 	vmov	r4, r5, d0
 800c174:	2d00      	cmp	r5, #0
 800c176:	460e      	mov	r6, r1
 800c178:	4619      	mov	r1, r3
 800c17a:	462b      	mov	r3, r5
 800c17c:	bfbb      	ittet	lt
 800c17e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c182:	461d      	movlt	r5, r3
 800c184:	2300      	movge	r3, #0
 800c186:	232d      	movlt	r3, #45	; 0x2d
 800c188:	700b      	strb	r3, [r1, #0]
 800c18a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c18c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c190:	4691      	mov	r9, r2
 800c192:	f023 0820 	bic.w	r8, r3, #32
 800c196:	bfbc      	itt	lt
 800c198:	4622      	movlt	r2, r4
 800c19a:	4614      	movlt	r4, r2
 800c19c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1a0:	d005      	beq.n	800c1ae <__cvt+0x42>
 800c1a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c1a6:	d100      	bne.n	800c1aa <__cvt+0x3e>
 800c1a8:	3601      	adds	r6, #1
 800c1aa:	2102      	movs	r1, #2
 800c1ac:	e000      	b.n	800c1b0 <__cvt+0x44>
 800c1ae:	2103      	movs	r1, #3
 800c1b0:	ab03      	add	r3, sp, #12
 800c1b2:	9301      	str	r3, [sp, #4]
 800c1b4:	ab02      	add	r3, sp, #8
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	ec45 4b10 	vmov	d0, r4, r5
 800c1bc:	4653      	mov	r3, sl
 800c1be:	4632      	mov	r2, r6
 800c1c0:	f000 fe56 	bl	800ce70 <_dtoa_r>
 800c1c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c1c8:	4607      	mov	r7, r0
 800c1ca:	d102      	bne.n	800c1d2 <__cvt+0x66>
 800c1cc:	f019 0f01 	tst.w	r9, #1
 800c1d0:	d022      	beq.n	800c218 <__cvt+0xac>
 800c1d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1d6:	eb07 0906 	add.w	r9, r7, r6
 800c1da:	d110      	bne.n	800c1fe <__cvt+0x92>
 800c1dc:	783b      	ldrb	r3, [r7, #0]
 800c1de:	2b30      	cmp	r3, #48	; 0x30
 800c1e0:	d10a      	bne.n	800c1f8 <__cvt+0x8c>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ee:	b918      	cbnz	r0, 800c1f8 <__cvt+0x8c>
 800c1f0:	f1c6 0601 	rsb	r6, r6, #1
 800c1f4:	f8ca 6000 	str.w	r6, [sl]
 800c1f8:	f8da 3000 	ldr.w	r3, [sl]
 800c1fc:	4499      	add	r9, r3
 800c1fe:	2200      	movs	r2, #0
 800c200:	2300      	movs	r3, #0
 800c202:	4620      	mov	r0, r4
 800c204:	4629      	mov	r1, r5
 800c206:	f7f4 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c20a:	b108      	cbz	r0, 800c210 <__cvt+0xa4>
 800c20c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c210:	2230      	movs	r2, #48	; 0x30
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	454b      	cmp	r3, r9
 800c216:	d307      	bcc.n	800c228 <__cvt+0xbc>
 800c218:	9b03      	ldr	r3, [sp, #12]
 800c21a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c21c:	1bdb      	subs	r3, r3, r7
 800c21e:	4638      	mov	r0, r7
 800c220:	6013      	str	r3, [r2, #0]
 800c222:	b004      	add	sp, #16
 800c224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c228:	1c59      	adds	r1, r3, #1
 800c22a:	9103      	str	r1, [sp, #12]
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	e7f0      	b.n	800c212 <__cvt+0xa6>

0800c230 <__exponent>:
 800c230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c232:	4603      	mov	r3, r0
 800c234:	2900      	cmp	r1, #0
 800c236:	bfb8      	it	lt
 800c238:	4249      	neglt	r1, r1
 800c23a:	f803 2b02 	strb.w	r2, [r3], #2
 800c23e:	bfb4      	ite	lt
 800c240:	222d      	movlt	r2, #45	; 0x2d
 800c242:	222b      	movge	r2, #43	; 0x2b
 800c244:	2909      	cmp	r1, #9
 800c246:	7042      	strb	r2, [r0, #1]
 800c248:	dd2a      	ble.n	800c2a0 <__exponent+0x70>
 800c24a:	f10d 0207 	add.w	r2, sp, #7
 800c24e:	4617      	mov	r7, r2
 800c250:	260a      	movs	r6, #10
 800c252:	4694      	mov	ip, r2
 800c254:	fb91 f5f6 	sdiv	r5, r1, r6
 800c258:	fb06 1415 	mls	r4, r6, r5, r1
 800c25c:	3430      	adds	r4, #48	; 0x30
 800c25e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c262:	460c      	mov	r4, r1
 800c264:	2c63      	cmp	r4, #99	; 0x63
 800c266:	f102 32ff 	add.w	r2, r2, #4294967295
 800c26a:	4629      	mov	r1, r5
 800c26c:	dcf1      	bgt.n	800c252 <__exponent+0x22>
 800c26e:	3130      	adds	r1, #48	; 0x30
 800c270:	f1ac 0402 	sub.w	r4, ip, #2
 800c274:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c278:	1c41      	adds	r1, r0, #1
 800c27a:	4622      	mov	r2, r4
 800c27c:	42ba      	cmp	r2, r7
 800c27e:	d30a      	bcc.n	800c296 <__exponent+0x66>
 800c280:	f10d 0209 	add.w	r2, sp, #9
 800c284:	eba2 020c 	sub.w	r2, r2, ip
 800c288:	42bc      	cmp	r4, r7
 800c28a:	bf88      	it	hi
 800c28c:	2200      	movhi	r2, #0
 800c28e:	4413      	add	r3, r2
 800c290:	1a18      	subs	r0, r3, r0
 800c292:	b003      	add	sp, #12
 800c294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c296:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c29a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c29e:	e7ed      	b.n	800c27c <__exponent+0x4c>
 800c2a0:	2330      	movs	r3, #48	; 0x30
 800c2a2:	3130      	adds	r1, #48	; 0x30
 800c2a4:	7083      	strb	r3, [r0, #2]
 800c2a6:	70c1      	strb	r1, [r0, #3]
 800c2a8:	1d03      	adds	r3, r0, #4
 800c2aa:	e7f1      	b.n	800c290 <__exponent+0x60>

0800c2ac <_printf_float>:
 800c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	ed2d 8b02 	vpush	{d8}
 800c2b4:	b08d      	sub	sp, #52	; 0x34
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c2bc:	4616      	mov	r6, r2
 800c2be:	461f      	mov	r7, r3
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	f000 fcc7 	bl	800cc54 <_localeconv_r>
 800c2c6:	f8d0 a000 	ldr.w	sl, [r0]
 800c2ca:	4650      	mov	r0, sl
 800c2cc:	f7f3 ffd0 	bl	8000270 <strlen>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	9305      	str	r3, [sp, #20]
 800c2d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c2e0:	3307      	adds	r3, #7
 800c2e2:	f023 0307 	bic.w	r3, r3, #7
 800c2e6:	f103 0208 	add.w	r2, r3, #8
 800c2ea:	f8c8 2000 	str.w	r2, [r8]
 800c2ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2f6:	9307      	str	r3, [sp, #28]
 800c2f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2fc:	ee08 0a10 	vmov	s16, r0
 800c300:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c308:	4b9e      	ldr	r3, [pc, #632]	; (800c584 <_printf_float+0x2d8>)
 800c30a:	f04f 32ff 	mov.w	r2, #4294967295
 800c30e:	f7f4 fc0d 	bl	8000b2c <__aeabi_dcmpun>
 800c312:	bb88      	cbnz	r0, 800c378 <_printf_float+0xcc>
 800c314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c318:	4b9a      	ldr	r3, [pc, #616]	; (800c584 <_printf_float+0x2d8>)
 800c31a:	f04f 32ff 	mov.w	r2, #4294967295
 800c31e:	f7f4 fbe7 	bl	8000af0 <__aeabi_dcmple>
 800c322:	bb48      	cbnz	r0, 800c378 <_printf_float+0xcc>
 800c324:	2200      	movs	r2, #0
 800c326:	2300      	movs	r3, #0
 800c328:	4640      	mov	r0, r8
 800c32a:	4649      	mov	r1, r9
 800c32c:	f7f4 fbd6 	bl	8000adc <__aeabi_dcmplt>
 800c330:	b110      	cbz	r0, 800c338 <_printf_float+0x8c>
 800c332:	232d      	movs	r3, #45	; 0x2d
 800c334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c338:	4a93      	ldr	r2, [pc, #588]	; (800c588 <_printf_float+0x2dc>)
 800c33a:	4b94      	ldr	r3, [pc, #592]	; (800c58c <_printf_float+0x2e0>)
 800c33c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c340:	bf94      	ite	ls
 800c342:	4690      	movls	r8, r2
 800c344:	4698      	movhi	r8, r3
 800c346:	2303      	movs	r3, #3
 800c348:	6123      	str	r3, [r4, #16]
 800c34a:	9b05      	ldr	r3, [sp, #20]
 800c34c:	f023 0304 	bic.w	r3, r3, #4
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	f04f 0900 	mov.w	r9, #0
 800c356:	9700      	str	r7, [sp, #0]
 800c358:	4633      	mov	r3, r6
 800c35a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c35c:	4621      	mov	r1, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 f9da 	bl	800c718 <_printf_common>
 800c364:	3001      	adds	r0, #1
 800c366:	f040 8090 	bne.w	800c48a <_printf_float+0x1de>
 800c36a:	f04f 30ff 	mov.w	r0, #4294967295
 800c36e:	b00d      	add	sp, #52	; 0x34
 800c370:	ecbd 8b02 	vpop	{d8}
 800c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c378:	4642      	mov	r2, r8
 800c37a:	464b      	mov	r3, r9
 800c37c:	4640      	mov	r0, r8
 800c37e:	4649      	mov	r1, r9
 800c380:	f7f4 fbd4 	bl	8000b2c <__aeabi_dcmpun>
 800c384:	b140      	cbz	r0, 800c398 <_printf_float+0xec>
 800c386:	464b      	mov	r3, r9
 800c388:	2b00      	cmp	r3, #0
 800c38a:	bfbc      	itt	lt
 800c38c:	232d      	movlt	r3, #45	; 0x2d
 800c38e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c392:	4a7f      	ldr	r2, [pc, #508]	; (800c590 <_printf_float+0x2e4>)
 800c394:	4b7f      	ldr	r3, [pc, #508]	; (800c594 <_printf_float+0x2e8>)
 800c396:	e7d1      	b.n	800c33c <_printf_float+0x90>
 800c398:	6863      	ldr	r3, [r4, #4]
 800c39a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c39e:	9206      	str	r2, [sp, #24]
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	d13f      	bne.n	800c424 <_printf_float+0x178>
 800c3a4:	2306      	movs	r3, #6
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	9b05      	ldr	r3, [sp, #20]
 800c3aa:	6861      	ldr	r1, [r4, #4]
 800c3ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	9303      	str	r3, [sp, #12]
 800c3b4:	ab0a      	add	r3, sp, #40	; 0x28
 800c3b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c3ba:	ab09      	add	r3, sp, #36	; 0x24
 800c3bc:	ec49 8b10 	vmov	d0, r8, r9
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	6022      	str	r2, [r4, #0]
 800c3c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7ff fecf 	bl	800c16c <__cvt>
 800c3ce:	9b06      	ldr	r3, [sp, #24]
 800c3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3d2:	2b47      	cmp	r3, #71	; 0x47
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	d108      	bne.n	800c3ea <_printf_float+0x13e>
 800c3d8:	1cc8      	adds	r0, r1, #3
 800c3da:	db02      	blt.n	800c3e2 <_printf_float+0x136>
 800c3dc:	6863      	ldr	r3, [r4, #4]
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	dd41      	ble.n	800c466 <_printf_float+0x1ba>
 800c3e2:	f1ab 0302 	sub.w	r3, fp, #2
 800c3e6:	fa5f fb83 	uxtb.w	fp, r3
 800c3ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3ee:	d820      	bhi.n	800c432 <_printf_float+0x186>
 800c3f0:	3901      	subs	r1, #1
 800c3f2:	465a      	mov	r2, fp
 800c3f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3f8:	9109      	str	r1, [sp, #36]	; 0x24
 800c3fa:	f7ff ff19 	bl	800c230 <__exponent>
 800c3fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c400:	1813      	adds	r3, r2, r0
 800c402:	2a01      	cmp	r2, #1
 800c404:	4681      	mov	r9, r0
 800c406:	6123      	str	r3, [r4, #16]
 800c408:	dc02      	bgt.n	800c410 <_printf_float+0x164>
 800c40a:	6822      	ldr	r2, [r4, #0]
 800c40c:	07d2      	lsls	r2, r2, #31
 800c40e:	d501      	bpl.n	800c414 <_printf_float+0x168>
 800c410:	3301      	adds	r3, #1
 800c412:	6123      	str	r3, [r4, #16]
 800c414:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d09c      	beq.n	800c356 <_printf_float+0xaa>
 800c41c:	232d      	movs	r3, #45	; 0x2d
 800c41e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c422:	e798      	b.n	800c356 <_printf_float+0xaa>
 800c424:	9a06      	ldr	r2, [sp, #24]
 800c426:	2a47      	cmp	r2, #71	; 0x47
 800c428:	d1be      	bne.n	800c3a8 <_printf_float+0xfc>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1bc      	bne.n	800c3a8 <_printf_float+0xfc>
 800c42e:	2301      	movs	r3, #1
 800c430:	e7b9      	b.n	800c3a6 <_printf_float+0xfa>
 800c432:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c436:	d118      	bne.n	800c46a <_printf_float+0x1be>
 800c438:	2900      	cmp	r1, #0
 800c43a:	6863      	ldr	r3, [r4, #4]
 800c43c:	dd0b      	ble.n	800c456 <_printf_float+0x1aa>
 800c43e:	6121      	str	r1, [r4, #16]
 800c440:	b913      	cbnz	r3, 800c448 <_printf_float+0x19c>
 800c442:	6822      	ldr	r2, [r4, #0]
 800c444:	07d0      	lsls	r0, r2, #31
 800c446:	d502      	bpl.n	800c44e <_printf_float+0x1a2>
 800c448:	3301      	adds	r3, #1
 800c44a:	440b      	add	r3, r1
 800c44c:	6123      	str	r3, [r4, #16]
 800c44e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c450:	f04f 0900 	mov.w	r9, #0
 800c454:	e7de      	b.n	800c414 <_printf_float+0x168>
 800c456:	b913      	cbnz	r3, 800c45e <_printf_float+0x1b2>
 800c458:	6822      	ldr	r2, [r4, #0]
 800c45a:	07d2      	lsls	r2, r2, #31
 800c45c:	d501      	bpl.n	800c462 <_printf_float+0x1b6>
 800c45e:	3302      	adds	r3, #2
 800c460:	e7f4      	b.n	800c44c <_printf_float+0x1a0>
 800c462:	2301      	movs	r3, #1
 800c464:	e7f2      	b.n	800c44c <_printf_float+0x1a0>
 800c466:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c46c:	4299      	cmp	r1, r3
 800c46e:	db05      	blt.n	800c47c <_printf_float+0x1d0>
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	6121      	str	r1, [r4, #16]
 800c474:	07d8      	lsls	r0, r3, #31
 800c476:	d5ea      	bpl.n	800c44e <_printf_float+0x1a2>
 800c478:	1c4b      	adds	r3, r1, #1
 800c47a:	e7e7      	b.n	800c44c <_printf_float+0x1a0>
 800c47c:	2900      	cmp	r1, #0
 800c47e:	bfd4      	ite	le
 800c480:	f1c1 0202 	rsble	r2, r1, #2
 800c484:	2201      	movgt	r2, #1
 800c486:	4413      	add	r3, r2
 800c488:	e7e0      	b.n	800c44c <_printf_float+0x1a0>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	055a      	lsls	r2, r3, #21
 800c48e:	d407      	bmi.n	800c4a0 <_printf_float+0x1f4>
 800c490:	6923      	ldr	r3, [r4, #16]
 800c492:	4642      	mov	r2, r8
 800c494:	4631      	mov	r1, r6
 800c496:	4628      	mov	r0, r5
 800c498:	47b8      	blx	r7
 800c49a:	3001      	adds	r0, #1
 800c49c:	d12c      	bne.n	800c4f8 <_printf_float+0x24c>
 800c49e:	e764      	b.n	800c36a <_printf_float+0xbe>
 800c4a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4a4:	f240 80e0 	bls.w	800c668 <_printf_float+0x3bc>
 800c4a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f7f4 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d034      	beq.n	800c522 <_printf_float+0x276>
 800c4b8:	4a37      	ldr	r2, [pc, #220]	; (800c598 <_printf_float+0x2ec>)
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4628      	mov	r0, r5
 800c4c0:	47b8      	blx	r7
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	f43f af51 	beq.w	800c36a <_printf_float+0xbe>
 800c4c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	db02      	blt.n	800c4d6 <_printf_float+0x22a>
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	07d8      	lsls	r0, r3, #31
 800c4d4:	d510      	bpl.n	800c4f8 <_printf_float+0x24c>
 800c4d6:	ee18 3a10 	vmov	r3, s16
 800c4da:	4652      	mov	r2, sl
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4628      	mov	r0, r5
 800c4e0:	47b8      	blx	r7
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	f43f af41 	beq.w	800c36a <_printf_float+0xbe>
 800c4e8:	f04f 0800 	mov.w	r8, #0
 800c4ec:	f104 091a 	add.w	r9, r4, #26
 800c4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	4543      	cmp	r3, r8
 800c4f6:	dc09      	bgt.n	800c50c <_printf_float+0x260>
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	079b      	lsls	r3, r3, #30
 800c4fc:	f100 8107 	bmi.w	800c70e <_printf_float+0x462>
 800c500:	68e0      	ldr	r0, [r4, #12]
 800c502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c504:	4298      	cmp	r0, r3
 800c506:	bfb8      	it	lt
 800c508:	4618      	movlt	r0, r3
 800c50a:	e730      	b.n	800c36e <_printf_float+0xc2>
 800c50c:	2301      	movs	r3, #1
 800c50e:	464a      	mov	r2, r9
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f af27 	beq.w	800c36a <_printf_float+0xbe>
 800c51c:	f108 0801 	add.w	r8, r8, #1
 800c520:	e7e6      	b.n	800c4f0 <_printf_float+0x244>
 800c522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c524:	2b00      	cmp	r3, #0
 800c526:	dc39      	bgt.n	800c59c <_printf_float+0x2f0>
 800c528:	4a1b      	ldr	r2, [pc, #108]	; (800c598 <_printf_float+0x2ec>)
 800c52a:	2301      	movs	r3, #1
 800c52c:	4631      	mov	r1, r6
 800c52e:	4628      	mov	r0, r5
 800c530:	47b8      	blx	r7
 800c532:	3001      	adds	r0, #1
 800c534:	f43f af19 	beq.w	800c36a <_printf_float+0xbe>
 800c538:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c53c:	4313      	orrs	r3, r2
 800c53e:	d102      	bne.n	800c546 <_printf_float+0x29a>
 800c540:	6823      	ldr	r3, [r4, #0]
 800c542:	07d9      	lsls	r1, r3, #31
 800c544:	d5d8      	bpl.n	800c4f8 <_printf_float+0x24c>
 800c546:	ee18 3a10 	vmov	r3, s16
 800c54a:	4652      	mov	r2, sl
 800c54c:	4631      	mov	r1, r6
 800c54e:	4628      	mov	r0, r5
 800c550:	47b8      	blx	r7
 800c552:	3001      	adds	r0, #1
 800c554:	f43f af09 	beq.w	800c36a <_printf_float+0xbe>
 800c558:	f04f 0900 	mov.w	r9, #0
 800c55c:	f104 0a1a 	add.w	sl, r4, #26
 800c560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c562:	425b      	negs	r3, r3
 800c564:	454b      	cmp	r3, r9
 800c566:	dc01      	bgt.n	800c56c <_printf_float+0x2c0>
 800c568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c56a:	e792      	b.n	800c492 <_printf_float+0x1e6>
 800c56c:	2301      	movs	r3, #1
 800c56e:	4652      	mov	r2, sl
 800c570:	4631      	mov	r1, r6
 800c572:	4628      	mov	r0, r5
 800c574:	47b8      	blx	r7
 800c576:	3001      	adds	r0, #1
 800c578:	f43f aef7 	beq.w	800c36a <_printf_float+0xbe>
 800c57c:	f109 0901 	add.w	r9, r9, #1
 800c580:	e7ee      	b.n	800c560 <_printf_float+0x2b4>
 800c582:	bf00      	nop
 800c584:	7fefffff 	.word	0x7fefffff
 800c588:	0800ec80 	.word	0x0800ec80
 800c58c:	0800ec84 	.word	0x0800ec84
 800c590:	0800ec88 	.word	0x0800ec88
 800c594:	0800ec8c 	.word	0x0800ec8c
 800c598:	0800ec90 	.word	0x0800ec90
 800c59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c59e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	bfa8      	it	ge
 800c5a4:	461a      	movge	r2, r3
 800c5a6:	2a00      	cmp	r2, #0
 800c5a8:	4691      	mov	r9, r2
 800c5aa:	dc37      	bgt.n	800c61c <_printf_float+0x370>
 800c5ac:	f04f 0b00 	mov.w	fp, #0
 800c5b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5b4:	f104 021a 	add.w	r2, r4, #26
 800c5b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5ba:	9305      	str	r3, [sp, #20]
 800c5bc:	eba3 0309 	sub.w	r3, r3, r9
 800c5c0:	455b      	cmp	r3, fp
 800c5c2:	dc33      	bgt.n	800c62c <_printf_float+0x380>
 800c5c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	db3b      	blt.n	800c644 <_printf_float+0x398>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	07da      	lsls	r2, r3, #31
 800c5d0:	d438      	bmi.n	800c644 <_printf_float+0x398>
 800c5d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c5d6:	eba2 0903 	sub.w	r9, r2, r3
 800c5da:	9b05      	ldr	r3, [sp, #20]
 800c5dc:	1ad2      	subs	r2, r2, r3
 800c5de:	4591      	cmp	r9, r2
 800c5e0:	bfa8      	it	ge
 800c5e2:	4691      	movge	r9, r2
 800c5e4:	f1b9 0f00 	cmp.w	r9, #0
 800c5e8:	dc35      	bgt.n	800c656 <_printf_float+0x3aa>
 800c5ea:	f04f 0800 	mov.w	r8, #0
 800c5ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5f2:	f104 0a1a 	add.w	sl, r4, #26
 800c5f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5fa:	1a9b      	subs	r3, r3, r2
 800c5fc:	eba3 0309 	sub.w	r3, r3, r9
 800c600:	4543      	cmp	r3, r8
 800c602:	f77f af79 	ble.w	800c4f8 <_printf_float+0x24c>
 800c606:	2301      	movs	r3, #1
 800c608:	4652      	mov	r2, sl
 800c60a:	4631      	mov	r1, r6
 800c60c:	4628      	mov	r0, r5
 800c60e:	47b8      	blx	r7
 800c610:	3001      	adds	r0, #1
 800c612:	f43f aeaa 	beq.w	800c36a <_printf_float+0xbe>
 800c616:	f108 0801 	add.w	r8, r8, #1
 800c61a:	e7ec      	b.n	800c5f6 <_printf_float+0x34a>
 800c61c:	4613      	mov	r3, r2
 800c61e:	4631      	mov	r1, r6
 800c620:	4642      	mov	r2, r8
 800c622:	4628      	mov	r0, r5
 800c624:	47b8      	blx	r7
 800c626:	3001      	adds	r0, #1
 800c628:	d1c0      	bne.n	800c5ac <_printf_float+0x300>
 800c62a:	e69e      	b.n	800c36a <_printf_float+0xbe>
 800c62c:	2301      	movs	r3, #1
 800c62e:	4631      	mov	r1, r6
 800c630:	4628      	mov	r0, r5
 800c632:	9205      	str	r2, [sp, #20]
 800c634:	47b8      	blx	r7
 800c636:	3001      	adds	r0, #1
 800c638:	f43f ae97 	beq.w	800c36a <_printf_float+0xbe>
 800c63c:	9a05      	ldr	r2, [sp, #20]
 800c63e:	f10b 0b01 	add.w	fp, fp, #1
 800c642:	e7b9      	b.n	800c5b8 <_printf_float+0x30c>
 800c644:	ee18 3a10 	vmov	r3, s16
 800c648:	4652      	mov	r2, sl
 800c64a:	4631      	mov	r1, r6
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b8      	blx	r7
 800c650:	3001      	adds	r0, #1
 800c652:	d1be      	bne.n	800c5d2 <_printf_float+0x326>
 800c654:	e689      	b.n	800c36a <_printf_float+0xbe>
 800c656:	9a05      	ldr	r2, [sp, #20]
 800c658:	464b      	mov	r3, r9
 800c65a:	4442      	add	r2, r8
 800c65c:	4631      	mov	r1, r6
 800c65e:	4628      	mov	r0, r5
 800c660:	47b8      	blx	r7
 800c662:	3001      	adds	r0, #1
 800c664:	d1c1      	bne.n	800c5ea <_printf_float+0x33e>
 800c666:	e680      	b.n	800c36a <_printf_float+0xbe>
 800c668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c66a:	2a01      	cmp	r2, #1
 800c66c:	dc01      	bgt.n	800c672 <_printf_float+0x3c6>
 800c66e:	07db      	lsls	r3, r3, #31
 800c670:	d53a      	bpl.n	800c6e8 <_printf_float+0x43c>
 800c672:	2301      	movs	r3, #1
 800c674:	4642      	mov	r2, r8
 800c676:	4631      	mov	r1, r6
 800c678:	4628      	mov	r0, r5
 800c67a:	47b8      	blx	r7
 800c67c:	3001      	adds	r0, #1
 800c67e:	f43f ae74 	beq.w	800c36a <_printf_float+0xbe>
 800c682:	ee18 3a10 	vmov	r3, s16
 800c686:	4652      	mov	r2, sl
 800c688:	4631      	mov	r1, r6
 800c68a:	4628      	mov	r0, r5
 800c68c:	47b8      	blx	r7
 800c68e:	3001      	adds	r0, #1
 800c690:	f43f ae6b 	beq.w	800c36a <_printf_float+0xbe>
 800c694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c698:	2200      	movs	r2, #0
 800c69a:	2300      	movs	r3, #0
 800c69c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c6a0:	f7f4 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6a4:	b9d8      	cbnz	r0, 800c6de <_printf_float+0x432>
 800c6a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c6aa:	f108 0201 	add.w	r2, r8, #1
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d10e      	bne.n	800c6d6 <_printf_float+0x42a>
 800c6b8:	e657      	b.n	800c36a <_printf_float+0xbe>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	4652      	mov	r2, sl
 800c6be:	4631      	mov	r1, r6
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b8      	blx	r7
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	f43f ae50 	beq.w	800c36a <_printf_float+0xbe>
 800c6ca:	f108 0801 	add.w	r8, r8, #1
 800c6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	4543      	cmp	r3, r8
 800c6d4:	dcf1      	bgt.n	800c6ba <_printf_float+0x40e>
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c6dc:	e6da      	b.n	800c494 <_printf_float+0x1e8>
 800c6de:	f04f 0800 	mov.w	r8, #0
 800c6e2:	f104 0a1a 	add.w	sl, r4, #26
 800c6e6:	e7f2      	b.n	800c6ce <_printf_float+0x422>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	4642      	mov	r2, r8
 800c6ec:	e7df      	b.n	800c6ae <_printf_float+0x402>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	464a      	mov	r2, r9
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	f43f ae36 	beq.w	800c36a <_printf_float+0xbe>
 800c6fe:	f108 0801 	add.w	r8, r8, #1
 800c702:	68e3      	ldr	r3, [r4, #12]
 800c704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c706:	1a5b      	subs	r3, r3, r1
 800c708:	4543      	cmp	r3, r8
 800c70a:	dcf0      	bgt.n	800c6ee <_printf_float+0x442>
 800c70c:	e6f8      	b.n	800c500 <_printf_float+0x254>
 800c70e:	f04f 0800 	mov.w	r8, #0
 800c712:	f104 0919 	add.w	r9, r4, #25
 800c716:	e7f4      	b.n	800c702 <_printf_float+0x456>

0800c718 <_printf_common>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	4616      	mov	r6, r2
 800c71e:	4699      	mov	r9, r3
 800c720:	688a      	ldr	r2, [r1, #8]
 800c722:	690b      	ldr	r3, [r1, #16]
 800c724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c728:	4293      	cmp	r3, r2
 800c72a:	bfb8      	it	lt
 800c72c:	4613      	movlt	r3, r2
 800c72e:	6033      	str	r3, [r6, #0]
 800c730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c734:	4607      	mov	r7, r0
 800c736:	460c      	mov	r4, r1
 800c738:	b10a      	cbz	r2, 800c73e <_printf_common+0x26>
 800c73a:	3301      	adds	r3, #1
 800c73c:	6033      	str	r3, [r6, #0]
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	0699      	lsls	r1, r3, #26
 800c742:	bf42      	ittt	mi
 800c744:	6833      	ldrmi	r3, [r6, #0]
 800c746:	3302      	addmi	r3, #2
 800c748:	6033      	strmi	r3, [r6, #0]
 800c74a:	6825      	ldr	r5, [r4, #0]
 800c74c:	f015 0506 	ands.w	r5, r5, #6
 800c750:	d106      	bne.n	800c760 <_printf_common+0x48>
 800c752:	f104 0a19 	add.w	sl, r4, #25
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	6832      	ldr	r2, [r6, #0]
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	42ab      	cmp	r3, r5
 800c75e:	dc26      	bgt.n	800c7ae <_printf_common+0x96>
 800c760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c764:	1e13      	subs	r3, r2, #0
 800c766:	6822      	ldr	r2, [r4, #0]
 800c768:	bf18      	it	ne
 800c76a:	2301      	movne	r3, #1
 800c76c:	0692      	lsls	r2, r2, #26
 800c76e:	d42b      	bmi.n	800c7c8 <_printf_common+0xb0>
 800c770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c774:	4649      	mov	r1, r9
 800c776:	4638      	mov	r0, r7
 800c778:	47c0      	blx	r8
 800c77a:	3001      	adds	r0, #1
 800c77c:	d01e      	beq.n	800c7bc <_printf_common+0xa4>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	6922      	ldr	r2, [r4, #16]
 800c782:	f003 0306 	and.w	r3, r3, #6
 800c786:	2b04      	cmp	r3, #4
 800c788:	bf02      	ittt	eq
 800c78a:	68e5      	ldreq	r5, [r4, #12]
 800c78c:	6833      	ldreq	r3, [r6, #0]
 800c78e:	1aed      	subeq	r5, r5, r3
 800c790:	68a3      	ldr	r3, [r4, #8]
 800c792:	bf0c      	ite	eq
 800c794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c798:	2500      	movne	r5, #0
 800c79a:	4293      	cmp	r3, r2
 800c79c:	bfc4      	itt	gt
 800c79e:	1a9b      	subgt	r3, r3, r2
 800c7a0:	18ed      	addgt	r5, r5, r3
 800c7a2:	2600      	movs	r6, #0
 800c7a4:	341a      	adds	r4, #26
 800c7a6:	42b5      	cmp	r5, r6
 800c7a8:	d11a      	bne.n	800c7e0 <_printf_common+0xc8>
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	e008      	b.n	800c7c0 <_printf_common+0xa8>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4652      	mov	r2, sl
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	47c0      	blx	r8
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d103      	bne.n	800c7c4 <_printf_common+0xac>
 800c7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c4:	3501      	adds	r5, #1
 800c7c6:	e7c6      	b.n	800c756 <_printf_common+0x3e>
 800c7c8:	18e1      	adds	r1, r4, r3
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	2030      	movs	r0, #48	; 0x30
 800c7ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7d2:	4422      	add	r2, r4
 800c7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7dc:	3302      	adds	r3, #2
 800c7de:	e7c7      	b.n	800c770 <_printf_common+0x58>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	4622      	mov	r2, r4
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	47c0      	blx	r8
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	d0e6      	beq.n	800c7bc <_printf_common+0xa4>
 800c7ee:	3601      	adds	r6, #1
 800c7f0:	e7d9      	b.n	800c7a6 <_printf_common+0x8e>
	...

0800c7f4 <_printf_i>:
 800c7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f8:	7e0f      	ldrb	r7, [r1, #24]
 800c7fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7fc:	2f78      	cmp	r7, #120	; 0x78
 800c7fe:	4691      	mov	r9, r2
 800c800:	4680      	mov	r8, r0
 800c802:	460c      	mov	r4, r1
 800c804:	469a      	mov	sl, r3
 800c806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c80a:	d807      	bhi.n	800c81c <_printf_i+0x28>
 800c80c:	2f62      	cmp	r7, #98	; 0x62
 800c80e:	d80a      	bhi.n	800c826 <_printf_i+0x32>
 800c810:	2f00      	cmp	r7, #0
 800c812:	f000 80d4 	beq.w	800c9be <_printf_i+0x1ca>
 800c816:	2f58      	cmp	r7, #88	; 0x58
 800c818:	f000 80c0 	beq.w	800c99c <_printf_i+0x1a8>
 800c81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c824:	e03a      	b.n	800c89c <_printf_i+0xa8>
 800c826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c82a:	2b15      	cmp	r3, #21
 800c82c:	d8f6      	bhi.n	800c81c <_printf_i+0x28>
 800c82e:	a101      	add	r1, pc, #4	; (adr r1, 800c834 <_printf_i+0x40>)
 800c830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c834:	0800c88d 	.word	0x0800c88d
 800c838:	0800c8a1 	.word	0x0800c8a1
 800c83c:	0800c81d 	.word	0x0800c81d
 800c840:	0800c81d 	.word	0x0800c81d
 800c844:	0800c81d 	.word	0x0800c81d
 800c848:	0800c81d 	.word	0x0800c81d
 800c84c:	0800c8a1 	.word	0x0800c8a1
 800c850:	0800c81d 	.word	0x0800c81d
 800c854:	0800c81d 	.word	0x0800c81d
 800c858:	0800c81d 	.word	0x0800c81d
 800c85c:	0800c81d 	.word	0x0800c81d
 800c860:	0800c9a5 	.word	0x0800c9a5
 800c864:	0800c8cd 	.word	0x0800c8cd
 800c868:	0800c95f 	.word	0x0800c95f
 800c86c:	0800c81d 	.word	0x0800c81d
 800c870:	0800c81d 	.word	0x0800c81d
 800c874:	0800c9c7 	.word	0x0800c9c7
 800c878:	0800c81d 	.word	0x0800c81d
 800c87c:	0800c8cd 	.word	0x0800c8cd
 800c880:	0800c81d 	.word	0x0800c81d
 800c884:	0800c81d 	.word	0x0800c81d
 800c888:	0800c967 	.word	0x0800c967
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	1d1a      	adds	r2, r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	602a      	str	r2, [r5, #0]
 800c894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c89c:	2301      	movs	r3, #1
 800c89e:	e09f      	b.n	800c9e0 <_printf_i+0x1ec>
 800c8a0:	6820      	ldr	r0, [r4, #0]
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	0607      	lsls	r7, r0, #24
 800c8a6:	f103 0104 	add.w	r1, r3, #4
 800c8aa:	6029      	str	r1, [r5, #0]
 800c8ac:	d501      	bpl.n	800c8b2 <_printf_i+0xbe>
 800c8ae:	681e      	ldr	r6, [r3, #0]
 800c8b0:	e003      	b.n	800c8ba <_printf_i+0xc6>
 800c8b2:	0646      	lsls	r6, r0, #25
 800c8b4:	d5fb      	bpl.n	800c8ae <_printf_i+0xba>
 800c8b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	da03      	bge.n	800c8c6 <_printf_i+0xd2>
 800c8be:	232d      	movs	r3, #45	; 0x2d
 800c8c0:	4276      	negs	r6, r6
 800c8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c6:	485a      	ldr	r0, [pc, #360]	; (800ca30 <_printf_i+0x23c>)
 800c8c8:	230a      	movs	r3, #10
 800c8ca:	e012      	b.n	800c8f2 <_printf_i+0xfe>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	6820      	ldr	r0, [r4, #0]
 800c8d0:	1d19      	adds	r1, r3, #4
 800c8d2:	6029      	str	r1, [r5, #0]
 800c8d4:	0605      	lsls	r5, r0, #24
 800c8d6:	d501      	bpl.n	800c8dc <_printf_i+0xe8>
 800c8d8:	681e      	ldr	r6, [r3, #0]
 800c8da:	e002      	b.n	800c8e2 <_printf_i+0xee>
 800c8dc:	0641      	lsls	r1, r0, #25
 800c8de:	d5fb      	bpl.n	800c8d8 <_printf_i+0xe4>
 800c8e0:	881e      	ldrh	r6, [r3, #0]
 800c8e2:	4853      	ldr	r0, [pc, #332]	; (800ca30 <_printf_i+0x23c>)
 800c8e4:	2f6f      	cmp	r7, #111	; 0x6f
 800c8e6:	bf0c      	ite	eq
 800c8e8:	2308      	moveq	r3, #8
 800c8ea:	230a      	movne	r3, #10
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8f2:	6865      	ldr	r5, [r4, #4]
 800c8f4:	60a5      	str	r5, [r4, #8]
 800c8f6:	2d00      	cmp	r5, #0
 800c8f8:	bfa2      	ittt	ge
 800c8fa:	6821      	ldrge	r1, [r4, #0]
 800c8fc:	f021 0104 	bicge.w	r1, r1, #4
 800c900:	6021      	strge	r1, [r4, #0]
 800c902:	b90e      	cbnz	r6, 800c908 <_printf_i+0x114>
 800c904:	2d00      	cmp	r5, #0
 800c906:	d04b      	beq.n	800c9a0 <_printf_i+0x1ac>
 800c908:	4615      	mov	r5, r2
 800c90a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c90e:	fb03 6711 	mls	r7, r3, r1, r6
 800c912:	5dc7      	ldrb	r7, [r0, r7]
 800c914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c918:	4637      	mov	r7, r6
 800c91a:	42bb      	cmp	r3, r7
 800c91c:	460e      	mov	r6, r1
 800c91e:	d9f4      	bls.n	800c90a <_printf_i+0x116>
 800c920:	2b08      	cmp	r3, #8
 800c922:	d10b      	bne.n	800c93c <_printf_i+0x148>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	07de      	lsls	r6, r3, #31
 800c928:	d508      	bpl.n	800c93c <_printf_i+0x148>
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	6861      	ldr	r1, [r4, #4]
 800c92e:	4299      	cmp	r1, r3
 800c930:	bfde      	ittt	le
 800c932:	2330      	movle	r3, #48	; 0x30
 800c934:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c93c:	1b52      	subs	r2, r2, r5
 800c93e:	6122      	str	r2, [r4, #16]
 800c940:	f8cd a000 	str.w	sl, [sp]
 800c944:	464b      	mov	r3, r9
 800c946:	aa03      	add	r2, sp, #12
 800c948:	4621      	mov	r1, r4
 800c94a:	4640      	mov	r0, r8
 800c94c:	f7ff fee4 	bl	800c718 <_printf_common>
 800c950:	3001      	adds	r0, #1
 800c952:	d14a      	bne.n	800c9ea <_printf_i+0x1f6>
 800c954:	f04f 30ff 	mov.w	r0, #4294967295
 800c958:	b004      	add	sp, #16
 800c95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95e:	6823      	ldr	r3, [r4, #0]
 800c960:	f043 0320 	orr.w	r3, r3, #32
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	4833      	ldr	r0, [pc, #204]	; (800ca34 <_printf_i+0x240>)
 800c968:	2778      	movs	r7, #120	; 0x78
 800c96a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	6829      	ldr	r1, [r5, #0]
 800c972:	061f      	lsls	r7, r3, #24
 800c974:	f851 6b04 	ldr.w	r6, [r1], #4
 800c978:	d402      	bmi.n	800c980 <_printf_i+0x18c>
 800c97a:	065f      	lsls	r7, r3, #25
 800c97c:	bf48      	it	mi
 800c97e:	b2b6      	uxthmi	r6, r6
 800c980:	07df      	lsls	r7, r3, #31
 800c982:	bf48      	it	mi
 800c984:	f043 0320 	orrmi.w	r3, r3, #32
 800c988:	6029      	str	r1, [r5, #0]
 800c98a:	bf48      	it	mi
 800c98c:	6023      	strmi	r3, [r4, #0]
 800c98e:	b91e      	cbnz	r6, 800c998 <_printf_i+0x1a4>
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	f023 0320 	bic.w	r3, r3, #32
 800c996:	6023      	str	r3, [r4, #0]
 800c998:	2310      	movs	r3, #16
 800c99a:	e7a7      	b.n	800c8ec <_printf_i+0xf8>
 800c99c:	4824      	ldr	r0, [pc, #144]	; (800ca30 <_printf_i+0x23c>)
 800c99e:	e7e4      	b.n	800c96a <_printf_i+0x176>
 800c9a0:	4615      	mov	r5, r2
 800c9a2:	e7bd      	b.n	800c920 <_printf_i+0x12c>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	6826      	ldr	r6, [r4, #0]
 800c9a8:	6961      	ldr	r1, [r4, #20]
 800c9aa:	1d18      	adds	r0, r3, #4
 800c9ac:	6028      	str	r0, [r5, #0]
 800c9ae:	0635      	lsls	r5, r6, #24
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	d501      	bpl.n	800c9b8 <_printf_i+0x1c4>
 800c9b4:	6019      	str	r1, [r3, #0]
 800c9b6:	e002      	b.n	800c9be <_printf_i+0x1ca>
 800c9b8:	0670      	lsls	r0, r6, #25
 800c9ba:	d5fb      	bpl.n	800c9b4 <_printf_i+0x1c0>
 800c9bc:	8019      	strh	r1, [r3, #0]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	6123      	str	r3, [r4, #16]
 800c9c2:	4615      	mov	r5, r2
 800c9c4:	e7bc      	b.n	800c940 <_printf_i+0x14c>
 800c9c6:	682b      	ldr	r3, [r5, #0]
 800c9c8:	1d1a      	adds	r2, r3, #4
 800c9ca:	602a      	str	r2, [r5, #0]
 800c9cc:	681d      	ldr	r5, [r3, #0]
 800c9ce:	6862      	ldr	r2, [r4, #4]
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f7f3 fbfc 	bl	80001d0 <memchr>
 800c9d8:	b108      	cbz	r0, 800c9de <_printf_i+0x1ea>
 800c9da:	1b40      	subs	r0, r0, r5
 800c9dc:	6060      	str	r0, [r4, #4]
 800c9de:	6863      	ldr	r3, [r4, #4]
 800c9e0:	6123      	str	r3, [r4, #16]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e8:	e7aa      	b.n	800c940 <_printf_i+0x14c>
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	47d0      	blx	sl
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d0ad      	beq.n	800c954 <_printf_i+0x160>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	079b      	lsls	r3, r3, #30
 800c9fc:	d413      	bmi.n	800ca26 <_printf_i+0x232>
 800c9fe:	68e0      	ldr	r0, [r4, #12]
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	4298      	cmp	r0, r3
 800ca04:	bfb8      	it	lt
 800ca06:	4618      	movlt	r0, r3
 800ca08:	e7a6      	b.n	800c958 <_printf_i+0x164>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	4632      	mov	r2, r6
 800ca0e:	4649      	mov	r1, r9
 800ca10:	4640      	mov	r0, r8
 800ca12:	47d0      	blx	sl
 800ca14:	3001      	adds	r0, #1
 800ca16:	d09d      	beq.n	800c954 <_printf_i+0x160>
 800ca18:	3501      	adds	r5, #1
 800ca1a:	68e3      	ldr	r3, [r4, #12]
 800ca1c:	9903      	ldr	r1, [sp, #12]
 800ca1e:	1a5b      	subs	r3, r3, r1
 800ca20:	42ab      	cmp	r3, r5
 800ca22:	dcf2      	bgt.n	800ca0a <_printf_i+0x216>
 800ca24:	e7eb      	b.n	800c9fe <_printf_i+0x20a>
 800ca26:	2500      	movs	r5, #0
 800ca28:	f104 0619 	add.w	r6, r4, #25
 800ca2c:	e7f5      	b.n	800ca1a <_printf_i+0x226>
 800ca2e:	bf00      	nop
 800ca30:	0800ec92 	.word	0x0800ec92
 800ca34:	0800eca3 	.word	0x0800eca3

0800ca38 <std>:
 800ca38:	2300      	movs	r3, #0
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca46:	6083      	str	r3, [r0, #8]
 800ca48:	8181      	strh	r1, [r0, #12]
 800ca4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca4c:	81c2      	strh	r2, [r0, #14]
 800ca4e:	6183      	str	r3, [r0, #24]
 800ca50:	4619      	mov	r1, r3
 800ca52:	2208      	movs	r2, #8
 800ca54:	305c      	adds	r0, #92	; 0x5c
 800ca56:	f000 f8f4 	bl	800cc42 <memset>
 800ca5a:	4b0d      	ldr	r3, [pc, #52]	; (800ca90 <std+0x58>)
 800ca5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <std+0x5c>)
 800ca60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca62:	4b0d      	ldr	r3, [pc, #52]	; (800ca98 <std+0x60>)
 800ca64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca66:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <std+0x64>)
 800ca68:	6323      	str	r3, [r4, #48]	; 0x30
 800ca6a:	4b0d      	ldr	r3, [pc, #52]	; (800caa0 <std+0x68>)
 800ca6c:	6224      	str	r4, [r4, #32]
 800ca6e:	429c      	cmp	r4, r3
 800ca70:	d006      	beq.n	800ca80 <std+0x48>
 800ca72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ca76:	4294      	cmp	r4, r2
 800ca78:	d002      	beq.n	800ca80 <std+0x48>
 800ca7a:	33d0      	adds	r3, #208	; 0xd0
 800ca7c:	429c      	cmp	r4, r3
 800ca7e:	d105      	bne.n	800ca8c <std+0x54>
 800ca80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca88:	f000 b958 	b.w	800cd3c <__retarget_lock_init_recursive>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	bf00      	nop
 800ca90:	0800cbbd 	.word	0x0800cbbd
 800ca94:	0800cbdf 	.word	0x0800cbdf
 800ca98:	0800cc17 	.word	0x0800cc17
 800ca9c:	0800cc3b 	.word	0x0800cc3b
 800caa0:	20005364 	.word	0x20005364

0800caa4 <stdio_exit_handler>:
 800caa4:	4a02      	ldr	r2, [pc, #8]	; (800cab0 <stdio_exit_handler+0xc>)
 800caa6:	4903      	ldr	r1, [pc, #12]	; (800cab4 <stdio_exit_handler+0x10>)
 800caa8:	4803      	ldr	r0, [pc, #12]	; (800cab8 <stdio_exit_handler+0x14>)
 800caaa:	f000 b869 	b.w	800cb80 <_fwalk_sglue>
 800caae:	bf00      	nop
 800cab0:	20000014 	.word	0x20000014
 800cab4:	0800e459 	.word	0x0800e459
 800cab8:	20000020 	.word	0x20000020

0800cabc <cleanup_stdio>:
 800cabc:	6841      	ldr	r1, [r0, #4]
 800cabe:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <cleanup_stdio+0x34>)
 800cac0:	4299      	cmp	r1, r3
 800cac2:	b510      	push	{r4, lr}
 800cac4:	4604      	mov	r4, r0
 800cac6:	d001      	beq.n	800cacc <cleanup_stdio+0x10>
 800cac8:	f001 fcc6 	bl	800e458 <_fflush_r>
 800cacc:	68a1      	ldr	r1, [r4, #8]
 800cace:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <cleanup_stdio+0x38>)
 800cad0:	4299      	cmp	r1, r3
 800cad2:	d002      	beq.n	800cada <cleanup_stdio+0x1e>
 800cad4:	4620      	mov	r0, r4
 800cad6:	f001 fcbf 	bl	800e458 <_fflush_r>
 800cada:	68e1      	ldr	r1, [r4, #12]
 800cadc:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <cleanup_stdio+0x3c>)
 800cade:	4299      	cmp	r1, r3
 800cae0:	d004      	beq.n	800caec <cleanup_stdio+0x30>
 800cae2:	4620      	mov	r0, r4
 800cae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cae8:	f001 bcb6 	b.w	800e458 <_fflush_r>
 800caec:	bd10      	pop	{r4, pc}
 800caee:	bf00      	nop
 800caf0:	20005364 	.word	0x20005364
 800caf4:	200053cc 	.word	0x200053cc
 800caf8:	20005434 	.word	0x20005434

0800cafc <global_stdio_init.part.0>:
 800cafc:	b510      	push	{r4, lr}
 800cafe:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <global_stdio_init.part.0+0x30>)
 800cb00:	4c0b      	ldr	r4, [pc, #44]	; (800cb30 <global_stdio_init.part.0+0x34>)
 800cb02:	4a0c      	ldr	r2, [pc, #48]	; (800cb34 <global_stdio_init.part.0+0x38>)
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	4620      	mov	r0, r4
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2104      	movs	r1, #4
 800cb0c:	f7ff ff94 	bl	800ca38 <std>
 800cb10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb14:	2201      	movs	r2, #1
 800cb16:	2109      	movs	r1, #9
 800cb18:	f7ff ff8e 	bl	800ca38 <std>
 800cb1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb20:	2202      	movs	r2, #2
 800cb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb26:	2112      	movs	r1, #18
 800cb28:	f7ff bf86 	b.w	800ca38 <std>
 800cb2c:	2000549c 	.word	0x2000549c
 800cb30:	20005364 	.word	0x20005364
 800cb34:	0800caa5 	.word	0x0800caa5

0800cb38 <__sfp_lock_acquire>:
 800cb38:	4801      	ldr	r0, [pc, #4]	; (800cb40 <__sfp_lock_acquire+0x8>)
 800cb3a:	f000 b900 	b.w	800cd3e <__retarget_lock_acquire_recursive>
 800cb3e:	bf00      	nop
 800cb40:	200054a5 	.word	0x200054a5

0800cb44 <__sfp_lock_release>:
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <__sfp_lock_release+0x8>)
 800cb46:	f000 b8fb 	b.w	800cd40 <__retarget_lock_release_recursive>
 800cb4a:	bf00      	nop
 800cb4c:	200054a5 	.word	0x200054a5

0800cb50 <__sinit>:
 800cb50:	b510      	push	{r4, lr}
 800cb52:	4604      	mov	r4, r0
 800cb54:	f7ff fff0 	bl	800cb38 <__sfp_lock_acquire>
 800cb58:	6a23      	ldr	r3, [r4, #32]
 800cb5a:	b11b      	cbz	r3, 800cb64 <__sinit+0x14>
 800cb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb60:	f7ff bff0 	b.w	800cb44 <__sfp_lock_release>
 800cb64:	4b04      	ldr	r3, [pc, #16]	; (800cb78 <__sinit+0x28>)
 800cb66:	6223      	str	r3, [r4, #32]
 800cb68:	4b04      	ldr	r3, [pc, #16]	; (800cb7c <__sinit+0x2c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1f5      	bne.n	800cb5c <__sinit+0xc>
 800cb70:	f7ff ffc4 	bl	800cafc <global_stdio_init.part.0>
 800cb74:	e7f2      	b.n	800cb5c <__sinit+0xc>
 800cb76:	bf00      	nop
 800cb78:	0800cabd 	.word	0x0800cabd
 800cb7c:	2000549c 	.word	0x2000549c

0800cb80 <_fwalk_sglue>:
 800cb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb84:	4607      	mov	r7, r0
 800cb86:	4688      	mov	r8, r1
 800cb88:	4614      	mov	r4, r2
 800cb8a:	2600      	movs	r6, #0
 800cb8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb90:	f1b9 0901 	subs.w	r9, r9, #1
 800cb94:	d505      	bpl.n	800cba2 <_fwalk_sglue+0x22>
 800cb96:	6824      	ldr	r4, [r4, #0]
 800cb98:	2c00      	cmp	r4, #0
 800cb9a:	d1f7      	bne.n	800cb8c <_fwalk_sglue+0xc>
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba2:	89ab      	ldrh	r3, [r5, #12]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d907      	bls.n	800cbb8 <_fwalk_sglue+0x38>
 800cba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbac:	3301      	adds	r3, #1
 800cbae:	d003      	beq.n	800cbb8 <_fwalk_sglue+0x38>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	47c0      	blx	r8
 800cbb6:	4306      	orrs	r6, r0
 800cbb8:	3568      	adds	r5, #104	; 0x68
 800cbba:	e7e9      	b.n	800cb90 <_fwalk_sglue+0x10>

0800cbbc <__sread>:
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc4:	f000 f86c 	bl	800cca0 <_read_r>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	bfab      	itete	ge
 800cbcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbce:	89a3      	ldrhlt	r3, [r4, #12]
 800cbd0:	181b      	addge	r3, r3, r0
 800cbd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbd6:	bfac      	ite	ge
 800cbd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbda:	81a3      	strhlt	r3, [r4, #12]
 800cbdc:	bd10      	pop	{r4, pc}

0800cbde <__swrite>:
 800cbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe2:	461f      	mov	r7, r3
 800cbe4:	898b      	ldrh	r3, [r1, #12]
 800cbe6:	05db      	lsls	r3, r3, #23
 800cbe8:	4605      	mov	r5, r0
 800cbea:	460c      	mov	r4, r1
 800cbec:	4616      	mov	r6, r2
 800cbee:	d505      	bpl.n	800cbfc <__swrite+0x1e>
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f000 f840 	bl	800cc7c <_lseek_r>
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	4632      	mov	r2, r6
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	f000 b857 	b.w	800ccc4 <_write_r>

0800cc16 <__sseek>:
 800cc16:	b510      	push	{r4, lr}
 800cc18:	460c      	mov	r4, r1
 800cc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1e:	f000 f82d 	bl	800cc7c <_lseek_r>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	bf15      	itete	ne
 800cc28:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc32:	81a3      	strheq	r3, [r4, #12]
 800cc34:	bf18      	it	ne
 800cc36:	81a3      	strhne	r3, [r4, #12]
 800cc38:	bd10      	pop	{r4, pc}

0800cc3a <__sclose>:
 800cc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3e:	f000 b80d 	b.w	800cc5c <_close_r>

0800cc42 <memset>:
 800cc42:	4402      	add	r2, r0
 800cc44:	4603      	mov	r3, r0
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d100      	bne.n	800cc4c <memset+0xa>
 800cc4a:	4770      	bx	lr
 800cc4c:	f803 1b01 	strb.w	r1, [r3], #1
 800cc50:	e7f9      	b.n	800cc46 <memset+0x4>
	...

0800cc54 <_localeconv_r>:
 800cc54:	4800      	ldr	r0, [pc, #0]	; (800cc58 <_localeconv_r+0x4>)
 800cc56:	4770      	bx	lr
 800cc58:	20000160 	.word	0x20000160

0800cc5c <_close_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4d06      	ldr	r5, [pc, #24]	; (800cc78 <_close_r+0x1c>)
 800cc60:	2300      	movs	r3, #0
 800cc62:	4604      	mov	r4, r0
 800cc64:	4608      	mov	r0, r1
 800cc66:	602b      	str	r3, [r5, #0]
 800cc68:	f7f6 fe39 	bl	80038de <_close>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d102      	bne.n	800cc76 <_close_r+0x1a>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	b103      	cbz	r3, 800cc76 <_close_r+0x1a>
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	200054a0 	.word	0x200054a0

0800cc7c <_lseek_r>:
 800cc7c:	b538      	push	{r3, r4, r5, lr}
 800cc7e:	4d07      	ldr	r5, [pc, #28]	; (800cc9c <_lseek_r+0x20>)
 800cc80:	4604      	mov	r4, r0
 800cc82:	4608      	mov	r0, r1
 800cc84:	4611      	mov	r1, r2
 800cc86:	2200      	movs	r2, #0
 800cc88:	602a      	str	r2, [r5, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	f7f6 fe4e 	bl	800392c <_lseek>
 800cc90:	1c43      	adds	r3, r0, #1
 800cc92:	d102      	bne.n	800cc9a <_lseek_r+0x1e>
 800cc94:	682b      	ldr	r3, [r5, #0]
 800cc96:	b103      	cbz	r3, 800cc9a <_lseek_r+0x1e>
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	bd38      	pop	{r3, r4, r5, pc}
 800cc9c:	200054a0 	.word	0x200054a0

0800cca0 <_read_r>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	4d07      	ldr	r5, [pc, #28]	; (800ccc0 <_read_r+0x20>)
 800cca4:	4604      	mov	r4, r0
 800cca6:	4608      	mov	r0, r1
 800cca8:	4611      	mov	r1, r2
 800ccaa:	2200      	movs	r2, #0
 800ccac:	602a      	str	r2, [r5, #0]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	f7f6 fddc 	bl	800386c <_read>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d102      	bne.n	800ccbe <_read_r+0x1e>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	b103      	cbz	r3, 800ccbe <_read_r+0x1e>
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	200054a0 	.word	0x200054a0

0800ccc4 <_write_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	; (800cce4 <_write_r+0x20>)
 800ccc8:	4604      	mov	r4, r0
 800ccca:	4608      	mov	r0, r1
 800cccc:	4611      	mov	r1, r2
 800ccce:	2200      	movs	r2, #0
 800ccd0:	602a      	str	r2, [r5, #0]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f7f6 fde7 	bl	80038a6 <_write>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_write_r+0x1e>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_write_r+0x1e>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	200054a0 	.word	0x200054a0

0800cce8 <__errno>:
 800cce8:	4b01      	ldr	r3, [pc, #4]	; (800ccf0 <__errno+0x8>)
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	2000006c 	.word	0x2000006c

0800ccf4 <__libc_init_array>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4d0d      	ldr	r5, [pc, #52]	; (800cd2c <__libc_init_array+0x38>)
 800ccf8:	4c0d      	ldr	r4, [pc, #52]	; (800cd30 <__libc_init_array+0x3c>)
 800ccfa:	1b64      	subs	r4, r4, r5
 800ccfc:	10a4      	asrs	r4, r4, #2
 800ccfe:	2600      	movs	r6, #0
 800cd00:	42a6      	cmp	r6, r4
 800cd02:	d109      	bne.n	800cd18 <__libc_init_array+0x24>
 800cd04:	4d0b      	ldr	r5, [pc, #44]	; (800cd34 <__libc_init_array+0x40>)
 800cd06:	4c0c      	ldr	r4, [pc, #48]	; (800cd38 <__libc_init_array+0x44>)
 800cd08:	f001 feec 	bl	800eae4 <_init>
 800cd0c:	1b64      	subs	r4, r4, r5
 800cd0e:	10a4      	asrs	r4, r4, #2
 800cd10:	2600      	movs	r6, #0
 800cd12:	42a6      	cmp	r6, r4
 800cd14:	d105      	bne.n	800cd22 <__libc_init_array+0x2e>
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd1c:	4798      	blx	r3
 800cd1e:	3601      	adds	r6, #1
 800cd20:	e7ee      	b.n	800cd00 <__libc_init_array+0xc>
 800cd22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd26:	4798      	blx	r3
 800cd28:	3601      	adds	r6, #1
 800cd2a:	e7f2      	b.n	800cd12 <__libc_init_array+0x1e>
 800cd2c:	0800effc 	.word	0x0800effc
 800cd30:	0800effc 	.word	0x0800effc
 800cd34:	0800effc 	.word	0x0800effc
 800cd38:	0800f000 	.word	0x0800f000

0800cd3c <__retarget_lock_init_recursive>:
 800cd3c:	4770      	bx	lr

0800cd3e <__retarget_lock_acquire_recursive>:
 800cd3e:	4770      	bx	lr

0800cd40 <__retarget_lock_release_recursive>:
 800cd40:	4770      	bx	lr

0800cd42 <memcpy>:
 800cd42:	440a      	add	r2, r1
 800cd44:	4291      	cmp	r1, r2
 800cd46:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd4a:	d100      	bne.n	800cd4e <memcpy+0xc>
 800cd4c:	4770      	bx	lr
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd58:	4291      	cmp	r1, r2
 800cd5a:	d1f9      	bne.n	800cd50 <memcpy+0xe>
 800cd5c:	bd10      	pop	{r4, pc}

0800cd5e <quorem>:
 800cd5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd62:	6903      	ldr	r3, [r0, #16]
 800cd64:	690c      	ldr	r4, [r1, #16]
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	4607      	mov	r7, r0
 800cd6a:	db7e      	blt.n	800ce6a <quorem+0x10c>
 800cd6c:	3c01      	subs	r4, #1
 800cd6e:	f101 0814 	add.w	r8, r1, #20
 800cd72:	f100 0514 	add.w	r5, r0, #20
 800cd76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd84:	3301      	adds	r3, #1
 800cd86:	429a      	cmp	r2, r3
 800cd88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd90:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd94:	d331      	bcc.n	800cdfa <quorem+0x9c>
 800cd96:	f04f 0e00 	mov.w	lr, #0
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	46ac      	mov	ip, r5
 800cd9e:	46f2      	mov	sl, lr
 800cda0:	f850 2b04 	ldr.w	r2, [r0], #4
 800cda4:	b293      	uxth	r3, r2
 800cda6:	fb06 e303 	mla	r3, r6, r3, lr
 800cdaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdae:	0c1a      	lsrs	r2, r3, #16
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	ebaa 0303 	sub.w	r3, sl, r3
 800cdb6:	f8dc a000 	ldr.w	sl, [ip]
 800cdba:	fa13 f38a 	uxtah	r3, r3, sl
 800cdbe:	fb06 220e 	mla	r2, r6, lr, r2
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	9b00      	ldr	r3, [sp, #0]
 800cdc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdca:	b292      	uxth	r2, r2
 800cdcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cdd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdd4:	f8bd 3000 	ldrh.w	r3, [sp]
 800cdd8:	4581      	cmp	r9, r0
 800cdda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdde:	f84c 3b04 	str.w	r3, [ip], #4
 800cde2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cde6:	d2db      	bcs.n	800cda0 <quorem+0x42>
 800cde8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cdec:	b92b      	cbnz	r3, 800cdfa <quorem+0x9c>
 800cdee:	9b01      	ldr	r3, [sp, #4]
 800cdf0:	3b04      	subs	r3, #4
 800cdf2:	429d      	cmp	r5, r3
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	d32c      	bcc.n	800ce52 <quorem+0xf4>
 800cdf8:	613c      	str	r4, [r7, #16]
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	f001 f9a6 	bl	800e14c <__mcmp>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	db22      	blt.n	800ce4a <quorem+0xec>
 800ce04:	3601      	adds	r6, #1
 800ce06:	4629      	mov	r1, r5
 800ce08:	2000      	movs	r0, #0
 800ce0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce0e:	f8d1 c000 	ldr.w	ip, [r1]
 800ce12:	b293      	uxth	r3, r2
 800ce14:	1ac3      	subs	r3, r0, r3
 800ce16:	0c12      	lsrs	r2, r2, #16
 800ce18:	fa13 f38c 	uxtah	r3, r3, ip
 800ce1c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ce20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce2a:	45c1      	cmp	r9, r8
 800ce2c:	f841 3b04 	str.w	r3, [r1], #4
 800ce30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce34:	d2e9      	bcs.n	800ce0a <quorem+0xac>
 800ce36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce3e:	b922      	cbnz	r2, 800ce4a <quorem+0xec>
 800ce40:	3b04      	subs	r3, #4
 800ce42:	429d      	cmp	r5, r3
 800ce44:	461a      	mov	r2, r3
 800ce46:	d30a      	bcc.n	800ce5e <quorem+0x100>
 800ce48:	613c      	str	r4, [r7, #16]
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	b003      	add	sp, #12
 800ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce52:	6812      	ldr	r2, [r2, #0]
 800ce54:	3b04      	subs	r3, #4
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	d1ce      	bne.n	800cdf8 <quorem+0x9a>
 800ce5a:	3c01      	subs	r4, #1
 800ce5c:	e7c9      	b.n	800cdf2 <quorem+0x94>
 800ce5e:	6812      	ldr	r2, [r2, #0]
 800ce60:	3b04      	subs	r3, #4
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	d1f0      	bne.n	800ce48 <quorem+0xea>
 800ce66:	3c01      	subs	r4, #1
 800ce68:	e7eb      	b.n	800ce42 <quorem+0xe4>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e7ee      	b.n	800ce4c <quorem+0xee>
	...

0800ce70 <_dtoa_r>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	ed2d 8b04 	vpush	{d8-d9}
 800ce78:	69c5      	ldr	r5, [r0, #28]
 800ce7a:	b093      	sub	sp, #76	; 0x4c
 800ce7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce80:	ec57 6b10 	vmov	r6, r7, d0
 800ce84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce88:	9107      	str	r1, [sp, #28]
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	920a      	str	r2, [sp, #40]	; 0x28
 800ce8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ce90:	b975      	cbnz	r5, 800ceb0 <_dtoa_r+0x40>
 800ce92:	2010      	movs	r0, #16
 800ce94:	f000 fe2a 	bl	800daec <malloc>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	61e0      	str	r0, [r4, #28]
 800ce9c:	b920      	cbnz	r0, 800cea8 <_dtoa_r+0x38>
 800ce9e:	4bae      	ldr	r3, [pc, #696]	; (800d158 <_dtoa_r+0x2e8>)
 800cea0:	21ef      	movs	r1, #239	; 0xef
 800cea2:	48ae      	ldr	r0, [pc, #696]	; (800d15c <_dtoa_r+0x2ec>)
 800cea4:	f001 fb10 	bl	800e4c8 <__assert_func>
 800cea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ceac:	6005      	str	r5, [r0, #0]
 800ceae:	60c5      	str	r5, [r0, #12]
 800ceb0:	69e3      	ldr	r3, [r4, #28]
 800ceb2:	6819      	ldr	r1, [r3, #0]
 800ceb4:	b151      	cbz	r1, 800cecc <_dtoa_r+0x5c>
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	604a      	str	r2, [r1, #4]
 800ceba:	2301      	movs	r3, #1
 800cebc:	4093      	lsls	r3, r2
 800cebe:	608b      	str	r3, [r1, #8]
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 ff07 	bl	800dcd4 <_Bfree>
 800cec6:	69e3      	ldr	r3, [r4, #28]
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	1e3b      	subs	r3, r7, #0
 800cece:	bfbb      	ittet	lt
 800ced0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ced4:	9303      	strlt	r3, [sp, #12]
 800ced6:	2300      	movge	r3, #0
 800ced8:	2201      	movlt	r2, #1
 800ceda:	bfac      	ite	ge
 800cedc:	f8c8 3000 	strge.w	r3, [r8]
 800cee0:	f8c8 2000 	strlt.w	r2, [r8]
 800cee4:	4b9e      	ldr	r3, [pc, #632]	; (800d160 <_dtoa_r+0x2f0>)
 800cee6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ceea:	ea33 0308 	bics.w	r3, r3, r8
 800ceee:	d11b      	bne.n	800cf28 <_dtoa_r+0xb8>
 800cef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cef2:	f242 730f 	movw	r3, #9999	; 0x270f
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cefc:	4333      	orrs	r3, r6
 800cefe:	f000 8593 	beq.w	800da28 <_dtoa_r+0xbb8>
 800cf02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf04:	b963      	cbnz	r3, 800cf20 <_dtoa_r+0xb0>
 800cf06:	4b97      	ldr	r3, [pc, #604]	; (800d164 <_dtoa_r+0x2f4>)
 800cf08:	e027      	b.n	800cf5a <_dtoa_r+0xea>
 800cf0a:	4b97      	ldr	r3, [pc, #604]	; (800d168 <_dtoa_r+0x2f8>)
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	3308      	adds	r3, #8
 800cf10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	9800      	ldr	r0, [sp, #0]
 800cf16:	b013      	add	sp, #76	; 0x4c
 800cf18:	ecbd 8b04 	vpop	{d8-d9}
 800cf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf20:	4b90      	ldr	r3, [pc, #576]	; (800d164 <_dtoa_r+0x2f4>)
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	3303      	adds	r3, #3
 800cf26:	e7f3      	b.n	800cf10 <_dtoa_r+0xa0>
 800cf28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	ec51 0b17 	vmov	r0, r1, d7
 800cf32:	eeb0 8a47 	vmov.f32	s16, s14
 800cf36:	eef0 8a67 	vmov.f32	s17, s15
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f7f3 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf40:	4681      	mov	r9, r0
 800cf42:	b160      	cbz	r0, 800cf5e <_dtoa_r+0xee>
 800cf44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf46:	2301      	movs	r3, #1
 800cf48:	6013      	str	r3, [r2, #0]
 800cf4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 8568 	beq.w	800da22 <_dtoa_r+0xbb2>
 800cf52:	4b86      	ldr	r3, [pc, #536]	; (800d16c <_dtoa_r+0x2fc>)
 800cf54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	e7da      	b.n	800cf14 <_dtoa_r+0xa4>
 800cf5e:	aa10      	add	r2, sp, #64	; 0x40
 800cf60:	a911      	add	r1, sp, #68	; 0x44
 800cf62:	4620      	mov	r0, r4
 800cf64:	eeb0 0a48 	vmov.f32	s0, s16
 800cf68:	eef0 0a68 	vmov.f32	s1, s17
 800cf6c:	f001 f994 	bl	800e298 <__d2b>
 800cf70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cf74:	4682      	mov	sl, r0
 800cf76:	2d00      	cmp	r5, #0
 800cf78:	d07f      	beq.n	800d07a <_dtoa_r+0x20a>
 800cf7a:	ee18 3a90 	vmov	r3, s17
 800cf7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cf86:	ec51 0b18 	vmov	r0, r1, d8
 800cf8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cf96:	4619      	mov	r1, r3
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4b75      	ldr	r3, [pc, #468]	; (800d170 <_dtoa_r+0x300>)
 800cf9c:	f7f3 f974 	bl	8000288 <__aeabi_dsub>
 800cfa0:	a367      	add	r3, pc, #412	; (adr r3, 800d140 <_dtoa_r+0x2d0>)
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	f7f3 fb27 	bl	80005f8 <__aeabi_dmul>
 800cfaa:	a367      	add	r3, pc, #412	; (adr r3, 800d148 <_dtoa_r+0x2d8>)
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	f7f3 f96c 	bl	800028c <__adddf3>
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	460f      	mov	r7, r1
 800cfba:	f7f3 fab3 	bl	8000524 <__aeabi_i2d>
 800cfbe:	a364      	add	r3, pc, #400	; (adr r3, 800d150 <_dtoa_r+0x2e0>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f7f3 fb18 	bl	80005f8 <__aeabi_dmul>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 f95c 	bl	800028c <__adddf3>
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	f7f3 fdbe 	bl	8000b58 <__aeabi_d2iz>
 800cfdc:	2200      	movs	r2, #0
 800cfde:	4683      	mov	fp, r0
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 fd79 	bl	8000adc <__aeabi_dcmplt>
 800cfea:	b148      	cbz	r0, 800d000 <_dtoa_r+0x190>
 800cfec:	4658      	mov	r0, fp
 800cfee:	f7f3 fa99 	bl	8000524 <__aeabi_i2d>
 800cff2:	4632      	mov	r2, r6
 800cff4:	463b      	mov	r3, r7
 800cff6:	f7f3 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 800cffa:	b908      	cbnz	r0, 800d000 <_dtoa_r+0x190>
 800cffc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d000:	f1bb 0f16 	cmp.w	fp, #22
 800d004:	d857      	bhi.n	800d0b6 <_dtoa_r+0x246>
 800d006:	4b5b      	ldr	r3, [pc, #364]	; (800d174 <_dtoa_r+0x304>)
 800d008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	ec51 0b18 	vmov	r0, r1, d8
 800d014:	f7f3 fd62 	bl	8000adc <__aeabi_dcmplt>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d04e      	beq.n	800d0ba <_dtoa_r+0x24a>
 800d01c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d020:	2300      	movs	r3, #0
 800d022:	930c      	str	r3, [sp, #48]	; 0x30
 800d024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d026:	1b5b      	subs	r3, r3, r5
 800d028:	1e5a      	subs	r2, r3, #1
 800d02a:	bf45      	ittet	mi
 800d02c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d030:	9305      	strmi	r3, [sp, #20]
 800d032:	2300      	movpl	r3, #0
 800d034:	2300      	movmi	r3, #0
 800d036:	9206      	str	r2, [sp, #24]
 800d038:	bf54      	ite	pl
 800d03a:	9305      	strpl	r3, [sp, #20]
 800d03c:	9306      	strmi	r3, [sp, #24]
 800d03e:	f1bb 0f00 	cmp.w	fp, #0
 800d042:	db3c      	blt.n	800d0be <_dtoa_r+0x24e>
 800d044:	9b06      	ldr	r3, [sp, #24]
 800d046:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d04a:	445b      	add	r3, fp
 800d04c:	9306      	str	r3, [sp, #24]
 800d04e:	2300      	movs	r3, #0
 800d050:	9308      	str	r3, [sp, #32]
 800d052:	9b07      	ldr	r3, [sp, #28]
 800d054:	2b09      	cmp	r3, #9
 800d056:	d868      	bhi.n	800d12a <_dtoa_r+0x2ba>
 800d058:	2b05      	cmp	r3, #5
 800d05a:	bfc4      	itt	gt
 800d05c:	3b04      	subgt	r3, #4
 800d05e:	9307      	strgt	r3, [sp, #28]
 800d060:	9b07      	ldr	r3, [sp, #28]
 800d062:	f1a3 0302 	sub.w	r3, r3, #2
 800d066:	bfcc      	ite	gt
 800d068:	2500      	movgt	r5, #0
 800d06a:	2501      	movle	r5, #1
 800d06c:	2b03      	cmp	r3, #3
 800d06e:	f200 8085 	bhi.w	800d17c <_dtoa_r+0x30c>
 800d072:	e8df f003 	tbb	[pc, r3]
 800d076:	3b2e      	.short	0x3b2e
 800d078:	5839      	.short	0x5839
 800d07a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d07e:	441d      	add	r5, r3
 800d080:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d084:	2b20      	cmp	r3, #32
 800d086:	bfc1      	itttt	gt
 800d088:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d08c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d090:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d094:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d098:	bfd6      	itet	le
 800d09a:	f1c3 0320 	rsble	r3, r3, #32
 800d09e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d0a2:	fa06 f003 	lslle.w	r0, r6, r3
 800d0a6:	f7f3 fa2d 	bl	8000504 <__aeabi_ui2d>
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d0b0:	3d01      	subs	r5, #1
 800d0b2:	920e      	str	r2, [sp, #56]	; 0x38
 800d0b4:	e76f      	b.n	800cf96 <_dtoa_r+0x126>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e7b3      	b.n	800d022 <_dtoa_r+0x1b2>
 800d0ba:	900c      	str	r0, [sp, #48]	; 0x30
 800d0bc:	e7b2      	b.n	800d024 <_dtoa_r+0x1b4>
 800d0be:	9b05      	ldr	r3, [sp, #20]
 800d0c0:	eba3 030b 	sub.w	r3, r3, fp
 800d0c4:	9305      	str	r3, [sp, #20]
 800d0c6:	f1cb 0300 	rsb	r3, fp, #0
 800d0ca:	9308      	str	r3, [sp, #32]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0d0:	e7bf      	b.n	800d052 <_dtoa_r+0x1e2>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	dc52      	bgt.n	800d182 <_dtoa_r+0x312>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	9304      	str	r3, [sp, #16]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	920a      	str	r2, [sp, #40]	; 0x28
 800d0e6:	e00b      	b.n	800d100 <_dtoa_r+0x290>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e7f3      	b.n	800d0d4 <_dtoa_r+0x264>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0f2:	445b      	add	r3, fp
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	9304      	str	r3, [sp, #16]
 800d0fc:	bfb8      	it	lt
 800d0fe:	2301      	movlt	r3, #1
 800d100:	69e0      	ldr	r0, [r4, #28]
 800d102:	2100      	movs	r1, #0
 800d104:	2204      	movs	r2, #4
 800d106:	f102 0614 	add.w	r6, r2, #20
 800d10a:	429e      	cmp	r6, r3
 800d10c:	d93d      	bls.n	800d18a <_dtoa_r+0x31a>
 800d10e:	6041      	str	r1, [r0, #4]
 800d110:	4620      	mov	r0, r4
 800d112:	f000 fd9f 	bl	800dc54 <_Balloc>
 800d116:	9000      	str	r0, [sp, #0]
 800d118:	2800      	cmp	r0, #0
 800d11a:	d139      	bne.n	800d190 <_dtoa_r+0x320>
 800d11c:	4b16      	ldr	r3, [pc, #88]	; (800d178 <_dtoa_r+0x308>)
 800d11e:	4602      	mov	r2, r0
 800d120:	f240 11af 	movw	r1, #431	; 0x1af
 800d124:	e6bd      	b.n	800cea2 <_dtoa_r+0x32>
 800d126:	2301      	movs	r3, #1
 800d128:	e7e1      	b.n	800d0ee <_dtoa_r+0x27e>
 800d12a:	2501      	movs	r5, #1
 800d12c:	2300      	movs	r3, #0
 800d12e:	9307      	str	r3, [sp, #28]
 800d130:	9509      	str	r5, [sp, #36]	; 0x24
 800d132:	f04f 33ff 	mov.w	r3, #4294967295
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	9304      	str	r3, [sp, #16]
 800d13a:	2200      	movs	r2, #0
 800d13c:	2312      	movs	r3, #18
 800d13e:	e7d1      	b.n	800d0e4 <_dtoa_r+0x274>
 800d140:	636f4361 	.word	0x636f4361
 800d144:	3fd287a7 	.word	0x3fd287a7
 800d148:	8b60c8b3 	.word	0x8b60c8b3
 800d14c:	3fc68a28 	.word	0x3fc68a28
 800d150:	509f79fb 	.word	0x509f79fb
 800d154:	3fd34413 	.word	0x3fd34413
 800d158:	0800ecc1 	.word	0x0800ecc1
 800d15c:	0800ecd8 	.word	0x0800ecd8
 800d160:	7ff00000 	.word	0x7ff00000
 800d164:	0800ecbd 	.word	0x0800ecbd
 800d168:	0800ecb4 	.word	0x0800ecb4
 800d16c:	0800ec91 	.word	0x0800ec91
 800d170:	3ff80000 	.word	0x3ff80000
 800d174:	0800edc8 	.word	0x0800edc8
 800d178:	0800ed30 	.word	0x0800ed30
 800d17c:	2301      	movs	r3, #1
 800d17e:	9309      	str	r3, [sp, #36]	; 0x24
 800d180:	e7d7      	b.n	800d132 <_dtoa_r+0x2c2>
 800d182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	e7ba      	b.n	800d100 <_dtoa_r+0x290>
 800d18a:	3101      	adds	r1, #1
 800d18c:	0052      	lsls	r2, r2, #1
 800d18e:	e7ba      	b.n	800d106 <_dtoa_r+0x296>
 800d190:	69e3      	ldr	r3, [r4, #28]
 800d192:	9a00      	ldr	r2, [sp, #0]
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	2b0e      	cmp	r3, #14
 800d19a:	f200 80a8 	bhi.w	800d2ee <_dtoa_r+0x47e>
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	f000 80a5 	beq.w	800d2ee <_dtoa_r+0x47e>
 800d1a4:	f1bb 0f00 	cmp.w	fp, #0
 800d1a8:	dd38      	ble.n	800d21c <_dtoa_r+0x3ac>
 800d1aa:	4bc0      	ldr	r3, [pc, #768]	; (800d4ac <_dtoa_r+0x63c>)
 800d1ac:	f00b 020f 	and.w	r2, fp, #15
 800d1b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d1b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d1bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d1c0:	d019      	beq.n	800d1f6 <_dtoa_r+0x386>
 800d1c2:	4bbb      	ldr	r3, [pc, #748]	; (800d4b0 <_dtoa_r+0x640>)
 800d1c4:	ec51 0b18 	vmov	r0, r1, d8
 800d1c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1cc:	f7f3 fb3e 	bl	800084c <__aeabi_ddiv>
 800d1d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1d4:	f008 080f 	and.w	r8, r8, #15
 800d1d8:	2503      	movs	r5, #3
 800d1da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d4b0 <_dtoa_r+0x640>
 800d1de:	f1b8 0f00 	cmp.w	r8, #0
 800d1e2:	d10a      	bne.n	800d1fa <_dtoa_r+0x38a>
 800d1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	463b      	mov	r3, r7
 800d1ec:	f7f3 fb2e 	bl	800084c <__aeabi_ddiv>
 800d1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1f4:	e02b      	b.n	800d24e <_dtoa_r+0x3de>
 800d1f6:	2502      	movs	r5, #2
 800d1f8:	e7ef      	b.n	800d1da <_dtoa_r+0x36a>
 800d1fa:	f018 0f01 	tst.w	r8, #1
 800d1fe:	d008      	beq.n	800d212 <_dtoa_r+0x3a2>
 800d200:	4630      	mov	r0, r6
 800d202:	4639      	mov	r1, r7
 800d204:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d208:	f7f3 f9f6 	bl	80005f8 <__aeabi_dmul>
 800d20c:	3501      	adds	r5, #1
 800d20e:	4606      	mov	r6, r0
 800d210:	460f      	mov	r7, r1
 800d212:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d216:	f109 0908 	add.w	r9, r9, #8
 800d21a:	e7e0      	b.n	800d1de <_dtoa_r+0x36e>
 800d21c:	f000 809f 	beq.w	800d35e <_dtoa_r+0x4ee>
 800d220:	f1cb 0600 	rsb	r6, fp, #0
 800d224:	4ba1      	ldr	r3, [pc, #644]	; (800d4ac <_dtoa_r+0x63c>)
 800d226:	4fa2      	ldr	r7, [pc, #648]	; (800d4b0 <_dtoa_r+0x640>)
 800d228:	f006 020f 	and.w	r2, r6, #15
 800d22c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	ec51 0b18 	vmov	r0, r1, d8
 800d238:	f7f3 f9de 	bl	80005f8 <__aeabi_dmul>
 800d23c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d240:	1136      	asrs	r6, r6, #4
 800d242:	2300      	movs	r3, #0
 800d244:	2502      	movs	r5, #2
 800d246:	2e00      	cmp	r6, #0
 800d248:	d17e      	bne.n	800d348 <_dtoa_r+0x4d8>
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1d0      	bne.n	800d1f0 <_dtoa_r+0x380>
 800d24e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d250:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 8084 	beq.w	800d362 <_dtoa_r+0x4f2>
 800d25a:	4b96      	ldr	r3, [pc, #600]	; (800d4b4 <_dtoa_r+0x644>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	4640      	mov	r0, r8
 800d260:	4649      	mov	r1, r9
 800d262:	f7f3 fc3b 	bl	8000adc <__aeabi_dcmplt>
 800d266:	2800      	cmp	r0, #0
 800d268:	d07b      	beq.n	800d362 <_dtoa_r+0x4f2>
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d078      	beq.n	800d362 <_dtoa_r+0x4f2>
 800d270:	9b01      	ldr	r3, [sp, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	dd39      	ble.n	800d2ea <_dtoa_r+0x47a>
 800d276:	4b90      	ldr	r3, [pc, #576]	; (800d4b8 <_dtoa_r+0x648>)
 800d278:	2200      	movs	r2, #0
 800d27a:	4640      	mov	r0, r8
 800d27c:	4649      	mov	r1, r9
 800d27e:	f7f3 f9bb 	bl	80005f8 <__aeabi_dmul>
 800d282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d286:	9e01      	ldr	r6, [sp, #4]
 800d288:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d28c:	3501      	adds	r5, #1
 800d28e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d292:	4628      	mov	r0, r5
 800d294:	f7f3 f946 	bl	8000524 <__aeabi_i2d>
 800d298:	4642      	mov	r2, r8
 800d29a:	464b      	mov	r3, r9
 800d29c:	f7f3 f9ac 	bl	80005f8 <__aeabi_dmul>
 800d2a0:	4b86      	ldr	r3, [pc, #536]	; (800d4bc <_dtoa_r+0x64c>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f7f2 fff2 	bl	800028c <__adddf3>
 800d2a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2b0:	9303      	str	r3, [sp, #12]
 800d2b2:	2e00      	cmp	r6, #0
 800d2b4:	d158      	bne.n	800d368 <_dtoa_r+0x4f8>
 800d2b6:	4b82      	ldr	r3, [pc, #520]	; (800d4c0 <_dtoa_r+0x650>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	4649      	mov	r1, r9
 800d2be:	f7f2 ffe3 	bl	8000288 <__aeabi_dsub>
 800d2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2c6:	4680      	mov	r8, r0
 800d2c8:	4689      	mov	r9, r1
 800d2ca:	f7f3 fc25 	bl	8000b18 <__aeabi_dcmpgt>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f040 8296 	bne.w	800d800 <_dtoa_r+0x990>
 800d2d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d2d8:	4640      	mov	r0, r8
 800d2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2de:	4649      	mov	r1, r9
 800d2e0:	f7f3 fbfc 	bl	8000adc <__aeabi_dcmplt>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f040 8289 	bne.w	800d7fc <_dtoa_r+0x98c>
 800d2ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d2ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f2c0 814e 	blt.w	800d592 <_dtoa_r+0x722>
 800d2f6:	f1bb 0f0e 	cmp.w	fp, #14
 800d2fa:	f300 814a 	bgt.w	800d592 <_dtoa_r+0x722>
 800d2fe:	4b6b      	ldr	r3, [pc, #428]	; (800d4ac <_dtoa_r+0x63c>)
 800d300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f280 80dc 	bge.w	800d4c8 <_dtoa_r+0x658>
 800d310:	9b04      	ldr	r3, [sp, #16]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f300 80d8 	bgt.w	800d4c8 <_dtoa_r+0x658>
 800d318:	f040 826f 	bne.w	800d7fa <_dtoa_r+0x98a>
 800d31c:	4b68      	ldr	r3, [pc, #416]	; (800d4c0 <_dtoa_r+0x650>)
 800d31e:	2200      	movs	r2, #0
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f3 f968 	bl	80005f8 <__aeabi_dmul>
 800d328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d32c:	f7f3 fbea 	bl	8000b04 <__aeabi_dcmpge>
 800d330:	9e04      	ldr	r6, [sp, #16]
 800d332:	4637      	mov	r7, r6
 800d334:	2800      	cmp	r0, #0
 800d336:	f040 8245 	bne.w	800d7c4 <_dtoa_r+0x954>
 800d33a:	9d00      	ldr	r5, [sp, #0]
 800d33c:	2331      	movs	r3, #49	; 0x31
 800d33e:	f805 3b01 	strb.w	r3, [r5], #1
 800d342:	f10b 0b01 	add.w	fp, fp, #1
 800d346:	e241      	b.n	800d7cc <_dtoa_r+0x95c>
 800d348:	07f2      	lsls	r2, r6, #31
 800d34a:	d505      	bpl.n	800d358 <_dtoa_r+0x4e8>
 800d34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d350:	f7f3 f952 	bl	80005f8 <__aeabi_dmul>
 800d354:	3501      	adds	r5, #1
 800d356:	2301      	movs	r3, #1
 800d358:	1076      	asrs	r6, r6, #1
 800d35a:	3708      	adds	r7, #8
 800d35c:	e773      	b.n	800d246 <_dtoa_r+0x3d6>
 800d35e:	2502      	movs	r5, #2
 800d360:	e775      	b.n	800d24e <_dtoa_r+0x3de>
 800d362:	9e04      	ldr	r6, [sp, #16]
 800d364:	465f      	mov	r7, fp
 800d366:	e792      	b.n	800d28e <_dtoa_r+0x41e>
 800d368:	9900      	ldr	r1, [sp, #0]
 800d36a:	4b50      	ldr	r3, [pc, #320]	; (800d4ac <_dtoa_r+0x63c>)
 800d36c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d370:	4431      	add	r1, r6
 800d372:	9102      	str	r1, [sp, #8]
 800d374:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d376:	eeb0 9a47 	vmov.f32	s18, s14
 800d37a:	eef0 9a67 	vmov.f32	s19, s15
 800d37e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d386:	2900      	cmp	r1, #0
 800d388:	d044      	beq.n	800d414 <_dtoa_r+0x5a4>
 800d38a:	494e      	ldr	r1, [pc, #312]	; (800d4c4 <_dtoa_r+0x654>)
 800d38c:	2000      	movs	r0, #0
 800d38e:	f7f3 fa5d 	bl	800084c <__aeabi_ddiv>
 800d392:	ec53 2b19 	vmov	r2, r3, d9
 800d396:	f7f2 ff77 	bl	8000288 <__aeabi_dsub>
 800d39a:	9d00      	ldr	r5, [sp, #0]
 800d39c:	ec41 0b19 	vmov	d9, r0, r1
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	f7f3 fbd8 	bl	8000b58 <__aeabi_d2iz>
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	f7f3 f8bb 	bl	8000524 <__aeabi_i2d>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	4649      	mov	r1, r9
 800d3b6:	f7f2 ff67 	bl	8000288 <__aeabi_dsub>
 800d3ba:	3630      	adds	r6, #48	; 0x30
 800d3bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d3c0:	ec53 2b19 	vmov	r2, r3, d9
 800d3c4:	4680      	mov	r8, r0
 800d3c6:	4689      	mov	r9, r1
 800d3c8:	f7f3 fb88 	bl	8000adc <__aeabi_dcmplt>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d164      	bne.n	800d49a <_dtoa_r+0x62a>
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	464b      	mov	r3, r9
 800d3d4:	4937      	ldr	r1, [pc, #220]	; (800d4b4 <_dtoa_r+0x644>)
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f7f2 ff56 	bl	8000288 <__aeabi_dsub>
 800d3dc:	ec53 2b19 	vmov	r2, r3, d9
 800d3e0:	f7f3 fb7c 	bl	8000adc <__aeabi_dcmplt>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	f040 80b6 	bne.w	800d556 <_dtoa_r+0x6e6>
 800d3ea:	9b02      	ldr	r3, [sp, #8]
 800d3ec:	429d      	cmp	r5, r3
 800d3ee:	f43f af7c 	beq.w	800d2ea <_dtoa_r+0x47a>
 800d3f2:	4b31      	ldr	r3, [pc, #196]	; (800d4b8 <_dtoa_r+0x648>)
 800d3f4:	ec51 0b19 	vmov	r0, r1, d9
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f7f3 f8fd 	bl	80005f8 <__aeabi_dmul>
 800d3fe:	4b2e      	ldr	r3, [pc, #184]	; (800d4b8 <_dtoa_r+0x648>)
 800d400:	ec41 0b19 	vmov	d9, r0, r1
 800d404:	2200      	movs	r2, #0
 800d406:	4640      	mov	r0, r8
 800d408:	4649      	mov	r1, r9
 800d40a:	f7f3 f8f5 	bl	80005f8 <__aeabi_dmul>
 800d40e:	4680      	mov	r8, r0
 800d410:	4689      	mov	r9, r1
 800d412:	e7c5      	b.n	800d3a0 <_dtoa_r+0x530>
 800d414:	ec51 0b17 	vmov	r0, r1, d7
 800d418:	f7f3 f8ee 	bl	80005f8 <__aeabi_dmul>
 800d41c:	9b02      	ldr	r3, [sp, #8]
 800d41e:	9d00      	ldr	r5, [sp, #0]
 800d420:	930f      	str	r3, [sp, #60]	; 0x3c
 800d422:	ec41 0b19 	vmov	d9, r0, r1
 800d426:	4649      	mov	r1, r9
 800d428:	4640      	mov	r0, r8
 800d42a:	f7f3 fb95 	bl	8000b58 <__aeabi_d2iz>
 800d42e:	4606      	mov	r6, r0
 800d430:	f7f3 f878 	bl	8000524 <__aeabi_i2d>
 800d434:	3630      	adds	r6, #48	; 0x30
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4640      	mov	r0, r8
 800d43c:	4649      	mov	r1, r9
 800d43e:	f7f2 ff23 	bl	8000288 <__aeabi_dsub>
 800d442:	f805 6b01 	strb.w	r6, [r5], #1
 800d446:	9b02      	ldr	r3, [sp, #8]
 800d448:	429d      	cmp	r5, r3
 800d44a:	4680      	mov	r8, r0
 800d44c:	4689      	mov	r9, r1
 800d44e:	f04f 0200 	mov.w	r2, #0
 800d452:	d124      	bne.n	800d49e <_dtoa_r+0x62e>
 800d454:	4b1b      	ldr	r3, [pc, #108]	; (800d4c4 <_dtoa_r+0x654>)
 800d456:	ec51 0b19 	vmov	r0, r1, d9
 800d45a:	f7f2 ff17 	bl	800028c <__adddf3>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	4640      	mov	r0, r8
 800d464:	4649      	mov	r1, r9
 800d466:	f7f3 fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d173      	bne.n	800d556 <_dtoa_r+0x6e6>
 800d46e:	ec53 2b19 	vmov	r2, r3, d9
 800d472:	4914      	ldr	r1, [pc, #80]	; (800d4c4 <_dtoa_r+0x654>)
 800d474:	2000      	movs	r0, #0
 800d476:	f7f2 ff07 	bl	8000288 <__aeabi_dsub>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4640      	mov	r0, r8
 800d480:	4649      	mov	r1, r9
 800d482:	f7f3 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800d486:	2800      	cmp	r0, #0
 800d488:	f43f af2f 	beq.w	800d2ea <_dtoa_r+0x47a>
 800d48c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d48e:	1e6b      	subs	r3, r5, #1
 800d490:	930f      	str	r3, [sp, #60]	; 0x3c
 800d492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d496:	2b30      	cmp	r3, #48	; 0x30
 800d498:	d0f8      	beq.n	800d48c <_dtoa_r+0x61c>
 800d49a:	46bb      	mov	fp, r7
 800d49c:	e04a      	b.n	800d534 <_dtoa_r+0x6c4>
 800d49e:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <_dtoa_r+0x648>)
 800d4a0:	f7f3 f8aa 	bl	80005f8 <__aeabi_dmul>
 800d4a4:	4680      	mov	r8, r0
 800d4a6:	4689      	mov	r9, r1
 800d4a8:	e7bd      	b.n	800d426 <_dtoa_r+0x5b6>
 800d4aa:	bf00      	nop
 800d4ac:	0800edc8 	.word	0x0800edc8
 800d4b0:	0800eda0 	.word	0x0800eda0
 800d4b4:	3ff00000 	.word	0x3ff00000
 800d4b8:	40240000 	.word	0x40240000
 800d4bc:	401c0000 	.word	0x401c0000
 800d4c0:	40140000 	.word	0x40140000
 800d4c4:	3fe00000 	.word	0x3fe00000
 800d4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d4cc:	9d00      	ldr	r5, [sp, #0]
 800d4ce:	4642      	mov	r2, r8
 800d4d0:	464b      	mov	r3, r9
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	f7f3 f9b9 	bl	800084c <__aeabi_ddiv>
 800d4da:	f7f3 fb3d 	bl	8000b58 <__aeabi_d2iz>
 800d4de:	9001      	str	r0, [sp, #4]
 800d4e0:	f7f3 f820 	bl	8000524 <__aeabi_i2d>
 800d4e4:	4642      	mov	r2, r8
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	f7f3 f886 	bl	80005f8 <__aeabi_dmul>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	4639      	mov	r1, r7
 800d4f4:	f7f2 fec8 	bl	8000288 <__aeabi_dsub>
 800d4f8:	9e01      	ldr	r6, [sp, #4]
 800d4fa:	9f04      	ldr	r7, [sp, #16]
 800d4fc:	3630      	adds	r6, #48	; 0x30
 800d4fe:	f805 6b01 	strb.w	r6, [r5], #1
 800d502:	9e00      	ldr	r6, [sp, #0]
 800d504:	1bae      	subs	r6, r5, r6
 800d506:	42b7      	cmp	r7, r6
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	d134      	bne.n	800d578 <_dtoa_r+0x708>
 800d50e:	f7f2 febd 	bl	800028c <__adddf3>
 800d512:	4642      	mov	r2, r8
 800d514:	464b      	mov	r3, r9
 800d516:	4606      	mov	r6, r0
 800d518:	460f      	mov	r7, r1
 800d51a:	f7f3 fafd 	bl	8000b18 <__aeabi_dcmpgt>
 800d51e:	b9c8      	cbnz	r0, 800d554 <_dtoa_r+0x6e4>
 800d520:	4642      	mov	r2, r8
 800d522:	464b      	mov	r3, r9
 800d524:	4630      	mov	r0, r6
 800d526:	4639      	mov	r1, r7
 800d528:	f7f3 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800d52c:	b110      	cbz	r0, 800d534 <_dtoa_r+0x6c4>
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	07db      	lsls	r3, r3, #31
 800d532:	d40f      	bmi.n	800d554 <_dtoa_r+0x6e4>
 800d534:	4651      	mov	r1, sl
 800d536:	4620      	mov	r0, r4
 800d538:	f000 fbcc 	bl	800dcd4 <_Bfree>
 800d53c:	2300      	movs	r3, #0
 800d53e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d540:	702b      	strb	r3, [r5, #0]
 800d542:	f10b 0301 	add.w	r3, fp, #1
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f43f ace2 	beq.w	800cf14 <_dtoa_r+0xa4>
 800d550:	601d      	str	r5, [r3, #0]
 800d552:	e4df      	b.n	800cf14 <_dtoa_r+0xa4>
 800d554:	465f      	mov	r7, fp
 800d556:	462b      	mov	r3, r5
 800d558:	461d      	mov	r5, r3
 800d55a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d55e:	2a39      	cmp	r2, #57	; 0x39
 800d560:	d106      	bne.n	800d570 <_dtoa_r+0x700>
 800d562:	9a00      	ldr	r2, [sp, #0]
 800d564:	429a      	cmp	r2, r3
 800d566:	d1f7      	bne.n	800d558 <_dtoa_r+0x6e8>
 800d568:	9900      	ldr	r1, [sp, #0]
 800d56a:	2230      	movs	r2, #48	; 0x30
 800d56c:	3701      	adds	r7, #1
 800d56e:	700a      	strb	r2, [r1, #0]
 800d570:	781a      	ldrb	r2, [r3, #0]
 800d572:	3201      	adds	r2, #1
 800d574:	701a      	strb	r2, [r3, #0]
 800d576:	e790      	b.n	800d49a <_dtoa_r+0x62a>
 800d578:	4ba3      	ldr	r3, [pc, #652]	; (800d808 <_dtoa_r+0x998>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	f7f3 f83c 	bl	80005f8 <__aeabi_dmul>
 800d580:	2200      	movs	r2, #0
 800d582:	2300      	movs	r3, #0
 800d584:	4606      	mov	r6, r0
 800d586:	460f      	mov	r7, r1
 800d588:	f7f3 fa9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d09e      	beq.n	800d4ce <_dtoa_r+0x65e>
 800d590:	e7d0      	b.n	800d534 <_dtoa_r+0x6c4>
 800d592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d594:	2a00      	cmp	r2, #0
 800d596:	f000 80ca 	beq.w	800d72e <_dtoa_r+0x8be>
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	2a01      	cmp	r2, #1
 800d59e:	f300 80ad 	bgt.w	800d6fc <_dtoa_r+0x88c>
 800d5a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5a4:	2a00      	cmp	r2, #0
 800d5a6:	f000 80a5 	beq.w	800d6f4 <_dtoa_r+0x884>
 800d5aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d5ae:	9e08      	ldr	r6, [sp, #32]
 800d5b0:	9d05      	ldr	r5, [sp, #20]
 800d5b2:	9a05      	ldr	r2, [sp, #20]
 800d5b4:	441a      	add	r2, r3
 800d5b6:	9205      	str	r2, [sp, #20]
 800d5b8:	9a06      	ldr	r2, [sp, #24]
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	441a      	add	r2, r3
 800d5be:	4620      	mov	r0, r4
 800d5c0:	9206      	str	r2, [sp, #24]
 800d5c2:	f000 fc3d 	bl	800de40 <__i2b>
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	b165      	cbz	r5, 800d5e4 <_dtoa_r+0x774>
 800d5ca:	9b06      	ldr	r3, [sp, #24]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	dd09      	ble.n	800d5e4 <_dtoa_r+0x774>
 800d5d0:	42ab      	cmp	r3, r5
 800d5d2:	9a05      	ldr	r2, [sp, #20]
 800d5d4:	bfa8      	it	ge
 800d5d6:	462b      	movge	r3, r5
 800d5d8:	1ad2      	subs	r2, r2, r3
 800d5da:	9205      	str	r2, [sp, #20]
 800d5dc:	9a06      	ldr	r2, [sp, #24]
 800d5de:	1aed      	subs	r5, r5, r3
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	9306      	str	r3, [sp, #24]
 800d5e4:	9b08      	ldr	r3, [sp, #32]
 800d5e6:	b1f3      	cbz	r3, 800d626 <_dtoa_r+0x7b6>
 800d5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80a3 	beq.w	800d736 <_dtoa_r+0x8c6>
 800d5f0:	2e00      	cmp	r6, #0
 800d5f2:	dd10      	ble.n	800d616 <_dtoa_r+0x7a6>
 800d5f4:	4639      	mov	r1, r7
 800d5f6:	4632      	mov	r2, r6
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 fce1 	bl	800dfc0 <__pow5mult>
 800d5fe:	4652      	mov	r2, sl
 800d600:	4601      	mov	r1, r0
 800d602:	4607      	mov	r7, r0
 800d604:	4620      	mov	r0, r4
 800d606:	f000 fc31 	bl	800de6c <__multiply>
 800d60a:	4651      	mov	r1, sl
 800d60c:	4680      	mov	r8, r0
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 fb60 	bl	800dcd4 <_Bfree>
 800d614:	46c2      	mov	sl, r8
 800d616:	9b08      	ldr	r3, [sp, #32]
 800d618:	1b9a      	subs	r2, r3, r6
 800d61a:	d004      	beq.n	800d626 <_dtoa_r+0x7b6>
 800d61c:	4651      	mov	r1, sl
 800d61e:	4620      	mov	r0, r4
 800d620:	f000 fcce 	bl	800dfc0 <__pow5mult>
 800d624:	4682      	mov	sl, r0
 800d626:	2101      	movs	r1, #1
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 fc09 	bl	800de40 <__i2b>
 800d62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d630:	2b00      	cmp	r3, #0
 800d632:	4606      	mov	r6, r0
 800d634:	f340 8081 	ble.w	800d73a <_dtoa_r+0x8ca>
 800d638:	461a      	mov	r2, r3
 800d63a:	4601      	mov	r1, r0
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fcbf 	bl	800dfc0 <__pow5mult>
 800d642:	9b07      	ldr	r3, [sp, #28]
 800d644:	2b01      	cmp	r3, #1
 800d646:	4606      	mov	r6, r0
 800d648:	dd7a      	ble.n	800d740 <_dtoa_r+0x8d0>
 800d64a:	f04f 0800 	mov.w	r8, #0
 800d64e:	6933      	ldr	r3, [r6, #16]
 800d650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d654:	6918      	ldr	r0, [r3, #16]
 800d656:	f000 fba5 	bl	800dda4 <__hi0bits>
 800d65a:	f1c0 0020 	rsb	r0, r0, #32
 800d65e:	9b06      	ldr	r3, [sp, #24]
 800d660:	4418      	add	r0, r3
 800d662:	f010 001f 	ands.w	r0, r0, #31
 800d666:	f000 8094 	beq.w	800d792 <_dtoa_r+0x922>
 800d66a:	f1c0 0320 	rsb	r3, r0, #32
 800d66e:	2b04      	cmp	r3, #4
 800d670:	f340 8085 	ble.w	800d77e <_dtoa_r+0x90e>
 800d674:	9b05      	ldr	r3, [sp, #20]
 800d676:	f1c0 001c 	rsb	r0, r0, #28
 800d67a:	4403      	add	r3, r0
 800d67c:	9305      	str	r3, [sp, #20]
 800d67e:	9b06      	ldr	r3, [sp, #24]
 800d680:	4403      	add	r3, r0
 800d682:	4405      	add	r5, r0
 800d684:	9306      	str	r3, [sp, #24]
 800d686:	9b05      	ldr	r3, [sp, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dd05      	ble.n	800d698 <_dtoa_r+0x828>
 800d68c:	4651      	mov	r1, sl
 800d68e:	461a      	mov	r2, r3
 800d690:	4620      	mov	r0, r4
 800d692:	f000 fcef 	bl	800e074 <__lshift>
 800d696:	4682      	mov	sl, r0
 800d698:	9b06      	ldr	r3, [sp, #24]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	dd05      	ble.n	800d6aa <_dtoa_r+0x83a>
 800d69e:	4631      	mov	r1, r6
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f000 fce6 	bl	800e074 <__lshift>
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d072      	beq.n	800d796 <_dtoa_r+0x926>
 800d6b0:	4631      	mov	r1, r6
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	f000 fd4a 	bl	800e14c <__mcmp>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	da6c      	bge.n	800d796 <_dtoa_r+0x926>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	4651      	mov	r1, sl
 800d6c0:	220a      	movs	r2, #10
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f000 fb28 	bl	800dd18 <__multadd>
 800d6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6ce:	4682      	mov	sl, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 81b0 	beq.w	800da36 <_dtoa_r+0xbc6>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4639      	mov	r1, r7
 800d6da:	220a      	movs	r2, #10
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f000 fb1b 	bl	800dd18 <__multadd>
 800d6e2:	9b01      	ldr	r3, [sp, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	f300 8096 	bgt.w	800d818 <_dtoa_r+0x9a8>
 800d6ec:	9b07      	ldr	r3, [sp, #28]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	dc59      	bgt.n	800d7a6 <_dtoa_r+0x936>
 800d6f2:	e091      	b.n	800d818 <_dtoa_r+0x9a8>
 800d6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d6fa:	e758      	b.n	800d5ae <_dtoa_r+0x73e>
 800d6fc:	9b04      	ldr	r3, [sp, #16]
 800d6fe:	1e5e      	subs	r6, r3, #1
 800d700:	9b08      	ldr	r3, [sp, #32]
 800d702:	42b3      	cmp	r3, r6
 800d704:	bfbf      	itttt	lt
 800d706:	9b08      	ldrlt	r3, [sp, #32]
 800d708:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d70a:	9608      	strlt	r6, [sp, #32]
 800d70c:	1af3      	sublt	r3, r6, r3
 800d70e:	bfb4      	ite	lt
 800d710:	18d2      	addlt	r2, r2, r3
 800d712:	1b9e      	subge	r6, r3, r6
 800d714:	9b04      	ldr	r3, [sp, #16]
 800d716:	bfbc      	itt	lt
 800d718:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d71a:	2600      	movlt	r6, #0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bfb7      	itett	lt
 800d720:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d724:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d728:	1a9d      	sublt	r5, r3, r2
 800d72a:	2300      	movlt	r3, #0
 800d72c:	e741      	b.n	800d5b2 <_dtoa_r+0x742>
 800d72e:	9e08      	ldr	r6, [sp, #32]
 800d730:	9d05      	ldr	r5, [sp, #20]
 800d732:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d734:	e748      	b.n	800d5c8 <_dtoa_r+0x758>
 800d736:	9a08      	ldr	r2, [sp, #32]
 800d738:	e770      	b.n	800d61c <_dtoa_r+0x7ac>
 800d73a:	9b07      	ldr	r3, [sp, #28]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	dc19      	bgt.n	800d774 <_dtoa_r+0x904>
 800d740:	9b02      	ldr	r3, [sp, #8]
 800d742:	b9bb      	cbnz	r3, 800d774 <_dtoa_r+0x904>
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d74a:	b99b      	cbnz	r3, 800d774 <_dtoa_r+0x904>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d752:	0d1b      	lsrs	r3, r3, #20
 800d754:	051b      	lsls	r3, r3, #20
 800d756:	b183      	cbz	r3, 800d77a <_dtoa_r+0x90a>
 800d758:	9b05      	ldr	r3, [sp, #20]
 800d75a:	3301      	adds	r3, #1
 800d75c:	9305      	str	r3, [sp, #20]
 800d75e:	9b06      	ldr	r3, [sp, #24]
 800d760:	3301      	adds	r3, #1
 800d762:	9306      	str	r3, [sp, #24]
 800d764:	f04f 0801 	mov.w	r8, #1
 800d768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f47f af6f 	bne.w	800d64e <_dtoa_r+0x7de>
 800d770:	2001      	movs	r0, #1
 800d772:	e774      	b.n	800d65e <_dtoa_r+0x7ee>
 800d774:	f04f 0800 	mov.w	r8, #0
 800d778:	e7f6      	b.n	800d768 <_dtoa_r+0x8f8>
 800d77a:	4698      	mov	r8, r3
 800d77c:	e7f4      	b.n	800d768 <_dtoa_r+0x8f8>
 800d77e:	d082      	beq.n	800d686 <_dtoa_r+0x816>
 800d780:	9a05      	ldr	r2, [sp, #20]
 800d782:	331c      	adds	r3, #28
 800d784:	441a      	add	r2, r3
 800d786:	9205      	str	r2, [sp, #20]
 800d788:	9a06      	ldr	r2, [sp, #24]
 800d78a:	441a      	add	r2, r3
 800d78c:	441d      	add	r5, r3
 800d78e:	9206      	str	r2, [sp, #24]
 800d790:	e779      	b.n	800d686 <_dtoa_r+0x816>
 800d792:	4603      	mov	r3, r0
 800d794:	e7f4      	b.n	800d780 <_dtoa_r+0x910>
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dc37      	bgt.n	800d80c <_dtoa_r+0x99c>
 800d79c:	9b07      	ldr	r3, [sp, #28]
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	dd34      	ble.n	800d80c <_dtoa_r+0x99c>
 800d7a2:	9b04      	ldr	r3, [sp, #16]
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	9b01      	ldr	r3, [sp, #4]
 800d7a8:	b963      	cbnz	r3, 800d7c4 <_dtoa_r+0x954>
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	2205      	movs	r2, #5
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f000 fab2 	bl	800dd18 <__multadd>
 800d7b4:	4601      	mov	r1, r0
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	4650      	mov	r0, sl
 800d7ba:	f000 fcc7 	bl	800e14c <__mcmp>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	f73f adbb 	bgt.w	800d33a <_dtoa_r+0x4ca>
 800d7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7c6:	9d00      	ldr	r5, [sp, #0]
 800d7c8:	ea6f 0b03 	mvn.w	fp, r3
 800d7cc:	f04f 0800 	mov.w	r8, #0
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f000 fa7e 	bl	800dcd4 <_Bfree>
 800d7d8:	2f00      	cmp	r7, #0
 800d7da:	f43f aeab 	beq.w	800d534 <_dtoa_r+0x6c4>
 800d7de:	f1b8 0f00 	cmp.w	r8, #0
 800d7e2:	d005      	beq.n	800d7f0 <_dtoa_r+0x980>
 800d7e4:	45b8      	cmp	r8, r7
 800d7e6:	d003      	beq.n	800d7f0 <_dtoa_r+0x980>
 800d7e8:	4641      	mov	r1, r8
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 fa72 	bl	800dcd4 <_Bfree>
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f000 fa6e 	bl	800dcd4 <_Bfree>
 800d7f8:	e69c      	b.n	800d534 <_dtoa_r+0x6c4>
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	4637      	mov	r7, r6
 800d7fe:	e7e1      	b.n	800d7c4 <_dtoa_r+0x954>
 800d800:	46bb      	mov	fp, r7
 800d802:	4637      	mov	r7, r6
 800d804:	e599      	b.n	800d33a <_dtoa_r+0x4ca>
 800d806:	bf00      	nop
 800d808:	40240000 	.word	0x40240000
 800d80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 80c8 	beq.w	800d9a4 <_dtoa_r+0xb34>
 800d814:	9b04      	ldr	r3, [sp, #16]
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	2d00      	cmp	r5, #0
 800d81a:	dd05      	ble.n	800d828 <_dtoa_r+0x9b8>
 800d81c:	4639      	mov	r1, r7
 800d81e:	462a      	mov	r2, r5
 800d820:	4620      	mov	r0, r4
 800d822:	f000 fc27 	bl	800e074 <__lshift>
 800d826:	4607      	mov	r7, r0
 800d828:	f1b8 0f00 	cmp.w	r8, #0
 800d82c:	d05b      	beq.n	800d8e6 <_dtoa_r+0xa76>
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fa0f 	bl	800dc54 <_Balloc>
 800d836:	4605      	mov	r5, r0
 800d838:	b928      	cbnz	r0, 800d846 <_dtoa_r+0x9d6>
 800d83a:	4b83      	ldr	r3, [pc, #524]	; (800da48 <_dtoa_r+0xbd8>)
 800d83c:	4602      	mov	r2, r0
 800d83e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d842:	f7ff bb2e 	b.w	800cea2 <_dtoa_r+0x32>
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	3202      	adds	r2, #2
 800d84a:	0092      	lsls	r2, r2, #2
 800d84c:	f107 010c 	add.w	r1, r7, #12
 800d850:	300c      	adds	r0, #12
 800d852:	f7ff fa76 	bl	800cd42 <memcpy>
 800d856:	2201      	movs	r2, #1
 800d858:	4629      	mov	r1, r5
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 fc0a 	bl	800e074 <__lshift>
 800d860:	9b00      	ldr	r3, [sp, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	9304      	str	r3, [sp, #16]
 800d866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d86a:	4413      	add	r3, r2
 800d86c:	9308      	str	r3, [sp, #32]
 800d86e:	9b02      	ldr	r3, [sp, #8]
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	46b8      	mov	r8, r7
 800d876:	9306      	str	r3, [sp, #24]
 800d878:	4607      	mov	r7, r0
 800d87a:	9b04      	ldr	r3, [sp, #16]
 800d87c:	4631      	mov	r1, r6
 800d87e:	3b01      	subs	r3, #1
 800d880:	4650      	mov	r0, sl
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	f7ff fa6b 	bl	800cd5e <quorem>
 800d888:	4641      	mov	r1, r8
 800d88a:	9002      	str	r0, [sp, #8]
 800d88c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d890:	4650      	mov	r0, sl
 800d892:	f000 fc5b 	bl	800e14c <__mcmp>
 800d896:	463a      	mov	r2, r7
 800d898:	9005      	str	r0, [sp, #20]
 800d89a:	4631      	mov	r1, r6
 800d89c:	4620      	mov	r0, r4
 800d89e:	f000 fc71 	bl	800e184 <__mdiff>
 800d8a2:	68c2      	ldr	r2, [r0, #12]
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	bb02      	cbnz	r2, 800d8ea <_dtoa_r+0xa7a>
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	4650      	mov	r0, sl
 800d8ac:	f000 fc4e 	bl	800e14c <__mcmp>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	9209      	str	r2, [sp, #36]	; 0x24
 800d8b8:	f000 fa0c 	bl	800dcd4 <_Bfree>
 800d8bc:	9b07      	ldr	r3, [sp, #28]
 800d8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c0:	9d04      	ldr	r5, [sp, #16]
 800d8c2:	ea43 0102 	orr.w	r1, r3, r2
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	4319      	orrs	r1, r3
 800d8ca:	d110      	bne.n	800d8ee <_dtoa_r+0xa7e>
 800d8cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d8d0:	d029      	beq.n	800d926 <_dtoa_r+0xab6>
 800d8d2:	9b05      	ldr	r3, [sp, #20]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	dd02      	ble.n	800d8de <_dtoa_r+0xa6e>
 800d8d8:	9b02      	ldr	r3, [sp, #8]
 800d8da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d8de:	9b01      	ldr	r3, [sp, #4]
 800d8e0:	f883 9000 	strb.w	r9, [r3]
 800d8e4:	e774      	b.n	800d7d0 <_dtoa_r+0x960>
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	e7ba      	b.n	800d860 <_dtoa_r+0x9f0>
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	e7e1      	b.n	800d8b2 <_dtoa_r+0xa42>
 800d8ee:	9b05      	ldr	r3, [sp, #20]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	db04      	blt.n	800d8fe <_dtoa_r+0xa8e>
 800d8f4:	9907      	ldr	r1, [sp, #28]
 800d8f6:	430b      	orrs	r3, r1
 800d8f8:	9906      	ldr	r1, [sp, #24]
 800d8fa:	430b      	orrs	r3, r1
 800d8fc:	d120      	bne.n	800d940 <_dtoa_r+0xad0>
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	dded      	ble.n	800d8de <_dtoa_r+0xa6e>
 800d902:	4651      	mov	r1, sl
 800d904:	2201      	movs	r2, #1
 800d906:	4620      	mov	r0, r4
 800d908:	f000 fbb4 	bl	800e074 <__lshift>
 800d90c:	4631      	mov	r1, r6
 800d90e:	4682      	mov	sl, r0
 800d910:	f000 fc1c 	bl	800e14c <__mcmp>
 800d914:	2800      	cmp	r0, #0
 800d916:	dc03      	bgt.n	800d920 <_dtoa_r+0xab0>
 800d918:	d1e1      	bne.n	800d8de <_dtoa_r+0xa6e>
 800d91a:	f019 0f01 	tst.w	r9, #1
 800d91e:	d0de      	beq.n	800d8de <_dtoa_r+0xa6e>
 800d920:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d924:	d1d8      	bne.n	800d8d8 <_dtoa_r+0xa68>
 800d926:	9a01      	ldr	r2, [sp, #4]
 800d928:	2339      	movs	r3, #57	; 0x39
 800d92a:	7013      	strb	r3, [r2, #0]
 800d92c:	462b      	mov	r3, r5
 800d92e:	461d      	mov	r5, r3
 800d930:	3b01      	subs	r3, #1
 800d932:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d936:	2a39      	cmp	r2, #57	; 0x39
 800d938:	d06c      	beq.n	800da14 <_dtoa_r+0xba4>
 800d93a:	3201      	adds	r2, #1
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	e747      	b.n	800d7d0 <_dtoa_r+0x960>
 800d940:	2a00      	cmp	r2, #0
 800d942:	dd07      	ble.n	800d954 <_dtoa_r+0xae4>
 800d944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d948:	d0ed      	beq.n	800d926 <_dtoa_r+0xab6>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	f109 0301 	add.w	r3, r9, #1
 800d950:	7013      	strb	r3, [r2, #0]
 800d952:	e73d      	b.n	800d7d0 <_dtoa_r+0x960>
 800d954:	9b04      	ldr	r3, [sp, #16]
 800d956:	9a08      	ldr	r2, [sp, #32]
 800d958:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d043      	beq.n	800d9e8 <_dtoa_r+0xb78>
 800d960:	4651      	mov	r1, sl
 800d962:	2300      	movs	r3, #0
 800d964:	220a      	movs	r2, #10
 800d966:	4620      	mov	r0, r4
 800d968:	f000 f9d6 	bl	800dd18 <__multadd>
 800d96c:	45b8      	cmp	r8, r7
 800d96e:	4682      	mov	sl, r0
 800d970:	f04f 0300 	mov.w	r3, #0
 800d974:	f04f 020a 	mov.w	r2, #10
 800d978:	4641      	mov	r1, r8
 800d97a:	4620      	mov	r0, r4
 800d97c:	d107      	bne.n	800d98e <_dtoa_r+0xb1e>
 800d97e:	f000 f9cb 	bl	800dd18 <__multadd>
 800d982:	4680      	mov	r8, r0
 800d984:	4607      	mov	r7, r0
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	3301      	adds	r3, #1
 800d98a:	9304      	str	r3, [sp, #16]
 800d98c:	e775      	b.n	800d87a <_dtoa_r+0xa0a>
 800d98e:	f000 f9c3 	bl	800dd18 <__multadd>
 800d992:	4639      	mov	r1, r7
 800d994:	4680      	mov	r8, r0
 800d996:	2300      	movs	r3, #0
 800d998:	220a      	movs	r2, #10
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 f9bc 	bl	800dd18 <__multadd>
 800d9a0:	4607      	mov	r7, r0
 800d9a2:	e7f0      	b.n	800d986 <_dtoa_r+0xb16>
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	9301      	str	r3, [sp, #4]
 800d9a8:	9d00      	ldr	r5, [sp, #0]
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	4650      	mov	r0, sl
 800d9ae:	f7ff f9d6 	bl	800cd5e <quorem>
 800d9b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d9b6:	9b00      	ldr	r3, [sp, #0]
 800d9b8:	f805 9b01 	strb.w	r9, [r5], #1
 800d9bc:	1aea      	subs	r2, r5, r3
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	dd07      	ble.n	800d9d4 <_dtoa_r+0xb64>
 800d9c4:	4651      	mov	r1, sl
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	220a      	movs	r2, #10
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f000 f9a4 	bl	800dd18 <__multadd>
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	e7ea      	b.n	800d9aa <_dtoa_r+0xb3a>
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	bfc8      	it	gt
 800d9da:	461d      	movgt	r5, r3
 800d9dc:	9b00      	ldr	r3, [sp, #0]
 800d9de:	bfd8      	it	le
 800d9e0:	2501      	movle	r5, #1
 800d9e2:	441d      	add	r5, r3
 800d9e4:	f04f 0800 	mov.w	r8, #0
 800d9e8:	4651      	mov	r1, sl
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f000 fb41 	bl	800e074 <__lshift>
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4682      	mov	sl, r0
 800d9f6:	f000 fba9 	bl	800e14c <__mcmp>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	dc96      	bgt.n	800d92c <_dtoa_r+0xabc>
 800d9fe:	d102      	bne.n	800da06 <_dtoa_r+0xb96>
 800da00:	f019 0f01 	tst.w	r9, #1
 800da04:	d192      	bne.n	800d92c <_dtoa_r+0xabc>
 800da06:	462b      	mov	r3, r5
 800da08:	461d      	mov	r5, r3
 800da0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da0e:	2a30      	cmp	r2, #48	; 0x30
 800da10:	d0fa      	beq.n	800da08 <_dtoa_r+0xb98>
 800da12:	e6dd      	b.n	800d7d0 <_dtoa_r+0x960>
 800da14:	9a00      	ldr	r2, [sp, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d189      	bne.n	800d92e <_dtoa_r+0xabe>
 800da1a:	f10b 0b01 	add.w	fp, fp, #1
 800da1e:	2331      	movs	r3, #49	; 0x31
 800da20:	e796      	b.n	800d950 <_dtoa_r+0xae0>
 800da22:	4b0a      	ldr	r3, [pc, #40]	; (800da4c <_dtoa_r+0xbdc>)
 800da24:	f7ff ba99 	b.w	800cf5a <_dtoa_r+0xea>
 800da28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f47f aa6d 	bne.w	800cf0a <_dtoa_r+0x9a>
 800da30:	4b07      	ldr	r3, [pc, #28]	; (800da50 <_dtoa_r+0xbe0>)
 800da32:	f7ff ba92 	b.w	800cf5a <_dtoa_r+0xea>
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	dcb5      	bgt.n	800d9a8 <_dtoa_r+0xb38>
 800da3c:	9b07      	ldr	r3, [sp, #28]
 800da3e:	2b02      	cmp	r3, #2
 800da40:	f73f aeb1 	bgt.w	800d7a6 <_dtoa_r+0x936>
 800da44:	e7b0      	b.n	800d9a8 <_dtoa_r+0xb38>
 800da46:	bf00      	nop
 800da48:	0800ed30 	.word	0x0800ed30
 800da4c:	0800ec90 	.word	0x0800ec90
 800da50:	0800ecb4 	.word	0x0800ecb4

0800da54 <_free_r>:
 800da54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da56:	2900      	cmp	r1, #0
 800da58:	d044      	beq.n	800dae4 <_free_r+0x90>
 800da5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da5e:	9001      	str	r0, [sp, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	f1a1 0404 	sub.w	r4, r1, #4
 800da66:	bfb8      	it	lt
 800da68:	18e4      	addlt	r4, r4, r3
 800da6a:	f000 f8e7 	bl	800dc3c <__malloc_lock>
 800da6e:	4a1e      	ldr	r2, [pc, #120]	; (800dae8 <_free_r+0x94>)
 800da70:	9801      	ldr	r0, [sp, #4]
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	b933      	cbnz	r3, 800da84 <_free_r+0x30>
 800da76:	6063      	str	r3, [r4, #4]
 800da78:	6014      	str	r4, [r2, #0]
 800da7a:	b003      	add	sp, #12
 800da7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da80:	f000 b8e2 	b.w	800dc48 <__malloc_unlock>
 800da84:	42a3      	cmp	r3, r4
 800da86:	d908      	bls.n	800da9a <_free_r+0x46>
 800da88:	6825      	ldr	r5, [r4, #0]
 800da8a:	1961      	adds	r1, r4, r5
 800da8c:	428b      	cmp	r3, r1
 800da8e:	bf01      	itttt	eq
 800da90:	6819      	ldreq	r1, [r3, #0]
 800da92:	685b      	ldreq	r3, [r3, #4]
 800da94:	1949      	addeq	r1, r1, r5
 800da96:	6021      	streq	r1, [r4, #0]
 800da98:	e7ed      	b.n	800da76 <_free_r+0x22>
 800da9a:	461a      	mov	r2, r3
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	b10b      	cbz	r3, 800daa4 <_free_r+0x50>
 800daa0:	42a3      	cmp	r3, r4
 800daa2:	d9fa      	bls.n	800da9a <_free_r+0x46>
 800daa4:	6811      	ldr	r1, [r2, #0]
 800daa6:	1855      	adds	r5, r2, r1
 800daa8:	42a5      	cmp	r5, r4
 800daaa:	d10b      	bne.n	800dac4 <_free_r+0x70>
 800daac:	6824      	ldr	r4, [r4, #0]
 800daae:	4421      	add	r1, r4
 800dab0:	1854      	adds	r4, r2, r1
 800dab2:	42a3      	cmp	r3, r4
 800dab4:	6011      	str	r1, [r2, #0]
 800dab6:	d1e0      	bne.n	800da7a <_free_r+0x26>
 800dab8:	681c      	ldr	r4, [r3, #0]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	6053      	str	r3, [r2, #4]
 800dabe:	440c      	add	r4, r1
 800dac0:	6014      	str	r4, [r2, #0]
 800dac2:	e7da      	b.n	800da7a <_free_r+0x26>
 800dac4:	d902      	bls.n	800dacc <_free_r+0x78>
 800dac6:	230c      	movs	r3, #12
 800dac8:	6003      	str	r3, [r0, #0]
 800daca:	e7d6      	b.n	800da7a <_free_r+0x26>
 800dacc:	6825      	ldr	r5, [r4, #0]
 800dace:	1961      	adds	r1, r4, r5
 800dad0:	428b      	cmp	r3, r1
 800dad2:	bf04      	itt	eq
 800dad4:	6819      	ldreq	r1, [r3, #0]
 800dad6:	685b      	ldreq	r3, [r3, #4]
 800dad8:	6063      	str	r3, [r4, #4]
 800dada:	bf04      	itt	eq
 800dadc:	1949      	addeq	r1, r1, r5
 800dade:	6021      	streq	r1, [r4, #0]
 800dae0:	6054      	str	r4, [r2, #4]
 800dae2:	e7ca      	b.n	800da7a <_free_r+0x26>
 800dae4:	b003      	add	sp, #12
 800dae6:	bd30      	pop	{r4, r5, pc}
 800dae8:	200054a8 	.word	0x200054a8

0800daec <malloc>:
 800daec:	4b02      	ldr	r3, [pc, #8]	; (800daf8 <malloc+0xc>)
 800daee:	4601      	mov	r1, r0
 800daf0:	6818      	ldr	r0, [r3, #0]
 800daf2:	f000 b823 	b.w	800db3c <_malloc_r>
 800daf6:	bf00      	nop
 800daf8:	2000006c 	.word	0x2000006c

0800dafc <sbrk_aligned>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	4e0e      	ldr	r6, [pc, #56]	; (800db38 <sbrk_aligned+0x3c>)
 800db00:	460c      	mov	r4, r1
 800db02:	6831      	ldr	r1, [r6, #0]
 800db04:	4605      	mov	r5, r0
 800db06:	b911      	cbnz	r1, 800db0e <sbrk_aligned+0x12>
 800db08:	f000 fcce 	bl	800e4a8 <_sbrk_r>
 800db0c:	6030      	str	r0, [r6, #0]
 800db0e:	4621      	mov	r1, r4
 800db10:	4628      	mov	r0, r5
 800db12:	f000 fcc9 	bl	800e4a8 <_sbrk_r>
 800db16:	1c43      	adds	r3, r0, #1
 800db18:	d00a      	beq.n	800db30 <sbrk_aligned+0x34>
 800db1a:	1cc4      	adds	r4, r0, #3
 800db1c:	f024 0403 	bic.w	r4, r4, #3
 800db20:	42a0      	cmp	r0, r4
 800db22:	d007      	beq.n	800db34 <sbrk_aligned+0x38>
 800db24:	1a21      	subs	r1, r4, r0
 800db26:	4628      	mov	r0, r5
 800db28:	f000 fcbe 	bl	800e4a8 <_sbrk_r>
 800db2c:	3001      	adds	r0, #1
 800db2e:	d101      	bne.n	800db34 <sbrk_aligned+0x38>
 800db30:	f04f 34ff 	mov.w	r4, #4294967295
 800db34:	4620      	mov	r0, r4
 800db36:	bd70      	pop	{r4, r5, r6, pc}
 800db38:	200054ac 	.word	0x200054ac

0800db3c <_malloc_r>:
 800db3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db40:	1ccd      	adds	r5, r1, #3
 800db42:	f025 0503 	bic.w	r5, r5, #3
 800db46:	3508      	adds	r5, #8
 800db48:	2d0c      	cmp	r5, #12
 800db4a:	bf38      	it	cc
 800db4c:	250c      	movcc	r5, #12
 800db4e:	2d00      	cmp	r5, #0
 800db50:	4607      	mov	r7, r0
 800db52:	db01      	blt.n	800db58 <_malloc_r+0x1c>
 800db54:	42a9      	cmp	r1, r5
 800db56:	d905      	bls.n	800db64 <_malloc_r+0x28>
 800db58:	230c      	movs	r3, #12
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	2600      	movs	r6, #0
 800db5e:	4630      	mov	r0, r6
 800db60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dc38 <_malloc_r+0xfc>
 800db68:	f000 f868 	bl	800dc3c <__malloc_lock>
 800db6c:	f8d8 3000 	ldr.w	r3, [r8]
 800db70:	461c      	mov	r4, r3
 800db72:	bb5c      	cbnz	r4, 800dbcc <_malloc_r+0x90>
 800db74:	4629      	mov	r1, r5
 800db76:	4638      	mov	r0, r7
 800db78:	f7ff ffc0 	bl	800dafc <sbrk_aligned>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	4604      	mov	r4, r0
 800db80:	d155      	bne.n	800dc2e <_malloc_r+0xf2>
 800db82:	f8d8 4000 	ldr.w	r4, [r8]
 800db86:	4626      	mov	r6, r4
 800db88:	2e00      	cmp	r6, #0
 800db8a:	d145      	bne.n	800dc18 <_malloc_r+0xdc>
 800db8c:	2c00      	cmp	r4, #0
 800db8e:	d048      	beq.n	800dc22 <_malloc_r+0xe6>
 800db90:	6823      	ldr	r3, [r4, #0]
 800db92:	4631      	mov	r1, r6
 800db94:	4638      	mov	r0, r7
 800db96:	eb04 0903 	add.w	r9, r4, r3
 800db9a:	f000 fc85 	bl	800e4a8 <_sbrk_r>
 800db9e:	4581      	cmp	r9, r0
 800dba0:	d13f      	bne.n	800dc22 <_malloc_r+0xe6>
 800dba2:	6821      	ldr	r1, [r4, #0]
 800dba4:	1a6d      	subs	r5, r5, r1
 800dba6:	4629      	mov	r1, r5
 800dba8:	4638      	mov	r0, r7
 800dbaa:	f7ff ffa7 	bl	800dafc <sbrk_aligned>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d037      	beq.n	800dc22 <_malloc_r+0xe6>
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	442b      	add	r3, r5
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d038      	beq.n	800dc32 <_malloc_r+0xf6>
 800dbc0:	685a      	ldr	r2, [r3, #4]
 800dbc2:	42a2      	cmp	r2, r4
 800dbc4:	d12b      	bne.n	800dc1e <_malloc_r+0xe2>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	605a      	str	r2, [r3, #4]
 800dbca:	e00f      	b.n	800dbec <_malloc_r+0xb0>
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	1b52      	subs	r2, r2, r5
 800dbd0:	d41f      	bmi.n	800dc12 <_malloc_r+0xd6>
 800dbd2:	2a0b      	cmp	r2, #11
 800dbd4:	d917      	bls.n	800dc06 <_malloc_r+0xca>
 800dbd6:	1961      	adds	r1, r4, r5
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	6025      	str	r5, [r4, #0]
 800dbdc:	bf18      	it	ne
 800dbde:	6059      	strne	r1, [r3, #4]
 800dbe0:	6863      	ldr	r3, [r4, #4]
 800dbe2:	bf08      	it	eq
 800dbe4:	f8c8 1000 	streq.w	r1, [r8]
 800dbe8:	5162      	str	r2, [r4, r5]
 800dbea:	604b      	str	r3, [r1, #4]
 800dbec:	4638      	mov	r0, r7
 800dbee:	f104 060b 	add.w	r6, r4, #11
 800dbf2:	f000 f829 	bl	800dc48 <__malloc_unlock>
 800dbf6:	f026 0607 	bic.w	r6, r6, #7
 800dbfa:	1d23      	adds	r3, r4, #4
 800dbfc:	1af2      	subs	r2, r6, r3
 800dbfe:	d0ae      	beq.n	800db5e <_malloc_r+0x22>
 800dc00:	1b9b      	subs	r3, r3, r6
 800dc02:	50a3      	str	r3, [r4, r2]
 800dc04:	e7ab      	b.n	800db5e <_malloc_r+0x22>
 800dc06:	42a3      	cmp	r3, r4
 800dc08:	6862      	ldr	r2, [r4, #4]
 800dc0a:	d1dd      	bne.n	800dbc8 <_malloc_r+0x8c>
 800dc0c:	f8c8 2000 	str.w	r2, [r8]
 800dc10:	e7ec      	b.n	800dbec <_malloc_r+0xb0>
 800dc12:	4623      	mov	r3, r4
 800dc14:	6864      	ldr	r4, [r4, #4]
 800dc16:	e7ac      	b.n	800db72 <_malloc_r+0x36>
 800dc18:	4634      	mov	r4, r6
 800dc1a:	6876      	ldr	r6, [r6, #4]
 800dc1c:	e7b4      	b.n	800db88 <_malloc_r+0x4c>
 800dc1e:	4613      	mov	r3, r2
 800dc20:	e7cc      	b.n	800dbbc <_malloc_r+0x80>
 800dc22:	230c      	movs	r3, #12
 800dc24:	603b      	str	r3, [r7, #0]
 800dc26:	4638      	mov	r0, r7
 800dc28:	f000 f80e 	bl	800dc48 <__malloc_unlock>
 800dc2c:	e797      	b.n	800db5e <_malloc_r+0x22>
 800dc2e:	6025      	str	r5, [r4, #0]
 800dc30:	e7dc      	b.n	800dbec <_malloc_r+0xb0>
 800dc32:	605b      	str	r3, [r3, #4]
 800dc34:	deff      	udf	#255	; 0xff
 800dc36:	bf00      	nop
 800dc38:	200054a8 	.word	0x200054a8

0800dc3c <__malloc_lock>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	; (800dc44 <__malloc_lock+0x8>)
 800dc3e:	f7ff b87e 	b.w	800cd3e <__retarget_lock_acquire_recursive>
 800dc42:	bf00      	nop
 800dc44:	200054a4 	.word	0x200054a4

0800dc48 <__malloc_unlock>:
 800dc48:	4801      	ldr	r0, [pc, #4]	; (800dc50 <__malloc_unlock+0x8>)
 800dc4a:	f7ff b879 	b.w	800cd40 <__retarget_lock_release_recursive>
 800dc4e:	bf00      	nop
 800dc50:	200054a4 	.word	0x200054a4

0800dc54 <_Balloc>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	69c6      	ldr	r6, [r0, #28]
 800dc58:	4604      	mov	r4, r0
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	b976      	cbnz	r6, 800dc7c <_Balloc+0x28>
 800dc5e:	2010      	movs	r0, #16
 800dc60:	f7ff ff44 	bl	800daec <malloc>
 800dc64:	4602      	mov	r2, r0
 800dc66:	61e0      	str	r0, [r4, #28]
 800dc68:	b920      	cbnz	r0, 800dc74 <_Balloc+0x20>
 800dc6a:	4b18      	ldr	r3, [pc, #96]	; (800dccc <_Balloc+0x78>)
 800dc6c:	4818      	ldr	r0, [pc, #96]	; (800dcd0 <_Balloc+0x7c>)
 800dc6e:	216b      	movs	r1, #107	; 0x6b
 800dc70:	f000 fc2a 	bl	800e4c8 <__assert_func>
 800dc74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc78:	6006      	str	r6, [r0, #0]
 800dc7a:	60c6      	str	r6, [r0, #12]
 800dc7c:	69e6      	ldr	r6, [r4, #28]
 800dc7e:	68f3      	ldr	r3, [r6, #12]
 800dc80:	b183      	cbz	r3, 800dca4 <_Balloc+0x50>
 800dc82:	69e3      	ldr	r3, [r4, #28]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc8a:	b9b8      	cbnz	r0, 800dcbc <_Balloc+0x68>
 800dc8c:	2101      	movs	r1, #1
 800dc8e:	fa01 f605 	lsl.w	r6, r1, r5
 800dc92:	1d72      	adds	r2, r6, #5
 800dc94:	0092      	lsls	r2, r2, #2
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 fc34 	bl	800e504 <_calloc_r>
 800dc9c:	b160      	cbz	r0, 800dcb8 <_Balloc+0x64>
 800dc9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dca2:	e00e      	b.n	800dcc2 <_Balloc+0x6e>
 800dca4:	2221      	movs	r2, #33	; 0x21
 800dca6:	2104      	movs	r1, #4
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fc2b 	bl	800e504 <_calloc_r>
 800dcae:	69e3      	ldr	r3, [r4, #28]
 800dcb0:	60f0      	str	r0, [r6, #12]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1e4      	bne.n	800dc82 <_Balloc+0x2e>
 800dcb8:	2000      	movs	r0, #0
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	6802      	ldr	r2, [r0, #0]
 800dcbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcc8:	e7f7      	b.n	800dcba <_Balloc+0x66>
 800dcca:	bf00      	nop
 800dccc:	0800ecc1 	.word	0x0800ecc1
 800dcd0:	0800ed41 	.word	0x0800ed41

0800dcd4 <_Bfree>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	69c6      	ldr	r6, [r0, #28]
 800dcd8:	4605      	mov	r5, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	b976      	cbnz	r6, 800dcfc <_Bfree+0x28>
 800dcde:	2010      	movs	r0, #16
 800dce0:	f7ff ff04 	bl	800daec <malloc>
 800dce4:	4602      	mov	r2, r0
 800dce6:	61e8      	str	r0, [r5, #28]
 800dce8:	b920      	cbnz	r0, 800dcf4 <_Bfree+0x20>
 800dcea:	4b09      	ldr	r3, [pc, #36]	; (800dd10 <_Bfree+0x3c>)
 800dcec:	4809      	ldr	r0, [pc, #36]	; (800dd14 <_Bfree+0x40>)
 800dcee:	218f      	movs	r1, #143	; 0x8f
 800dcf0:	f000 fbea 	bl	800e4c8 <__assert_func>
 800dcf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcf8:	6006      	str	r6, [r0, #0]
 800dcfa:	60c6      	str	r6, [r0, #12]
 800dcfc:	b13c      	cbz	r4, 800dd0e <_Bfree+0x3a>
 800dcfe:	69eb      	ldr	r3, [r5, #28]
 800dd00:	6862      	ldr	r2, [r4, #4]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd08:	6021      	str	r1, [r4, #0]
 800dd0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	0800ecc1 	.word	0x0800ecc1
 800dd14:	0800ed41 	.word	0x0800ed41

0800dd18 <__multadd>:
 800dd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1c:	690d      	ldr	r5, [r1, #16]
 800dd1e:	4607      	mov	r7, r0
 800dd20:	460c      	mov	r4, r1
 800dd22:	461e      	mov	r6, r3
 800dd24:	f101 0c14 	add.w	ip, r1, #20
 800dd28:	2000      	movs	r0, #0
 800dd2a:	f8dc 3000 	ldr.w	r3, [ip]
 800dd2e:	b299      	uxth	r1, r3
 800dd30:	fb02 6101 	mla	r1, r2, r1, r6
 800dd34:	0c1e      	lsrs	r6, r3, #16
 800dd36:	0c0b      	lsrs	r3, r1, #16
 800dd38:	fb02 3306 	mla	r3, r2, r6, r3
 800dd3c:	b289      	uxth	r1, r1
 800dd3e:	3001      	adds	r0, #1
 800dd40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd44:	4285      	cmp	r5, r0
 800dd46:	f84c 1b04 	str.w	r1, [ip], #4
 800dd4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd4e:	dcec      	bgt.n	800dd2a <__multadd+0x12>
 800dd50:	b30e      	cbz	r6, 800dd96 <__multadd+0x7e>
 800dd52:	68a3      	ldr	r3, [r4, #8]
 800dd54:	42ab      	cmp	r3, r5
 800dd56:	dc19      	bgt.n	800dd8c <__multadd+0x74>
 800dd58:	6861      	ldr	r1, [r4, #4]
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	3101      	adds	r1, #1
 800dd5e:	f7ff ff79 	bl	800dc54 <_Balloc>
 800dd62:	4680      	mov	r8, r0
 800dd64:	b928      	cbnz	r0, 800dd72 <__multadd+0x5a>
 800dd66:	4602      	mov	r2, r0
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <__multadd+0x84>)
 800dd6a:	480d      	ldr	r0, [pc, #52]	; (800dda0 <__multadd+0x88>)
 800dd6c:	21ba      	movs	r1, #186	; 0xba
 800dd6e:	f000 fbab 	bl	800e4c8 <__assert_func>
 800dd72:	6922      	ldr	r2, [r4, #16]
 800dd74:	3202      	adds	r2, #2
 800dd76:	f104 010c 	add.w	r1, r4, #12
 800dd7a:	0092      	lsls	r2, r2, #2
 800dd7c:	300c      	adds	r0, #12
 800dd7e:	f7fe ffe0 	bl	800cd42 <memcpy>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4638      	mov	r0, r7
 800dd86:	f7ff ffa5 	bl	800dcd4 <_Bfree>
 800dd8a:	4644      	mov	r4, r8
 800dd8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd90:	3501      	adds	r5, #1
 800dd92:	615e      	str	r6, [r3, #20]
 800dd94:	6125      	str	r5, [r4, #16]
 800dd96:	4620      	mov	r0, r4
 800dd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd9c:	0800ed30 	.word	0x0800ed30
 800dda0:	0800ed41 	.word	0x0800ed41

0800dda4 <__hi0bits>:
 800dda4:	0c03      	lsrs	r3, r0, #16
 800dda6:	041b      	lsls	r3, r3, #16
 800dda8:	b9d3      	cbnz	r3, 800dde0 <__hi0bits+0x3c>
 800ddaa:	0400      	lsls	r0, r0, #16
 800ddac:	2310      	movs	r3, #16
 800ddae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddb2:	bf04      	itt	eq
 800ddb4:	0200      	lsleq	r0, r0, #8
 800ddb6:	3308      	addeq	r3, #8
 800ddb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ddbc:	bf04      	itt	eq
 800ddbe:	0100      	lsleq	r0, r0, #4
 800ddc0:	3304      	addeq	r3, #4
 800ddc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddc6:	bf04      	itt	eq
 800ddc8:	0080      	lsleq	r0, r0, #2
 800ddca:	3302      	addeq	r3, #2
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	db05      	blt.n	800dddc <__hi0bits+0x38>
 800ddd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddd4:	f103 0301 	add.w	r3, r3, #1
 800ddd8:	bf08      	it	eq
 800ddda:	2320      	moveq	r3, #32
 800dddc:	4618      	mov	r0, r3
 800ddde:	4770      	bx	lr
 800dde0:	2300      	movs	r3, #0
 800dde2:	e7e4      	b.n	800ddae <__hi0bits+0xa>

0800dde4 <__lo0bits>:
 800dde4:	6803      	ldr	r3, [r0, #0]
 800dde6:	f013 0207 	ands.w	r2, r3, #7
 800ddea:	d00c      	beq.n	800de06 <__lo0bits+0x22>
 800ddec:	07d9      	lsls	r1, r3, #31
 800ddee:	d422      	bmi.n	800de36 <__lo0bits+0x52>
 800ddf0:	079a      	lsls	r2, r3, #30
 800ddf2:	bf49      	itett	mi
 800ddf4:	085b      	lsrmi	r3, r3, #1
 800ddf6:	089b      	lsrpl	r3, r3, #2
 800ddf8:	6003      	strmi	r3, [r0, #0]
 800ddfa:	2201      	movmi	r2, #1
 800ddfc:	bf5c      	itt	pl
 800ddfe:	6003      	strpl	r3, [r0, #0]
 800de00:	2202      	movpl	r2, #2
 800de02:	4610      	mov	r0, r2
 800de04:	4770      	bx	lr
 800de06:	b299      	uxth	r1, r3
 800de08:	b909      	cbnz	r1, 800de0e <__lo0bits+0x2a>
 800de0a:	0c1b      	lsrs	r3, r3, #16
 800de0c:	2210      	movs	r2, #16
 800de0e:	b2d9      	uxtb	r1, r3
 800de10:	b909      	cbnz	r1, 800de16 <__lo0bits+0x32>
 800de12:	3208      	adds	r2, #8
 800de14:	0a1b      	lsrs	r3, r3, #8
 800de16:	0719      	lsls	r1, r3, #28
 800de18:	bf04      	itt	eq
 800de1a:	091b      	lsreq	r3, r3, #4
 800de1c:	3204      	addeq	r2, #4
 800de1e:	0799      	lsls	r1, r3, #30
 800de20:	bf04      	itt	eq
 800de22:	089b      	lsreq	r3, r3, #2
 800de24:	3202      	addeq	r2, #2
 800de26:	07d9      	lsls	r1, r3, #31
 800de28:	d403      	bmi.n	800de32 <__lo0bits+0x4e>
 800de2a:	085b      	lsrs	r3, r3, #1
 800de2c:	f102 0201 	add.w	r2, r2, #1
 800de30:	d003      	beq.n	800de3a <__lo0bits+0x56>
 800de32:	6003      	str	r3, [r0, #0]
 800de34:	e7e5      	b.n	800de02 <__lo0bits+0x1e>
 800de36:	2200      	movs	r2, #0
 800de38:	e7e3      	b.n	800de02 <__lo0bits+0x1e>
 800de3a:	2220      	movs	r2, #32
 800de3c:	e7e1      	b.n	800de02 <__lo0bits+0x1e>
	...

0800de40 <__i2b>:
 800de40:	b510      	push	{r4, lr}
 800de42:	460c      	mov	r4, r1
 800de44:	2101      	movs	r1, #1
 800de46:	f7ff ff05 	bl	800dc54 <_Balloc>
 800de4a:	4602      	mov	r2, r0
 800de4c:	b928      	cbnz	r0, 800de5a <__i2b+0x1a>
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <__i2b+0x24>)
 800de50:	4805      	ldr	r0, [pc, #20]	; (800de68 <__i2b+0x28>)
 800de52:	f240 1145 	movw	r1, #325	; 0x145
 800de56:	f000 fb37 	bl	800e4c8 <__assert_func>
 800de5a:	2301      	movs	r3, #1
 800de5c:	6144      	str	r4, [r0, #20]
 800de5e:	6103      	str	r3, [r0, #16]
 800de60:	bd10      	pop	{r4, pc}
 800de62:	bf00      	nop
 800de64:	0800ed30 	.word	0x0800ed30
 800de68:	0800ed41 	.word	0x0800ed41

0800de6c <__multiply>:
 800de6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	4691      	mov	r9, r2
 800de72:	690a      	ldr	r2, [r1, #16]
 800de74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de78:	429a      	cmp	r2, r3
 800de7a:	bfb8      	it	lt
 800de7c:	460b      	movlt	r3, r1
 800de7e:	460c      	mov	r4, r1
 800de80:	bfbc      	itt	lt
 800de82:	464c      	movlt	r4, r9
 800de84:	4699      	movlt	r9, r3
 800de86:	6927      	ldr	r7, [r4, #16]
 800de88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de8c:	68a3      	ldr	r3, [r4, #8]
 800de8e:	6861      	ldr	r1, [r4, #4]
 800de90:	eb07 060a 	add.w	r6, r7, sl
 800de94:	42b3      	cmp	r3, r6
 800de96:	b085      	sub	sp, #20
 800de98:	bfb8      	it	lt
 800de9a:	3101      	addlt	r1, #1
 800de9c:	f7ff feda 	bl	800dc54 <_Balloc>
 800dea0:	b930      	cbnz	r0, 800deb0 <__multiply+0x44>
 800dea2:	4602      	mov	r2, r0
 800dea4:	4b44      	ldr	r3, [pc, #272]	; (800dfb8 <__multiply+0x14c>)
 800dea6:	4845      	ldr	r0, [pc, #276]	; (800dfbc <__multiply+0x150>)
 800dea8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800deac:	f000 fb0c 	bl	800e4c8 <__assert_func>
 800deb0:	f100 0514 	add.w	r5, r0, #20
 800deb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800deb8:	462b      	mov	r3, r5
 800deba:	2200      	movs	r2, #0
 800debc:	4543      	cmp	r3, r8
 800debe:	d321      	bcc.n	800df04 <__multiply+0x98>
 800dec0:	f104 0314 	add.w	r3, r4, #20
 800dec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dec8:	f109 0314 	add.w	r3, r9, #20
 800decc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ded0:	9202      	str	r2, [sp, #8]
 800ded2:	1b3a      	subs	r2, r7, r4
 800ded4:	3a15      	subs	r2, #21
 800ded6:	f022 0203 	bic.w	r2, r2, #3
 800deda:	3204      	adds	r2, #4
 800dedc:	f104 0115 	add.w	r1, r4, #21
 800dee0:	428f      	cmp	r7, r1
 800dee2:	bf38      	it	cc
 800dee4:	2204      	movcc	r2, #4
 800dee6:	9201      	str	r2, [sp, #4]
 800dee8:	9a02      	ldr	r2, [sp, #8]
 800deea:	9303      	str	r3, [sp, #12]
 800deec:	429a      	cmp	r2, r3
 800deee:	d80c      	bhi.n	800df0a <__multiply+0x9e>
 800def0:	2e00      	cmp	r6, #0
 800def2:	dd03      	ble.n	800defc <__multiply+0x90>
 800def4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800def8:	2b00      	cmp	r3, #0
 800defa:	d05b      	beq.n	800dfb4 <__multiply+0x148>
 800defc:	6106      	str	r6, [r0, #16]
 800defe:	b005      	add	sp, #20
 800df00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df04:	f843 2b04 	str.w	r2, [r3], #4
 800df08:	e7d8      	b.n	800debc <__multiply+0x50>
 800df0a:	f8b3 a000 	ldrh.w	sl, [r3]
 800df0e:	f1ba 0f00 	cmp.w	sl, #0
 800df12:	d024      	beq.n	800df5e <__multiply+0xf2>
 800df14:	f104 0e14 	add.w	lr, r4, #20
 800df18:	46a9      	mov	r9, r5
 800df1a:	f04f 0c00 	mov.w	ip, #0
 800df1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df22:	f8d9 1000 	ldr.w	r1, [r9]
 800df26:	fa1f fb82 	uxth.w	fp, r2
 800df2a:	b289      	uxth	r1, r1
 800df2c:	fb0a 110b 	mla	r1, sl, fp, r1
 800df30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df34:	f8d9 2000 	ldr.w	r2, [r9]
 800df38:	4461      	add	r1, ip
 800df3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df3e:	fb0a c20b 	mla	r2, sl, fp, ip
 800df42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df46:	b289      	uxth	r1, r1
 800df48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df4c:	4577      	cmp	r7, lr
 800df4e:	f849 1b04 	str.w	r1, [r9], #4
 800df52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df56:	d8e2      	bhi.n	800df1e <__multiply+0xb2>
 800df58:	9a01      	ldr	r2, [sp, #4]
 800df5a:	f845 c002 	str.w	ip, [r5, r2]
 800df5e:	9a03      	ldr	r2, [sp, #12]
 800df60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df64:	3304      	adds	r3, #4
 800df66:	f1b9 0f00 	cmp.w	r9, #0
 800df6a:	d021      	beq.n	800dfb0 <__multiply+0x144>
 800df6c:	6829      	ldr	r1, [r5, #0]
 800df6e:	f104 0c14 	add.w	ip, r4, #20
 800df72:	46ae      	mov	lr, r5
 800df74:	f04f 0a00 	mov.w	sl, #0
 800df78:	f8bc b000 	ldrh.w	fp, [ip]
 800df7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df80:	fb09 220b 	mla	r2, r9, fp, r2
 800df84:	4452      	add	r2, sl
 800df86:	b289      	uxth	r1, r1
 800df88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df8c:	f84e 1b04 	str.w	r1, [lr], #4
 800df90:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df98:	f8be 1000 	ldrh.w	r1, [lr]
 800df9c:	fb09 110a 	mla	r1, r9, sl, r1
 800dfa0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dfa4:	4567      	cmp	r7, ip
 800dfa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfaa:	d8e5      	bhi.n	800df78 <__multiply+0x10c>
 800dfac:	9a01      	ldr	r2, [sp, #4]
 800dfae:	50a9      	str	r1, [r5, r2]
 800dfb0:	3504      	adds	r5, #4
 800dfb2:	e799      	b.n	800dee8 <__multiply+0x7c>
 800dfb4:	3e01      	subs	r6, #1
 800dfb6:	e79b      	b.n	800def0 <__multiply+0x84>
 800dfb8:	0800ed30 	.word	0x0800ed30
 800dfbc:	0800ed41 	.word	0x0800ed41

0800dfc0 <__pow5mult>:
 800dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc4:	4615      	mov	r5, r2
 800dfc6:	f012 0203 	ands.w	r2, r2, #3
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460f      	mov	r7, r1
 800dfce:	d007      	beq.n	800dfe0 <__pow5mult+0x20>
 800dfd0:	4c25      	ldr	r4, [pc, #148]	; (800e068 <__pow5mult+0xa8>)
 800dfd2:	3a01      	subs	r2, #1
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfda:	f7ff fe9d 	bl	800dd18 <__multadd>
 800dfde:	4607      	mov	r7, r0
 800dfe0:	10ad      	asrs	r5, r5, #2
 800dfe2:	d03d      	beq.n	800e060 <__pow5mult+0xa0>
 800dfe4:	69f4      	ldr	r4, [r6, #28]
 800dfe6:	b97c      	cbnz	r4, 800e008 <__pow5mult+0x48>
 800dfe8:	2010      	movs	r0, #16
 800dfea:	f7ff fd7f 	bl	800daec <malloc>
 800dfee:	4602      	mov	r2, r0
 800dff0:	61f0      	str	r0, [r6, #28]
 800dff2:	b928      	cbnz	r0, 800e000 <__pow5mult+0x40>
 800dff4:	4b1d      	ldr	r3, [pc, #116]	; (800e06c <__pow5mult+0xac>)
 800dff6:	481e      	ldr	r0, [pc, #120]	; (800e070 <__pow5mult+0xb0>)
 800dff8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dffc:	f000 fa64 	bl	800e4c8 <__assert_func>
 800e000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e004:	6004      	str	r4, [r0, #0]
 800e006:	60c4      	str	r4, [r0, #12]
 800e008:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e00c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e010:	b94c      	cbnz	r4, 800e026 <__pow5mult+0x66>
 800e012:	f240 2171 	movw	r1, #625	; 0x271
 800e016:	4630      	mov	r0, r6
 800e018:	f7ff ff12 	bl	800de40 <__i2b>
 800e01c:	2300      	movs	r3, #0
 800e01e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e022:	4604      	mov	r4, r0
 800e024:	6003      	str	r3, [r0, #0]
 800e026:	f04f 0900 	mov.w	r9, #0
 800e02a:	07eb      	lsls	r3, r5, #31
 800e02c:	d50a      	bpl.n	800e044 <__pow5mult+0x84>
 800e02e:	4639      	mov	r1, r7
 800e030:	4622      	mov	r2, r4
 800e032:	4630      	mov	r0, r6
 800e034:	f7ff ff1a 	bl	800de6c <__multiply>
 800e038:	4639      	mov	r1, r7
 800e03a:	4680      	mov	r8, r0
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7ff fe49 	bl	800dcd4 <_Bfree>
 800e042:	4647      	mov	r7, r8
 800e044:	106d      	asrs	r5, r5, #1
 800e046:	d00b      	beq.n	800e060 <__pow5mult+0xa0>
 800e048:	6820      	ldr	r0, [r4, #0]
 800e04a:	b938      	cbnz	r0, 800e05c <__pow5mult+0x9c>
 800e04c:	4622      	mov	r2, r4
 800e04e:	4621      	mov	r1, r4
 800e050:	4630      	mov	r0, r6
 800e052:	f7ff ff0b 	bl	800de6c <__multiply>
 800e056:	6020      	str	r0, [r4, #0]
 800e058:	f8c0 9000 	str.w	r9, [r0]
 800e05c:	4604      	mov	r4, r0
 800e05e:	e7e4      	b.n	800e02a <__pow5mult+0x6a>
 800e060:	4638      	mov	r0, r7
 800e062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e066:	bf00      	nop
 800e068:	0800ee90 	.word	0x0800ee90
 800e06c:	0800ecc1 	.word	0x0800ecc1
 800e070:	0800ed41 	.word	0x0800ed41

0800e074 <__lshift>:
 800e074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e078:	460c      	mov	r4, r1
 800e07a:	6849      	ldr	r1, [r1, #4]
 800e07c:	6923      	ldr	r3, [r4, #16]
 800e07e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	4607      	mov	r7, r0
 800e086:	4691      	mov	r9, r2
 800e088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e08c:	f108 0601 	add.w	r6, r8, #1
 800e090:	42b3      	cmp	r3, r6
 800e092:	db0b      	blt.n	800e0ac <__lshift+0x38>
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff fddd 	bl	800dc54 <_Balloc>
 800e09a:	4605      	mov	r5, r0
 800e09c:	b948      	cbnz	r0, 800e0b2 <__lshift+0x3e>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b28      	ldr	r3, [pc, #160]	; (800e144 <__lshift+0xd0>)
 800e0a2:	4829      	ldr	r0, [pc, #164]	; (800e148 <__lshift+0xd4>)
 800e0a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e0a8:	f000 fa0e 	bl	800e4c8 <__assert_func>
 800e0ac:	3101      	adds	r1, #1
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	e7ee      	b.n	800e090 <__lshift+0x1c>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f100 0114 	add.w	r1, r0, #20
 800e0b8:	f100 0210 	add.w	r2, r0, #16
 800e0bc:	4618      	mov	r0, r3
 800e0be:	4553      	cmp	r3, sl
 800e0c0:	db33      	blt.n	800e12a <__lshift+0xb6>
 800e0c2:	6920      	ldr	r0, [r4, #16]
 800e0c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0c8:	f104 0314 	add.w	r3, r4, #20
 800e0cc:	f019 091f 	ands.w	r9, r9, #31
 800e0d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0d8:	d02b      	beq.n	800e132 <__lshift+0xbe>
 800e0da:	f1c9 0e20 	rsb	lr, r9, #32
 800e0de:	468a      	mov	sl, r1
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	6818      	ldr	r0, [r3, #0]
 800e0e4:	fa00 f009 	lsl.w	r0, r0, r9
 800e0e8:	4310      	orrs	r0, r2
 800e0ea:	f84a 0b04 	str.w	r0, [sl], #4
 800e0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f2:	459c      	cmp	ip, r3
 800e0f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0f8:	d8f3      	bhi.n	800e0e2 <__lshift+0x6e>
 800e0fa:	ebac 0304 	sub.w	r3, ip, r4
 800e0fe:	3b15      	subs	r3, #21
 800e100:	f023 0303 	bic.w	r3, r3, #3
 800e104:	3304      	adds	r3, #4
 800e106:	f104 0015 	add.w	r0, r4, #21
 800e10a:	4584      	cmp	ip, r0
 800e10c:	bf38      	it	cc
 800e10e:	2304      	movcc	r3, #4
 800e110:	50ca      	str	r2, [r1, r3]
 800e112:	b10a      	cbz	r2, 800e118 <__lshift+0xa4>
 800e114:	f108 0602 	add.w	r6, r8, #2
 800e118:	3e01      	subs	r6, #1
 800e11a:	4638      	mov	r0, r7
 800e11c:	612e      	str	r6, [r5, #16]
 800e11e:	4621      	mov	r1, r4
 800e120:	f7ff fdd8 	bl	800dcd4 <_Bfree>
 800e124:	4628      	mov	r0, r5
 800e126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e12e:	3301      	adds	r3, #1
 800e130:	e7c5      	b.n	800e0be <__lshift+0x4a>
 800e132:	3904      	subs	r1, #4
 800e134:	f853 2b04 	ldr.w	r2, [r3], #4
 800e138:	f841 2f04 	str.w	r2, [r1, #4]!
 800e13c:	459c      	cmp	ip, r3
 800e13e:	d8f9      	bhi.n	800e134 <__lshift+0xc0>
 800e140:	e7ea      	b.n	800e118 <__lshift+0xa4>
 800e142:	bf00      	nop
 800e144:	0800ed30 	.word	0x0800ed30
 800e148:	0800ed41 	.word	0x0800ed41

0800e14c <__mcmp>:
 800e14c:	b530      	push	{r4, r5, lr}
 800e14e:	6902      	ldr	r2, [r0, #16]
 800e150:	690c      	ldr	r4, [r1, #16]
 800e152:	1b12      	subs	r2, r2, r4
 800e154:	d10e      	bne.n	800e174 <__mcmp+0x28>
 800e156:	f100 0314 	add.w	r3, r0, #20
 800e15a:	3114      	adds	r1, #20
 800e15c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e160:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e164:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e168:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e16c:	42a5      	cmp	r5, r4
 800e16e:	d003      	beq.n	800e178 <__mcmp+0x2c>
 800e170:	d305      	bcc.n	800e17e <__mcmp+0x32>
 800e172:	2201      	movs	r2, #1
 800e174:	4610      	mov	r0, r2
 800e176:	bd30      	pop	{r4, r5, pc}
 800e178:	4283      	cmp	r3, r0
 800e17a:	d3f3      	bcc.n	800e164 <__mcmp+0x18>
 800e17c:	e7fa      	b.n	800e174 <__mcmp+0x28>
 800e17e:	f04f 32ff 	mov.w	r2, #4294967295
 800e182:	e7f7      	b.n	800e174 <__mcmp+0x28>

0800e184 <__mdiff>:
 800e184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e188:	460c      	mov	r4, r1
 800e18a:	4606      	mov	r6, r0
 800e18c:	4611      	mov	r1, r2
 800e18e:	4620      	mov	r0, r4
 800e190:	4690      	mov	r8, r2
 800e192:	f7ff ffdb 	bl	800e14c <__mcmp>
 800e196:	1e05      	subs	r5, r0, #0
 800e198:	d110      	bne.n	800e1bc <__mdiff+0x38>
 800e19a:	4629      	mov	r1, r5
 800e19c:	4630      	mov	r0, r6
 800e19e:	f7ff fd59 	bl	800dc54 <_Balloc>
 800e1a2:	b930      	cbnz	r0, 800e1b2 <__mdiff+0x2e>
 800e1a4:	4b3a      	ldr	r3, [pc, #232]	; (800e290 <__mdiff+0x10c>)
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	f240 2137 	movw	r1, #567	; 0x237
 800e1ac:	4839      	ldr	r0, [pc, #228]	; (800e294 <__mdiff+0x110>)
 800e1ae:	f000 f98b 	bl	800e4c8 <__assert_func>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	bfa4      	itt	ge
 800e1be:	4643      	movge	r3, r8
 800e1c0:	46a0      	movge	r8, r4
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1c8:	bfa6      	itte	ge
 800e1ca:	461c      	movge	r4, r3
 800e1cc:	2500      	movge	r5, #0
 800e1ce:	2501      	movlt	r5, #1
 800e1d0:	f7ff fd40 	bl	800dc54 <_Balloc>
 800e1d4:	b920      	cbnz	r0, 800e1e0 <__mdiff+0x5c>
 800e1d6:	4b2e      	ldr	r3, [pc, #184]	; (800e290 <__mdiff+0x10c>)
 800e1d8:	4602      	mov	r2, r0
 800e1da:	f240 2145 	movw	r1, #581	; 0x245
 800e1de:	e7e5      	b.n	800e1ac <__mdiff+0x28>
 800e1e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1e4:	6926      	ldr	r6, [r4, #16]
 800e1e6:	60c5      	str	r5, [r0, #12]
 800e1e8:	f104 0914 	add.w	r9, r4, #20
 800e1ec:	f108 0514 	add.w	r5, r8, #20
 800e1f0:	f100 0e14 	add.w	lr, r0, #20
 800e1f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e1f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e1fc:	f108 0210 	add.w	r2, r8, #16
 800e200:	46f2      	mov	sl, lr
 800e202:	2100      	movs	r1, #0
 800e204:	f859 3b04 	ldr.w	r3, [r9], #4
 800e208:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e20c:	fa11 f88b 	uxtah	r8, r1, fp
 800e210:	b299      	uxth	r1, r3
 800e212:	0c1b      	lsrs	r3, r3, #16
 800e214:	eba8 0801 	sub.w	r8, r8, r1
 800e218:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e21c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e220:	fa1f f888 	uxth.w	r8, r8
 800e224:	1419      	asrs	r1, r3, #16
 800e226:	454e      	cmp	r6, r9
 800e228:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e22c:	f84a 3b04 	str.w	r3, [sl], #4
 800e230:	d8e8      	bhi.n	800e204 <__mdiff+0x80>
 800e232:	1b33      	subs	r3, r6, r4
 800e234:	3b15      	subs	r3, #21
 800e236:	f023 0303 	bic.w	r3, r3, #3
 800e23a:	3304      	adds	r3, #4
 800e23c:	3415      	adds	r4, #21
 800e23e:	42a6      	cmp	r6, r4
 800e240:	bf38      	it	cc
 800e242:	2304      	movcc	r3, #4
 800e244:	441d      	add	r5, r3
 800e246:	4473      	add	r3, lr
 800e248:	469e      	mov	lr, r3
 800e24a:	462e      	mov	r6, r5
 800e24c:	4566      	cmp	r6, ip
 800e24e:	d30e      	bcc.n	800e26e <__mdiff+0xea>
 800e250:	f10c 0203 	add.w	r2, ip, #3
 800e254:	1b52      	subs	r2, r2, r5
 800e256:	f022 0203 	bic.w	r2, r2, #3
 800e25a:	3d03      	subs	r5, #3
 800e25c:	45ac      	cmp	ip, r5
 800e25e:	bf38      	it	cc
 800e260:	2200      	movcc	r2, #0
 800e262:	4413      	add	r3, r2
 800e264:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e268:	b17a      	cbz	r2, 800e28a <__mdiff+0x106>
 800e26a:	6107      	str	r7, [r0, #16]
 800e26c:	e7a4      	b.n	800e1b8 <__mdiff+0x34>
 800e26e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e272:	fa11 f288 	uxtah	r2, r1, r8
 800e276:	1414      	asrs	r4, r2, #16
 800e278:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e27c:	b292      	uxth	r2, r2
 800e27e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e282:	f84e 2b04 	str.w	r2, [lr], #4
 800e286:	1421      	asrs	r1, r4, #16
 800e288:	e7e0      	b.n	800e24c <__mdiff+0xc8>
 800e28a:	3f01      	subs	r7, #1
 800e28c:	e7ea      	b.n	800e264 <__mdiff+0xe0>
 800e28e:	bf00      	nop
 800e290:	0800ed30 	.word	0x0800ed30
 800e294:	0800ed41 	.word	0x0800ed41

0800e298 <__d2b>:
 800e298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e29c:	460f      	mov	r7, r1
 800e29e:	2101      	movs	r1, #1
 800e2a0:	ec59 8b10 	vmov	r8, r9, d0
 800e2a4:	4616      	mov	r6, r2
 800e2a6:	f7ff fcd5 	bl	800dc54 <_Balloc>
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	b930      	cbnz	r0, 800e2bc <__d2b+0x24>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	4b24      	ldr	r3, [pc, #144]	; (800e344 <__d2b+0xac>)
 800e2b2:	4825      	ldr	r0, [pc, #148]	; (800e348 <__d2b+0xb0>)
 800e2b4:	f240 310f 	movw	r1, #783	; 0x30f
 800e2b8:	f000 f906 	bl	800e4c8 <__assert_func>
 800e2bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e2c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2c4:	bb2d      	cbnz	r5, 800e312 <__d2b+0x7a>
 800e2c6:	9301      	str	r3, [sp, #4]
 800e2c8:	f1b8 0300 	subs.w	r3, r8, #0
 800e2cc:	d026      	beq.n	800e31c <__d2b+0x84>
 800e2ce:	4668      	mov	r0, sp
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	f7ff fd87 	bl	800dde4 <__lo0bits>
 800e2d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2da:	b1e8      	cbz	r0, 800e318 <__d2b+0x80>
 800e2dc:	f1c0 0320 	rsb	r3, r0, #32
 800e2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e4:	430b      	orrs	r3, r1
 800e2e6:	40c2      	lsrs	r2, r0
 800e2e8:	6163      	str	r3, [r4, #20]
 800e2ea:	9201      	str	r2, [sp, #4]
 800e2ec:	9b01      	ldr	r3, [sp, #4]
 800e2ee:	61a3      	str	r3, [r4, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	bf14      	ite	ne
 800e2f4:	2202      	movne	r2, #2
 800e2f6:	2201      	moveq	r2, #1
 800e2f8:	6122      	str	r2, [r4, #16]
 800e2fa:	b1bd      	cbz	r5, 800e32c <__d2b+0x94>
 800e2fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e300:	4405      	add	r5, r0
 800e302:	603d      	str	r5, [r7, #0]
 800e304:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e308:	6030      	str	r0, [r6, #0]
 800e30a:	4620      	mov	r0, r4
 800e30c:	b003      	add	sp, #12
 800e30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e316:	e7d6      	b.n	800e2c6 <__d2b+0x2e>
 800e318:	6161      	str	r1, [r4, #20]
 800e31a:	e7e7      	b.n	800e2ec <__d2b+0x54>
 800e31c:	a801      	add	r0, sp, #4
 800e31e:	f7ff fd61 	bl	800dde4 <__lo0bits>
 800e322:	9b01      	ldr	r3, [sp, #4]
 800e324:	6163      	str	r3, [r4, #20]
 800e326:	3020      	adds	r0, #32
 800e328:	2201      	movs	r2, #1
 800e32a:	e7e5      	b.n	800e2f8 <__d2b+0x60>
 800e32c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e330:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e334:	6038      	str	r0, [r7, #0]
 800e336:	6918      	ldr	r0, [r3, #16]
 800e338:	f7ff fd34 	bl	800dda4 <__hi0bits>
 800e33c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e340:	e7e2      	b.n	800e308 <__d2b+0x70>
 800e342:	bf00      	nop
 800e344:	0800ed30 	.word	0x0800ed30
 800e348:	0800ed41 	.word	0x0800ed41

0800e34c <__sflush_r>:
 800e34c:	898a      	ldrh	r2, [r1, #12]
 800e34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e352:	4605      	mov	r5, r0
 800e354:	0710      	lsls	r0, r2, #28
 800e356:	460c      	mov	r4, r1
 800e358:	d458      	bmi.n	800e40c <__sflush_r+0xc0>
 800e35a:	684b      	ldr	r3, [r1, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	dc05      	bgt.n	800e36c <__sflush_r+0x20>
 800e360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e362:	2b00      	cmp	r3, #0
 800e364:	dc02      	bgt.n	800e36c <__sflush_r+0x20>
 800e366:	2000      	movs	r0, #0
 800e368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e36e:	2e00      	cmp	r6, #0
 800e370:	d0f9      	beq.n	800e366 <__sflush_r+0x1a>
 800e372:	2300      	movs	r3, #0
 800e374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e378:	682f      	ldr	r7, [r5, #0]
 800e37a:	6a21      	ldr	r1, [r4, #32]
 800e37c:	602b      	str	r3, [r5, #0]
 800e37e:	d032      	beq.n	800e3e6 <__sflush_r+0x9a>
 800e380:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	075a      	lsls	r2, r3, #29
 800e386:	d505      	bpl.n	800e394 <__sflush_r+0x48>
 800e388:	6863      	ldr	r3, [r4, #4]
 800e38a:	1ac0      	subs	r0, r0, r3
 800e38c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e38e:	b10b      	cbz	r3, 800e394 <__sflush_r+0x48>
 800e390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e392:	1ac0      	subs	r0, r0, r3
 800e394:	2300      	movs	r3, #0
 800e396:	4602      	mov	r2, r0
 800e398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e39a:	6a21      	ldr	r1, [r4, #32]
 800e39c:	4628      	mov	r0, r5
 800e39e:	47b0      	blx	r6
 800e3a0:	1c43      	adds	r3, r0, #1
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	d106      	bne.n	800e3b4 <__sflush_r+0x68>
 800e3a6:	6829      	ldr	r1, [r5, #0]
 800e3a8:	291d      	cmp	r1, #29
 800e3aa:	d82b      	bhi.n	800e404 <__sflush_r+0xb8>
 800e3ac:	4a29      	ldr	r2, [pc, #164]	; (800e454 <__sflush_r+0x108>)
 800e3ae:	410a      	asrs	r2, r1
 800e3b0:	07d6      	lsls	r6, r2, #31
 800e3b2:	d427      	bmi.n	800e404 <__sflush_r+0xb8>
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	6062      	str	r2, [r4, #4]
 800e3b8:	04d9      	lsls	r1, r3, #19
 800e3ba:	6922      	ldr	r2, [r4, #16]
 800e3bc:	6022      	str	r2, [r4, #0]
 800e3be:	d504      	bpl.n	800e3ca <__sflush_r+0x7e>
 800e3c0:	1c42      	adds	r2, r0, #1
 800e3c2:	d101      	bne.n	800e3c8 <__sflush_r+0x7c>
 800e3c4:	682b      	ldr	r3, [r5, #0]
 800e3c6:	b903      	cbnz	r3, 800e3ca <__sflush_r+0x7e>
 800e3c8:	6560      	str	r0, [r4, #84]	; 0x54
 800e3ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3cc:	602f      	str	r7, [r5, #0]
 800e3ce:	2900      	cmp	r1, #0
 800e3d0:	d0c9      	beq.n	800e366 <__sflush_r+0x1a>
 800e3d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3d6:	4299      	cmp	r1, r3
 800e3d8:	d002      	beq.n	800e3e0 <__sflush_r+0x94>
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f7ff fb3a 	bl	800da54 <_free_r>
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	6360      	str	r0, [r4, #52]	; 0x34
 800e3e4:	e7c0      	b.n	800e368 <__sflush_r+0x1c>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b0      	blx	r6
 800e3ec:	1c41      	adds	r1, r0, #1
 800e3ee:	d1c8      	bne.n	800e382 <__sflush_r+0x36>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0c5      	beq.n	800e382 <__sflush_r+0x36>
 800e3f6:	2b1d      	cmp	r3, #29
 800e3f8:	d001      	beq.n	800e3fe <__sflush_r+0xb2>
 800e3fa:	2b16      	cmp	r3, #22
 800e3fc:	d101      	bne.n	800e402 <__sflush_r+0xb6>
 800e3fe:	602f      	str	r7, [r5, #0]
 800e400:	e7b1      	b.n	800e366 <__sflush_r+0x1a>
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	e7ad      	b.n	800e368 <__sflush_r+0x1c>
 800e40c:	690f      	ldr	r7, [r1, #16]
 800e40e:	2f00      	cmp	r7, #0
 800e410:	d0a9      	beq.n	800e366 <__sflush_r+0x1a>
 800e412:	0793      	lsls	r3, r2, #30
 800e414:	680e      	ldr	r6, [r1, #0]
 800e416:	bf08      	it	eq
 800e418:	694b      	ldreq	r3, [r1, #20]
 800e41a:	600f      	str	r7, [r1, #0]
 800e41c:	bf18      	it	ne
 800e41e:	2300      	movne	r3, #0
 800e420:	eba6 0807 	sub.w	r8, r6, r7
 800e424:	608b      	str	r3, [r1, #8]
 800e426:	f1b8 0f00 	cmp.w	r8, #0
 800e42a:	dd9c      	ble.n	800e366 <__sflush_r+0x1a>
 800e42c:	6a21      	ldr	r1, [r4, #32]
 800e42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e430:	4643      	mov	r3, r8
 800e432:	463a      	mov	r2, r7
 800e434:	4628      	mov	r0, r5
 800e436:	47b0      	blx	r6
 800e438:	2800      	cmp	r0, #0
 800e43a:	dc06      	bgt.n	800e44a <__sflush_r+0xfe>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e442:	81a3      	strh	r3, [r4, #12]
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	e78e      	b.n	800e368 <__sflush_r+0x1c>
 800e44a:	4407      	add	r7, r0
 800e44c:	eba8 0800 	sub.w	r8, r8, r0
 800e450:	e7e9      	b.n	800e426 <__sflush_r+0xda>
 800e452:	bf00      	nop
 800e454:	dfbffffe 	.word	0xdfbffffe

0800e458 <_fflush_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	690b      	ldr	r3, [r1, #16]
 800e45c:	4605      	mov	r5, r0
 800e45e:	460c      	mov	r4, r1
 800e460:	b913      	cbnz	r3, 800e468 <_fflush_r+0x10>
 800e462:	2500      	movs	r5, #0
 800e464:	4628      	mov	r0, r5
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	b118      	cbz	r0, 800e472 <_fflush_r+0x1a>
 800e46a:	6a03      	ldr	r3, [r0, #32]
 800e46c:	b90b      	cbnz	r3, 800e472 <_fflush_r+0x1a>
 800e46e:	f7fe fb6f 	bl	800cb50 <__sinit>
 800e472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0f3      	beq.n	800e462 <_fflush_r+0xa>
 800e47a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e47c:	07d0      	lsls	r0, r2, #31
 800e47e:	d404      	bmi.n	800e48a <_fflush_r+0x32>
 800e480:	0599      	lsls	r1, r3, #22
 800e482:	d402      	bmi.n	800e48a <_fflush_r+0x32>
 800e484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e486:	f7fe fc5a 	bl	800cd3e <__retarget_lock_acquire_recursive>
 800e48a:	4628      	mov	r0, r5
 800e48c:	4621      	mov	r1, r4
 800e48e:	f7ff ff5d 	bl	800e34c <__sflush_r>
 800e492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e494:	07da      	lsls	r2, r3, #31
 800e496:	4605      	mov	r5, r0
 800e498:	d4e4      	bmi.n	800e464 <_fflush_r+0xc>
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	059b      	lsls	r3, r3, #22
 800e49e:	d4e1      	bmi.n	800e464 <_fflush_r+0xc>
 800e4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4a2:	f7fe fc4d 	bl	800cd40 <__retarget_lock_release_recursive>
 800e4a6:	e7dd      	b.n	800e464 <_fflush_r+0xc>

0800e4a8 <_sbrk_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4d06      	ldr	r5, [pc, #24]	; (800e4c4 <_sbrk_r+0x1c>)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	602b      	str	r3, [r5, #0]
 800e4b4:	f7f5 fa48 	bl	8003948 <_sbrk>
 800e4b8:	1c43      	adds	r3, r0, #1
 800e4ba:	d102      	bne.n	800e4c2 <_sbrk_r+0x1a>
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	b103      	cbz	r3, 800e4c2 <_sbrk_r+0x1a>
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	200054a0 	.word	0x200054a0

0800e4c8 <__assert_func>:
 800e4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4ca:	4614      	mov	r4, r2
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <__assert_func+0x2c>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	68d8      	ldr	r0, [r3, #12]
 800e4d6:	b14c      	cbz	r4, 800e4ec <__assert_func+0x24>
 800e4d8:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <__assert_func+0x30>)
 800e4da:	9100      	str	r1, [sp, #0]
 800e4dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4e0:	4906      	ldr	r1, [pc, #24]	; (800e4fc <__assert_func+0x34>)
 800e4e2:	462b      	mov	r3, r5
 800e4e4:	f000 f844 	bl	800e570 <fiprintf>
 800e4e8:	f000 f854 	bl	800e594 <abort>
 800e4ec:	4b04      	ldr	r3, [pc, #16]	; (800e500 <__assert_func+0x38>)
 800e4ee:	461c      	mov	r4, r3
 800e4f0:	e7f3      	b.n	800e4da <__assert_func+0x12>
 800e4f2:	bf00      	nop
 800e4f4:	2000006c 	.word	0x2000006c
 800e4f8:	0800eea6 	.word	0x0800eea6
 800e4fc:	0800eeb3 	.word	0x0800eeb3
 800e500:	0800eee1 	.word	0x0800eee1

0800e504 <_calloc_r>:
 800e504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e506:	fba1 2402 	umull	r2, r4, r1, r2
 800e50a:	b94c      	cbnz	r4, 800e520 <_calloc_r+0x1c>
 800e50c:	4611      	mov	r1, r2
 800e50e:	9201      	str	r2, [sp, #4]
 800e510:	f7ff fb14 	bl	800db3c <_malloc_r>
 800e514:	9a01      	ldr	r2, [sp, #4]
 800e516:	4605      	mov	r5, r0
 800e518:	b930      	cbnz	r0, 800e528 <_calloc_r+0x24>
 800e51a:	4628      	mov	r0, r5
 800e51c:	b003      	add	sp, #12
 800e51e:	bd30      	pop	{r4, r5, pc}
 800e520:	220c      	movs	r2, #12
 800e522:	6002      	str	r2, [r0, #0]
 800e524:	2500      	movs	r5, #0
 800e526:	e7f8      	b.n	800e51a <_calloc_r+0x16>
 800e528:	4621      	mov	r1, r4
 800e52a:	f7fe fb8a 	bl	800cc42 <memset>
 800e52e:	e7f4      	b.n	800e51a <_calloc_r+0x16>

0800e530 <__ascii_mbtowc>:
 800e530:	b082      	sub	sp, #8
 800e532:	b901      	cbnz	r1, 800e536 <__ascii_mbtowc+0x6>
 800e534:	a901      	add	r1, sp, #4
 800e536:	b142      	cbz	r2, 800e54a <__ascii_mbtowc+0x1a>
 800e538:	b14b      	cbz	r3, 800e54e <__ascii_mbtowc+0x1e>
 800e53a:	7813      	ldrb	r3, [r2, #0]
 800e53c:	600b      	str	r3, [r1, #0]
 800e53e:	7812      	ldrb	r2, [r2, #0]
 800e540:	1e10      	subs	r0, r2, #0
 800e542:	bf18      	it	ne
 800e544:	2001      	movne	r0, #1
 800e546:	b002      	add	sp, #8
 800e548:	4770      	bx	lr
 800e54a:	4610      	mov	r0, r2
 800e54c:	e7fb      	b.n	800e546 <__ascii_mbtowc+0x16>
 800e54e:	f06f 0001 	mvn.w	r0, #1
 800e552:	e7f8      	b.n	800e546 <__ascii_mbtowc+0x16>

0800e554 <__ascii_wctomb>:
 800e554:	b149      	cbz	r1, 800e56a <__ascii_wctomb+0x16>
 800e556:	2aff      	cmp	r2, #255	; 0xff
 800e558:	bf85      	ittet	hi
 800e55a:	238a      	movhi	r3, #138	; 0x8a
 800e55c:	6003      	strhi	r3, [r0, #0]
 800e55e:	700a      	strbls	r2, [r1, #0]
 800e560:	f04f 30ff 	movhi.w	r0, #4294967295
 800e564:	bf98      	it	ls
 800e566:	2001      	movls	r0, #1
 800e568:	4770      	bx	lr
 800e56a:	4608      	mov	r0, r1
 800e56c:	4770      	bx	lr
	...

0800e570 <fiprintf>:
 800e570:	b40e      	push	{r1, r2, r3}
 800e572:	b503      	push	{r0, r1, lr}
 800e574:	4601      	mov	r1, r0
 800e576:	ab03      	add	r3, sp, #12
 800e578:	4805      	ldr	r0, [pc, #20]	; (800e590 <fiprintf+0x20>)
 800e57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e57e:	6800      	ldr	r0, [r0, #0]
 800e580:	9301      	str	r3, [sp, #4]
 800e582:	f000 f837 	bl	800e5f4 <_vfiprintf_r>
 800e586:	b002      	add	sp, #8
 800e588:	f85d eb04 	ldr.w	lr, [sp], #4
 800e58c:	b003      	add	sp, #12
 800e58e:	4770      	bx	lr
 800e590:	2000006c 	.word	0x2000006c

0800e594 <abort>:
 800e594:	b508      	push	{r3, lr}
 800e596:	2006      	movs	r0, #6
 800e598:	f000 fa04 	bl	800e9a4 <raise>
 800e59c:	2001      	movs	r0, #1
 800e59e:	f7f5 f95b 	bl	8003858 <_exit>

0800e5a2 <__sfputc_r>:
 800e5a2:	6893      	ldr	r3, [r2, #8]
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	b410      	push	{r4}
 800e5aa:	6093      	str	r3, [r2, #8]
 800e5ac:	da08      	bge.n	800e5c0 <__sfputc_r+0x1e>
 800e5ae:	6994      	ldr	r4, [r2, #24]
 800e5b0:	42a3      	cmp	r3, r4
 800e5b2:	db01      	blt.n	800e5b8 <__sfputc_r+0x16>
 800e5b4:	290a      	cmp	r1, #10
 800e5b6:	d103      	bne.n	800e5c0 <__sfputc_r+0x1e>
 800e5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5bc:	f000 b934 	b.w	800e828 <__swbuf_r>
 800e5c0:	6813      	ldr	r3, [r2, #0]
 800e5c2:	1c58      	adds	r0, r3, #1
 800e5c4:	6010      	str	r0, [r2, #0]
 800e5c6:	7019      	strb	r1, [r3, #0]
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <__sfputs_r>:
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	460f      	mov	r7, r1
 800e5d6:	4614      	mov	r4, r2
 800e5d8:	18d5      	adds	r5, r2, r3
 800e5da:	42ac      	cmp	r4, r5
 800e5dc:	d101      	bne.n	800e5e2 <__sfputs_r+0x12>
 800e5de:	2000      	movs	r0, #0
 800e5e0:	e007      	b.n	800e5f2 <__sfputs_r+0x22>
 800e5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e6:	463a      	mov	r2, r7
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f7ff ffda 	bl	800e5a2 <__sfputc_r>
 800e5ee:	1c43      	adds	r3, r0, #1
 800e5f0:	d1f3      	bne.n	800e5da <__sfputs_r+0xa>
 800e5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e5f4 <_vfiprintf_r>:
 800e5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f8:	460d      	mov	r5, r1
 800e5fa:	b09d      	sub	sp, #116	; 0x74
 800e5fc:	4614      	mov	r4, r2
 800e5fe:	4698      	mov	r8, r3
 800e600:	4606      	mov	r6, r0
 800e602:	b118      	cbz	r0, 800e60c <_vfiprintf_r+0x18>
 800e604:	6a03      	ldr	r3, [r0, #32]
 800e606:	b90b      	cbnz	r3, 800e60c <_vfiprintf_r+0x18>
 800e608:	f7fe faa2 	bl	800cb50 <__sinit>
 800e60c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e60e:	07d9      	lsls	r1, r3, #31
 800e610:	d405      	bmi.n	800e61e <_vfiprintf_r+0x2a>
 800e612:	89ab      	ldrh	r3, [r5, #12]
 800e614:	059a      	lsls	r2, r3, #22
 800e616:	d402      	bmi.n	800e61e <_vfiprintf_r+0x2a>
 800e618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e61a:	f7fe fb90 	bl	800cd3e <__retarget_lock_acquire_recursive>
 800e61e:	89ab      	ldrh	r3, [r5, #12]
 800e620:	071b      	lsls	r3, r3, #28
 800e622:	d501      	bpl.n	800e628 <_vfiprintf_r+0x34>
 800e624:	692b      	ldr	r3, [r5, #16]
 800e626:	b99b      	cbnz	r3, 800e650 <_vfiprintf_r+0x5c>
 800e628:	4629      	mov	r1, r5
 800e62a:	4630      	mov	r0, r6
 800e62c:	f000 f93a 	bl	800e8a4 <__swsetup_r>
 800e630:	b170      	cbz	r0, 800e650 <_vfiprintf_r+0x5c>
 800e632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e634:	07dc      	lsls	r4, r3, #31
 800e636:	d504      	bpl.n	800e642 <_vfiprintf_r+0x4e>
 800e638:	f04f 30ff 	mov.w	r0, #4294967295
 800e63c:	b01d      	add	sp, #116	; 0x74
 800e63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e642:	89ab      	ldrh	r3, [r5, #12]
 800e644:	0598      	lsls	r0, r3, #22
 800e646:	d4f7      	bmi.n	800e638 <_vfiprintf_r+0x44>
 800e648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e64a:	f7fe fb79 	bl	800cd40 <__retarget_lock_release_recursive>
 800e64e:	e7f3      	b.n	800e638 <_vfiprintf_r+0x44>
 800e650:	2300      	movs	r3, #0
 800e652:	9309      	str	r3, [sp, #36]	; 0x24
 800e654:	2320      	movs	r3, #32
 800e656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e65e:	2330      	movs	r3, #48	; 0x30
 800e660:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e814 <_vfiprintf_r+0x220>
 800e664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e668:	f04f 0901 	mov.w	r9, #1
 800e66c:	4623      	mov	r3, r4
 800e66e:	469a      	mov	sl, r3
 800e670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e674:	b10a      	cbz	r2, 800e67a <_vfiprintf_r+0x86>
 800e676:	2a25      	cmp	r2, #37	; 0x25
 800e678:	d1f9      	bne.n	800e66e <_vfiprintf_r+0x7a>
 800e67a:	ebba 0b04 	subs.w	fp, sl, r4
 800e67e:	d00b      	beq.n	800e698 <_vfiprintf_r+0xa4>
 800e680:	465b      	mov	r3, fp
 800e682:	4622      	mov	r2, r4
 800e684:	4629      	mov	r1, r5
 800e686:	4630      	mov	r0, r6
 800e688:	f7ff ffa2 	bl	800e5d0 <__sfputs_r>
 800e68c:	3001      	adds	r0, #1
 800e68e:	f000 80a9 	beq.w	800e7e4 <_vfiprintf_r+0x1f0>
 800e692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e694:	445a      	add	r2, fp
 800e696:	9209      	str	r2, [sp, #36]	; 0x24
 800e698:	f89a 3000 	ldrb.w	r3, [sl]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f000 80a1 	beq.w	800e7e4 <_vfiprintf_r+0x1f0>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6ac:	f10a 0a01 	add.w	sl, sl, #1
 800e6b0:	9304      	str	r3, [sp, #16]
 800e6b2:	9307      	str	r3, [sp, #28]
 800e6b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6b8:	931a      	str	r3, [sp, #104]	; 0x68
 800e6ba:	4654      	mov	r4, sl
 800e6bc:	2205      	movs	r2, #5
 800e6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c2:	4854      	ldr	r0, [pc, #336]	; (800e814 <_vfiprintf_r+0x220>)
 800e6c4:	f7f1 fd84 	bl	80001d0 <memchr>
 800e6c8:	9a04      	ldr	r2, [sp, #16]
 800e6ca:	b9d8      	cbnz	r0, 800e704 <_vfiprintf_r+0x110>
 800e6cc:	06d1      	lsls	r1, r2, #27
 800e6ce:	bf44      	itt	mi
 800e6d0:	2320      	movmi	r3, #32
 800e6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6d6:	0713      	lsls	r3, r2, #28
 800e6d8:	bf44      	itt	mi
 800e6da:	232b      	movmi	r3, #43	; 0x2b
 800e6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e6e6:	d015      	beq.n	800e714 <_vfiprintf_r+0x120>
 800e6e8:	9a07      	ldr	r2, [sp, #28]
 800e6ea:	4654      	mov	r4, sl
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	f04f 0c0a 	mov.w	ip, #10
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6f8:	3b30      	subs	r3, #48	; 0x30
 800e6fa:	2b09      	cmp	r3, #9
 800e6fc:	d94d      	bls.n	800e79a <_vfiprintf_r+0x1a6>
 800e6fe:	b1b0      	cbz	r0, 800e72e <_vfiprintf_r+0x13a>
 800e700:	9207      	str	r2, [sp, #28]
 800e702:	e014      	b.n	800e72e <_vfiprintf_r+0x13a>
 800e704:	eba0 0308 	sub.w	r3, r0, r8
 800e708:	fa09 f303 	lsl.w	r3, r9, r3
 800e70c:	4313      	orrs	r3, r2
 800e70e:	9304      	str	r3, [sp, #16]
 800e710:	46a2      	mov	sl, r4
 800e712:	e7d2      	b.n	800e6ba <_vfiprintf_r+0xc6>
 800e714:	9b03      	ldr	r3, [sp, #12]
 800e716:	1d19      	adds	r1, r3, #4
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	9103      	str	r1, [sp, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	bfbb      	ittet	lt
 800e720:	425b      	neglt	r3, r3
 800e722:	f042 0202 	orrlt.w	r2, r2, #2
 800e726:	9307      	strge	r3, [sp, #28]
 800e728:	9307      	strlt	r3, [sp, #28]
 800e72a:	bfb8      	it	lt
 800e72c:	9204      	strlt	r2, [sp, #16]
 800e72e:	7823      	ldrb	r3, [r4, #0]
 800e730:	2b2e      	cmp	r3, #46	; 0x2e
 800e732:	d10c      	bne.n	800e74e <_vfiprintf_r+0x15a>
 800e734:	7863      	ldrb	r3, [r4, #1]
 800e736:	2b2a      	cmp	r3, #42	; 0x2a
 800e738:	d134      	bne.n	800e7a4 <_vfiprintf_r+0x1b0>
 800e73a:	9b03      	ldr	r3, [sp, #12]
 800e73c:	1d1a      	adds	r2, r3, #4
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	9203      	str	r2, [sp, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	bfb8      	it	lt
 800e746:	f04f 33ff 	movlt.w	r3, #4294967295
 800e74a:	3402      	adds	r4, #2
 800e74c:	9305      	str	r3, [sp, #20]
 800e74e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e824 <_vfiprintf_r+0x230>
 800e752:	7821      	ldrb	r1, [r4, #0]
 800e754:	2203      	movs	r2, #3
 800e756:	4650      	mov	r0, sl
 800e758:	f7f1 fd3a 	bl	80001d0 <memchr>
 800e75c:	b138      	cbz	r0, 800e76e <_vfiprintf_r+0x17a>
 800e75e:	9b04      	ldr	r3, [sp, #16]
 800e760:	eba0 000a 	sub.w	r0, r0, sl
 800e764:	2240      	movs	r2, #64	; 0x40
 800e766:	4082      	lsls	r2, r0
 800e768:	4313      	orrs	r3, r2
 800e76a:	3401      	adds	r4, #1
 800e76c:	9304      	str	r3, [sp, #16]
 800e76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e772:	4829      	ldr	r0, [pc, #164]	; (800e818 <_vfiprintf_r+0x224>)
 800e774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e778:	2206      	movs	r2, #6
 800e77a:	f7f1 fd29 	bl	80001d0 <memchr>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d03f      	beq.n	800e802 <_vfiprintf_r+0x20e>
 800e782:	4b26      	ldr	r3, [pc, #152]	; (800e81c <_vfiprintf_r+0x228>)
 800e784:	bb1b      	cbnz	r3, 800e7ce <_vfiprintf_r+0x1da>
 800e786:	9b03      	ldr	r3, [sp, #12]
 800e788:	3307      	adds	r3, #7
 800e78a:	f023 0307 	bic.w	r3, r3, #7
 800e78e:	3308      	adds	r3, #8
 800e790:	9303      	str	r3, [sp, #12]
 800e792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e794:	443b      	add	r3, r7
 800e796:	9309      	str	r3, [sp, #36]	; 0x24
 800e798:	e768      	b.n	800e66c <_vfiprintf_r+0x78>
 800e79a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e79e:	460c      	mov	r4, r1
 800e7a0:	2001      	movs	r0, #1
 800e7a2:	e7a6      	b.n	800e6f2 <_vfiprintf_r+0xfe>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	3401      	adds	r4, #1
 800e7a8:	9305      	str	r3, [sp, #20]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	f04f 0c0a 	mov.w	ip, #10
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7b6:	3a30      	subs	r2, #48	; 0x30
 800e7b8:	2a09      	cmp	r2, #9
 800e7ba:	d903      	bls.n	800e7c4 <_vfiprintf_r+0x1d0>
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d0c6      	beq.n	800e74e <_vfiprintf_r+0x15a>
 800e7c0:	9105      	str	r1, [sp, #20]
 800e7c2:	e7c4      	b.n	800e74e <_vfiprintf_r+0x15a>
 800e7c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e7f0      	b.n	800e7b0 <_vfiprintf_r+0x1bc>
 800e7ce:	ab03      	add	r3, sp, #12
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	462a      	mov	r2, r5
 800e7d4:	4b12      	ldr	r3, [pc, #72]	; (800e820 <_vfiprintf_r+0x22c>)
 800e7d6:	a904      	add	r1, sp, #16
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7fd fd67 	bl	800c2ac <_printf_float>
 800e7de:	4607      	mov	r7, r0
 800e7e0:	1c78      	adds	r0, r7, #1
 800e7e2:	d1d6      	bne.n	800e792 <_vfiprintf_r+0x19e>
 800e7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7e6:	07d9      	lsls	r1, r3, #31
 800e7e8:	d405      	bmi.n	800e7f6 <_vfiprintf_r+0x202>
 800e7ea:	89ab      	ldrh	r3, [r5, #12]
 800e7ec:	059a      	lsls	r2, r3, #22
 800e7ee:	d402      	bmi.n	800e7f6 <_vfiprintf_r+0x202>
 800e7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7f2:	f7fe faa5 	bl	800cd40 <__retarget_lock_release_recursive>
 800e7f6:	89ab      	ldrh	r3, [r5, #12]
 800e7f8:	065b      	lsls	r3, r3, #25
 800e7fa:	f53f af1d 	bmi.w	800e638 <_vfiprintf_r+0x44>
 800e7fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e800:	e71c      	b.n	800e63c <_vfiprintf_r+0x48>
 800e802:	ab03      	add	r3, sp, #12
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	462a      	mov	r2, r5
 800e808:	4b05      	ldr	r3, [pc, #20]	; (800e820 <_vfiprintf_r+0x22c>)
 800e80a:	a904      	add	r1, sp, #16
 800e80c:	4630      	mov	r0, r6
 800e80e:	f7fd fff1 	bl	800c7f4 <_printf_i>
 800e812:	e7e4      	b.n	800e7de <_vfiprintf_r+0x1ea>
 800e814:	0800efe3 	.word	0x0800efe3
 800e818:	0800efed 	.word	0x0800efed
 800e81c:	0800c2ad 	.word	0x0800c2ad
 800e820:	0800e5d1 	.word	0x0800e5d1
 800e824:	0800efe9 	.word	0x0800efe9

0800e828 <__swbuf_r>:
 800e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82a:	460e      	mov	r6, r1
 800e82c:	4614      	mov	r4, r2
 800e82e:	4605      	mov	r5, r0
 800e830:	b118      	cbz	r0, 800e83a <__swbuf_r+0x12>
 800e832:	6a03      	ldr	r3, [r0, #32]
 800e834:	b90b      	cbnz	r3, 800e83a <__swbuf_r+0x12>
 800e836:	f7fe f98b 	bl	800cb50 <__sinit>
 800e83a:	69a3      	ldr	r3, [r4, #24]
 800e83c:	60a3      	str	r3, [r4, #8]
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	071a      	lsls	r2, r3, #28
 800e842:	d525      	bpl.n	800e890 <__swbuf_r+0x68>
 800e844:	6923      	ldr	r3, [r4, #16]
 800e846:	b31b      	cbz	r3, 800e890 <__swbuf_r+0x68>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	6922      	ldr	r2, [r4, #16]
 800e84c:	1a98      	subs	r0, r3, r2
 800e84e:	6963      	ldr	r3, [r4, #20]
 800e850:	b2f6      	uxtb	r6, r6
 800e852:	4283      	cmp	r3, r0
 800e854:	4637      	mov	r7, r6
 800e856:	dc04      	bgt.n	800e862 <__swbuf_r+0x3a>
 800e858:	4621      	mov	r1, r4
 800e85a:	4628      	mov	r0, r5
 800e85c:	f7ff fdfc 	bl	800e458 <_fflush_r>
 800e860:	b9e0      	cbnz	r0, 800e89c <__swbuf_r+0x74>
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	3b01      	subs	r3, #1
 800e866:	60a3      	str	r3, [r4, #8]
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	1c5a      	adds	r2, r3, #1
 800e86c:	6022      	str	r2, [r4, #0]
 800e86e:	701e      	strb	r6, [r3, #0]
 800e870:	6962      	ldr	r2, [r4, #20]
 800e872:	1c43      	adds	r3, r0, #1
 800e874:	429a      	cmp	r2, r3
 800e876:	d004      	beq.n	800e882 <__swbuf_r+0x5a>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	07db      	lsls	r3, r3, #31
 800e87c:	d506      	bpl.n	800e88c <__swbuf_r+0x64>
 800e87e:	2e0a      	cmp	r6, #10
 800e880:	d104      	bne.n	800e88c <__swbuf_r+0x64>
 800e882:	4621      	mov	r1, r4
 800e884:	4628      	mov	r0, r5
 800e886:	f7ff fde7 	bl	800e458 <_fflush_r>
 800e88a:	b938      	cbnz	r0, 800e89c <__swbuf_r+0x74>
 800e88c:	4638      	mov	r0, r7
 800e88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e890:	4621      	mov	r1, r4
 800e892:	4628      	mov	r0, r5
 800e894:	f000 f806 	bl	800e8a4 <__swsetup_r>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d0d5      	beq.n	800e848 <__swbuf_r+0x20>
 800e89c:	f04f 37ff 	mov.w	r7, #4294967295
 800e8a0:	e7f4      	b.n	800e88c <__swbuf_r+0x64>
	...

0800e8a4 <__swsetup_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4b2a      	ldr	r3, [pc, #168]	; (800e950 <__swsetup_r+0xac>)
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	6818      	ldr	r0, [r3, #0]
 800e8ac:	460c      	mov	r4, r1
 800e8ae:	b118      	cbz	r0, 800e8b8 <__swsetup_r+0x14>
 800e8b0:	6a03      	ldr	r3, [r0, #32]
 800e8b2:	b90b      	cbnz	r3, 800e8b8 <__swsetup_r+0x14>
 800e8b4:	f7fe f94c 	bl	800cb50 <__sinit>
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8be:	0718      	lsls	r0, r3, #28
 800e8c0:	d422      	bmi.n	800e908 <__swsetup_r+0x64>
 800e8c2:	06d9      	lsls	r1, r3, #27
 800e8c4:	d407      	bmi.n	800e8d6 <__swsetup_r+0x32>
 800e8c6:	2309      	movs	r3, #9
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8ce:	81a3      	strh	r3, [r4, #12]
 800e8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d4:	e034      	b.n	800e940 <__swsetup_r+0x9c>
 800e8d6:	0758      	lsls	r0, r3, #29
 800e8d8:	d512      	bpl.n	800e900 <__swsetup_r+0x5c>
 800e8da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8dc:	b141      	cbz	r1, 800e8f0 <__swsetup_r+0x4c>
 800e8de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8e2:	4299      	cmp	r1, r3
 800e8e4:	d002      	beq.n	800e8ec <__swsetup_r+0x48>
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	f7ff f8b4 	bl	800da54 <_free_r>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	6363      	str	r3, [r4, #52]	; 0x34
 800e8f0:	89a3      	ldrh	r3, [r4, #12]
 800e8f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8f6:	81a3      	strh	r3, [r4, #12]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	6063      	str	r3, [r4, #4]
 800e8fc:	6923      	ldr	r3, [r4, #16]
 800e8fe:	6023      	str	r3, [r4, #0]
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	f043 0308 	orr.w	r3, r3, #8
 800e906:	81a3      	strh	r3, [r4, #12]
 800e908:	6923      	ldr	r3, [r4, #16]
 800e90a:	b94b      	cbnz	r3, 800e920 <__swsetup_r+0x7c>
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e916:	d003      	beq.n	800e920 <__swsetup_r+0x7c>
 800e918:	4621      	mov	r1, r4
 800e91a:	4628      	mov	r0, r5
 800e91c:	f000 f884 	bl	800ea28 <__smakebuf_r>
 800e920:	89a0      	ldrh	r0, [r4, #12]
 800e922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e926:	f010 0301 	ands.w	r3, r0, #1
 800e92a:	d00a      	beq.n	800e942 <__swsetup_r+0x9e>
 800e92c:	2300      	movs	r3, #0
 800e92e:	60a3      	str	r3, [r4, #8]
 800e930:	6963      	ldr	r3, [r4, #20]
 800e932:	425b      	negs	r3, r3
 800e934:	61a3      	str	r3, [r4, #24]
 800e936:	6923      	ldr	r3, [r4, #16]
 800e938:	b943      	cbnz	r3, 800e94c <__swsetup_r+0xa8>
 800e93a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e93e:	d1c4      	bne.n	800e8ca <__swsetup_r+0x26>
 800e940:	bd38      	pop	{r3, r4, r5, pc}
 800e942:	0781      	lsls	r1, r0, #30
 800e944:	bf58      	it	pl
 800e946:	6963      	ldrpl	r3, [r4, #20]
 800e948:	60a3      	str	r3, [r4, #8]
 800e94a:	e7f4      	b.n	800e936 <__swsetup_r+0x92>
 800e94c:	2000      	movs	r0, #0
 800e94e:	e7f7      	b.n	800e940 <__swsetup_r+0x9c>
 800e950:	2000006c 	.word	0x2000006c

0800e954 <_raise_r>:
 800e954:	291f      	cmp	r1, #31
 800e956:	b538      	push	{r3, r4, r5, lr}
 800e958:	4604      	mov	r4, r0
 800e95a:	460d      	mov	r5, r1
 800e95c:	d904      	bls.n	800e968 <_raise_r+0x14>
 800e95e:	2316      	movs	r3, #22
 800e960:	6003      	str	r3, [r0, #0]
 800e962:	f04f 30ff 	mov.w	r0, #4294967295
 800e966:	bd38      	pop	{r3, r4, r5, pc}
 800e968:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e96a:	b112      	cbz	r2, 800e972 <_raise_r+0x1e>
 800e96c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e970:	b94b      	cbnz	r3, 800e986 <_raise_r+0x32>
 800e972:	4620      	mov	r0, r4
 800e974:	f000 f830 	bl	800e9d8 <_getpid_r>
 800e978:	462a      	mov	r2, r5
 800e97a:	4601      	mov	r1, r0
 800e97c:	4620      	mov	r0, r4
 800e97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e982:	f000 b817 	b.w	800e9b4 <_kill_r>
 800e986:	2b01      	cmp	r3, #1
 800e988:	d00a      	beq.n	800e9a0 <_raise_r+0x4c>
 800e98a:	1c59      	adds	r1, r3, #1
 800e98c:	d103      	bne.n	800e996 <_raise_r+0x42>
 800e98e:	2316      	movs	r3, #22
 800e990:	6003      	str	r3, [r0, #0]
 800e992:	2001      	movs	r0, #1
 800e994:	e7e7      	b.n	800e966 <_raise_r+0x12>
 800e996:	2400      	movs	r4, #0
 800e998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e99c:	4628      	mov	r0, r5
 800e99e:	4798      	blx	r3
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	e7e0      	b.n	800e966 <_raise_r+0x12>

0800e9a4 <raise>:
 800e9a4:	4b02      	ldr	r3, [pc, #8]	; (800e9b0 <raise+0xc>)
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	6818      	ldr	r0, [r3, #0]
 800e9aa:	f7ff bfd3 	b.w	800e954 <_raise_r>
 800e9ae:	bf00      	nop
 800e9b0:	2000006c 	.word	0x2000006c

0800e9b4 <_kill_r>:
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	4d07      	ldr	r5, [pc, #28]	; (800e9d4 <_kill_r+0x20>)
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	f7f4 ff39 	bl	8003838 <_kill>
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d102      	bne.n	800e9d0 <_kill_r+0x1c>
 800e9ca:	682b      	ldr	r3, [r5, #0]
 800e9cc:	b103      	cbz	r3, 800e9d0 <_kill_r+0x1c>
 800e9ce:	6023      	str	r3, [r4, #0]
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
 800e9d2:	bf00      	nop
 800e9d4:	200054a0 	.word	0x200054a0

0800e9d8 <_getpid_r>:
 800e9d8:	f7f4 bf26 	b.w	8003828 <_getpid>

0800e9dc <__swhatbuf_r>:
 800e9dc:	b570      	push	{r4, r5, r6, lr}
 800e9de:	460c      	mov	r4, r1
 800e9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9e4:	2900      	cmp	r1, #0
 800e9e6:	b096      	sub	sp, #88	; 0x58
 800e9e8:	4615      	mov	r5, r2
 800e9ea:	461e      	mov	r6, r3
 800e9ec:	da0d      	bge.n	800ea0a <__swhatbuf_r+0x2e>
 800e9ee:	89a3      	ldrh	r3, [r4, #12]
 800e9f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e9f4:	f04f 0100 	mov.w	r1, #0
 800e9f8:	bf0c      	ite	eq
 800e9fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e9fe:	2340      	movne	r3, #64	; 0x40
 800ea00:	2000      	movs	r0, #0
 800ea02:	6031      	str	r1, [r6, #0]
 800ea04:	602b      	str	r3, [r5, #0]
 800ea06:	b016      	add	sp, #88	; 0x58
 800ea08:	bd70      	pop	{r4, r5, r6, pc}
 800ea0a:	466a      	mov	r2, sp
 800ea0c:	f000 f848 	bl	800eaa0 <_fstat_r>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	dbec      	blt.n	800e9ee <__swhatbuf_r+0x12>
 800ea14:	9901      	ldr	r1, [sp, #4]
 800ea16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ea1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ea1e:	4259      	negs	r1, r3
 800ea20:	4159      	adcs	r1, r3
 800ea22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea26:	e7eb      	b.n	800ea00 <__swhatbuf_r+0x24>

0800ea28 <__smakebuf_r>:
 800ea28:	898b      	ldrh	r3, [r1, #12]
 800ea2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea2c:	079d      	lsls	r5, r3, #30
 800ea2e:	4606      	mov	r6, r0
 800ea30:	460c      	mov	r4, r1
 800ea32:	d507      	bpl.n	800ea44 <__smakebuf_r+0x1c>
 800ea34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	6123      	str	r3, [r4, #16]
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	6163      	str	r3, [r4, #20]
 800ea40:	b002      	add	sp, #8
 800ea42:	bd70      	pop	{r4, r5, r6, pc}
 800ea44:	ab01      	add	r3, sp, #4
 800ea46:	466a      	mov	r2, sp
 800ea48:	f7ff ffc8 	bl	800e9dc <__swhatbuf_r>
 800ea4c:	9900      	ldr	r1, [sp, #0]
 800ea4e:	4605      	mov	r5, r0
 800ea50:	4630      	mov	r0, r6
 800ea52:	f7ff f873 	bl	800db3c <_malloc_r>
 800ea56:	b948      	cbnz	r0, 800ea6c <__smakebuf_r+0x44>
 800ea58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea5c:	059a      	lsls	r2, r3, #22
 800ea5e:	d4ef      	bmi.n	800ea40 <__smakebuf_r+0x18>
 800ea60:	f023 0303 	bic.w	r3, r3, #3
 800ea64:	f043 0302 	orr.w	r3, r3, #2
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	e7e3      	b.n	800ea34 <__smakebuf_r+0xc>
 800ea6c:	89a3      	ldrh	r3, [r4, #12]
 800ea6e:	6020      	str	r0, [r4, #0]
 800ea70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	9b00      	ldr	r3, [sp, #0]
 800ea78:	6163      	str	r3, [r4, #20]
 800ea7a:	9b01      	ldr	r3, [sp, #4]
 800ea7c:	6120      	str	r0, [r4, #16]
 800ea7e:	b15b      	cbz	r3, 800ea98 <__smakebuf_r+0x70>
 800ea80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea84:	4630      	mov	r0, r6
 800ea86:	f000 f81d 	bl	800eac4 <_isatty_r>
 800ea8a:	b128      	cbz	r0, 800ea98 <__smakebuf_r+0x70>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	f023 0303 	bic.w	r3, r3, #3
 800ea92:	f043 0301 	orr.w	r3, r3, #1
 800ea96:	81a3      	strh	r3, [r4, #12]
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	431d      	orrs	r5, r3
 800ea9c:	81a5      	strh	r5, [r4, #12]
 800ea9e:	e7cf      	b.n	800ea40 <__smakebuf_r+0x18>

0800eaa0 <_fstat_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d07      	ldr	r5, [pc, #28]	; (800eac0 <_fstat_r+0x20>)
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	4611      	mov	r1, r2
 800eaac:	602b      	str	r3, [r5, #0]
 800eaae:	f7f4 ff22 	bl	80038f6 <_fstat>
 800eab2:	1c43      	adds	r3, r0, #1
 800eab4:	d102      	bne.n	800eabc <_fstat_r+0x1c>
 800eab6:	682b      	ldr	r3, [r5, #0]
 800eab8:	b103      	cbz	r3, 800eabc <_fstat_r+0x1c>
 800eaba:	6023      	str	r3, [r4, #0]
 800eabc:	bd38      	pop	{r3, r4, r5, pc}
 800eabe:	bf00      	nop
 800eac0:	200054a0 	.word	0x200054a0

0800eac4 <_isatty_r>:
 800eac4:	b538      	push	{r3, r4, r5, lr}
 800eac6:	4d06      	ldr	r5, [pc, #24]	; (800eae0 <_isatty_r+0x1c>)
 800eac8:	2300      	movs	r3, #0
 800eaca:	4604      	mov	r4, r0
 800eacc:	4608      	mov	r0, r1
 800eace:	602b      	str	r3, [r5, #0]
 800ead0:	f7f4 ff21 	bl	8003916 <_isatty>
 800ead4:	1c43      	adds	r3, r0, #1
 800ead6:	d102      	bne.n	800eade <_isatty_r+0x1a>
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	b103      	cbz	r3, 800eade <_isatty_r+0x1a>
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	bd38      	pop	{r3, r4, r5, pc}
 800eae0:	200054a0 	.word	0x200054a0

0800eae4 <_init>:
 800eae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae6:	bf00      	nop
 800eae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaea:	bc08      	pop	{r3}
 800eaec:	469e      	mov	lr, r3
 800eaee:	4770      	bx	lr

0800eaf0 <_fini>:
 800eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf2:	bf00      	nop
 800eaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaf6:	bc08      	pop	{r3}
 800eaf8:	469e      	mov	lr, r3
 800eafa:	4770      	bx	lr
